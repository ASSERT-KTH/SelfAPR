[P8_Replace_Mix]^private final Multimap<String, Pair<Name, Reference>> unknownNameUse ;^58^59^^^^58^59^private final Multimap<String, Pair<Name, Reference>> unknownNameUse = HashMultimap.create (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal   [VARIABLES] 
[P3_Replace_Literal]^private static final boolean CONSERVATIVE = true;^62^^^^^57^67^private static final boolean CONSERVATIVE = false;^[CLASS] NameReferenceGraphConstruction Traversal   [VARIABLES] 
[P8_Replace_Mix]^private static final boolean CONSERVATIVE ;^62^^^^^57^67^private static final boolean CONSERVATIVE = false;^[CLASS] NameReferenceGraphConstruction Traversal   [VARIABLES] 
[P8_Replace_Mix]^private final ArrayList<Name> currentFunctionStack  = null ;^67^^^^^62^72^private final ArrayList<Name> currentFunctionStack = new ArrayList<Name> (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal   [VARIABLES] 
[P8_Replace_Mix]^boolean isExtern;^106^^^^^101^111^final boolean isExtern;^[CLASS] NameReferenceGraphConstruction Traversal   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^70^^^^^69^72^this.compiler = compiler;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[P8_Replace_Mix]^this.graph =  new NameReferenceGraph ( null ) ;^71^^^^^69^72^this.graph = new NameReferenceGraph ( compiler ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^scopeCreator = new TypedScopeCreator ( compiler ) ;this.graph = new NameReferenceGraph ( compiler ) ;^71^^^^^69^72^this.graph = new NameReferenceGraph ( compiler ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[P5_Replace_Variable]^this.isExtern = CONSERVATIVE;^109^^^^^108^111^this.isExtern = isExtern;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] <init> [RETURN_TYPE] NameReferenceGraphConstruction$Traversal(boolean)   boolean isExtern [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[P7_Replace_Invocation]^popContainingFunction ( graph.MAIN ) ;^110^^^^^108^111^pushContainingFunction ( graph.MAIN ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] <init> [RETURN_TYPE] NameReferenceGraphConstruction$Traversal(boolean)   boolean isExtern [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[P14_Delete_Statement]^^110^^^^^108^111^pushContainingFunction ( graph.MAIN ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] <init> [RETURN_TYPE] NameReferenceGraphConstruction$Traversal(boolean)   boolean isExtern [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[P12_Insert_Condition]^if  ( getNamedContainingFunction (  )  != graph.MAIN )  { pushContainingFunction ( graph.MAIN ) ; }^110^^^^^108^111^pushContainingFunction ( graph.MAIN ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] <init> [RETURN_TYPE] NameReferenceGraphConstruction$Traversal(boolean)   boolean isExtern [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[P5_Replace_Variable]^return graph;^75^^^^^74^76^return this.graph;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNameReferenceGraph [RETURN_TYPE] NameReferenceGraph   [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[P7_Replace_Invocation]^ScopeCreator scopeCreator = compiler.getTopScope (  ) ;^82^^^^^78^102^ScopeCreator scopeCreator = compiler.getScopeCreator (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Scope topScope = compiler.getTopScope (  ) ;ScopeCreator scopeCreator = compiler.getScopeCreator (  ) ;^82^^^^^78^102^ScopeCreator scopeCreator = compiler.getScopeCreator (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P14_Delete_Statement]^^82^^^^^78^102^ScopeCreator scopeCreator = compiler.getScopeCreator (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P2_Replace_Operator]^if  ( scopeCreator != null )  {^83^^^^^78^102^if  ( scopeCreator == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( scopeCreator == false )  {^83^^^^^78^102^if  ( scopeCreator == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( topScope != null )  {^83^^^^^78^102^if  ( scopeCreator == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( propQName == null )  {^83^^^^^78^102^if  ( scopeCreator == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( constructor != null )  {^83^^^^^78^102^if  ( scopeCreator == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( type == null )  {^83^^^^^78^102^if  ( scopeCreator == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( propName == null )  {^83^^^^^78^102^if  ( scopeCreator == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( assignedValue == null )  {^83^^^^^78^102^if  ( scopeCreator == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P15_Unwrap_Block]^scopeCreator = new com.google.javascript.jscomp.TypedScopeCreator(compiler);^83^84^^^87^78^102^if  ( scopeCreator == null )  {  scopeCreator = new TypedScopeCreator ( compiler ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P16_Remove_Block]^^83^84^^^87^78^102^if  ( scopeCreator == null )  {  scopeCreator = new TypedScopeCreator ( compiler ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P8_Replace_Mix]^scopeCreator  =  scopeCreator ;^87^^^^^78^102^scopeCreator = new TypedScopeCreator ( compiler ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^this.graph = new NameReferenceGraph ( compiler ) ;scopeCreator = new TypedScopeCreator ( compiler ) ;^87^^^^^78^102^scopeCreator = new TypedScopeCreator ( compiler ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P3_Replace_Literal]^NodeTraversal externsTraversal = new NodeTraversal ( compiler, new Traversal ( false ) , scopeCreator ) ;^89^90^^^^78^102^NodeTraversal externsTraversal = new NodeTraversal ( compiler, new Traversal ( true ) , scopeCreator ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P5_Replace_Variable]^NodeTraversal externsTraversal = new NodeTraversal ( compiler, new Traversal ( true )  ) ;^89^90^^^^78^102^NodeTraversal externsTraversal = new NodeTraversal ( compiler, new Traversal ( true ) , scopeCreator ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P5_Replace_Variable]^NodeTraversal externsTraversal = new NodeTraversal (  new Traversal ( true ) , scopeCreator ) ;^89^90^^^^78^102^NodeTraversal externsTraversal = new NodeTraversal ( compiler, new Traversal ( true ) , scopeCreator ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P5_Replace_Variable]^NodeTraversal externsTraversal = new NodeTraversal ( scopeCreator, new Traversal ( true ) , compiler ) ;^89^90^^^^78^102^NodeTraversal externsTraversal = new NodeTraversal ( compiler, new Traversal ( true ) , scopeCreator ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P3_Replace_Literal]^new Traversal ( false ) , scopeCreator ) ;^90^^^^^78^102^new Traversal ( true ) , scopeCreator ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^NodeTraversal codeTraversal = new NodeTraversal ( compiler, new Traversal ( false ) , scopeCreator ) ;NodeTraversal externsTraversal = new NodeTraversal ( compiler, new Traversal ( true ) , scopeCreator ) ;^89^90^^^^78^102^NodeTraversal externsTraversal = new NodeTraversal ( compiler, new Traversal ( true ) , scopeCreator ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P3_Replace_Literal]^NodeTraversal codeTraversal = new NodeTraversal ( compiler, new Traversal ( true ) , scopeCreator ) ;^91^92^^^^78^102^NodeTraversal codeTraversal = new NodeTraversal ( compiler, new Traversal ( false ) , scopeCreator ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P5_Replace_Variable]^NodeTraversal codeTraversal = new NodeTraversal ( compiler, new Traversal ( false )  ) ;^91^92^^^^78^102^NodeTraversal codeTraversal = new NodeTraversal ( compiler, new Traversal ( false ) , scopeCreator ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P5_Replace_Variable]^NodeTraversal codeTraversal = new NodeTraversal (  new Traversal ( false ) , scopeCreator ) ;^91^92^^^^78^102^NodeTraversal codeTraversal = new NodeTraversal ( compiler, new Traversal ( false ) , scopeCreator ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P5_Replace_Variable]^NodeTraversal codeTraversal = new NodeTraversal ( scopeCreator, new Traversal ( false ) , compiler ) ;^91^92^^^^78^102^NodeTraversal codeTraversal = new NodeTraversal ( compiler, new Traversal ( false ) , scopeCreator ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P3_Replace_Literal]^new Traversal ( true ) , scopeCreator ) ;^92^^^^^78^102^new Traversal ( false ) , scopeCreator ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^NodeTraversal externsTraversal = new NodeTraversal ( compiler, new Traversal ( true ) , scopeCreator ) ;NodeTraversal codeTraversal = new NodeTraversal ( compiler, new Traversal ( false ) , scopeCreator ) ;^91^92^^^^78^102^NodeTraversal codeTraversal = new NodeTraversal ( compiler, new Traversal ( false ) , scopeCreator ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Scope topScope = compiler.getScopeCreator (  ) ;^93^^^^^78^102^Scope topScope = compiler.getTopScope (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^ScopeCreator scopeCreator = compiler.getScopeCreator (  ) ;Scope topScope = compiler.getTopScope (  ) ;^93^^^^^78^102^Scope topScope = compiler.getTopScope (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType type = n.getJSType (  ) ;Scope topScope = compiler.getTopScope (  ) ;^93^^^^^78^102^Scope topScope = compiler.getTopScope (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P14_Delete_Statement]^^93^^^^^78^102^Scope topScope = compiler.getTopScope (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P2_Replace_Operator]^if  ( topScope == null )  {^94^^^^^78^102^if  ( topScope != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( topScope != true )  {^94^^^^^78^102^if  ( topScope != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( name == null )  {^94^^^^^78^102^if  ( topScope != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( propQName == null )  {^94^^^^^78^102^if  ( topScope != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( scopeCreator == null )  {^94^^^^^78^102^if  ( topScope != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( assign != null )  {^94^^^^^78^102^if  ( topScope != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( qName == null )  {^94^^^^^78^102^if  ( topScope != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( rhs != null )  {^94^^^^^78^102^if  ( topScope != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( constructor != null )  {^94^^^^^78^102^if  ( topScope != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( type == null )  {^94^^^^^78^102^if  ( topScope != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( propName == null )  {^94^^^^^78^102^if  ( topScope != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( name != null )  {^94^^^^^78^102^if  ( topScope != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( uses != null )  {^94^^^^^78^102^if  ( topScope != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P5_Replace_Variable]^externsTraversal.traverse ( root ) ;^98^^^^^78^102^externsTraversal.traverse ( externs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P7_Replace_Invocation]^externsTraversal.traverseWithScope ( externs ) ;^98^^^^^78^102^externsTraversal.traverse ( externs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P14_Delete_Statement]^^98^99^^^^78^102^externsTraversal.traverse ( externs ) ; codeTraversal.traverse ( root ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^codeTraversal.traverse ( root ) ;externsTraversal.traverse ( externs ) ;^98^^^^^78^102^externsTraversal.traverse ( externs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^externsTraversal.traverseWithScope ( externs, topScope ) ;externsTraversal.traverse ( externs ) ;^98^^^^^78^102^externsTraversal.traverse ( externs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P5_Replace_Variable]^codeTraversal.traverse ( externs ) ;^99^^^^^78^102^codeTraversal.traverse ( root ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P7_Replace_Invocation]^codeTraversal.traverseWithScope ( root ) ;^99^^^^^78^102^codeTraversal.traverse ( root ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P7_Replace_Invocation]^codeTraversal .traverseWithScope ( root , topScope )  ;^99^^^^^78^102^codeTraversal.traverse ( root ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P14_Delete_Statement]^^99^^^^^78^102^codeTraversal.traverse ( root ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^externsTraversal.traverse ( externs ) ;codeTraversal.traverse ( root ) ;^99^^^^^78^102^codeTraversal.traverse ( root ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^codeTraversal.traverseWithScope ( root, topScope ) ;codeTraversal.traverse ( root ) ;^99^^^^^78^102^codeTraversal.traverse ( root ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P5_Replace_Variable]^externsTraversal.traverseWithScope ( root, topScope ) ;^95^^^^^78^102^externsTraversal.traverseWithScope ( externs, topScope ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P5_Replace_Variable]^externsTraversal.traverseWithScope (  topScope ) ;^95^^^^^78^102^externsTraversal.traverseWithScope ( externs, topScope ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P5_Replace_Variable]^externsTraversal.traverseWithScope ( externs ) ;^95^^^^^78^102^externsTraversal.traverseWithScope ( externs, topScope ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P5_Replace_Variable]^externsTraversal.traverseWithScope ( topScope, externs ) ;^95^^^^^78^102^externsTraversal.traverseWithScope ( externs, topScope ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P14_Delete_Statement]^^95^^^^^78^102^externsTraversal.traverseWithScope ( externs, topScope ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^externsTraversal.traverse ( externs ) ;externsTraversal.traverseWithScope ( externs, topScope ) ;^95^^^^^78^102^externsTraversal.traverseWithScope ( externs, topScope ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^codeTraversal.traverseWithScope ( root, topScope ) ;externsTraversal.traverseWithScope ( externs, topScope ) ;^95^^^^^78^102^externsTraversal.traverseWithScope ( externs, topScope ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P5_Replace_Variable]^codeTraversal.traverseWithScope ( externs, topScope ) ;^96^^^^^78^102^codeTraversal.traverseWithScope ( root, topScope ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P5_Replace_Variable]^codeTraversal.traverseWithScope (  topScope ) ;^96^^^^^78^102^codeTraversal.traverseWithScope ( root, topScope ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P5_Replace_Variable]^codeTraversal.traverseWithScope ( root ) ;^96^^^^^78^102^codeTraversal.traverseWithScope ( root, topScope ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P5_Replace_Variable]^codeTraversal.traverseWithScope ( topScope, root ) ;^96^^^^^78^102^codeTraversal.traverseWithScope ( root, topScope ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P14_Delete_Statement]^^96^^^^^78^102^codeTraversal.traverseWithScope ( root, topScope ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^codeTraversal.traverse ( root ) ;codeTraversal.traverseWithScope ( root, topScope ) ;^96^^^^^78^102^codeTraversal.traverseWithScope ( root, topScope ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^externsTraversal.traverseWithScope ( externs, topScope ) ;codeTraversal.traverseWithScope ( root, topScope ) ;^96^^^^^78^102^codeTraversal.traverseWithScope ( root, topScope ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P14_Delete_Statement]^^95^96^^^^78^102^externsTraversal.traverseWithScope ( externs, topScope ) ; codeTraversal.traverseWithScope ( root, topScope ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P7_Replace_Invocation]^popContainingFunction (  ) ;^101^^^^^78^102^connectUnknowns (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P14_Delete_Statement]^^101^^^^^78^102^connectUnknowns (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^ref.setUnknown ( true ) ;connectUnknowns (  ) ;^101^^^^^78^102^connectUnknowns (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Node root = t.traverse (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node gParent = parent.getParent (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node ggParent = gParent.getParent (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node parent = root.getParent (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node symbol = getProp.getNext (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node obj = symbol.getNext (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^115^116^^^^100^130^Node root = t.getScopeRoot (  ) ; Node parent = root.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^Node parent = ggParent.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node parent = root.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node parent = root.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node gParent = parent.getParent (  ) ;Node parent = root.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node parent = root.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Name name = node.getValue (  ) ;Node parent = root.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node ggParent = gParent.getParent (  ) ;Node parent = root.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;Node parent = root.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node symbol = getProp.getNext (  ) ;Node parent = root.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node obj = symbol.getNext (  ) ;Node parent = root.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^Node parent = parent.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Node parent = root .getNext (  )  ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P6_Replace_Expression]^if  ( isAssign(parent) && getFirstChild()) )  {^120^^^^^105^135^if  ( !t.inGlobalScope (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( !t.traverse (  )  )  {^120^^^^^105^135^if  ( !t.inGlobalScope (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( !t .getScope (  )   )  {^120^^^^^105^135^if  ( !t.inGlobalScope (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P2_Replace_Operator]^if  ( name != null )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( name == false )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( topScope != null )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( propQName == null )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( assign != null )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( qName == null )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( rhs != null )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( type == null )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( propName == null )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( uses != null )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( assignedValue == null )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( name != null )  {     defineAndAlias ( name ) ;     return ; }^127^^^^^112^142^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^popContainingFunction ( graph.UNKNOWN ) ;^131^^^^^116^146^pushContainingFunction ( graph.UNKNOWN ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^131^132^^^^116^146^pushContainingFunction ( graph.UNKNOWN ) ; return;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P2_Replace_Operator]^if  ( NodeUtil.isAssign ( parent )  || NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( NodeUtil.isAssign ( root )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P6_Replace_Expression]^if  ( NodeUtil.isAssign ( parent )  ) {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P6_Replace_Expression]^if  (  NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( NodeUtil.isString ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent .getLastChild (  )   )  )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( NodeUtil.isAssign ( root )  ) {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, root, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, parent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition (  name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t,  type, root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name,  root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type,  parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root,  gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent,  root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( parent, name, type, root, t, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( name, t, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, parent, root, type, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, parent, root, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, gParent, parent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, ggParent, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root, parent, root, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition (  name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t,  type, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name,  root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type,  parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root,  gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root, parent,  root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( name, t, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, parent, root, type, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( root, name, type, t, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, parent, root, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root, gParent, parent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root .getFirstChild (  )   )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^recordStaticNameDefinition ( t, name, type, root, parent, parent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^150^^^^^142^151^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^t, name, type, parent, parent, gParent, root .getFirstChild (  )   )  ) ;^150^^^^^142^151^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^150^^^^^142^151^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^150^^^^^142^151^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, root, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition (  parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type,  gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) ,  parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent,  ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( ggParent, parent.getFirstChild (  ) , type, parent, gParent, t )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, gParent.getFirstChild (  ) , type, parent, parent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( type, parent.getFirstChild (  ) , t, parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, ggParent, gParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , ggParent, parent, gParent, type )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^pushContainingFunction ( recordClassConstructorOrInterface ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, root, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition (  parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type,  gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) ,  parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent,  ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( ggParent, parent.getFirstChild (  ) , type, parent, gParent, t )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, gParent.getFirstChild (  ) , type, parent, parent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, type.getFirstChild (  ) , parent, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, ggParent, gParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, ggParent.getFirstChild (  ) , type, parent, gParent, parent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^recordClassConstructorOrInterface ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^recordPrototypePropDefinition ( t, parent .getLastChild (  )  , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^recordClassConstructorOrInterface ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P1_Replace_Type]^char name = NodeUtil.getFunctionName ( root, parent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^String name = NodeUtil.getFunctionName ( parent, parent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^String name = NodeUtil.getFunctionName ( root, root ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^String name = NodeUtil.getFunctionName (  parent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^String name = NodeUtil.getFunctionName ( root ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^String name = NodeUtil.getFunctionName ( parent, root ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^String name = NodeUtil .isFunction ( gParent )  ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String name = n.getQualifiedName (  ) ;String name = NodeUtil.getFunctionName ( root, parent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String qName = n.getQualifiedName (  ) ;String name = NodeUtil.getFunctionName ( root, parent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String qName = obj.getQualifiedName (  ) ;String name = NodeUtil.getFunctionName ( root, parent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^JSType type = getType ( parent ) ;^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^JSType type = pushContainingFunction ( root ) ;^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType boxedType = instanceType.autoboxesTo (  ) ;JSType type = getType ( root ) ;^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType type = getType ( n.getFirstChild (  )  ) ;JSType type = getType ( root ) ;^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType type = n.getJSType (  ) ;JSType type = getType ( root ) ;^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType instanceType = getType ( instance ) ;JSType type = getType ( root ) ;^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^Node gParent = root.getParent (  ) ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node gParent = parent.getParent (  ) ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node gParent = parent.getParent (  ) ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Name name = node.getValue (  ) ;Node gParent = parent.getParent (  ) ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node ggParent = gParent.getParent (  ) ;Node gParent = parent.getParent (  ) ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node parent = root.getParent (  ) ;Node gParent = parent.getParent (  ) ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node symbol = getProp.getNext (  ) ;Node gParent = parent.getParent (  ) ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node obj = symbol.getNext (  ) ;Node gParent = parent.getParent (  ) ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^Node ggParent = root.getParent (  ) ;^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Node ggParent = gParent .getNext (  )  ;^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node ggParent = gParent.getParent (  ) ;^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node gParent = parent.getParent (  ) ;Node ggParent = gParent.getParent (  ) ;^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Name name = node.getValue (  ) ;Node ggParent = gParent.getParent (  ) ;^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node parent = root.getParent (  ) ;Node ggParent = gParent.getParent (  ) ;^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node symbol = getProp.getNext (  ) ;Node ggParent = gParent.getParent (  ) ;^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node obj = symbol.getNext (  ) ;Node ggParent = gParent.getParent (  ) ;^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^String name = NodeUtil.getFunctionName ( ggParent, parent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^String name = NodeUtil.getFunctionName ( root, ggParent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^String name = NodeUtil .isFunction ( parent )  ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^131^^^^^116^146^pushContainingFunction ( graph.UNKNOWN ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^name.setType ( getType ( n )  ) ;JSType type = getType ( root ) ;^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^symbol.setType ( getType ( rhs )  ) ;JSType type = getType ( root ) ;^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Node gParent = parent .getNext (  )  ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^140^141^^^^125^155^Node gParent = parent.getParent (  ) ; Node ggParent = gParent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^Node ggParent = root .getNext (  )  ;^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunction ( root )   && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^142^^^^^127^157^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^142^^^^^127^157^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^142^^^^^127^157^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^142^^^^^127^157^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^142^^^^^127^157^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^142^^^^^127^157^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^NodeUtil.isPrototypeProperty ( root.getFirstChild (  )  )  )  {^143^^^^^128^158^NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^143^^^^^128^158^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^143^^^^^128^158^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^143^^^^^128^158^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^143^^^^^128^158^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^143^^^^^128^158^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^NodeUtil.isPrototypeProperty ( parent .getLastChild (  )   )  )  {^143^^^^^128^158^NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, root, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition (  parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type,  gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) ,  parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent,  ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( gParent, parent.getFirstChild (  ) , type, parent, t, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, gParent.getFirstChild (  ) , type, parent, parent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , gParent, parent, type, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, ggParent, gParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , ggParent, parent, gParent, type )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^pushContainingFunction ( recordClassConstructorOrInterface ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent .getLastChild (  )  , type, parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^pushContainingFunction ( recordClassConstructorOrInterface ( t, parent.getFirstChild (  ) , type, parent, root, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, root, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition (  parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type,  gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) ,  parent, gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent,  ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( parent, t.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, gParent.getFirstChild (  ) , type, parent, parent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , gParent, parent, type, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, ggParent.getFirstChild (  ) , type, parent, gParent, parent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^recordClassConstructorOrInterface ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^recordPrototypePropDefinition ( t, parent .getLastChild (  )  , type, parent, gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, root, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, root, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition (  name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t,  type, root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name,  root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type,  parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root,  gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent,  root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( type, name, t, root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, gParent, type, root, parent, name, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, root, type, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, gParent, parent, root, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, gParent, parent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, root, gParent, root .getFirstChild (  )   )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root, root, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root, parent, root, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition (  name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t,  type, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name,  root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type,  parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root,  gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root, parent,  root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( root, name, type, t, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, type, name, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, parent, root, type, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, parent, root, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root, gParent, parent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^recordStaticNameDefinition ( t, name, type, root, parent, parent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^150^^^^^135^165^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^150^^^^^135^165^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^150^^^^^135^165^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, root, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, gParent, type, root, parent, name, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root .getFirstChild (  )   )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root, root, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, root, type, name, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, root, type, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, gParent, parent, root, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( parent, t.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, ggParent.getFirstChild (  ) , type, parent, gParent, parent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , gParent, parent, type, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^pushContainingFunction ( recordClassConstructorOrInterface ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( parent, t.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , ggParent, parent, gParent, type )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^Node gParent = root .getNext (  )  ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^String name = NodeUtil .isFunction ( ggParent )  ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^JSType type = pushContainingFunction ( parent ) ;^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^NodeUtil .getPrototypePropertyName ( ggParent )   )  {^143^^^^^128^158^NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( parent, t.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, ggParent.getFirstChild (  ) , type, parent, gParent, parent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , ggParent, parent, gParent, type )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^recordPrototypePropDefinition ( t, root .getLastChild (  )  , type, parent, gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, ggParent, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, parent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( gParent, name, type, root, parent, t, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, gParent, root, parent, type, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, parent, root, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root .getFirstChild (  )   )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( gParent, name, type, root, parent, t, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, parent, type, root, name, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, gParent, parent, root, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( !t.traverse (  )  )  {^157^^^^^156^160^if  ( !t.inGlobalScope (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  NameReferenceGraph  graph  
[P15_Unwrap_Block]^popContainingFunction();^157^158^159^^^156^160^if  ( !t.inGlobalScope (  )  )  { popContainingFunction (  ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  NameReferenceGraph  graph  
[P16_Remove_Block]^^157^158^159^^^156^160^if  ( !t.inGlobalScope (  )  )  { popContainingFunction (  ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  NameReferenceGraph  graph  
[P7_Replace_Invocation]^getNamedContainingFunction (  ) ;^158^^^^^156^160^popContainingFunction (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  NameReferenceGraph  graph  
[P14_Delete_Statement]^^158^^^^^156^160^popContainingFunction (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^pushContainingFunction ( graph.MAIN ) ;popContainingFunction (  ) ;^158^^^^^156^160^popContainingFunction (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^pushContainingFunction ( graph.UNKNOWN ) ;popContainingFunction (  ) ;^158^^^^^156^160^popContainingFunction (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( !t .getScope (  )   )  {^157^^^^^156^160^if  ( !t.inGlobalScope (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  NameReferenceGraph  graph  
[P3_Replace_Literal]^return false;^164^^^^^163^165^return true;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P2_Replace_Operator]^while  (  ( param = param.getNext (  )  )  == null )  {^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^while  (  ( varName = param.getNext (  )  )  != null )  {^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^while  (  ( parent = param .getParent (  )   )  != null )  {^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( param )  && NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parent )  || NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( param )  ) {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P6_Replace_Expression]^if  (  NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isNew ( param )  || NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( param )  || NodeUtil.isNew ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P15_Unwrap_Block]^safeAlias(param);^233^234^235^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  { safeAlias ( param ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P16_Remove_Block]^^233^234^235^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  { safeAlias ( param ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isFunction ( parent )  )  {     return ; }else     if  ( isAssign ( parent )  )  {         return ;     }^233^^^^^218^248^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;     return  ( v != null )  &&  ( v.isLocal (  )  ) ; }^233^^^^^218^248^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  (  ( isName ( n )  )  ||  ( isGetProp ( n )  )  )  {     String name = n.getQualifiedName (  ) ;     if  ( name != null )  {         defineAndAlias ( name ) ;         return ;     } }^233^^^^^218^248^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^safeAlias ( varName ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^containsName ( param ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^containsName ( varName ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^name.setAliased ( true ) ;safeAlias ( param ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^defineAndAlias ( name ) ;safeAlias ( param ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( lhs ) ;safeAlias ( param ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( cur ) ;safeAlias ( param ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( rhs ) ;safeAlias ( param ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( rhs )  || NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil .isNew ( rhs )   || NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^233^^^^^218^248^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^233^^^^^218^248^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^233^^^^^218^248^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^233^^^^^218^248^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^233^^^^^218^248^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^233^^^^^218^248^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^safeAlias ( parent ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P2_Replace_Operator]^if  ( NodeUtil.isGetProp ( parent )  && parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P2_Replace_Operator]^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  != Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isGetProp ( varName )  || parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P6_Replace_Expression]^if  ( NodeUtil.isGetProp ( parent )  ) {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P6_Replace_Expression]^if  (  parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isNew ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^if  ( NodeUtil.isGetProp ( rhs )  || parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  (  (  (  (  ( isName ( lhs )  )  ||  ( isGetProp ( lhs )  )  )  &&  ( containsName ( rhs )  )  )  &&  ( ! ( isFunction ( rhs )  )  )  )  &&  ( ! ( isNew ( rhs )  )  )  )  {     safeAlias ( lhs ) ;     safeAlias ( rhs ) ; }^173^^^^^158^188^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^} else if  ( NodeUtil.isFunction ( varName )  )  {^177^^^^^162^192^} else if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P6_Replace_Expression]^} else {^177^^^^^162^192^} else if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isAssign ( parent )  )  {^177^^^^^162^192^} else if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^} else if  ( NodeUtil.isFunction ( param )  )  {^177^^^^^162^192^} else if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  (  ( isName ( param )  )  ||  ( isGetProp ( param )  )  )  {     safeAlias ( param ) ; }^177^^^^^162^192^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^} else if  ( NodeUtil.isAssign ( varName )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P6_Replace_Expression]^} else {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isString ( parent )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^}  if  ( NodeUtil .isFunction ( param )   )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^} else if  ( NodeUtil.isFunction ( parent )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^} else if  ( NodeUtil.isAssign ( n )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P15_Unwrap_Block]^return ;^180^181^182^183^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {  return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P16_Remove_Block]^^180^181^182^183^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {  return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^180^^^^^165^195^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^180^^^^^165^195^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^180^^^^^165^195^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^180^^^^^165^195^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^180^^^^^165^195^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^} else if  ( NodeUtil.isAssign ( param )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^180^^^^^165^195^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^} else if  ( NodeUtil .getFunctionName ( param , rhs )   )  {^177^^^^^162^192^} else if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^177^^^^^162^192^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^177^^^^^162^192^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^177^^^^^162^192^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^177^^^^^162^192^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^177^^^^^162^192^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^177^^^^^162^192^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^} else if  ( NodeUtil.isAssign ( rhs )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^}  if  ( NodeUtil.isAssign ( param )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^if  ( isLocalNameReference ( t, varName )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^if  ( isLocalNameReference (  n )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^if  ( isLocalNameReference ( t )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^if  ( isLocalNameReference ( n, t )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( isStaticNameReference ( t, n )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^if  ( isLocalNameReference ( t, parent )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^if  ( isPrototypeNameReference ( n )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P15_Unwrap_Block]^return ;^185^186^187^188^^170^200^if  ( isLocalNameReference ( t, n )  )  {  return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P16_Remove_Block]^^185^186^187^188^^170^200^if  ( isLocalNameReference ( t, n )  )  {  return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( assignedValue == null )  {     return ; }^185^^^^^170^200^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( propQName == null )  {     return ; }^185^^^^^170^200^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^if  ( isPrototypeNameReference ( varName )  )  {^190^^^^^175^205^if  ( isPrototypeNameReference ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( containsName ( n )  )  {^190^^^^^175^205^if  ( isPrototypeNameReference ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^if  ( isLocalNameReference ( t, n )  )  {^190^^^^^175^205^if  ( isPrototypeNameReference ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {     recordStaticNameUse ( t, n, parent ) ; }else {     recordUnknownUse ( t, n, parent ) ; }^190^^^^^175^205^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^} else if  ( isStaticNameReference ( parent, t.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^} else if  ( isStaticNameReference (  t.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^} else if  ( isStaticNameReference ( n.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^} else if  ( isStaticNameReference ( t, n.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P6_Replace_Expression]^} else {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^} else if  ( maybeAliasNamesOnAssign ( n, t.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^} else if  ( isStaticNameReference ( n, t.traverse (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^}  if  ( isStaticNameReference ( rhs, t.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P15_Unwrap_Block]^recordStaticNameUse(t, n, parent);^192^193^194^195^196^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  { recordStaticNameUse ( t, n, parent ) ; } else { recordUnknownUse ( t, n, parent ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P16_Remove_Block]^^192^193^194^195^196^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  { recordStaticNameUse ( t, n, parent ) ; } else { recordUnknownUse ( t, n, parent ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isPrototypeNameReference ( n )  )  {     recordPrototypePropUse ( t, n, parent ) ; }else     if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {         recordStaticNameUse ( t, n, parent ) ;     }else {         recordUnknownUse ( t, n, parent ) ;     }^192^^^^^177^207^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t, varName, parent ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t, n, varName ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordUnknownUse (  n, parent ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t,  parent ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t, n ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( parent, n, t ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t, parent, n ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^recordStaticNameUse ( t, n, parent ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^recordUnknownUse ( t, rhs, parent ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^recordPrototypePropUse ( t, n, parent ) ;recordUnknownUse ( t, n, parent ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^recordStaticNameUse ( t, n, parent ) ;recordUnknownUse ( t, n, parent ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordStaticNameUse ( t, varName, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordStaticNameUse (  n, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordStaticNameUse ( t,  parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordStaticNameUse ( t, n ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordStaticNameUse ( parent, n, t ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordStaticNameUse ( n, t, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordStaticNameUse ( t, parent, n ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^recordUnknownUse ( t, n, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^recordUnknownUse ( t, varName, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^recordPrototypePropUse ( t, n, parent ) ;recordStaticNameUse ( t, n, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^recordUnknownUse ( t, n, parent ) ;recordStaticNameUse ( t, n, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^} else if  ( isStaticNameReference ( rhs, t.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordStaticNameUse ( t, rhs, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordStaticNameUse ( t, n, varName ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t, varName, parent ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t, n, varName ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordUnknownUse (  n, parent ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t,  parent ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t, n ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( n, t, parent ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t, parent, n ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^recordStaticNameUse ( t, n, parent ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^recordPrototypePropUse ( t, n, parent ) ;recordUnknownUse ( t, n, parent ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^recordStaticNameUse ( t, n, parent ) ;recordUnknownUse ( t, n, parent ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordPrototypePropUse ( t, n, rhs ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordPrototypePropUse (  n, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordPrototypePropUse ( t,  parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordPrototypePropUse ( t, n ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordPrototypePropUse ( n, t, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordPrototypePropUse ( t, parent, n ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^recordStaticNameUse ( t, n, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^recordStaticNameUse ( t, n, rhs ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;recordPrototypePropUse ( t, n, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;recordPrototypePropUse ( t, n, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^recordUnknownUse ( t, n, parent ) ;recordPrototypePropUse ( t, n, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;recordPrototypePropUse ( t, n, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^prototypeProp.setType ( type ) ;recordPrototypePropUse ( t, n, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^recordStaticNameUse ( t, n, parent ) ;recordPrototypePropUse ( t, n, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordStaticNameUse ( t, n, rhs ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^recordUnknownUse ( t, n, varName ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isFunction ( param )  )  {^202^^^^^187^217^if  ( NodeUtil.isFunction ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssign ( rhs )  )  {^202^^^^^187^217^if  ( NodeUtil.isFunction ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil .getFunctionName ( rhs , param )   )  {^202^^^^^187^217^if  ( NodeUtil.isFunction ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^if  ( NodeUtil.isFunction ( varName )  )  {^202^^^^^187^217^if  ( NodeUtil.isFunction ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^202^^^^^187^217^if  ( NodeUtil.isFunction ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^if  ( !NodeUtil.isString ( symbol )  )  {^202^^^^^187^217^if  ( NodeUtil.isFunction ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P15_Unwrap_Block]^return ;^202^203^204^205^^187^217^if  ( NodeUtil.isFunction ( rhs )  )  {  return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P16_Remove_Block]^^202^203^204^205^^187^217^if  ( NodeUtil.isFunction ( rhs )  )  {  return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^202^^^^^187^217^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^202^^^^^187^217^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^202^^^^^187^217^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^202^^^^^187^217^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^202^^^^^187^217^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( lhs )  && NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( varName )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( varName )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( lhs )  ) {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P6_Replace_Expression]^if  (  NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P6_Replace_Expression]^if  ( isName(lhs || isGetProp(lhs)) )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isNew ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil .isNew ( rhs )   || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isNew ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( lhs )  || NodeUtil .isPrototypeProperty (  )   || NodeUtil^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isPrototypeProperty ( parent )  )  {^209^^^^^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.getPrototypePropertyName ( lhs )  )  {^209^^^^^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( rhs )  )  {^209^^^^^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^if  ( !NodeUtil.isGetProp ( n )  )  {^209^^^^^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^if  ( NodeUtil.isGetProp ( n )  )  {^209^^^^^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P15_Unwrap_Block]^com.google.javascript.jscomp.NameReferenceGraph.Name name = recordPrototypePropDefinition(t, lhs, getType(rhs), n, parent, parent.getParent()); name.setAliased(true);^209^210^211^212^213^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  { Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ; name.setAliased ( true ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P16_Remove_Block]^^209^210^211^212^213^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  { Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ; name.setAliased ( true ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  (  (  ( isName ( lhs )  )  ||  ( isGetProp ( lhs )  )  )  ||  ( isGetProp ( rhs )  )  )  {     if  ( isPrototypeProperty ( lhs )  )  {         Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;         name.setAliased ( true ) ;     } }^209^^^^^206^214^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( param ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name rhsame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, varName, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition (  lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t,  getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) ,  parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n,  parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( lhs, t, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, parent, getType ( rhs ) , n, lhs, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name rhsame = recordPrototypePropDefinition ( t, lhs, getType ( n ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name tame = recordPrototypePropDefinition ( n, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^Name name = recordClassConstructorOrInterface ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^Name name = recordPrototypePropDefinition ( t, lhs, pushContainingFunction ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^Name name = recordPrototypePropDefinition ( t, varName, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isPrototypeProperty ( lhs )  )  {     Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;     name.setAliased ( true ) ; }^210^^^^^206^214^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, rhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( varName ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name varNameame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, rhs, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name lhsame = recordPrototypePropDefinition ( t, n, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( parent ) , n, rhs, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^Name name = recordClassConstructorOrInterface ( t, varName, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^t, lhs, getType ( parent ) , n, parent, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^t, lhs, pushContainingFunction ( rhs ) , n, parent, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^t, lhs, pushContainingFunction ( varName ) , n, parent, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^t, lhs, getType ( rhs ) , n, rhs, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^t, lhs, getType ( rhs ) , n, varName, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P3_Replace_Literal]^name.setAliased ( false ) ;^212^^^^^206^214^name.setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^212^^^^^206^214^name.setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^ref.setUnknown ( true ) ;name.setAliased ( true ) ;^212^^^^^206^214^name.setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( lhs ) ;name.setAliased ( true ) ;^212^^^^^206^214^name.setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( cur ) ;name.setAliased ( true ) ;^212^^^^^206^214^name.setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( param ) ;name.setAliased ( true ) ;^212^^^^^206^214^name.setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( rhs ) ;name.setAliased ( true ) ;^212^^^^^206^214^name.setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, parent, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, rhs, getType ( lhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name parentame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, n, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent .getNext (  )   ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^Name parentame = recordPrototypePropDefinition ( t, lhs, pushContainingFunction ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil .getPrototypePropertyName ( parent )   )  {^209^^^^^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^209^^^^^206^214^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^209^^^^^206^214^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^209^^^^^206^214^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^209^^^^^206^214^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^209^^^^^206^214^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^209^^^^^206^214^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^t, lhs, getType ( varName ) , n, parent, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^t, lhs, getType ( rhs ) , n, param, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^211^212^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ; name.setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isPrototypeProperty ( parent )  )  {^209^^^^^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.getPrototypePropertyName ( lhs )  )  {^209^^^^^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil .getPrototypePropertyName ( param )   )  {^209^^^^^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^if  ( NodeUtil.isPrototypeProperty ( varName )  )  {^209^^^^^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( rhs )  )  {^209^^^^^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^if  ( !NodeUtil.isGetProp ( n )  )  {^209^^^^^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^if  ( NodeUtil.isGetProp ( n )  )  {^209^^^^^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P15_Unwrap_Block]^com.google.javascript.jscomp.NameReferenceGraph.Name name = recordPrototypePropDefinition(t, lhs, getType(rhs), n, parent, parent.getParent()); name.setAliased(true);^209^210^211^212^213^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  { Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ; name.setAliased ( true ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P16_Remove_Block]^^209^210^211^212^213^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  { Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ; name.setAliased ( true ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  (  (  ( isName ( lhs )  )  ||  ( isGetProp ( lhs )  )  )  ||  ( isGetProp ( rhs )  )  )  {     if  ( isPrototypeProperty ( lhs )  )  {         Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;         name.setAliased ( true ) ;     } }^209^^^^^194^224^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, varName, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( varName ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name varNameame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, param, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition (  lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t,  getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) ,  parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n,  parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name tame = recordPrototypePropDefinition ( n, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, rhs, getType ( lhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name parentame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, n, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^Name name = recordClassConstructorOrInterface ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^Name name = recordPrototypePropDefinition ( t, lhs, pushContainingFunction ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent .getNext (  )   ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^Name name = recordPrototypePropDefinition ( t, lhs, pushContainingFunction ( rhs ) , n, varName, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isPrototypeProperty ( lhs )  )  {     Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;     name.setAliased ( true ) ; }^210^^^^^195^225^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( parent ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, varName, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( rhs, lhs, getType ( t ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name rhsame = recordPrototypePropDefinition ( t, lhs, getType ( n ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name lhsame = recordPrototypePropDefinition ( t, n, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^t, lhs, getType ( parent ) , n, parent, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^t, lhs, pushContainingFunction ( rhs ) , n, parent, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^t, lhs, getType ( varName ) , n, parent, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^211^212^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ; name.setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^t, lhs, getType ( rhs ) , n, param, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P3_Replace_Literal]^name.setAliased ( false ) ;^212^^^^^197^227^name.setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^212^^^^^197^227^name.setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^ref.setUnknown ( true ) ;name.setAliased ( true ) ;^212^^^^^197^227^name.setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( lhs ) ;name.setAliased ( true ) ;^212^^^^^197^227^name.setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( cur ) ;name.setAliased ( true ) ;^212^^^^^197^227^name.setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( param ) ;name.setAliased ( true ) ;^212^^^^^197^227^name.setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( rhs ) ;name.setAliased ( true ) ;^212^^^^^197^227^name.setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P2_Replace_Operator]^if  ( assignedValue != null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^if  ( parent == null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^if  ( assignedValue == false )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^if  ( name == null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^if  ( propQName == null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^if  ( scopeCreator == null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^if  ( assign != null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^if  ( qName == null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^if  ( propName == null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^if  ( name != null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P15_Unwrap_Block]^return ;^222^223^224^^^207^237^if  ( assignedValue == null )  { return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P16_Remove_Block]^^222^223^224^^^207^237^if  ( assignedValue == null )  { return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( propName == null )  {     continue; }^222^^^^^207^237^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isLocalNameReference ( t, n )  )  {     return ; }^222^^^^^207^237^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( propQName == null )  {     return ; }^222^^^^^207^237^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( qName == null )  {     return false; }^222^^^^^207^237^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( varName )  || NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( param )  || NodeUtil .isPrototypeProperty (  )   )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^safeAlias ( rhs ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^containsName ( rhs ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^while  (  ( param = param .getParent (  )   )  != null )  {^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^while  (  ( param =  varName.getNext (  )  )  !^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Node lhs = varName.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^Node lhs = n .getLastChild (  )  ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node getProp = call.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node assignedValue = varName.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^JSType type = getType ( n.getFirstChild (  )  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Node rhs = varName.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^Node rhs = n .getFirstChild (  )  ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^Node rhs = parent .getFirstChild (  )  ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node getProp = call.getFirstChild (  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node parent = root.getParent (  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node assignedValue = varName.getFirstChild (  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, parent, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name parentame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, parent, getType ( rhs ) , n, lhs, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Node varName = rhs.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^Node varName = n .getLastChild (  )  ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node getProp = call.getFirstChild (  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Name name = node.getValue (  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node parent = root.getParent (  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node assignedValue = varName.getFirstChild (  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^JSType type = getType ( n.getFirstChild (  )  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Node assignedValue = rhs.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^Node assignedValue = varName .getLastChild (  )  ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node assignedValue = varName.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;Node assignedValue = varName.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node getProp = call.getFirstChild (  ) ;Node assignedValue = varName.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node assignedValue = varName.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node assignedValue = varName.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;Node assignedValue = varName.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;Node assignedValue = varName.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Node param = rhs.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node getProp = call.getFirstChild (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node gParent = parent.getParent (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node parent = root.getParent (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node assignedValue = varName.getFirstChild (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^JSType type = getType ( n.getFirstChild (  )  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^switch  ( varName.getType (  )  )  {^170^^^^^155^185^switch  ( n.getType (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^switch  ( n .getNamedContainingFunction (  )   )  {^170^^^^^155^185^switch  ( n.getType (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^switch  ( rhs .getNamedContainingFunction (  )   )  {^170^^^^^155^185^switch  ( n.getType (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil .isPrototypeProperty (  )   || parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^if  ( NodeUtil.isGetProp ( param )  || parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^173^^^^^158^188^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^173^^^^^158^188^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^173^^^^^158^188^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^173^^^^^158^188^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^173^^^^^158^188^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^173^^^^^158^188^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^parent .getNamedContainingFunction (  )   == Token.REF_SPECIAL )  {^174^^^^^159^189^parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^174^175^176^^^159^189^parent.getType (  )  == Token.REF_SPECIAL )  {  return;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^} else if  ( NodeUtil .getFunctionName ( assignedValue , parent )   )  {^177^^^^^162^192^} else if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^} else if  ( NodeUtil .isFunction ( rhs )   )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isLocalNameReference ( t, n )  )  {     return ; }^185^^^^^170^200^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^if  ( containsName ( varName )  )  {^190^^^^^175^205^if  ( isPrototypeNameReference ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordPrototypePropUse ( t, varName, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^} else if  ( isStaticNameReference ( n, t .getScopeRoot (  )   )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( parent, n, t ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Node lhs = parent.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^Node lhs = varName .getLastChild (  )  ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^200^201^^^^185^215^Node lhs = n.getFirstChild (  ) ; Node rhs = n.getLastChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Node rhs = rhs.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil .getFunctionName ( assignedValue , param )   )  {^202^^^^^187^217^if  ( NodeUtil.isFunction ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^202^^^^^187^217^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil .isNew ( assignedValue )   || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^206^^^^^191^221^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^206^^^^^191^221^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^206^^^^^191^221^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^206^^^^^191^221^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^206^^^^^191^221^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^206^^^^^191^221^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^NodeUtil.isGetProp ( parent )  || NodeUtil.isGetProp ( rhs )  )  {^207^208^^^^192^222^NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^NodeUtil.isNew ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^207^208^^^^192^222^NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^NodeUtil .isPrototypeProperty (  )   || NodeUtil^207^208^^^^192^222^NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^NodeUtil.isGetProp ( varName )  || NodeUtil.isGetProp ( rhs )  )  {^207^208^^^^192^222^NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^207^^^^^192^222^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^207^^^^^192^222^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^207^^^^^192^222^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^207^^^^^192^222^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^207^^^^^192^222^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^207^^^^^192^222^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^NodeUtil.isGetProp ( param )  )  {^208^^^^^193^223^NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^NodeUtil.isNew ( rhs )  )  {^208^^^^^193^223^NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^NodeUtil.isGetProp ( parent )  )  {^208^^^^^193^223^NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^209^^^^^194^224^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^209^^^^^194^224^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^209^^^^^194^224^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^209^^^^^194^224^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^209^^^^^194^224^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^209^^^^^194^224^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, rhs, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( lhs, t, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^t, lhs, getType ( param ) , n, parent, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^t, lhs, getType ( rhs ) , n, varName, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^t, lhs, getType ( rhs ) , n, parent, parent .getNext (  )   ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^t, lhs, getType ( rhs ) , n, rhs, parent .getNext (  )   ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^maybeAliasNamesOnAssign ( parent, rhs ) ;^215^^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^maybeAliasNamesOnAssign (  rhs ) ;^215^^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^maybeAliasNamesOnAssign ( lhs ) ;^215^^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^maybeAliasNamesOnAssign ( rhs, lhs ) ;^215^^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^isStaticNameReference ( lhs, rhs ) ;^215^^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^maybeAliasNamesOnAssign ( lhs, parent ) ;^215^^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^215^216^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ; break;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^maybeAliasNamesOnAssign ( varName, assignedValue ) ;maybeAliasNamesOnAssign ( lhs, rhs ) ;^215^^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Node varName = varName.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^Node varName = parent .getLastChild (  )  ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^Node assignedValue = parent.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;Node assignedValue = varName.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^maybeAliasNamesOnAssign ( rhs, assignedValue ) ;^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^maybeAliasNamesOnAssign ( varName, parent ) ;^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^maybeAliasNamesOnAssign (  assignedValue ) ;^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^maybeAliasNamesOnAssign ( varName ) ;^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^maybeAliasNamesOnAssign ( assignedValue, varName ) ;^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^isStaticNameReference ( varName, assignedValue ) ;^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^maybeAliasNamesOnAssign ( lhs, rhs ) ;maybeAliasNamesOnAssign ( varName, assignedValue ) ;^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Node param = varName.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^Node param = n .getLastChild (  )  ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^while  (  ( parent = param.getNext (  )  )  != null )  {^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^232^233^234^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  { if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  { safeAlias ( param ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^if  ( NodeUtil.isNew ( varName )  || NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^maybeRecordExport ( rhs ) ;^238^^^^^223^253^maybeRecordExport ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^safeAlias ( n ) ;^238^^^^^223^253^maybeRecordExport ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^maybeRecordExport ( parent ) ;^238^^^^^223^253^maybeRecordExport ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^238^239^^^^223^253^maybeRecordExport ( n ) ; break;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P2_Replace_Operator]^return NodeUtil.containsType ( n, Token.NAME )  && NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^244^245^246^^^243^247^return NodeUtil.containsType ( n, Token.NAME )  || NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  n  
[P7_Replace_Invocation]^return NodeUtil.isName ( n, Token.NAME )  || NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^244^245^246^^^243^247^return NodeUtil.containsType ( n, Token.NAME )  || NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  n  
[P7_Replace_Invocation]^return NodeUtil .isName ( n )   || NodeUtil^244^245^246^^^243^247^return NodeUtil.containsType ( n, Token.NAME )  || NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  n  
[P14_Delete_Statement]^^244^245^246^^^243^247^return NodeUtil.containsType ( n, Token.NAME )  || NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  n  
[P7_Replace_Invocation]^NodeUtil.isName ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^245^246^^^^243^247^NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  n  
[P14_Delete_Statement]^^245^246^^^^243^247^NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  n  
[P7_Replace_Invocation]^NodeUtil.isName ( n, Token.GETPROP ) ;^246^^^^^243^247^NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  n  
[P7_Replace_Invocation]^NodeUtil .isName ( n )  ;^246^^^^^243^247^NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  n  
[P14_Delete_Statement]^^246^^^^^243^247^NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  n  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( n )  && NodeUtil.isGetProp ( n )  )  {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( cur )  || NodeUtil.isGetProp ( n )  )  {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( n )  ) {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P6_Replace_Expression]^if  (  NodeUtil.isGetProp ( n )  )  {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P6_Replace_Expression]^if  ( name != null )  {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( NodeUtil.isNew ( n )  || NodeUtil.isGetProp ( n )  )  {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  || NodeUtil.isNew ( n )  )  {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( cur )  ) {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  (  ( isName ( param )  )  ||  ( isGetProp ( param )  )  )  {     safeAlias ( param ) ; }^256^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isName ( n )  )  {     Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;     return  ( v != null )  &&  ( v.isLocal (  )  ) ; }^256^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P2_Replace_Operator]^if  ( name == null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( name != false )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( topScope != null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( propQName == null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( assign != null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( qName == null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( rhs != null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( constructor != null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( type == null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( propName == null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( uses != null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( assignedValue == null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P15_Unwrap_Block]^defineAndAlias(name); return ;^259^260^261^262^^255^280^if  ( name != null )  { defineAndAlias ( name ) ; return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P16_Remove_Block]^^259^260^261^262^^255^280^if  ( name != null )  { defineAndAlias ( name ) ; return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  (  ( qName == null )  ||  (  ( obj.getNext (  )  )  != null )  )  {     return ; }^259^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( name == null )  {     pushContainingFunction ( graph.UNKNOWN ) ;     return ; }^259^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Traversal ( name ) ;^260^^^^^255^280^defineAndAlias ( name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^260^^^^^255^280^defineAndAlias ( name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^safeAlias ( lhs ) ;defineAndAlias ( name ) ;^260^^^^^255^280^defineAndAlias ( name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^safeAlias ( cur ) ;defineAndAlias ( name ) ;^260^^^^^255^280^defineAndAlias ( name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^safeAlias ( param ) ;defineAndAlias ( name ) ;^260^^^^^255^280^defineAndAlias ( name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^safeAlias ( rhs ) ;defineAndAlias ( name ) ;^260^^^^^255^280^defineAndAlias ( name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P1_Replace_Type]^char name = n.getQualifiedName (  ) ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^String curame = n.getQualifiedName (  ) ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^String name = n .getParent (  )  ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String propQName = getProp.getQualifiedName (  ) ;String name = n.getQualifiedName (  ) ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Name name = node.getValue (  ) ;String name = n.getQualifiedName (  ) ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String qName = n.getQualifiedName (  ) ;String name = n.getQualifiedName (  ) ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String propName = n.getLastChild (  ) .getString (  ) ;String name = n.getQualifiedName (  ) ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String qName = obj.getQualifiedName (  ) ;String name = n.getQualifiedName (  ) ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String propName = name.getPropertyName (  ) ;String name = n.getQualifiedName (  ) ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String name = NodeUtil.getFunctionName ( root, parent ) ;String name = n.getQualifiedName (  ) ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^257^258^259^260^261^255^280^String name = n.getQualifiedName (  ) ;  if  ( name != null )  { defineAndAlias ( name ) ; return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^260^261^^^^255^280^defineAndAlias ( name ) ; return;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( name != true )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^String curame = n .getParent (  )  ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^256^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^256^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^256^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^256^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^256^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^256^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( NodeUtil.isNew ( n )  )  {^265^^^^^255^280^if  ( NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^265^^^^^255^280^if  ( NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( !NodeUtil.isString ( symbol )  )  {^265^^^^^255^280^if  ( NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( rhs )  )  {^265^^^^^255^280^if  ( NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P6_Replace_Expression]^} else {^268^^^^^255^280^} else if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isString ( n )  )  {^268^^^^^255^280^} else if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^}  if  ( NodeUtil.isString ( n )  )  {^268^^^^^255^280^} else if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^} else if  ( NodeUtil.isFunction ( parent )  )  {^268^^^^^255^280^} else if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P9_Replace_Statement]^} else if  ( NodeUtil.isAssign ( parent )  )  {^268^^^^^255^280^} else if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( n.hasChildren (  )  )  {     Node cur = n.getFirstChild (  ) ;     do {         safeAlias ( cur ) ;     } while  (  ( cur = cur.getNext (  )  )  != null  ) ; }else { }^268^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isGetProp ( n )  )  {     defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ; }else     if  ( isAssign ( n )  )  {         safeAlias ( n.getFirstChild (  )  ) ;     }else         if  ( n.hasChildren (  )  )  {             Node cur = n.getFirstChild (  ) ;             do {                 safeAlias ( cur ) ;             } while  (  ( cur = cur.getNext (  )  )  != null  ) ;         }else {         }^268^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P6_Replace_Expression]^} else {^272^^^^^255^280^} else if  ( n.hasChildren (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^} else if  ( n .getLastChild (  )   )  {^272^^^^^255^280^} else if  ( n.hasChildren (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^}  if  ( n .getLastChild (  )   )  {^272^^^^^255^280^} else if  ( n.hasChildren (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isAssign ( n )  )  {     safeAlias ( n.getFirstChild (  )  ) ; }else     if  ( n.hasChildren (  )  )  {         Node cur = n.getFirstChild (  ) ;         do {             safeAlias ( cur ) ;         } while  (  ( cur = cur.getNext (  )  )  != null  ) ;     }else {     }^272^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^} while  (  ( n = cur.getNext (  )  )  != null ) ;^276^^^^^255^280^} while  (  ( cur = cur.getNext (  )  )  != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^} while  (  ( cur =  n.getNext (  )  )  !^276^^^^^255^280^} while  (  ( cur = cur.getNext (  )  )  != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P12_Insert_Condition]^if  ( qName == null || obj.getNext (  )  != null )  { } while  (  ( cur = cur.getNext (  )  )  != null ) ; }^276^^^^^255^280^} while  (  ( cur = cur.getNext (  )  )  != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Node cur = n .getLastChild (  )  ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node getProp = call.getFirstChild (  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node assignedValue = varName.getFirstChild (  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType type = getType ( n.getFirstChild (  )  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^Node cur = cur.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^276^^^^^255^280^} while  (  ( cur = cur.getNext (  )  )  != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^safeAlias ( n ) ;^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^containsName ( cur ) ;^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^containsName ( n ) ;^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^name.setAliased ( true ) ;safeAlias ( cur ) ;^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^defineAndAlias ( name ) ;safeAlias ( cur ) ;^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^safeAlias ( lhs ) ;safeAlias ( cur ) ;^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^safeAlias ( param ) ;safeAlias ( cur ) ;^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^safeAlias ( rhs ) ;safeAlias ( cur ) ;^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^} while  (  ( cur = cur .getParent (  )   )  != null ) ;^276^^^^^255^280^} while  (  ( cur = cur.getNext (  )  )  != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^} else if  ( cur.hasChildren (  )  )  {^272^^^^^255^280^} else if  ( n.hasChildren (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^safeAlias ( cur.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^containsName ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^safeAlias ( n .getLastChild (  )   ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^containsName ( cur.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node getProp = call.getFirstChild (  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node assignedValue = varName.getFirstChild (  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType type = getType ( n.getFirstChild (  )  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^} else if  ( NodeUtil.isAssign ( cur )  )  {^268^^^^^255^280^} else if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^} else if  ( NodeUtil .isFunction ( cur )   )  {^268^^^^^255^280^} else if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^268^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^268^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^268^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^268^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^268^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^268^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^safeAlias ( cur .getLastChild (  )   ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^defineAndAlias ( cur.getLastChild (  ) .getString (  )  ) ;^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Traversal ( n.getLastChild (  ) .getString (  )  ) ;^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^defineAndAlias ( n.getLastChild (  ) .hasOwnProperty (  )  ) ;^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^defineAndAlias ( n .getFirstChild (  )  .getString (  )  ) ;^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String propName = n.getLastChild (  ) .getString (  ) ;defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^Node cur = cur .getLastChild (  )  ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^275^276^^^^255^280^safeAlias ( cur ) ; } while  (  ( cur = cur.getNext (  )  )  != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^}  if  ( n.hasChildren (  )  )  {^272^^^^^255^280^} else if  ( n.hasChildren (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( NodeUtil.isGetProp ( cur )  )  {^265^^^^^255^280^if  ( NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^265^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^265^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^265^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^265^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^265^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^265^^^^^255^280^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^defineAndAlias ( n.getLastChild (  )  .getVar (  )   ) ;^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P7_Replace_Invocation]^} else if  ( NodeUtil .isFunction ( n )   )  {^268^^^^^255^280^} else if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^} else if  ( NodeUtil.isString ( cur )  )  {^268^^^^^255^280^} else if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P8_Replace_Mix]^} while  (  ( n = cur .getParent (  )   )  != null ) ;^276^^^^^255^280^} while  (  ( cur = cur.getNext (  )  )  != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[P2_Replace_Operator]^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  || containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P2_Replace_Operator]^if  (  ( NodeUtil.isName ( lhs )  && NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P5_Replace_Variable]^if  (  ( NodeUtil.isName ( rhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( lhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P6_Replace_Expression]^if  (  ( NodeUtil.isName ( lhs )  ) {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P6_Replace_Expression]^if  (  NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P6_Replace_Expression]^if  ( isName(lhs) || isGetProp(lhs)) && containsName(rhs) && isFunction(rhs))) )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P6_Replace_Expression]^if  ( isName(lhs) || isGetProp(lhs) && containsName(rhs)) )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P6_Replace_Expression]^if  ( isName(lhs || isGetProp(lhs)) )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isNew ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isNew ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && safeAlias ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isAssign ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil .getFunctionName ( rhs , lhs )   && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isName ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P13_Insert_Block]^if  (  ( isGetProp ( parent )  )  ||  (  ( parent.getType (  )  )  ==  ( REF_SPECIAL )  )  )  {     return ; }else     if  ( isFunction ( parent )  )  {         return ;     }else         if  ( isAssign ( parent )  )  {             return ;         }^283^^^^^282^290^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P13_Insert_Block]^if  (  (  ( isName ( lhs )  )  ||  ( isGetProp ( lhs )  )  )  ||  ( isGetProp ( rhs )  )  )  {     if  ( isPrototypeProperty ( lhs )  )  {         Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;         name.setAliased ( true ) ;     } }^283^^^^^282^290^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P5_Replace_Variable]^safeAlias ( rhs ) ;^287^^^^^282^290^safeAlias ( lhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P7_Replace_Invocation]^containsName ( lhs ) ;^287^^^^^282^290^safeAlias ( lhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P8_Replace_Mix]^containsName ( rhs ) ;^287^^^^^282^290^safeAlias ( lhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P14_Delete_Statement]^^287^^^^^282^290^safeAlias ( lhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^name.setAliased ( true ) ;safeAlias ( lhs ) ;^287^^^^^282^290^safeAlias ( lhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^defineAndAlias ( name ) ;safeAlias ( lhs ) ;^287^^^^^282^290^safeAlias ( lhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^safeAlias ( cur ) ;safeAlias ( lhs ) ;^287^^^^^282^290^safeAlias ( lhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^safeAlias ( param ) ;safeAlias ( lhs ) ;^287^^^^^282^290^safeAlias ( lhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^safeAlias ( rhs ) ;safeAlias ( lhs ) ;^287^^^^^282^290^safeAlias ( lhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P5_Replace_Variable]^safeAlias ( lhs ) ;^288^^^^^282^290^safeAlias ( rhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P7_Replace_Invocation]^containsName ( rhs ) ;^288^^^^^282^290^safeAlias ( rhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P14_Delete_Statement]^^288^^^^^282^290^safeAlias ( rhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^name.setAliased ( true ) ;safeAlias ( rhs ) ;^288^^^^^282^290^safeAlias ( rhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^defineAndAlias ( name ) ;safeAlias ( rhs ) ;^288^^^^^282^290^safeAlias ( rhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^safeAlias ( lhs ) ;safeAlias ( rhs ) ;^288^^^^^282^290^safeAlias ( rhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^safeAlias ( cur ) ;safeAlias ( rhs ) ;^288^^^^^282^290^safeAlias ( rhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^safeAlias ( param ) ;safeAlias ( rhs ) ;^288^^^^^282^290^safeAlias ( rhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P5_Replace_Variable]^if  (  ( NodeUtil.isName ( rhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^283^^^^^282^290^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^283^^^^^282^290^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^283^^^^^282^290^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^283^^^^^282^290^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^283^^^^^282^290^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^283^^^^^282^290^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P8_Replace_Mix]^if  (  ( NodeUtil.isName ( rhs )  || NodeUtil.isNew ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P5_Replace_Variable]^containsName ( lhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^284^285^286^^^282^290^containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P7_Replace_Invocation]^safeAlias ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^284^285^286^^^282^290^containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P5_Replace_Variable]^!NodeUtil.isFunction ( lhs )  && !NodeUtil.isNew ( rhs )  )  {^285^286^^^^282^290^!NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P7_Replace_Invocation]^!NodeUtil.isAssign ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^285^286^^^^282^290^!NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P14_Delete_Statement]^^285^286^287^^^282^290^!NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  { safeAlias ( lhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P5_Replace_Variable]^!NodeUtil.isNew ( lhs )  )  {^286^^^^^282^290^!NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P7_Replace_Invocation]^!NodeUtil.isName ( rhs )  )  {^286^^^^^282^290^!NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P7_Replace_Invocation]^!NodeUtil .isName ( lhs )   )  {^286^^^^^282^290^!NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P14_Delete_Statement]^^286^287^^^^282^290^!NodeUtil.isNew ( rhs )  )  { safeAlias ( lhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P14_Delete_Statement]^^287^288^^^^282^290^safeAlias ( lhs ) ; safeAlias ( rhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( false ) ;^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( name, CONSERVATIVE ) .setAliased ( true ) ;^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.defineNameIfNotExists (  isExtern ) .setAliased ( true ) ;^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( name ) .setAliased ( true ) ;^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  String  name  NameReferenceGraph  graph  
[P14_Delete_Statement]^^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  String  name  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  String  name  NameReferenceGraph  graph  
[P5_Replace_Variable]^Preconditions.checkArgument ( NodeUtil.isCall ( symbol )  ) ;^297^^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( NodeUtil.isCall ( call )  ) ;^297^^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^297^^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil.isName ( call )  ) ;^297^^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P8_Replace_Mix]^Preconditions.checkArgument ( NodeUtil.isName ( symbol )  ) ;^297^^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^297^298^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ; Node getProp = call.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^297^^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( objType != null ) ;Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^297^^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^297^^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^297^^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^Node getProp = symbol.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Node getProp = call .getLastChild (  )  ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P8_Replace_Mix]^Node getProp = symbol .getLastChild (  )  ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node getProp = call.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;Node getProp = call.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node getProp = call.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node getProp = call.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node assignedValue = varName.getFirstChild (  ) ;Node getProp = call.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType type = getType ( n.getFirstChild (  )  ) ;Node getProp = call.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;Node getProp = call.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;Node getProp = call.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;Node getProp = call.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( !NodeUtil.isGetProp ( symbol )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( !NodeUtil.isNew ( getProp )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( !NodeUtil.isNew ( symbol )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( !NodeUtil.isString ( symbol )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( rhs )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( n )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( !NodeUtil.isGetProp ( n )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( NodeUtil.isGetProp ( n )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( NodeUtil.isAssign ( n )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P15_Unwrap_Block]^return ;^299^300^301^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  { return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P16_Remove_Block]^^299^300^301^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  { return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^299^^^^^284^314^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^299^^^^^284^314^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^299^^^^^284^314^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( equals ( propQName )  )  )  {     return ; }^299^^^^^284^314^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^299^^^^^284^314^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^299^^^^^284^314^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( !NodeUtil .isPrototypeProperty (  )   )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^299^^^^^284^314^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P1_Replace_Type]^char propQName = getProp.getQualifiedName (  ) ;^303^^^^^288^318^String propQName = getProp.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^String propQName = symbol.getQualifiedName (  ) ;^303^^^^^288^318^String propQName = getProp.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String name = n.getQualifiedName (  ) ;String propQName = getProp.getQualifiedName (  ) ;^303^^^^^288^318^String propQName = getProp.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String qName = n.getQualifiedName (  ) ;String propQName = getProp.getQualifiedName (  ) ;^303^^^^^288^318^String propQName = getProp.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String propName = n.getLastChild (  ) .getString (  ) ;String propQName = getProp.getQualifiedName (  ) ;^303^^^^^288^318^String propQName = getProp.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String qName = obj.getQualifiedName (  ) ;String propQName = getProp.getQualifiedName (  ) ;^303^^^^^288^318^String propQName = getProp.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String propName = name.getPropertyName (  ) ;String propQName = getProp.getQualifiedName (  ) ;^303^^^^^288^318^String propQName = getProp.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^String propQName = getProp .getParent (  )  ;^303^^^^^288^318^String propQName = getProp.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^303^304^305^306^307^288^318^String propQName = getProp.getQualifiedName (  ) ;  if  ( propQName == null )  { return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P2_Replace_Operator]^if  ( propQName != null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( qName == null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( propQName == true )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( topScope != null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( name == null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( scopeCreator == null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( assign != null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( rhs != null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( type == null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( propName == null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( name != null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( assignedValue == null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P15_Unwrap_Block]^return ;^305^306^307^^^290^320^if  ( propQName == null )  { return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P16_Remove_Block]^^305^306^307^^^290^320^if  ( propQName == null )  { return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( assignedValue == null )  {     return ; }^305^^^^^290^320^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( propName == null )  {     continue; }^305^^^^^290^320^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isLocalNameReference ( t, n )  )  {     return ; }^305^^^^^290^320^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( qName == null )  {     return false; }^305^^^^^290^320^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P2_Replace_Operator]^if  ( propQName.endsWith ( ".call" )  && propQName.endsWith ( ".apply" )  )  {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P3_Replace_Literal]^if  ( propQName.endsWith ( "acall" )  || propQName.endsWith ( ".apply" )  )  {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P3_Replace_Literal]^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( "ppapply" )  )  {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( qName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P6_Replace_Expression]^if  ( propQName.endsWith ( ".call" )  ) {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P6_Replace_Expression]^if  (  propQName.endsWith ( ".apply" )  )  {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( qName.endsWith ( ".call" )  ) {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P15_Unwrap_Block]^graph.defineNameIfNotExists(getProp.getFirstChild().getQualifiedName(), isExtern).markExposedToCallOrApply();^311^312^313^314^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  { graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P16_Remove_Block]^^311^312^313^314^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  { graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( symbol.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , CONSERVATIVE ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  )  ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( isExtern.getFirstChild (  ) .getQualifiedName (  ) , getProp ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .hasOwnProperty (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern )  .markExported (  )  ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^graph.connect ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^graph .defineNameIfNotExists ( propQName , CONSERVATIVE )  , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .setAliased (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^graph.defineNameIfNotExists ( getProp.getFirstChild (  )  .getParent (  )  , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^graph.defineNameIfNotExists ( getProp .getLastChild (  )  .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^312^313^314^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  (  ( propQName.endsWith ( ".call" )  )  ||  ( propQName.endsWith ( ".apply" )  )  )  {     graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ; }^312^^^^^297^327^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P8_Replace_Mix]^graph.defineNameIfNotExists ( symbol.getFirstChild (  ) .setAliased (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P8_Replace_Mix]^graph.defineNameIfNotExists ( symbol.getFirstChild (  )  .getParent (  )  , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P3_Replace_Literal]^if  ( propQName.endsWith ( "" )  || propQName.endsWith ( ".apply" )  )  {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P3_Replace_Literal]^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( "appl" )  )  {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^graph .defineNameIfNotExists ( qName , CONSERVATIVE )  , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P8_Replace_Mix]^graph.defineNameIfNotExists ( symbol .getLastChild (  )  .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P3_Replace_Literal]^if  ( !"goog.exportSym".equals ( propQName )  )  {^316^^^^^301^331^if  ( !"goog.exportSymbol".equals ( propQName )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( !"goog.exportSymbol".equals ( qName )  )  {^316^^^^^301^331^if  ( !"goog.exportSymbol".equals ( propQName )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( !"goog.exportSymbol" .endsWith ( propQName )   )  {^316^^^^^301^331^if  ( !"goog.exportSymbol".equals ( propQName )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P15_Unwrap_Block]^return ;^316^317^318^^^301^331^if  ( !"goog.exportSymbol".equals ( propQName )  )  { return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P16_Remove_Block]^^316^317^318^^^301^331^if  ( !"goog.exportSymbol".equals ( propQName )  )  { return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^316^^^^^301^331^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^316^^^^^301^331^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P3_Replace_Literal]^if  ( !"oog.exp".equals ( propQName )  )  {^316^^^^^301^331^if  ( !"goog.exportSymbol".equals ( propQName )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( equals ( propQName )  )  )  {     return ; }^316^^^^^301^331^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^Node symbol = obj.getNext (  ) ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Node symbol = getProp .getParent (  )  ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node symbol = getProp.getNext (  ) ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node gParent = parent.getParent (  ) ;Node symbol = getProp.getNext (  ) ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node ggParent = gParent.getParent (  ) ;Node symbol = getProp.getNext (  ) ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node parent = root.getParent (  ) ;Node symbol = getProp.getNext (  ) ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node obj = symbol.getNext (  ) ;Node symbol = getProp.getNext (  ) ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^Node symbol = symbol.getNext (  ) ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( !NodeUtil.isString ( obj )  )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( !NodeUtil.isAssign ( symbol )  )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( !NodeUtil .isAssign ( obj )   )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( rhs )  )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( n )  )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( !NodeUtil.isGetProp ( n )  )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( NodeUtil.isGetProp ( n )  )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( NodeUtil.isAssign ( n )  )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( !NodeUtil.isGetProp ( getProp )  )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P15_Unwrap_Block]^return ;^321^322^323^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  { return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P16_Remove_Block]^^321^322^323^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  { return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^321^^^^^306^336^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^321^^^^^306^336^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^321^^^^^306^336^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( equals ( propQName )  )  )  {     return ; }^321^^^^^306^336^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^321^^^^^306^336^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^321^^^^^306^336^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^321^^^^^306^336^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^Node obj = getProp.getNext (  ) ;^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node obj = symbol.getNext (  ) ;^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node gParent = parent.getParent (  ) ;Node obj = symbol.getNext (  ) ;^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node ggParent = gParent.getParent (  ) ;Node obj = symbol.getNext (  ) ;^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node parent = root.getParent (  ) ;Node obj = symbol.getNext (  ) ;^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node symbol = getProp.getNext (  ) ;Node obj = symbol.getNext (  ) ;^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^Node obj = obj.getNext (  ) ;^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P1_Replace_Type]^char qName = obj.getQualifiedName (  ) ;^326^^^^^311^341^String qName = obj.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^String qName = symbol.getQualifiedName (  ) ;^326^^^^^311^341^String qName = obj.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^String qName = obj .getParent (  )  ;^326^^^^^311^341^String qName = obj.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String propQName = getProp.getQualifiedName (  ) ;String qName = obj.getQualifiedName (  ) ;^326^^^^^311^341^String qName = obj.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Name name = node.getValue (  ) ;String qName = obj.getQualifiedName (  ) ;^326^^^^^311^341^String qName = obj.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String name = n.getQualifiedName (  ) ;String qName = obj.getQualifiedName (  ) ;^326^^^^^311^341^String qName = obj.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String qName = n.getQualifiedName (  ) ;String qName = obj.getQualifiedName (  ) ;^326^^^^^311^341^String qName = obj.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String propName = name.getPropertyName (  ) ;String qName = obj.getQualifiedName (  ) ;^326^^^^^311^341^String qName = obj.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String name = NodeUtil.getFunctionName ( root, parent ) ;String qName = obj.getQualifiedName (  ) ;^326^^^^^311^341^String qName = obj.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^326^327^328^329^330^311^341^String qName = obj.getQualifiedName (  ) ;  if  ( qName == null || obj.getNext (  )  != null )  { return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P2_Replace_Operator]^if  ( qName == null && obj.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P2_Replace_Operator]^if  ( qName != null || obj.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P2_Replace_Operator]^if  ( qName == null || obj.getNext (  )  == null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( propQName == null || obj.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( qName == null || symbol.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( obj == null || qName.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P6_Replace_Expression]^if  ( qName == null ) {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P6_Replace_Expression]^if  (  obj.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  (  obj.getNext (  )  != false )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P15_Unwrap_Block]^return ;^328^329^330^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  { return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P16_Remove_Block]^^328^329^330^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  { return; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( name != null )  {     defineAndAlias ( name ) ;     return ; }^328^^^^^313^343^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( qName == null || obj .getParent (  )   != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( qName == null || symbol .getParent (  )   != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( qName, true ) .markExported (  ) ;^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( propQName, false ) .markExported (  ) ;^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.defineNameIfNotExists (  false ) .markExported (  ) ;^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^graph.connect ( qName, false ) .markExported (  ) ;^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P8_Replace_Mix]^graph.connect ( propQName, false ) .markExported (  ) ;^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[P6_Replace_Expression]^if  ( v != null )  {^341^^^^^338^346^if  ( NodeUtil.isName ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( NodeUtil.isNew ( n )  )  {^341^^^^^338^346^if  ( NodeUtil.isName ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( !NodeUtil.isString ( symbol )  )  {^341^^^^^338^346^if  ( NodeUtil.isName ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( rhs )  )  {^341^^^^^338^346^if  ( NodeUtil.isName ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P15_Unwrap_Block]^com.google.javascript.jscomp.Scope.Var v = t.getScope().getVar(n.getString()); return (v != null) && (v.isLocal());^341^342^343^344^^338^346^if  ( NodeUtil.isName ( n )  )  { Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ; return v != null && v.isLocal (  ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P16_Remove_Block]^^341^342^343^344^^338^346^if  ( NodeUtil.isName ( n )  )  { Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ; return v != null && v.isLocal (  ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P2_Replace_Operator]^return v != null || v.isLocal (  ) ;^343^^^^^338^346^return v != null && v.isLocal (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P2_Replace_Operator]^return v == null && v.isLocal (  ) ;^343^^^^^338^346^return v != null && v.isLocal (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P8_Replace_Mix]^return   v.isLocal (  ) ;^343^^^^^338^346^return v != null && v.isLocal (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P5_Replace_Variable]^Var v = n.getScope (  ) .getVar ( t.getString (  )  ) ;^342^^^^^338^346^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Var v = t.traverse (  ) .getVar ( n.getString (  )  ) ;^342^^^^^338^346^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P8_Replace_Mix]^Var v = t .getScopeRoot (  )  .getVar ( n.getString (  )  ) ;^342^^^^^338^346^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P14_Delete_Statement]^^342^^^^^338^346^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P14_Delete_Statement]^^342^343^^^^338^346^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ; return v != null && v.isLocal (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P14_Delete_Statement]^^343^^^^^338^346^return v != null && v.isLocal (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P8_Replace_Mix]^return v ;^343^^^^^338^346^return v != null && v.isLocal (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^341^^^^^338^346^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^341^^^^^338^346^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^341^^^^^338^346^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^341^^^^^338^346^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^341^^^^^338^346^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^341^^^^^338^346^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Var v = t.getScope (  )  .getString (  )  ;^342^^^^^338^346^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Var v = t.getScope (  ) .getVar ( n .getVar (  )   ) ;^342^^^^^338^346^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P3_Replace_Literal]^return true;^345^^^^^338^346^return false;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P2_Replace_Operator]^Preconditions.checkArgument ( NodeUtil.isName ( n )  && NodeUtil.isGetProp ( n )  ) ;^352^^^^^351^362^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^352^^^^^351^362^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Preconditions .checkState (  )   ) ;^352^^^^^351^362^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil.isNew ( n )  || NodeUtil.isGetProp ( n )  ) ;^352^^^^^351^362^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isNew ( n )  ) ;^352^^^^^351^362^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^352^^^^^351^362^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( NodeUtil.isNew ( n )  )  {^353^^^^^351^362^if  ( NodeUtil.isName ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( !NodeUtil.isString ( symbol )  )  {^353^^^^^351^362^if  ( NodeUtil.isName ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( rhs )  )  {^353^^^^^351^362^if  ( NodeUtil.isName ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P15_Unwrap_Block]^return true;^353^354^355^^^351^362^if  ( NodeUtil.isName ( n )  )  { return true; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P16_Remove_Block]^^353^354^355^^^351^362^if  ( NodeUtil.isName ( n )  )  { return true; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^353^^^^^351^362^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^353^^^^^351^362^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^353^^^^^351^362^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^353^^^^^351^362^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^353^^^^^351^362^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P3_Replace_Literal]^return false;^354^^^^^351^362^return true;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^353^^^^^351^362^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P1_Replace_Type]^char qName = n.getQualifiedName (  ) ;^356^^^^^351^362^String qName = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P8_Replace_Mix]^String qName = n .getParent (  )  ;^356^^^^^351^362^String qName = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String propQName = getProp.getQualifiedName (  ) ;String qName = n.getQualifiedName (  ) ;^356^^^^^351^362^String qName = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String name = n.getQualifiedName (  ) ;String qName = n.getQualifiedName (  ) ;^356^^^^^351^362^String qName = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String propName = n.getLastChild (  ) .getString (  ) ;String qName = n.getQualifiedName (  ) ;^356^^^^^351^362^String qName = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String qName = obj.getQualifiedName (  ) ;String qName = n.getQualifiedName (  ) ;^356^^^^^351^362^String qName = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String propName = name.getPropertyName (  ) ;String qName = n.getQualifiedName (  ) ;^356^^^^^351^362^String qName = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String name = NodeUtil.getFunctionName ( root, parent ) ;String qName = n.getQualifiedName (  ) ;^356^^^^^351^362^String qName = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^356^357^358^359^^351^362^String qName = n.getQualifiedName (  ) ; if  ( qName == null )  { return false; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P2_Replace_Operator]^if  ( qName != null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( qName == this )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( topScope != null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( name == null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( propQName == null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( assign != null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( rhs != null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( type == null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( propName == null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( name != null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( uses != null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( assignedValue == null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P15_Unwrap_Block]^return false;^357^358^359^^^351^362^if  ( qName == null )  { return false; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P16_Remove_Block]^^357^358^359^^^351^362^if  ( qName == null )  { return false; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( assignedValue == null )  {     return ; }^357^^^^^351^362^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( propName == null )  {     continue; }^357^^^^^351^362^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( propQName == null )  {     return ; }^357^^^^^351^362^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P3_Replace_Literal]^return true;^358^^^^^351^362^return false;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P3_Replace_Literal]^return scope.isDeclared ( qName, false ) ;^361^^^^^351^362^return scope.isDeclared ( qName, true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^return scope.isDeclared (  true ) ;^361^^^^^351^362^return scope.isDeclared ( qName, true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P5_Replace_Variable]^return qName.isDeclared ( scope, true ) ;^361^^^^^351^362^return scope.isDeclared ( qName, true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^361^^^^^351^362^return scope.isDeclared ( qName, true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( !NodeUtil.isNew ( n )  )  {^368^^^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( !NodeUtil .isPrototypeProperty (  )   )  {^368^^^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^368^^^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( !NodeUtil.isString ( symbol )  )  {^368^^^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( rhs )  )  {^368^^^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( n )  )  {^368^^^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( NodeUtil.isGetProp ( n )  )  {^368^^^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( NodeUtil.isAssign ( n )  )  {^368^^^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( !NodeUtil.isGetProp ( getProp )  )  {^368^^^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P15_Unwrap_Block]^return false;^368^369^370^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  { return false; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P16_Remove_Block]^^368^369^370^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  { return false; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^368^^^^^367^376^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^368^^^^^367^376^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^368^^^^^367^376^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^368^^^^^367^376^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^368^^^^^367^376^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P3_Replace_Literal]^return true;^369^^^^^367^376^return false;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^368^^^^^367^376^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^JSType type = pushContainingFunction ( n.getFirstChild (  )  ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P8_Replace_Mix]^JSType type = getType ( n .getLastChild (  )   ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;JSType type = getType ( n.getFirstChild (  )  ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;JSType type = getType ( n.getFirstChild (  )  ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node getProp = call.getFirstChild (  ) ;JSType type = getType ( n.getFirstChild (  )  ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;JSType type = getType ( n.getFirstChild (  )  ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;JSType type = getType ( n.getFirstChild (  )  ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType type = getType ( root ) ;JSType type = getType ( n.getFirstChild (  )  ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType type = n.getJSType (  ) ;JSType type = getType ( n.getFirstChild (  )  ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;JSType type = getType ( n.getFirstChild (  )  ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P14_Delete_Statement]^^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;JSType type = getType ( n.getFirstChild (  )  ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P2_Replace_Operator]^if  ( type.isUnknownType (  )  && type.isUnionType (  )  )  {^372^^^^^367^376^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P6_Replace_Expression]^if  ( type.isUnknownType (  )  ) {^372^^^^^367^376^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P6_Replace_Expression]^if  (  type.isUnionType (  )  )  {^372^^^^^367^376^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( type .isUnionType (  )   || type.isUnionType (  )  )  {^372^^^^^367^376^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( type.isUnknownType (  )  || type .isFunctionType (  )   )  {^372^^^^^367^376^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  (  type .isFunctionType (  )   )  {^372^^^^^367^376^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^372^^^^^367^376^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P15_Unwrap_Block]^return false;^372^373^374^^^367^376^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  { return false; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P16_Remove_Block]^^372^373^374^^^367^376^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  { return false; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P3_Replace_Literal]^return true;^373^^^^^367^376^return false;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P2_Replace_Operator]^return  ( type instanceof InstanceObjectType && type.autoboxesTo (  )  != null ) ;^375^^^^^367^376^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P2_Replace_Operator]^return  ( type  ||  InstanceObjectType || type.autoboxesTo (  )  != null ) ;^375^^^^^367^376^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P2_Replace_Operator]^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  == null ) ;^375^^^^^367^376^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P8_Replace_Mix]^return   type.autoboxesTo (  )  != null ) ;;^375^^^^^367^376^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P14_Delete_Statement]^^375^^^^^367^376^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P2_Replace_Operator]^if  ( getNamedContainingFunction (  )  > graph.MAIN )  {^380^^^^^378^398^if  ( getNamedContainingFunction (  )  != graph.MAIN )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^if  ( popContainingFunction (  )  != graph.MAIN )  {^380^^^^^378^398^if  ( getNamedContainingFunction (  )  != graph.MAIN )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P15_Unwrap_Block]^^380^381^^^384^378^398^if  ( getNamedContainingFunction (  )  != graph.MAIN )  {  }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P13_Insert_Block]^if  (  ( getNamedContainingFunction (  )  )  !=  ( graph.MAIN )  )  { }^380^^^^^378^398^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P2_Replace_Operator]^if  ( type.isFunctionType (  )  || type.isConstructor (  )  )  {^385^^^^^378^398^if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P6_Replace_Expression]^if  ( type.isFunctionType (  )  ) {^385^^^^^378^398^if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P6_Replace_Expression]^if  (  type.isConstructor (  )  )  {^385^^^^^378^398^if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^if  ( type .isUnionType (  )   && type.isConstructor (  )  )  {^385^^^^^378^398^if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P9_Replace_Statement]^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  {^385^^^^^378^398^if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^if  ( NodeUtil.isAssign ( rValue )  )  {^391^^^^^378^398^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^if  ( NodeUtil.isString ( n )  )  {^391^^^^^378^398^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P8_Replace_Mix]^if  ( NodeUtil.isString ( rValue )  )  {^391^^^^^378^398^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P9_Replace_Statement]^if  ( !NodeUtil.isString ( symbol )  )  {^391^^^^^378^398^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P15_Unwrap_Block]^symbol.addAssignmentDeclaration(n);^391^392^393^394^395^378^398^if  ( NodeUtil.isAssign ( n )  )  { symbol.addAssignmentDeclaration ( n ) ; } else { symbol.addFunctionDeclaration ( n ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P16_Remove_Block]^^391^392^393^394^395^378^398^if  ( NodeUtil.isAssign ( n )  )  { symbol.addAssignmentDeclaration ( n ) ; } else { symbol.addFunctionDeclaration ( n ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P13_Insert_Block]^if  ( rhs != null )  {     symbol.setType ( getType ( rhs )  ) ;     if  ( isAssign ( n )  )  {         symbol.addAssignmentDeclaration ( n ) ;     }else {         symbol.addFunctionDeclaration ( n ) ;     } }^391^^^^^378^398^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^symbol.addFunctionDeclaration ( rValue ) ;^394^^^^^378^398^symbol.addFunctionDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P14_Delete_Statement]^^394^^^^^378^398^symbol.addFunctionDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^prototypeProp.addAssignmentDeclaration ( assign ) ;symbol.addFunctionDeclaration ( n ) ;^394^^^^^378^398^symbol.addFunctionDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^symbol.addAssignmentDeclaration ( n ) ;symbol.addFunctionDeclaration ( n ) ;^394^^^^^378^398^symbol.addFunctionDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^symbol.addAssignmentDeclaration ( rValue ) ;^392^^^^^378^398^symbol.addAssignmentDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P14_Delete_Statement]^^392^^^^^378^398^symbol.addAssignmentDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^Name symbol = graph.defineNameIfNotExists ( name, CONSERVATIVE ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^Name symbol = graph.defineNameIfNotExists (  isExtern ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^Name symbol = graph.defineNameIfNotExists ( name ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^Name symbol = graph.defineNameIfNotExists ( isExtern, name ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^Name symbol = isExtern.defineNameIfNotExists ( name, graph ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^Name symbol = name.defineNameIfNotExists ( graph, isExtern ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P14_Delete_Statement]^^389^390^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ; symbol.setType ( type ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P8_Replace_Mix]^symbol .setType ( type )  ;^390^^^^^378^398^symbol.setType ( type ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P14_Delete_Statement]^^390^^^^^378^398^symbol.setType ( type ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^prototypeProp.setType ( type ) ;symbol.setType ( type ) ;^390^^^^^378^398^symbol.setType ( type ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^name.setType ( getType ( n )  ) ;symbol.setType ( type ) ;^390^^^^^378^398^symbol.setType ( type ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^symbol.setType ( getType ( rhs )  ) ;symbol.setType ( type ) ;^390^^^^^378^398^symbol.setType ( type ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^391^^^^^378^398^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^391^^^^^378^398^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^391^^^^^378^398^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^391^^^^^378^398^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^391^^^^^378^398^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^391^^^^^378^398^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^symbol .addFunctionDeclaration ( rValue )  ;^392^^^^^378^398^symbol.addAssignmentDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( rValueame,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, rValue, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , n ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface (   ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type,  parent, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n,  parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  )  ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( parent,  ( FunctionType )  type, n, name, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( rValueame,  ( FunctionType )  type, n, parent, parent.getParent (  ) , n ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( parentame,  ( FunctionType )  type, n, n, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, rValue, parent.getParent (  ) , parent ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^return recordPrototypePropDefinition ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, n, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P14_Delete_Statement]^^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^name,  ( FunctionType )  type, n, parent, parent .getNext (  )  , rValue ) ;^387^^^^^378^398^name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P8_Replace_Mix]^name,  ( FunctionType )  type, n, rValue, parent.getParent (  ) , rValue ) ;^387^^^^^378^398^name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P14_Delete_Statement]^^387^^^^^378^398^name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^387^^^^^378^398^name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^387^^^^^378^398^name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunction ( parent )   )  {^391^^^^^378^398^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( parentame,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , parent ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( rValue,  ( FunctionType )  type, n, parent, parent.getParent (  ) , name ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^Name symbol = graph .defineNameIfNotExists ( name , isExtern )  ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^if  ( type.isFunctionType (  )  && type .isFunctionType (  )   )  {^385^^^^^378^398^if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent .getNext (  )  , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( parent )  ) ;^407^^^^^406^435^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^JSType constructor = pushContainingFunction ( NodeUtil.getPrototypeClassName ( qName )  ) ;^407^^^^^406^435^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^JSType constructor = getType ( NodeUtil.getPrototypePropertyName ( qName )  ) ;^407^^^^^406^435^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P11_Insert_Donor_Statement]^String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;^407^^^^^406^435^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P8_Replace_Mix]^JSType constructor = getType ( NodeUtil .getPrototypePropertyName ( gParent )   ) ;^407^^^^^406^435^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P14_Delete_Statement]^^407^^^^^406^435^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P14_Delete_Statement]^^407^408^^^^406^435^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ; FunctionType classType = null;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P11_Insert_Donor_Statement]^String className = null;FunctionType classType = null;^408^^^^^406^435^FunctionType classType = null;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P1_Replace_Type]^char className = null;^409^^^^^406^435^String className = null;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P11_Insert_Donor_Statement]^FunctionType classType = null;String className = null;^409^^^^^406^435^String className = null;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P2_Replace_Operator]^if  ( constructor instanceof FunctionType || constructor.isConstructor (  )  )  {^411^^^^^406^435^if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P2_Replace_Operator]^if  ( constructor  >  FunctionType && constructor.isConstructor (  )  )  {^411^^^^^406^435^if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^if  ( type instanceof FunctionType && constructor.isConstructor (  )  )  {^411^^^^^406^435^if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P6_Replace_Expression]^if  ( constructor instanceof FunctionType ) {^411^^^^^406^435^if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P6_Replace_Expression]^if  (  constructor.isConstructor (  )  )  {^411^^^^^406^435^if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^classType = compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^417^418^^^^411^420^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^classType = compiler.getTypeRegistry (  )  .getNativeType (  )  ;^417^418^^^^411^420^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^classType = compiler.getScopeCreator (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^417^418^^^^411^420^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P8_Replace_Mix]^classType  =  classType ;^417^418^^^^411^420^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^className = NodeUtil.getPrototypeClassName ( parent ) .getQualifiedName (  ) ;^419^^^^^411^420^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^className = NodeUtil.getPrototypeClassName ( qName ) .setAliased (  ) ;^419^^^^^411^420^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^className = NodeUtil.getPrototypePropertyName ( qName ) .getQualifiedName (  ) ;^419^^^^^411^420^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^className = NodeUtil .getPrototypePropertyName ( assign )  .getQualifiedName (  ) ;^419^^^^^411^420^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P14_Delete_Statement]^^417^418^^^^411^420^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P11_Insert_Donor_Statement]^return compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^417^418^^^^411^420^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P14_Delete_Statement]^^419^420^^^^411^420^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^419^^^^^411^420^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^419^^^^^411^420^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^419^^^^^411^420^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^419^^^^^411^420^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^419^^^^^411^420^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^419^^^^^411^420^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P8_Replace_Mix]^classType =   ( FunctionType )  constructor;^413^^^^^406^435^classType =  ( FunctionType )  constructor;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P8_Replace_Mix]^className =  null.getReferenceName (  ) ;^414^^^^^406^435^className = classType.getReferenceName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^className = classType .getPrototype (  )  ;^414^^^^^406^435^className = classType.getReferenceName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P14_Delete_Statement]^^414^^^^^406^435^className = classType.getReferenceName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^classType = compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^417^418^^^^406^435^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^classType = compiler.getTypeRegistry (  )  .getNativeType (  )  ;^417^418^^^^406^435^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^classType = compiler.getScopeCreator (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^417^418^^^^406^435^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P8_Replace_Mix]^classType  =  classType ;^417^418^^^^406^435^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^className = NodeUtil.getPrototypeClassName ( parent ) .getQualifiedName (  ) ;^419^^^^^406^435^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^className = NodeUtil.getPrototypeClassName ( qName ) .setAliased (  ) ;^419^^^^^406^435^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^className = NodeUtil.getPrototypePropertyName ( qName ) .getQualifiedName (  ) ;^419^^^^^406^435^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^className = NodeUtil .getPrototypePropertyName ( parent )  .getQualifiedName (  ) ;^419^^^^^406^435^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P14_Delete_Statement]^^417^418^^^^406^435^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P11_Insert_Donor_Statement]^return compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^417^418^^^^406^435^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^className = NodeUtil.getPrototypeClassName ( qName )  .getParent (  )  ;^419^^^^^406^435^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P14_Delete_Statement]^^419^420^^^^406^435^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^419^^^^^406^435^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^419^^^^^406^435^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^419^^^^^406^435^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^419^^^^^406^435^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^419^^^^^406^435^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^419^^^^^406^435^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^recordClassConstructorOrInterface ( qNameStr, classType, null, null, null, null ) ;^422^423^^^^406^435^recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^recordClassConstructorOrInterface (  classType, null, null, null, null ) ;^422^423^^^^406^435^recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^recordClassConstructorOrInterface ( className,  null, null, null, null ) ;^422^423^^^^406^435^recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^recordClassConstructorOrInterface ( classType, className, null, null, null, null ) ;^422^423^^^^406^435^recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^recordPrototypePropDefinition ( className, classType, null, null, null, null ) ;^422^423^^^^406^435^recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P14_Delete_Statement]^^422^423^^^^406^435^recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P1_Replace_Type]^char qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^425^426^^^^406^435^String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P3_Replace_Literal]^String qNameStr = className + "" + NodeUtil.getPrototypePropertyName ( qName ) ;^425^426^^^^406^435^String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^String parentStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^425^426^^^^406^435^String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^String classNameStr = qName + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^425^426^^^^406^435^String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^String qNameStr = className + ".prototype." + NodeUtil.isPrototypeProperty ( qName ) ;^425^426^^^^406^435^String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P11_Insert_Donor_Statement]^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^425^426^^^^406^435^String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^NodeUtil.getPrototypePropertyName ( parent ) ;^426^^^^^406^435^NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^NodeUtil.isPrototypeProperty ( qName ) ;^426^^^^^406^435^NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^NodeUtil .isPrototypeProperty (  )  ;^426^^^^^406^435^NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P14_Delete_Statement]^^426^^^^^406^435^NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P11_Insert_Donor_Statement]^prototypeProp.setType ( type ) ;NodeUtil.getPrototypePropertyName ( qName ) ;^426^^^^^406^435^NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P12_Insert_Condition]^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  { NodeUtil.getPrototypePropertyName ( qName ) ; }^426^^^^^406^435^NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^Name prototypeProp = graph.defineNameIfNotExists ( className, isExtern ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, CONSERVATIVE ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^Name prototypeProp = graph.defineNameIfNotExists (  isExtern ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^Name prototypeProp = graph.defineNameIfNotExists ( isExtern, qNameStr ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^Name prototypeProp = isExtern.defineNameIfNotExists ( qNameStr, graph ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^Name prototypeProp = graph .defineNameIfNotExists ( qNameStr , isExtern )  ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P11_Insert_Donor_Statement]^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P11_Insert_Donor_Statement]^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^Name prototypeProp = qNameStr.defineNameIfNotExists ( graph, isExtern ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P14_Delete_Statement]^^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P2_Replace_Operator]^Preconditions.checkNotNull ( prototypeProp, qNameStr  !=  " should be in the name graph as a node." ) ;^428^429^^^^406^435^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P3_Replace_Literal]^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in thshould be in the name graph as a node." ) ;^428^429^^^^406^435^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^Preconditions.checkNotNull ( prototypeProp, className + " should be in the name graph as a node." ) ;^428^429^^^^406^435^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^Preconditions.checkNotNull (  qNameStr + " should be in the name graph as a node." ) ;^428^429^^^^406^435^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^Preconditions.checkNotNull ( prototypeProp + " should be in the name graph as a node." ) ;^428^429^^^^406^435^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^Preconditions.checkNotNull ( qNameStr, prototypeProp + " should be in the name graph as a node." ) ;^428^429^^^^406^435^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P14_Delete_Statement]^^428^429^^^^406^435^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P2_Replace_Operator]^if  ( assign == null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^if  ( qName != null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P8_Replace_Mix]^if  ( assign != false )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P9_Replace_Statement]^if  ( topScope != null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P9_Replace_Statement]^if  ( name == null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P9_Replace_Statement]^if  ( propQName == null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P9_Replace_Statement]^if  ( qName == null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P9_Replace_Statement]^if  ( rhs != null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P9_Replace_Statement]^if  ( constructor != null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P9_Replace_Statement]^if  ( type == null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P9_Replace_Statement]^if  ( propName == null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P9_Replace_Statement]^if  ( name != null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P9_Replace_Statement]^if  ( uses != null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P9_Replace_Statement]^if  ( assignedValue == null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P15_Unwrap_Block]^prototypeProp.addAssignmentDeclaration(assign);^430^431^432^^^406^435^if  ( assign != null )  { prototypeProp.addAssignmentDeclaration ( assign ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P16_Remove_Block]^^430^431^432^^^406^435^if  ( assign != null )  { prototypeProp.addAssignmentDeclaration ( assign ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P8_Replace_Mix]^prototypeProp.addAssignmentDeclaration ( qName ) ;^431^^^^^406^435^prototypeProp.addAssignmentDeclaration ( assign ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P14_Delete_Statement]^^431^^^^^406^435^prototypeProp.addAssignmentDeclaration ( assign ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P11_Insert_Donor_Statement]^symbol.addAssignmentDeclaration ( n ) ;prototypeProp.addAssignmentDeclaration ( assign ) ;^431^^^^^406^435^prototypeProp.addAssignmentDeclaration ( assign ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P11_Insert_Donor_Statement]^symbol.addFunctionDeclaration ( n ) ;prototypeProp.addAssignmentDeclaration ( assign ) ;^431^^^^^406^435^prototypeProp.addAssignmentDeclaration ( assign ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P13_Insert_Block]^if  ( assign != null )  {     prototypeProp.addAssignmentDeclaration ( assign ) ; }^431^^^^^406^435^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P7_Replace_Invocation]^prototypeProp .addFunctionDeclaration ( assign )  ;^431^^^^^406^435^prototypeProp.addAssignmentDeclaration ( assign ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^prototypeProp.setType ( constructor ) ;^433^^^^^406^435^prototypeProp.setType ( type ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P14_Delete_Statement]^^433^^^^^406^435^prototypeProp.setType ( type ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P11_Insert_Donor_Statement]^recordPrototypePropUse ( t, n, parent ) ;prototypeProp.setType ( type ) ;^433^^^^^406^435^prototypeProp.setType ( type ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P11_Insert_Donor_Statement]^symbol.setType ( type ) ;prototypeProp.setType ( type ) ;^433^^^^^406^435^prototypeProp.setType ( type ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P11_Insert_Donor_Statement]^NodeUtil.getPrototypePropertyName ( qName ) ;prototypeProp.setType ( type ) ;^433^^^^^406^435^prototypeProp.setType ( type ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[P5_Replace_Variable]^if  ( isExterparent )  {^439^^^^^437^449^if  ( isExtern )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^if  ( CONSERVATIVE )  {^439^^^^^437^449^if  ( isExtern )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P9_Replace_Statement]^if  ( !isExtern )  {^439^^^^^437^449^if  ( isExtern )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P4_Replace_Constructor]^Reference reference = new Reference (  parent ) ;^443^^^^^437^449^Reference reference = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P4_Replace_Constructor]^Reference reference = new Reference ( n ) ;^443^^^^^437^449^Reference reference = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Reference reference = parentew Reference ( n, n ) ;^443^^^^^437^449^Reference reference = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Reference reference = parentew Reference ( n, parent ) ;^443^^^^^437^449^Reference reference = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Reference reference = new Reference ( n, n ) ;^443^^^^^437^449^Reference reference = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Reference ref = new Reference ( n, parent ) ;Reference reference = new Reference ( n, parent ) ;^443^^^^^437^449^Reference reference = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name parentame = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , CONSERVATIVE ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  )  ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name graphame = n.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name name = isExtern.defineNameIfNotExists ( n.getQualifiedName (  ) , graph ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^Name name = graph.connect ( n.getQualifiedName (  ) , isExtern ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^Name name = graph.connect ( n.getQualifiedName (  ) , CONSERVATIVE ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^Name isExtername = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , n ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^Name name = graph.defineNameIfNotExists ( n .getParent (  )  , isExtern ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^444^445^446^447^448^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ; name.setType ( getType ( n )  ) ; graph.connect ( getNamedContainingFunction (  ) , reference, name ) ; return reference; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^name.setType ( getType ( parent )  ) ;^445^^^^^437^449^name.setType ( getType ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^name.setType ( pushContainingFunction ( n )  ) ;^445^^^^^437^449^name.setType ( getType ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^445^446^^^^437^449^name.setType ( getType ( n )  ) ; graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^JSType type = getType ( root ) ;name.setType ( getType ( n )  ) ;^445^^^^^437^449^name.setType ( getType ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^symbol.setType ( type ) ;name.setType ( getType ( n )  ) ;^445^^^^^437^449^name.setType ( getType ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^JSType type = n.getJSType (  ) ;name.setType ( getType ( n )  ) ;^445^^^^^437^449^name.setType ( getType ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^JSType instanceType = getType ( instance ) ;name.setType ( getType ( n )  ) ;^445^^^^^437^449^name.setType ( getType ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^symbol.setType ( getType ( rhs )  ) ;name.setType ( getType ( n )  ) ;^445^^^^^437^449^name.setType ( getType ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^name.setType ( pushContainingFunction ( parent )  ) ;^445^^^^^437^449^name.setType ( getType ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^445^^^^^437^449^name.setType ( getType ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) ,  name ) ;^446^^^^^437^449^graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , reference ) ;^446^^^^^437^449^graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , name, reference ) ;^446^^^^^437^449^graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^graph.connect ( popContainingFunction (  ) , reference, name ) ;^446^^^^^437^449^graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^graph .connect ( name , reference , name )  ;^446^^^^^437^449^graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^446^^^^^437^449^graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P12_Insert_Condition]^if  ( getNamedContainingFunction (  )  != graph.MAIN )  { graph.connect ( getNamedContainingFunction (  ) , reference, name ) ; }^446^^^^^437^449^graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^return false;^441^^^^^437^449^return null;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^return true;^441^^^^^437^449^return null;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P8_Replace_Mix]^Name parentame = graph.defineNameIfNotExists ( n .getParent (  )  , isExtern ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( NodeUtil.isGetProp ( n )  ) ;^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil.isNew ( n )  ) ;^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil .isPrototypeProperty (  )   ) ;^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P8_Replace_Mix]^Preconditions.checkArgument ( NodeUtil.isNew ( parent )  ) ;^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^Preconditions.checkArgument ( NodeUtil.isGetProp ( parent )  ) ;^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^453^454^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ; Node instance = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P12_Insert_Condition]^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  { Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ; }^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P12_Insert_Condition]^if  ( !NodeUtil.isGetProp ( n )  )  { Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ; }^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P12_Insert_Condition]^if  ( NodeUtil.isGetProp ( n )  )  { Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ; }^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P12_Insert_Condition]^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  { Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ; }^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^Node instance = parent.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Node instance = n .getLastChild (  )  ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node getProp = call.getFirstChild (  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node assignedValue = varName.getFirstChild (  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType type = getType ( n.getFirstChild (  )  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^JSType instanceType = pushContainingFunction ( instance ) ;^455^^^^^452^480^JSType instanceType = getType ( instance ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P8_Replace_Mix]^JSType parentType = pushContainingFunction ( instance ) ;^455^^^^^452^480^JSType instanceType = getType ( instance ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType type = getType ( root ) ;JSType instanceType = getType ( instance ) ;^455^^^^^452^480^JSType instanceType = getType ( instance ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType type = n.getJSType (  ) ;JSType instanceType = getType ( instance ) ;^455^^^^^452^480^JSType instanceType = getType ( instance ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^JSType parentType = getType ( instance ) ;^455^^^^^452^480^JSType instanceType = getType ( instance ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^455^456^^^^452^480^JSType instanceType = getType ( instance ) ; JSType boxedType = instanceType.autoboxesTo (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^name.setType ( getType ( n )  ) ;JSType instanceType = getType ( instance ) ;^455^^^^^452^480^JSType instanceType = getType ( instance ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^symbol.setType ( getType ( rhs )  ) ;JSType instanceType = getType ( instance ) ;^455^^^^^452^480^JSType instanceType = getType ( instance ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P8_Replace_Mix]^JSType boxedType = instanceType .isConstructor (  )  ;^456^^^^^452^480^JSType boxedType = instanceType.autoboxesTo (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType type = getType ( root ) ;JSType boxedType = instanceType.autoboxesTo (  ) ;^456^^^^^452^480^JSType boxedType = instanceType.autoboxesTo (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^ObjectType objType = instanceType.toObjectType (  ) ;JSType boxedType = instanceType.autoboxesTo (  ) ;^456^^^^^452^480^JSType boxedType = instanceType.autoboxesTo (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType type = n.getJSType (  ) ;JSType boxedType = instanceType.autoboxesTo (  ) ;^456^^^^^452^480^JSType boxedType = instanceType.autoboxesTo (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^JSType boxedType = boxedType.autoboxesTo (  ) ;^456^^^^^452^480^JSType boxedType = instanceType.autoboxesTo (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^456^457^^^^452^480^JSType boxedType = instanceType.autoboxesTo (  ) ; instanceType = boxedType != null ? boxedType : instanceType;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P2_Replace_Operator]^instanceType = boxedType == null ? boxedType : instanceType;^457^^^^^452^480^instanceType = boxedType != null ? boxedType : instanceType;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^instanceType = instanceType != null ? boxedType : boxedType;^457^^^^^452^480^instanceType = boxedType != null ? boxedType : instanceType;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P6_Replace_Expression]^instanceType  =  instanceType;^457^^^^^452^480^instanceType = boxedType != null ? boxedType : instanceType;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P6_Replace_Expression]^instanceType  =  boxedType ;^457^^^^^452^480^instanceType = boxedType != null ? boxedType : instanceType;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P8_Replace_Mix]^instanceType = boxedType != true ? boxedType : instanceType;^457^^^^^452^480^instanceType = boxedType != null ? boxedType : instanceType;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^ObjectType objType = boxedType.toObjectType (  ) ;^460^^^^^452^480^ObjectType objType = instanceType.toObjectType (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^ObjectType prototype = type.getPrototype (  ) ;ObjectType objType = instanceType.toObjectType (  ) ;^460^^^^^452^480^ObjectType objType = instanceType.toObjectType (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType boxedType = instanceType.autoboxesTo (  ) ;ObjectType objType = instanceType.toObjectType (  ) ;^460^^^^^452^480^ObjectType objType = instanceType.toObjectType (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType type = n.getJSType (  ) ;ObjectType objType = instanceType.toObjectType (  ) ;^460^^^^^452^480^ObjectType objType = instanceType.toObjectType (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^ObjectType objType = instanceType .isFunctionType (  )  ;^460^^^^^452^480^ObjectType objType = instanceType.toObjectType (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^460^461^^^^452^480^ObjectType objType = instanceType.toObjectType (  ) ; Preconditions.checkState ( objType != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P2_Replace_Operator]^Preconditions.checkState ( objType == null ) ;^461^^^^^452^480^Preconditions.checkState ( objType != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( objType != null ) ;^461^^^^^452^480^Preconditions.checkState ( objType != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^461^^^^^452^480^Preconditions.checkState ( objType != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;Preconditions.checkState ( objType != null ) ;^461^^^^^452^480^Preconditions.checkState ( objType != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( containingFn ) ;Preconditions.checkState ( objType != null ) ;^461^^^^^452^480^Preconditions.checkState ( objType != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;Preconditions.checkState ( objType != null ) ;^461^^^^^452^480^Preconditions.checkState ( objType != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( !isExterparent )  {^463^^^^^452^480^if  ( !isExtern )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( !CONSERVATIVE )  {^463^^^^^452^480^if  ( !isExtern )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( isExtern )  {^463^^^^^452^480^if  ( !isExtern )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P2_Replace_Operator]^if  ( constructor == null )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( constructor != parentull )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( n != constructorull )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( constructor != true )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( topScope != null )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( scopeCreator == null )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( assign != null )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( rhs != null )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( name != null )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( uses != null )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P15_Unwrap_Block]^java.lang.String propName = n.getLastChild().getString(); if (!(constructor.getPrototype().hasOwnProperty(propName))) {    recordSuperClassPrototypePropUse(constructor, propName, ref);}; recordSubclassPrototypePropUse(constructor, propName, ref);^468^469^470^471^472^452^480^if  ( constructor != null )  { String propName = n.getLastChild (  ) .getString (  ) ; if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  { recordSuperClassPrototypePropUse ( constructor, propName, ref ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P16_Remove_Block]^^468^469^470^471^472^452^480^if  ( constructor != null )  { String propName = n.getLastChild (  ) .getString (  ) ; if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  { recordSuperClassPrototypePropUse ( constructor, propName, ref ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordUnknownUse ( t, instance, parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordUnknownUse ( t, n, instance ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordUnknownUse (  n, parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordUnknownUse ( t,  parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordUnknownUse ( t, n ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordUnknownUse ( n, t, parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordUnknownUse ( t, parent, n ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^recordStaticNameUse ( t, n, parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P8_Replace_Mix]^recordUnknownUse ( t, parent, parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^recordPrototypePropUse ( t, n, parent ) ;recordUnknownUse ( t, n, parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^recordStaticNameUse ( t, n, parent ) ;recordUnknownUse ( t, n, parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( !constructor .getSubTypes (  )  .hasOwnProperty ( propName )  )  {^470^^^^^452^480^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( !constructor.getPrototype (  )  .markExported (  )   )  {^470^^^^^452^480^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^470^^^^^452^480^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^470^^^^^452^480^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P15_Unwrap_Block]^recordSuperClassPrototypePropUse(constructor, propName, ref);^470^471^472^^^452^480^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  { recordSuperClassPrototypePropUse ( constructor, propName, ref ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P16_Remove_Block]^^470^471^472^^^452^480^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  { recordSuperClassPrototypePropUse ( constructor, propName, ref ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordSuperClassPrototypePropUse (  propName, ref ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordSuperClassPrototypePropUse ( constructor,  ref ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordSuperClassPrototypePropUse ( constructor, propName ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordSuperClassPrototypePropUse ( ref, propName, constructor ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordSuperClassPrototypePropUse ( propName, constructor, ref ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^recordPrototypePropUse ( t, n, parent ) ;recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P1_Replace_Type]^char propName = n.getLastChild (  ) .getchar (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^String propName = parent.getLastChild (  ) .getString (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^String propName = n.getLastChild (  ) .hasOwnProperty (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^String propName = n.getLastChild (  )  .getVar (  )  ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^String propName = n .getFirstChild (  )  .getString (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P8_Replace_Mix]^String propName = parent.getLastChild (  ) .hasOwnProperty (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String propQName = getProp.getQualifiedName (  ) ;String propName = n.getLastChild (  ) .getString (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String name = n.getQualifiedName (  ) ;String propName = n.getLastChild (  ) .getString (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String qName = n.getQualifiedName (  ) ;String propName = n.getLastChild (  ) .getString (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^String propName = name.getPropertyName (  ) ;String propName = n.getLastChild (  ) .getString (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;String propName = n.getLastChild (  ) .getString (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordSuperClassPrototypePropUse ( constructor, ref, propName ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordSubclassPrototypePropUse (  propName, ref ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( constructor,  ref ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( constructor, propName ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( propName, constructor, ref ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( constructor, ref, propName ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( ref, propName, constructor ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^recordPrototypePropUse ( t, n, parent ) ;recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^470^^^^^452^480^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P4_Replace_Constructor]^Reference ref = new Reference (  parent ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P4_Replace_Constructor]^Reference ref = new Reference ( n ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^Reference ref = instanceew Reference ( n, parent ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^Reference ref = new Reference ( n, instance ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^Reference ref = parentew Reference ( n, n ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^Reference ref = parentew Reference ( n, parent ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^Reference ref = new Reference ( n, n ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Reference reference = new Reference ( n, parent ) ;Reference ref = new Reference ( n, parent ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P8_Replace_Mix]^FunctionType constructor = objType .getOwnPropertyNames (  )  ;^467^^^^^452^480^FunctionType constructor = objType.getConstructor (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^FunctionType superClass = classType.getSuperClassConstructor (  ) ;FunctionType constructor = objType.getConstructor (  ) ;^467^^^^^452^480^FunctionType constructor = objType.getConstructor (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^467^^^^^452^480^FunctionType constructor = objType.getConstructor (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordUnknownUse ( t, instance, parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordUnknownUse (  n, parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordUnknownUse ( t,  parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordUnknownUse ( t, n ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordUnknownUse ( parent, n, t ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordUnknownUse ( t, parent, n ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P7_Replace_Invocation]^recordStaticNameUse ( t, n, parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P14_Delete_Statement]^^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^recordPrototypePropUse ( t, n, parent ) ;recordUnknownUse ( t, n, parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^recordStaticNameUse ( t, n, parent ) ;recordUnknownUse ( t, n, parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( constructor != false )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordUnknownUse ( parent, n, t ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P8_Replace_Mix]^String propName = parent.getLastChild (  )  .getVar (  )  ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordUnknownUse ( t, parent, parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordUnknownUse ( t, n, instance ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P8_Replace_Mix]^recordStaticNameUse ( t, n, instance ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^FunctionType constructor = objType.getConstructor (  ) ;FunctionType superClass = classType.getSuperClassConstructor (  ) ;^487^^^^^485^498^FunctionType superClass = classType.getSuperClassConstructor (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^FunctionType superClass = superClass.getSuperClassConstructor (  ) ;^487^^^^^485^498^FunctionType superClass = classType.getSuperClassConstructor (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P7_Replace_Invocation]^FunctionType superClass = classType .isConstructor (  )  ;^487^^^^^485^498^FunctionType superClass = classType.getSuperClassConstructor (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P14_Delete_Statement]^^487^^^^^485^498^FunctionType superClass = classType.getSuperClassConstructor (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^superClass = superClass.getSuperClassConstructor (  ) ;FunctionType superClass = classType.getSuperClassConstructor (  ) ;^487^^^^^485^498^FunctionType superClass = classType.getSuperClassConstructor (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^while  ( superClass == null )  {^488^^^^^485^498^while  ( superClass != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^while  ( classType != null )  {^488^^^^^485^498^while  ( superClass != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^489^^^^^485^498^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P6_Replace_Expression]^if  ( superClass.getReferenceName (  )  + " )  {^489^^^^^485^498^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( superClass.getPrototype (  )  .markExported (  )   )  {^489^^^^^485^498^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( superClass .getSubTypes (  )  .hasOwnProperty ( prop )  )  {^489^^^^^485^498^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^489^^^^^485^498^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {     graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists (  (  (  ( classType.getReferenceName (  )  )  + " )  + prop ) , false )  ) ; }^489^^^^^485^498^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^superClass = classType.getSuperClassConstructor (  ) ;^495^^^^^485^498^superClass = superClass.getSuperClassConstructor (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P8_Replace_Mix]^superClass = classType .isConstructor (  )  ;^495^^^^^485^498^superClass = superClass.getSuperClassConstructor (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P14_Delete_Statement]^^495^^^^^485^498^superClass = superClass.getSuperClassConstructor (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^FunctionType superClass = classType.getSuperClassConstructor (  ) ;superClass = superClass.getSuperClassConstructor (  ) ;^495^^^^^485^498^superClass = superClass.getSuperClassConstructor (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (  >>  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (  ==  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P3_Replace_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + "prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P3_Replace_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, true )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) ,  graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." +  false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , superClass, graph.defineNameIfNotExists ( ref.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref, superClass.defineNameIfNotExists ( graph.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref, prop.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + graph, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P7_Replace_Invocation]^graph.connect ( popContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P8_Replace_Mix]^graph.connect ( popContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P14_Delete_Statement]^^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {     graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists (  (  (  ( classType.getReferenceName (  )  )  + " )  + prop ) , false )  ) ; }^490^^^^^485^498^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {     graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists (  (  (  ( superClass.getReferenceName (  )  )  + " )  + prop ) , false )  ) ;     return ; }else {     superClass = superClass.getSuperClassConstructor (  ) ; }^490^^^^^485^498^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P13_Insert_Block]^if  (  ( getNamedContainingFunction (  )  )  !=  ( graph.MAIN )  )  { }^490^^^^^485^498^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  !=  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  >>  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + "typprototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, true )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." +  false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( prop.getReferenceName (  )  + ".prototype." + superClass, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P7_Replace_Invocation]^graph.defineNameIfNotExists ( superClass .getPrototype (  )   + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P8_Replace_Mix]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P14_Delete_Statement]^^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P7_Replace_Invocation]^superClass .getPrototype (  )   + ".prototype." + prop, false )  ) ;^492^^^^^485^498^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P14_Delete_Statement]^^492^^^^^485^498^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^492^^^^^485^498^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^492^^^^^485^498^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^492^^^^^485^498^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P8_Replace_Mix]^superClass =  null.getSuperClassConstructor (  ) ;^495^^^^^485^498^superClass = superClass.getSuperClassConstructor (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( prop.getPrototype (  ) .hasOwnProperty ( superClass )  )  {^489^^^^^485^498^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (  >=  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P3_Replace_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype.totype" + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , graph, ref.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( prop.getReferenceName (  )  + ".prototype." + superClass, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P7_Replace_Invocation]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass .getPrototype (  )   + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  &  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P14_Delete_Statement]^^492^493^^^^485^498^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ; return;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P7_Replace_Invocation]^superClass = superClass .isConstructor (  )  ;^495^^^^^485^498^superClass = superClass.getSuperClassConstructor (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (  ^  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (   instanceof   ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P3_Replace_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototypprototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P7_Replace_Invocation]^graph.connect ( getNamedContainingFunction (  ) , ref, graph .defineNameIfNotExists ( prop , CONSERVATIVE )   ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  &&  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  <<  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + "roprototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (  >  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P3_Replace_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + "oprototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  |  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (   instanceof   )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + "otype" + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P8_Replace_Mix]^graph .defineNameIfNotExists ( prop , CONSERVATIVE )   ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( subclass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^506^^^^^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( prop.getPrototype (  ) .hasOwnProperty ( classType )  )  {^506^^^^^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P6_Replace_Expression]^if  ( classType.getReferenceName (  )  + " )  {^506^^^^^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^506^^^^^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^506^^^^^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P15_Unwrap_Block]^graph.connect(getNamedContainingFunction(), ref, graph.defineNameIfNotExists((((classType.getReferenceName()) + ".prototype.") + prop), false));^506^507^508^509^510^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  { graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P16_Remove_Block]^^506^507^508^509^510^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  { graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {     graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists (  (  (  ( superClass.getReferenceName (  )  )  + " )  + prop ) , false )  ) ;     return ; }else {     superClass = superClass.getSuperClassConstructor (  ) ; }^506^^^^^504^516^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (  !=  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (  <=  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P3_Replace_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + "prprototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P3_Replace_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, true )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( subclass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) ,  graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." +  false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , graph, ref.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , classType, graph.defineNameIfNotExists ( ref.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref, prop.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + graph, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P7_Replace_Invocation]^graph.connect ( popContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P7_Replace_Invocation]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType .getPrototype (  )   + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P14_Delete_Statement]^^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {     graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists (  (  (  ( classType.getReferenceName (  )  )  + " )  + prop ) , false )  ) ; }^507^^^^^504^516^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P13_Insert_Block]^if  (  ( getNamedContainingFunction (  )  )  !=  ( graph.MAIN )  )  { }^507^^^^^504^516^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( classType.getReferenceName (  >  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( classType.getReferenceName (  >>  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, true )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( subclass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." +  false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( prop.getReferenceName (  )  + ".prototype." + classType, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P14_Delete_Statement]^^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P7_Replace_Invocation]^classType .getPrototype (  )   + ".prototype." + prop, false )  ) ;^509^^^^^504^516^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P14_Delete_Statement]^^509^^^^^504^516^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^509^^^^^504^516^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^509^^^^^504^516^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^509^^^^^504^516^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^509^^^^^504^516^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( classType.getPrototype (  )  .markExported (  )   )  {^506^^^^^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (  &&  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (  ^  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P3_Replace_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype.pro" + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , prop, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + ref, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( prop.getReferenceName (  )  + ".prototype." + classType, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P7_Replace_Invocation]^graph.connect ( getNamedContainingFunction (  ) , ref, graph .defineNameIfNotExists ( prop , isExtern )   ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P8_Replace_Mix]^graph.connect ( popContainingFunction (  ) , ref, graph.defineNameIfNotExists ( subclass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( classType.getReferenceName (  >=  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( classType.getReferenceName (  ||  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".pprototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P7_Replace_Invocation]^graph.defineNameIfNotExists ( classType .getPrototype (  )   + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P2_Replace_Operator]^if  ( classType.getSubTypes (  )  == null )  {^511^^^^^504^516^if  ( classType.getSubTypes (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P7_Replace_Invocation]^if  ( classType .getPrototype (  )   != null )  {^511^^^^^504^516^if  ( classType.getSubTypes (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( classType.getSubTypes (  )  != true )  {^511^^^^^504^516^if  ( classType.getSubTypes (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P15_Unwrap_Block]^for (com.google.javascript.rhino.jstype.FunctionType subclass : classType.getSubTypes()) {    recordSubclassPrototypePropUse(subclass, prop, ref);};^511^512^513^514^^504^516^if  ( classType.getSubTypes (  )  != null )  { for  ( FunctionType subclass : classType.getSubTypes (  )  )  { recordSubclassPrototypePropUse ( subclass, prop, ref ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P16_Remove_Block]^^511^512^513^514^^504^516^if  ( classType.getSubTypes (  )  != null )  { for  ( FunctionType subclass : classType.getSubTypes (  )  )  { recordSubclassPrototypePropUse ( subclass, prop, ref ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P8_Replace_Mix]^for  ( FunctionType subclass : subclass.getSubTypes (  )  )  {^512^^^^^504^516^for  ( FunctionType subclass : classType.getSubTypes (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P14_Delete_Statement]^^512^513^514^^^504^516^for  ( FunctionType subclass : classType.getSubTypes (  )  )  { recordSubclassPrototypePropUse ( subclass, prop, ref ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( classType, prop, ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordSubclassPrototypePropUse (  prop, ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( subclass,  ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( subclass, prop ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( prop, subclass, ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( ref, prop, subclass ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P7_Replace_Invocation]^recordSuperClassPrototypePropUse ( subclass, prop, ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P14_Delete_Statement]^^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^recordPrototypePropUse ( t, n, parent ) ;recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( subclass.getSubTypes (  )  != null )  {^511^^^^^504^516^if  ( classType.getSubTypes (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P7_Replace_Invocation]^for  ( FunctionType subclass : classType .getPrototype (  )   )  {^512^^^^^504^516^for  ( FunctionType subclass : classType.getSubTypes (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( isExterparent )  {^519^^^^^518^529^if  ( isExtern )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( CONSERVATIVE )  {^519^^^^^518^529^if  ( isExtern )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( !isExtern )  {^519^^^^^518^529^if  ( isExtern )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P4_Replace_Constructor]^Reference ref = new Reference (  parent ) ;^524^^^^^518^529^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P4_Replace_Constructor]^Reference ref = new Reference ( n ) ;^524^^^^^518^529^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P5_Replace_Variable]^Reference ref = parentew Reference ( n, n ) ;^524^^^^^518^529^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^new Pair<Name, Reference> ( popContainingFunction (  ) , ref )  ) ;^527^^^^^518^529^new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P5_Replace_Variable]^Reference ref = parentew Reference ( n, parent ) ;^524^^^^^518^529^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P5_Replace_Variable]^Reference ref = new Reference ( n, n ) ;^524^^^^^518^529^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Reference reference = new Reference ( n, parent ) ;Reference ref = new Reference ( n, parent ) ;^524^^^^^518^529^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P5_Replace_Variable]^Preconditions.checkArgument ( NodeUtil.isGetProp ( parent )  ) ;^523^^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( NodeUtil.isGetProp ( n )  ) ;^523^^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^523^^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil.isNew ( n )  ) ;^523^^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil .isPrototypeProperty (  )   ) ;^523^^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P14_Delete_Statement]^^523^^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P14_Delete_Statement]^^523^524^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ; Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P12_Insert_Condition]^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  { Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ; }^523^^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P12_Insert_Condition]^if  ( !NodeUtil.isGetProp ( n )  )  { Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ; }^523^^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P12_Insert_Condition]^if  ( NodeUtil.isGetProp ( n )  )  { Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ; }^523^^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P12_Insert_Condition]^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  { Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ; }^523^^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^523^^^^^518^529^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^523^^^^^518^529^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^523^^^^^518^529^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^523^^^^^518^529^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^523^^^^^518^529^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^523^^^^^518^529^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P3_Replace_Literal]^ref.setUnknown ( false ) ;^525^^^^^518^529^ref.setUnknown ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P14_Delete_Statement]^^525^^^^^518^529^ref.setUnknown ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^connectUnknowns (  ) ;ref.setUnknown ( true ) ;^525^^^^^518^529^ref.setUnknown ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^name.setAliased ( true ) ;ref.setUnknown ( true ) ;^525^^^^^518^529^ref.setUnknown ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P4_Replace_Constructor]^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) ew Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P4_Replace_Constructor]^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  )  )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P5_Replace_Variable]^unknownNameUse.put ( ref.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , n )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^unknownNameUse .get ( 1 )  , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^unknownNameUse.put ( n.getLastChild (  ) .hasOwnProperty (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^unknownNameUse.put ( n.getLastChild (  )  .getVar (  )  , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^unknownNameUse.put ( n .getFirstChild (  )  .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( popContainingFunction (  ) , ref )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P8_Replace_Mix]^unknownNameUse.put ( parent.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P14_Delete_Statement]^^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P14_Delete_Statement]^^527^^^^^518^529^new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^527^^^^^518^529^new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^527^^^^^518^529^new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P2_Replace_Operator]^Preconditions.checkArgument ( type.isConstructor (  )  && type.isInterface (  )  ) ;^538^^^^^535^555^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( type.isConstructor (  )  || type.isInterface (  )  ) ;^538^^^^^535^555^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^Preconditions.checkArgument ( type.isConstructor (  )  || type .isConstructor (  )   ) ;^538^^^^^535^555^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P8_Replace_Mix]^Preconditions .checkState (  )   ) ;^538^^^^^535^555^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P14_Delete_Statement]^^538^^^^^535^555^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^538^^^^^535^555^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^538^^^^^535^555^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^538^^^^^535^555^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P14_Delete_Statement]^^538^539^^^^535^555^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ; Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^Name symbol = graph.defineNameIfNotExists ( prop, isExtern ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^Name symbol = graph.defineNameIfNotExists ( name, CONSERVATIVE ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^Name symbol = graph.defineNameIfNotExists (  isExtern ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^Name symbol = graph.defineNameIfNotExists ( name ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^Name symbol = name.defineNameIfNotExists ( graph, isExtern ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^Name symbol = isExtern.defineNameIfNotExists ( name, graph ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^Name symbol = graph.defineNameIfNotExists ( isExtern, name ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P14_Delete_Statement]^^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P2_Replace_Operator]^if  ( rhs == null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^if  ( parent != null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^if  ( rhs != parentull )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^if  ( n != rhsull )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P8_Replace_Mix]^if  ( rhs != this )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P9_Replace_Statement]^if  ( topScope != null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P9_Replace_Statement]^if  ( name == null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P9_Replace_Statement]^if  ( propQName == null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P9_Replace_Statement]^if  ( assign != null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P9_Replace_Statement]^if  ( qName == null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P9_Replace_Statement]^if  ( constructor != null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P9_Replace_Statement]^if  ( type == null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P9_Replace_Statement]^if  ( propName == null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P9_Replace_Statement]^if  ( name != null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P9_Replace_Statement]^if  ( uses != null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P13_Insert_Block]^if  ( isAssign ( n )  )  {     symbol.addAssignmentDeclaration ( n ) ; }else {     symbol.addFunctionDeclaration ( n ) ; }^540^^^^^535^555^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^if  ( NodeUtil.isAssign ( rhs )  )  {^543^^^^^535^555^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^if  ( NodeUtil.isString ( n )  )  {^543^^^^^535^555^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P8_Replace_Mix]^if  ( NodeUtil.isString ( rhs )  )  {^543^^^^^535^555^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P9_Replace_Statement]^if  ( !NodeUtil.isString ( symbol )  )  {^543^^^^^535^555^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P15_Unwrap_Block]^symbol.addAssignmentDeclaration(n);^543^544^545^546^547^535^555^if  ( NodeUtil.isAssign ( n )  )  { symbol.addAssignmentDeclaration ( n ) ; } else { symbol.addFunctionDeclaration ( n ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P16_Remove_Block]^^543^544^545^546^547^535^555^if  ( NodeUtil.isAssign ( n )  )  { symbol.addAssignmentDeclaration ( n ) ; } else { symbol.addFunctionDeclaration ( n ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P13_Insert_Block]^if  ( rhs != null )  {     symbol.setType ( getType ( rhs )  ) ;     if  ( isAssign ( n )  )  {         symbol.addAssignmentDeclaration ( n ) ;     }else {         symbol.addFunctionDeclaration ( n ) ;     } }^543^^^^^535^555^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^symbol.addFunctionDeclaration ( rhs ) ;^546^^^^^535^555^symbol.addFunctionDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P14_Delete_Statement]^^546^^^^^535^555^symbol.addFunctionDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^prototypeProp.addAssignmentDeclaration ( assign ) ;symbol.addFunctionDeclaration ( n ) ;^546^^^^^535^555^symbol.addFunctionDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^symbol.addAssignmentDeclaration ( n ) ;symbol.addFunctionDeclaration ( n ) ;^546^^^^^535^555^symbol.addFunctionDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^symbol .addFunctionDeclaration ( gParent )  ;^544^^^^^535^555^symbol.addAssignmentDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P8_Replace_Mix]^symbol.addAssignmentDeclaration ( rhs ) ;^544^^^^^535^555^symbol.addAssignmentDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P14_Delete_Statement]^^544^^^^^535^555^symbol.addAssignmentDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^symbol.setType ( getType ( parent )  ) ;^542^^^^^535^555^symbol.setType ( getType ( rhs )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^symbol.setType ( pushContainingFunction ( rhs )  ) ;^542^^^^^535^555^symbol.setType ( getType ( rhs )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P14_Delete_Statement]^^542^^^^^535^555^symbol.setType ( getType ( rhs )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^JSType type = getType ( root ) ;symbol.setType ( getType ( rhs )  ) ;^542^^^^^535^555^symbol.setType ( getType ( rhs )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^symbol.setType ( type ) ;symbol.setType ( getType ( rhs )  ) ;^542^^^^^535^555^symbol.setType ( getType ( rhs )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^name.setType ( getType ( n )  ) ;symbol.setType ( getType ( rhs )  ) ;^542^^^^^535^555^symbol.setType ( getType ( rhs )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^JSType instanceType = getType ( instance ) ;symbol.setType ( getType ( rhs )  ) ;^542^^^^^535^555^symbol.setType ( getType ( rhs )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^543^^^^^535^555^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^543^^^^^535^555^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^543^^^^^535^555^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^543^^^^^535^555^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^543^^^^^535^555^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^543^^^^^535^555^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^symbol .addAssignmentDeclaration ( rhs )  ;^546^^^^^535^555^symbol.addFunctionDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunction ( rhs )   )  {^543^^^^^535^555^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^symbol .addFunctionDeclaration ( rhs )  ;^544^^^^^535^555^symbol.addAssignmentDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^symbol .addFunctionDeclaration ( n )  ;^544^^^^^535^555^symbol.addAssignmentDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P8_Replace_Mix]^ObjectType prototype = type .getSubTypes (  )  ;^549^^^^^535^555^ObjectType prototype = type.getPrototype (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^ObjectType objType = instanceType.toObjectType (  ) ;ObjectType prototype = type.getPrototype (  ) ;^549^^^^^535^555^ObjectType prototype = type.getPrototype (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^String propName = name.getPropertyName (  ) ;ObjectType prototype = type.getPrototype (  ) ;^549^^^^^535^555^ObjectType prototype = type.getPrototype (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^JSType type = n.getJSType (  ) ;ObjectType prototype = type.getPrototype (  ) ;^549^^^^^535^555^ObjectType prototype = type.getPrototype (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P14_Delete_Statement]^^549^^^^^535^555^ObjectType prototype = type.getPrototype (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P1_Replace_Type]^for  ( char prop : prototype.getOwnPropertyNames (  )  )  {^550^^^^^535^555^for  ( String prop : prototype.getOwnPropertyNames (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P14_Delete_Statement]^^550^551^552^553^^535^555^for  ( String prop : prototype.getOwnPropertyNames (  )  )  { graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( name + ".pprototype." + prop, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( name + ".prototype." + prop, CONSERVATIVE ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( name + ".prototype." +  isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( name + ".prototype." + prop ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( prop + ".prototype." + name, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( name + ".prototype." + isExtern, prop ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^graph.connect ( name + ".prototype." + prop, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P7_Replace_Invocation]^graph .defineNameIfNotExists ( prop , isExtern )  ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P14_Delete_Statement]^^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[P2_Replace_Operator]^if  ( propName != null )  {^562^^^^^558^572^if  ( propName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P8_Replace_Mix]^if  ( propName == false )  {^562^^^^^558^572^if  ( propName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( topScope != null )  {^562^^^^^558^572^if  ( propName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( name == null )  {^562^^^^^558^572^if  ( propName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( propQName == null )  {^562^^^^^558^572^if  ( propName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( scopeCreator == null )  {^562^^^^^558^572^if  ( propName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( assign != null )  {^562^^^^^558^572^if  ( propName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( qName == null )  {^562^^^^^558^572^if  ( propName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( rhs != null )  {^562^^^^^558^572^if  ( propName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( type == null )  {^562^^^^^558^572^if  ( propName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( name != null )  {^562^^^^^558^572^if  ( propName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( uses != null )  {^562^^^^^558^572^if  ( propName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( assignedValue == null )  {^562^^^^^558^572^if  ( propName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P15_Unwrap_Block]^continue;^562^563^564^^^558^572^if  ( propName == null )  { continue; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P16_Remove_Block]^^562^563^564^^^558^572^if  ( propName == null )  { continue; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P13_Insert_Block]^if  ( assignedValue == null )  {     return ; }^562^^^^^558^572^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P13_Insert_Block]^if  ( propQName == null )  {     return ; }^562^^^^^558^572^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P13_Insert_Block]^if  ( qName == null )  {     return false; }^562^^^^^558^572^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P2_Replace_Operator]^if  ( uses == null )  {^566^^^^^558^572^if  ( uses != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P5_Replace_Variable]^if  ( use != null )  {^566^^^^^558^572^if  ( uses != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P8_Replace_Mix]^if  ( nulls != this )  {^566^^^^^558^572^if  ( uses != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( topScope != null )  {^566^^^^^558^572^if  ( uses != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( name == null )  {^566^^^^^558^572^if  ( uses != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( assign != null )  {^566^^^^^558^572^if  ( uses != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( qName == null )  {^566^^^^^558^572^if  ( uses != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( rhs != null )  {^566^^^^^558^572^if  ( uses != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( constructor != null )  {^566^^^^^558^572^if  ( uses != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( type == null )  {^566^^^^^558^572^if  ( uses != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( propName == null )  {^566^^^^^558^572^if  ( uses != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P9_Replace_Statement]^if  ( name != null )  {^566^^^^^558^572^if  ( uses != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P15_Unwrap_Block]^for (com.google.common.base.Pair<com.google.javascript.jscomp.NameReferenceGraph.Name, com.google.javascript.jscomp.NameReferenceGraph.Reference> use : uses) {    graph.connect(use.getFirst(), use.getSecond(), name);};^566^567^568^569^^558^572^if  ( uses != null )  { for  ( Pair<Name, Reference> use : uses )  { graph.connect ( use.getFirst (  ) , use.getSecond (  ) , name ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P16_Remove_Block]^^566^567^568^569^^558^572^if  ( uses != null )  { for  ( Pair<Name, Reference> use : uses )  { graph.connect ( use.getFirst (  ) , use.getSecond (  ) , name ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P13_Insert_Block]^if  ( uses != null )  {     for  ( Name, Reference> use : uses )  {         graph.connect ( use.getFirst (  ) , use.getSecond (  ) , name ) ;     } }^567^^^^^558^572^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P5_Replace_Variable]^graph.connect ( use.getFirst (  ) .getSecond (  ) , name ) ;^568^^^^^558^572^graph.connect ( use.getFirst (  ) , use.getSecond (  ) , name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P5_Replace_Variable]^graph.connect ( use.getFirst (  ) , use.getSecond (  )  ) ;^568^^^^^558^572^graph.connect ( use.getFirst (  ) , use.getSecond (  ) , name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P5_Replace_Variable]^graph.connect ( name.getFirst (  ) , use.getSecond (  ) , use ) ;^568^^^^^558^572^graph.connect ( use.getFirst (  ) , use.getSecond (  ) , name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P8_Replace_Mix]^graph.connect ( this.getFirst (  ) , use.getSecond (  ) , name ) ;^568^^^^^558^572^graph.connect ( use.getFirst (  ) , use.getSecond (  ) , name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P14_Delete_Statement]^^568^^^^^558^572^graph.connect ( use.getFirst (  ) , use.getSecond (  ) , name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P7_Replace_Invocation]^graph.connect ( use .getSecond (  )  , use.getSecond (  ) , name ) ;^568^^^^^558^572^graph.connect ( use.getFirst (  ) , use.getSecond (  ) , name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P5_Replace_Variable]^graph.connect ( null.getFirst (  ) , use.getSecond (  ) , name ) ;^568^^^^^558^572^graph.connect ( use.getFirst (  ) , use.getSecond (  ) , name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P11_Insert_Donor_Statement]^Node gParent = parent.getParent (  ) ;Name name = node.getValue (  ) ;^560^^^^^558^572^Name name = node.getValue (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Name name = node.getValue (  ) ;^560^^^^^558^572^Name name = node.getValue (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P11_Insert_Donor_Statement]^String name = n.getQualifiedName (  ) ;Name name = node.getValue (  ) ;^560^^^^^558^572^Name name = node.getValue (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P11_Insert_Donor_Statement]^Node ggParent = gParent.getParent (  ) ;Name name = node.getValue (  ) ;^560^^^^^558^572^Name name = node.getValue (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P11_Insert_Donor_Statement]^String qName = obj.getQualifiedName (  ) ;Name name = node.getValue (  ) ;^560^^^^^558^572^Name name = node.getValue (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P11_Insert_Donor_Statement]^Node parent = root.getParent (  ) ;Name name = node.getValue (  ) ;^560^^^^^558^572^Name name = node.getValue (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P1_Replace_Type]^char propName = name.getPropertyName (  ) ;^561^^^^^558^572^String propName = name.getPropertyName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P7_Replace_Invocation]^String propName = name.setAliased (  ) ;^561^^^^^558^572^String propName = name.getPropertyName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P11_Insert_Donor_Statement]^String propQName = getProp.getQualifiedName (  ) ;String propName = name.getPropertyName (  ) ;^561^^^^^558^572^String propName = name.getPropertyName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P11_Insert_Donor_Statement]^ObjectType prototype = type.getPrototype (  ) ;String propName = name.getPropertyName (  ) ;^561^^^^^558^572^String propName = name.getPropertyName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P11_Insert_Donor_Statement]^String name = n.getQualifiedName (  ) ;String propName = name.getPropertyName (  ) ;^561^^^^^558^572^String propName = name.getPropertyName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P11_Insert_Donor_Statement]^String qName = n.getQualifiedName (  ) ;String propName = name.getPropertyName (  ) ;^561^^^^^558^572^String propName = name.getPropertyName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P11_Insert_Donor_Statement]^String propName = n.getLastChild (  ) .getString (  ) ;String propName = name.getPropertyName (  ) ;^561^^^^^558^572^String propName = name.getPropertyName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P11_Insert_Donor_Statement]^String qName = obj.getQualifiedName (  ) ;String propName = name.getPropertyName (  ) ;^561^^^^^558^572^String propName = name.getPropertyName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P5_Replace_Variable]^Collection<Pair<Name, Reference>> uses = propName.get ( unknownNameUse ) ;^565^^^^^558^572^Collection<Pair<Name, Reference>> uses = unknownNameUse.get ( propName ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P7_Replace_Invocation]^Collection<Pair<Name, Reference>> uses = unknownNameUse.put ( propName ) ;^565^^^^^558^572^Collection<Pair<Name, Reference>> uses = unknownNameUse.get ( propName ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P7_Replace_Invocation]^for  ( GraphNode<Name, Reference> node : graph .defineNameIfNotExists ( propName , isExtern )   )  {^559^^^^^558^572^for  ( GraphNode<Name, Reference> node : graph.getNodes (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P14_Delete_Statement]^^559^560^561^562^563^558^572^for  ( GraphNode<Name, Reference> node : graph.getNodes (  )  )  { Name name = node.getValue (  ) ; String propName = name.getPropertyName (  ) ; if  ( propName == null )  { continue; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P14_Delete_Statement]^^560^561^^^^558^572^Name name = node.getValue (  ) ; String propName = name.getPropertyName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P14_Delete_Statement]^^561^^^^^558^572^String propName = name.getPropertyName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P14_Delete_Statement]^^565^^^^^558^572^Collection<Pair<Name, Reference>> uses = unknownNameUse.get ( propName ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P7_Replace_Invocation]^graph.connect ( use.getFirst (  ) , use .getFirst (  )  , name ) ;^568^^^^^558^572^graph.connect ( use.getFirst (  ) , use.getSecond (  ) , name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P5_Replace_Variable]^graph.connect ( 4.getFirst (  ) , use.getSecond (  ) , name ) ;^568^^^^^558^572^graph.connect ( use.getFirst (  ) , use.getSecond (  ) , name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[P7_Replace_Invocation]^JSType type = n .getType ( n )  ;^578^^^^^577^589^JSType type = n.getJSType (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^Scope topScope = compiler.getTopScope (  ) ;JSType type = n.getJSType (  ) ;^578^^^^^577^589^JSType type = n.getJSType (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType type = getType ( root ) ;JSType type = n.getJSType (  ) ;^578^^^^^577^589^JSType type = n.getJSType (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^ObjectType prototype = type.getPrototype (  ) ;JSType type = n.getJSType (  ) ;^578^^^^^577^589^JSType type = n.getJSType (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^ObjectType objType = instanceType.toObjectType (  ) ;JSType type = n.getJSType (  ) ;^578^^^^^577^589^JSType type = n.getJSType (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType boxedType = instanceType.autoboxesTo (  ) ;JSType type = n.getJSType (  ) ;^578^^^^^577^589^JSType type = n.getJSType (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType type = getType ( n.getFirstChild (  )  ) ;JSType type = n.getJSType (  ) ;^578^^^^^577^589^JSType type = n.getJSType (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^JSType instanceType = getType ( instance ) ;JSType type = n.getJSType (  ) ;^578^^^^^577^589^JSType type = n.getJSType (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P14_Delete_Statement]^^578^^^^^577^589^JSType type = n.getJSType (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^name.setType ( getType ( n )  ) ;JSType type = n.getJSType (  ) ;^578^^^^^577^589^JSType type = n.getJSType (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P2_Replace_Operator]^if  ( type != null )  {^579^^^^^577^589^if  ( type == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P8_Replace_Mix]^if  ( type == this )  {^579^^^^^577^589^if  ( type == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( topScope != null )  {^579^^^^^577^589^if  ( type == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( name == null )  {^579^^^^^577^589^if  ( type == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( propQName == null )  {^579^^^^^577^589^if  ( type == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( scopeCreator == null )  {^579^^^^^577^589^if  ( type == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( assign != null )  {^579^^^^^577^589^if  ( type == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( qName == null )  {^579^^^^^577^589^if  ( type == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( rhs != null )  {^579^^^^^577^589^if  ( type == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( propName == null )  {^579^^^^^577^589^if  ( type == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( name != null )  {^579^^^^^577^589^if  ( type == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P9_Replace_Statement]^if  ( uses != null )  {^579^^^^^577^589^if  ( type == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P13_Insert_Block]^if  ( CONSERVATIVE )  {     throw new RuntimeException ( "Type system failed us : ( " ) ; }else {     return compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ; }^579^^^^^577^589^[Delete]^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P5_Replace_Variable]^if  ( isExtern )  {^580^^^^^577^589^if  ( CONSERVATIVE )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P15_Unwrap_Block]^throw new java.lang.RuntimeException("Type system failed us :(");^580^581^582^583^584^577^589^if  ( CONSERVATIVE )  { throw new RuntimeException  (" ")  ; } else { return compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P16_Remove_Block]^^580^581^582^583^584^577^589^if  ( CONSERVATIVE )  { throw new RuntimeException  (" ")  ; } else { return compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^return compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.UNKNOWN_TYPE ) ;^583^584^^^^577^589^return compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^return compiler.getScopeCreator (  ) .getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^583^584^^^^577^589^return compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P14_Delete_Statement]^^583^584^^^^577^589^return compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P8_Replace_Mix]^return ;^581^^^^^577^589^throw new RuntimeException  (" ")  ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^return compiler.getTypeRegistry (  )  .getNativeFunctionType (  )  ;^583^584^^^^577^589^return compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^return type .isConstructor (  )  ;^588^^^^^577^589^return type.restrictByNotNullOrUndefined (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P14_Delete_Statement]^^588^^^^^577^589^return type.restrictByNotNullOrUndefined (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[P7_Replace_Invocation]^currentFunctionStack.get ( functionNode ) ;^598^^^^^597^599^currentFunctionStack.add ( functionNode ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] pushContainingFunction [RETURN_TYPE] void   Name functionNode [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Name  functionNode  
[P8_Replace_Mix]^currentFunctionStack .ArrayList (  )  ;^598^^^^^597^599^currentFunctionStack.add ( functionNode ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] pushContainingFunction [RETURN_TYPE] void   Name functionNode [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Name  functionNode  
[P14_Delete_Statement]^^598^^^^^597^599^currentFunctionStack.add ( functionNode ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] pushContainingFunction [RETURN_TYPE] void   Name functionNode [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Name  functionNode  
[P11_Insert_Donor_Statement]^currentFunctionStack.remove ( currentFunctionStack.size (  )  - 1 ) ;currentFunctionStack.add ( functionNode ) ;^598^^^^^597^599^currentFunctionStack.add ( functionNode ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] pushContainingFunction [RETURN_TYPE] void   Name functionNode [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Name  functionNode  
[P2_Replace_Operator]^currentFunctionStack.remove ( currentFunctionStack.size (  )   <=  1 ) ;^606^^^^^605^607^currentFunctionStack.remove ( currentFunctionStack.size (  )  - 1 ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] popContainingFunction [RETURN_TYPE] void   [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[P3_Replace_Literal]^currentFunctionStack.remove ( currentFunctionStack.size (  )   ) ;^606^^^^^605^607^currentFunctionStack.remove ( currentFunctionStack.size (  )  - 1 ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] popContainingFunction [RETURN_TYPE] void   [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[P3_Replace_Literal]^currentFunctionStack.remove ( currentFunctionStack.size() - 1  - 1 ) ;^606^^^^^605^607^currentFunctionStack.remove ( currentFunctionStack.size (  )  - 1 ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] popContainingFunction [RETURN_TYPE] void   [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[P7_Replace_Invocation]^currentFunctionStack.get ( currentFunctionStack.size (  )  - 1 ) ;^606^^^^^605^607^currentFunctionStack.remove ( currentFunctionStack.size (  )  - 1 ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] popContainingFunction [RETURN_TYPE] void   [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[P7_Replace_Invocation]^currentFunctionStack .size (  )  ;^606^^^^^605^607^currentFunctionStack.remove ( currentFunctionStack.size (  )  - 1 ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] popContainingFunction [RETURN_TYPE] void   [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[P7_Replace_Invocation]^currentFunctionStack.remove ( currentFunctionStack.remove (  )  - 1 ) ;^606^^^^^605^607^currentFunctionStack.remove ( currentFunctionStack.size (  )  - 1 ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] popContainingFunction [RETURN_TYPE] void   [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[P14_Delete_Statement]^^606^^^^^605^607^currentFunctionStack.remove ( currentFunctionStack.size (  )  - 1 ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] popContainingFunction [RETURN_TYPE] void   [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[P11_Insert_Donor_Statement]^currentFunctionStack.add ( functionNode ) ;currentFunctionStack.remove ( currentFunctionStack.size (  )  - 1 ) ;^606^^^^^605^607^currentFunctionStack.remove ( currentFunctionStack.size (  )  - 1 ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] popContainingFunction [RETURN_TYPE] void   [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[P3_Replace_Literal]^currentFunctionStack.remove ( currentFunctionStack.size() + 0  - 1 ) ;^606^^^^^605^607^currentFunctionStack.remove ( currentFunctionStack.size (  )  - 1 ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] popContainingFunction [RETURN_TYPE] void   [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[P1_Replace_Type]^long  pos;^615^^^^^613^625^int pos;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P2_Replace_Operator]^if  ( cf == graph.UNKNOWN )  {^618^^^^^613^625^if  ( cf != graph.UNKNOWN )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P8_Replace_Mix]^if  ( cf = graph.UNKNOWN )  {^618^^^^^613^625^if  ( cf != graph.UNKNOWN )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P15_Unwrap_Block]^containingFn = cf; break;^618^619^620^621^^613^625^if  ( cf != graph.UNKNOWN )  { containingFn = cf; break; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P16_Remove_Block]^^618^619^620^621^^613^625^if  ( cf != graph.UNKNOWN )  { containingFn = cf; break; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P5_Replace_Variable]^containingFn = containingFn;^619^^^^^613^625^containingFn = cf;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P8_Replace_Mix]^containingFn =  null;^619^^^^^613^625^containingFn = cf;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P2_Replace_Operator]^for  ( pos = currentFunctionStack.size (  )   >  1; pos >= 0; pos = pos - 1 )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P2_Replace_Operator]^for  ( pos = currentFunctionStack.size (  )  - 1; pos > 0; pos = pos - 1 )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P2_Replace_Operator]^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos  ==  1 )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P3_Replace_Literal]^for  ( pos = currentFunctionStack.size (  )  - pos; pos >= 0; pos = pos - pos )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P3_Replace_Literal]^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= pos; pos = pos - 1 )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P3_Replace_Literal]^for  ( pos = currentFunctionStack.size() - 3  - 1; pos >= 0; pos = pos - 1 )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P7_Replace_Invocation]^for  ( pos = currentFunctionStack.remove (  )  - 1; pos >= 0; pos = pos - 1 )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P5_Replace_Variable]^Name cf = 1.get ( pos ) ;^617^^^^^613^625^Name cf = currentFunctionStack.get ( pos ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P5_Replace_Variable]^Name cf = pos.get ( currentFunctionStack ) ;^617^^^^^613^625^Name cf = currentFunctionStack.get ( pos ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P7_Replace_Invocation]^Name cf = currentFunctionStack.add ( pos ) ;^617^^^^^613^625^Name cf = currentFunctionStack.get ( pos ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P8_Replace_Mix]^Name cf = 4.get ( pos ) ;^617^^^^^613^625^Name cf = currentFunctionStack.get ( pos ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P14_Delete_Statement]^^617^^^^^613^625^Name cf = currentFunctionStack.get ( pos ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P2_Replace_Operator]^for  ( pos = currentFunctionStack.size (  )   <<  1; pos >= 0; pos = pos - 1 )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P3_Replace_Literal]^for  ( pos = currentFunctionStack.size (  )  ; pos >= 0; pos = pos  )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P3_Replace_Literal]^for  ( pos = currentFunctionStack.size() + 0  - 1; pos >= 0; pos = pos - 1 )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P5_Replace_Variable]^for  ( pos = null.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P8_Replace_Mix]^for  ( pos = currentFunctionStack.size (  )  - 0 ; pos >= 0; pos = pos - 0  )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P2_Replace_Operator]^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos  |  1 )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P3_Replace_Literal]^for  ( pos = currentFunctionStack.size() - 2  - 1; pos >= 0; pos = pos - 1 )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P14_Delete_Statement]^^616^617^618^619^620^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  { Name cf = currentFunctionStack.get ( pos ) ; if  ( cf != graph.UNKNOWN )  { containingFn = cf; break; }^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P5_Replace_Variable]^Preconditions.checkNotNull ( cf ) ;^623^^^^^613^625^Preconditions.checkNotNull ( containingFn ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P14_Delete_Statement]^^623^624^^^^613^625^Preconditions.checkNotNull ( containingFn ) ; return containingFn;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( objType != null ) ;Preconditions.checkNotNull ( containingFn ) ;^623^^^^^613^625^Preconditions.checkNotNull ( containingFn ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;Preconditions.checkNotNull ( containingFn ) ;^623^^^^^613^625^Preconditions.checkNotNull ( containingFn ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P5_Replace_Variable]^return cf;^624^^^^^613^625^return containingFn;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P8_Replace_Mix]^boolean isExtern;^106^^^^^101^111^final boolean isExtern;^[CLASS] Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[P8_Replace_Mix]^this.isExtern =  null;^109^^^^^108^111^this.isExtern = isExtern;^[CLASS] Traversal  [METHOD] <init> [RETURN_TYPE] NameReferenceGraphConstruction$Traversal(boolean)   boolean isExtern [VARIABLES] boolean  isExtern  
[P7_Replace_Invocation]^popContainingFunction ( graph.MAIN ) ;^110^^^^^108^111^pushContainingFunction ( graph.MAIN ) ;^[CLASS] Traversal  [METHOD] <init> [RETURN_TYPE] NameReferenceGraphConstruction$Traversal(boolean)   boolean isExtern [VARIABLES] boolean  isExtern  
[P14_Delete_Statement]^^110^^^^^108^111^pushContainingFunction ( graph.MAIN ) ;^[CLASS] Traversal  [METHOD] <init> [RETURN_TYPE] NameReferenceGraphConstruction$Traversal(boolean)   boolean isExtern [VARIABLES] boolean  isExtern  
[P12_Insert_Condition]^if  ( getNamedContainingFunction (  )  != graph.MAIN )  { pushContainingFunction ( graph.MAIN ) ; }^110^^^^^108^111^pushContainingFunction ( graph.MAIN ) ;^[CLASS] Traversal  [METHOD] <init> [RETURN_TYPE] NameReferenceGraphConstruction$Traversal(boolean)   boolean isExtern [VARIABLES] boolean  isExtern  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node gParent = parent.getParent (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node ggParent = gParent.getParent (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node parent = root.getParent (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node symbol = getProp.getNext (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node obj = symbol.getNext (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;Node root = t.getScopeRoot (  ) ;^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P14_Delete_Statement]^^115^^^^^100^130^Node root = t.getScopeRoot (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^Node parent = ggParent.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node parent = root.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node parent = root.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node gParent = parent.getParent (  ) ;Node parent = root.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node parent = root.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node ggParent = gParent.getParent (  ) ;Node parent = root.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;Node parent = root.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node symbol = getProp.getNext (  ) ;Node parent = root.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node obj = symbol.getNext (  ) ;Node parent = root.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^Node parent = parent.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P14_Delete_Statement]^^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P6_Replace_Expression]^if  ( isAssign(parent) && getFirstChild()) )  {^120^^^^^105^135^if  ( !t.inGlobalScope (  )  )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P8_Replace_Mix]^if  ( t.inGlobalScope (  )  )  {^120^^^^^105^135^if  ( !t.inGlobalScope (  )  )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P2_Replace_Operator]^if  ( name != null )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P8_Replace_Mix]^if  ( name == true )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P9_Replace_Statement]^if  ( propQName == null )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P9_Replace_Statement]^if  ( assign != null )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P9_Replace_Statement]^if  ( qName == null )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P9_Replace_Statement]^if  ( rhs != null )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P9_Replace_Statement]^if  ( assignedValue == null )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P13_Insert_Block]^if  ( name != null )  {     defineAndAlias ( name ) ;     return ; }^127^^^^^112^142^[Delete]^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^popContainingFunction ( graph.UNKNOWN ) ;^131^^^^^116^146^pushContainingFunction ( graph.UNKNOWN ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P14_Delete_Statement]^^131^^^^^116^146^pushContainingFunction ( graph.UNKNOWN ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P2_Replace_Operator]^if  ( NodeUtil.isAssign ( parent )  || NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^if  ( NodeUtil.isAssign ( root )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P6_Replace_Expression]^if  ( NodeUtil.isAssign ( parent )  ) {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P6_Replace_Expression]^if  (  NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^if  ( NodeUtil.isString ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent .getLastChild (  )   )  )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P8_Replace_Mix]^if  ( NodeUtil.isAssign ( ggParent )  && NodeUtil .getPrototypePropertyName ( ggParent )   )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, ggParent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, parent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition (  name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t,  type, root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name,  root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type,  parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root,  gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent,  root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( name, t, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, gParent, type, root, parent, name, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, type, name, root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, parent, root, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, gParent, parent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, gParent, parent, root, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P8_Replace_Mix]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, root, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P14_Delete_Statement]^^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root, ggParent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root, parent, root, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition (  name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t,  type, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name,  root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type,  parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root,  gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root, parent,  root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( type, name, t, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, gParent, type, root, parent, name, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, root, type, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, gParent, parent, root, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root, gParent, parent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, gParent, root, parent, type, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P14_Delete_Statement]^^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^150^^^^^142^151^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P14_Delete_Statement]^^150^^^^^142^151^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^150^^^^^142^151^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, root, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition (  parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type,  gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) ,  parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent,  ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( type, parent.getFirstChild (  ) , t, parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, ggParent.getFirstChild (  ) , type, parent, gParent, parent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, gParent.getFirstChild (  ) , type, parent, parent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^pushContainingFunction ( recordClassConstructorOrInterface ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P14_Delete_Statement]^^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition (  parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type,  gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) ,  parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent,  ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( parent, t.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, gParent.getFirstChild (  ) , type, parent, parent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, type.getFirstChild (  ) , parent, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, ggParent, gParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^recordClassConstructorOrInterface ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^recordPrototypePropDefinition ( t, parent .getLastChild (  )  , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P8_Replace_Mix]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, root, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P14_Delete_Statement]^^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P1_Replace_Type]^char name = NodeUtil.getFunctionName ( root, parent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^String name = NodeUtil.getFunctionName ( root, root ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^String name = NodeUtil.getFunctionName (  parent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^String name = NodeUtil.getFunctionName ( root ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^String name = NodeUtil.getFunctionName ( parent, root ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P8_Replace_Mix]^String name = NodeUtil.getFunctionName ( parent, parent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^String qName = n.getQualifiedName (  ) ;String name = NodeUtil.getFunctionName ( root, parent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^String name = n.getQualifiedName (  ) ;String name = NodeUtil.getFunctionName ( root, parent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^String qName = obj.getQualifiedName (  ) ;String name = NodeUtil.getFunctionName ( root, parent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^JSType type = getType ( parent ) ;^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^JSType type = pushContainingFunction ( root ) ;^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^JSType boxedType = instanceType.autoboxesTo (  ) ;JSType type = getType ( root ) ;^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^JSType type = getType ( n.getFirstChild (  )  ) ;JSType type = getType ( root ) ;^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^JSType instanceType = getType ( instance ) ;JSType type = getType ( root ) ;^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^Node gParent = root.getParent (  ) ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node gParent = parent.getParent (  ) ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node gParent = parent.getParent (  ) ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node ggParent = gParent.getParent (  ) ;Node gParent = parent.getParent (  ) ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node parent = root.getParent (  ) ;Node gParent = parent.getParent (  ) ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node symbol = getProp.getNext (  ) ;Node gParent = parent.getParent (  ) ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node obj = symbol.getNext (  ) ;Node gParent = parent.getParent (  ) ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P8_Replace_Mix]^Node ggParent = root.getParent (  ) ;^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node ggParent = gParent.getParent (  ) ;^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node gParent = parent.getParent (  ) ;Node ggParent = gParent.getParent (  ) ;^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node parent = root.getParent (  ) ;Node ggParent = gParent.getParent (  ) ;^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node symbol = getProp.getNext (  ) ;Node ggParent = gParent.getParent (  ) ;^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Node obj = symbol.getNext (  ) ;Node ggParent = gParent.getParent (  ) ;^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^String name = NodeUtil.getFunctionName ( ggParent, parent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^String name = NodeUtil.getFunctionName ( root, ggParent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P14_Delete_Statement]^^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P14_Delete_Statement]^^131^132^^^^116^146^pushContainingFunction ( graph.UNKNOWN ) ; return;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P14_Delete_Statement]^^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^name.setType ( getType ( n )  ) ;JSType type = getType ( root ) ;^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^symbol.setType ( getType ( rhs )  ) ;JSType type = getType ( root ) ;^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^Node gParent = parent .getNext (  )  ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P14_Delete_Statement]^^140^141^^^^125^155^Node gParent = parent.getParent (  ) ; Node ggParent = gParent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^Node ggParent = gParent .getNext (  )  ;^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P14_Delete_Statement]^^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunction ( parent )   && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^142^^^^^127^157^[Delete]^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^142^^^^^127^157^[Delete]^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^142^^^^^127^157^[Delete]^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^142^^^^^127^157^[Delete]^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^142^^^^^127^157^[Delete]^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^142^^^^^127^157^[Delete]^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^NodeUtil.isPrototypeProperty ( root.getFirstChild (  )  )  )  {^143^^^^^128^158^NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^143^^^^^128^158^[Delete]^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^143^^^^^128^158^[Delete]^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^143^^^^^128^158^[Delete]^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^143^^^^^128^158^[Delete]^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^143^^^^^128^158^[Delete]^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^NodeUtil.isPrototypeProperty ( parent .getLastChild (  )   )  )  {^143^^^^^128^158^NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, root, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition (  parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type,  gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) ,  parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent,  ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( parent, t.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, ggParent.getFirstChild (  ) , type, parent, gParent, parent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, type.getFirstChild (  ) , parent, parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, gParent.getFirstChild (  ) , type, parent, parent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, ggParent, gParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^pushContainingFunction ( recordClassConstructorOrInterface ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent .getLastChild (  )  , type, parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P14_Delete_Statement]^^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, root, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition (  parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type,  gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) ,  parent, gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent,  ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( parent, t.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , ggParent, parent, gParent, type )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( gParent, parent.getFirstChild (  ) , type, parent, t, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, ggParent.getFirstChild (  ) , type, parent, gParent, parent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^recordClassConstructorOrInterface ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^recordPrototypePropDefinition ( t, parent .getLastChild (  )  , type, parent, gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P14_Delete_Statement]^^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, root, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, root, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition (  name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t,  type, root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name,  root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type,  parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root,  gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent,  root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( gParent, name, type, root, parent, t, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, parent, type, root, name, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( type, name, t, root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, gParent, parent, root, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, parent, root, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P14_Delete_Statement]^^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root, ggParent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root, parent, root, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition (  name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t,  type, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name,  root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type,  parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root,  gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root, parent,  root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( parent, name, type, root, t, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, root, type, name, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, type, name, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, gParent, parent, root, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, parent, root, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root .getFirstChild (  )   )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P14_Delete_Statement]^^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^150^^^^^135^165^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P14_Delete_Statement]^^150^^^^^135^165^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P11_Insert_Donor_Statement]^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^150^^^^^135^165^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P8_Replace_Mix]^if  ( name == false )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^if  ( NodeUtil.isAssign ( ggParent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunction ( gParent )   && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, ggParent, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, root, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( root, name, type, t, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, gParent, root, parent, type, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root .getFirstChild (  )   )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root, root, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( gParent, name, type, root, parent, t, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, parent, type, root, name, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, parent, root, type, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root .getFirstChild (  )   )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( parent, t.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , ggParent, parent, gParent, type )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, ggParent, gParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( type, parent.getFirstChild (  ) , t, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, ggParent.getFirstChild (  ) , type, parent, gParent, parent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P8_Replace_Mix]^recordPrototypePropDefinition ( t, root .getLastChild (  )  , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P8_Replace_Mix]^JSType type = pushContainingFunction ( parent ) ;^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^if  ( !t .getScope (  )   )  {^120^^^^^105^135^if  ( !t.inGlobalScope (  )  )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^String name = NodeUtil .isFunction ( parent )  ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P8_Replace_Mix]^Node gParent = root .getNext (  )  ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( gParent, parent.getFirstChild (  ) , type, parent, t, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , ggParent, parent, gParent, type )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( ggParent, parent.getFirstChild (  ) , type, parent, gParent, t )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordPrototypePropDefinition ( t, gParent.getFirstChild (  ) , type, parent, parent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, parent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, type, name, root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, parent, root, type, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^pushContainingFunction ( recordStaticNameDefinition ( t, name, root, type, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, ggParent, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root, root, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, type, root, parent, parent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( root, name, type, t, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( name, t, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, name, parent, root, type, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P5_Replace_Variable]^recordStaticNameDefinition ( t, gParent, type, root, parent, name, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P7_Replace_Invocation]^t, name, type, root, parent, gParent, root .getFirstChild (  )   )  ) ;^150^^^^^135^165^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[P8_Replace_Mix]^if  ( t.inGlobalScope (  )  )  {^157^^^^^156^160^if  ( !t.inGlobalScope (  )  )  {^[CLASS] Traversal  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  boolean  isExtern  
[P15_Unwrap_Block]^popContainingFunction();^157^158^159^^^156^160^if  ( !t.inGlobalScope (  )  )  { popContainingFunction (  ) ; }^[CLASS] Traversal  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  boolean  isExtern  
[P16_Remove_Block]^^157^158^159^^^156^160^if  ( !t.inGlobalScope (  )  )  { popContainingFunction (  ) ; }^[CLASS] Traversal  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  boolean  isExtern  
[P7_Replace_Invocation]^getNamedContainingFunction (  ) ;^158^^^^^156^160^popContainingFunction (  ) ;^[CLASS] Traversal  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  boolean  isExtern  
[P14_Delete_Statement]^^158^^^^^156^160^popContainingFunction (  ) ;^[CLASS] Traversal  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  boolean  isExtern  
[P11_Insert_Donor_Statement]^pushContainingFunction ( graph.MAIN ) ;popContainingFunction (  ) ;^158^^^^^156^160^popContainingFunction (  ) ;^[CLASS] Traversal  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  boolean  isExtern  
[P11_Insert_Donor_Statement]^pushContainingFunction ( graph.UNKNOWN ) ;popContainingFunction (  ) ;^158^^^^^156^160^popContainingFunction (  ) ;^[CLASS] Traversal  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  boolean  isExtern  
[P7_Replace_Invocation]^if  ( !t .getScope (  )   )  {^157^^^^^156^160^if  ( !t.inGlobalScope (  )  )  {^[CLASS] Traversal  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  boolean  isExtern  
[P3_Replace_Literal]^return false;^164^^^^^163^165^return true;^[CLASS] Traversal  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] NodeTraversal  t  boolean  isExtern  Node  n  parent  
[P2_Replace_Operator]^while  (  ( param = param.getNext (  )  )  == null )  {^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^while  (  ( parent = param.getNext (  )  )  != null )  {^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^while  (  ( varName = param .getParent (  )   )  != null )  {^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( param )  && NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( varName )  || NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( param )  ) {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P6_Replace_Expression]^if  (  NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isNew ( param )  || NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( param )  || NodeUtil.isNew ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( param )  || NodeUtil .isPrototypeProperty (  )   )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( parent )  ) {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P15_Unwrap_Block]^safeAlias(param);^233^234^235^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  { safeAlias ( param ) ; }^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P16_Remove_Block]^^233^234^235^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  { safeAlias ( param ) ; }^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isFunction ( parent )  )  {     return ; }else     if  ( isAssign ( parent )  )  {         return ;     }^233^^^^^218^248^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;     return  ( v != null )  &&  ( v.isLocal (  )  ) ; }^233^^^^^218^248^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  (  ( isName ( n )  )  ||  ( isGetProp ( n )  )  )  {     String name = n.getQualifiedName (  ) ;     if  ( name != null )  {         defineAndAlias ( name ) ;         return ;     } }^233^^^^^218^248^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^safeAlias ( rhs ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^containsName ( param ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^safeAlias ( varName ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^name.setAliased ( true ) ;safeAlias ( param ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^defineAndAlias ( name ) ;safeAlias ( param ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( lhs ) ;safeAlias ( param ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( cur ) ;safeAlias ( param ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( rhs ) ;safeAlias ( param ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^if  ( NodeUtil.isNew ( varName )  || NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^233^^^^^218^248^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^233^^^^^218^248^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^233^^^^^218^248^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^233^^^^^218^248^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^233^^^^^218^248^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^233^^^^^218^248^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parent )  || NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P2_Replace_Operator]^if  ( NodeUtil.isGetProp ( parent )  && parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P2_Replace_Operator]^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  >= Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isGetProp ( varName )  || parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P6_Replace_Expression]^if  ( NodeUtil.isGetProp ( parent )  ) {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P6_Replace_Expression]^if  (  parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isNew ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  (  (  (  (  ( isName ( lhs )  )  ||  ( isGetProp ( lhs )  )  )  &&  ( containsName ( rhs )  )  )  &&  ( ! ( isFunction ( rhs )  )  )  )  &&  ( ! ( isNew ( rhs )  )  )  )  {     safeAlias ( lhs ) ;     safeAlias ( rhs ) ; }^173^^^^^158^188^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^} else if  ( NodeUtil.isFunction ( varName )  )  {^177^^^^^162^192^} else if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P6_Replace_Expression]^} else {^177^^^^^162^192^} else if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isAssign ( parent )  )  {^177^^^^^162^192^} else if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^} else if  ( NodeUtil .getFunctionName ( param , varName )   )  {^177^^^^^162^192^} else if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  (  ( isName ( param )  )  ||  ( isGetProp ( param )  )  )  {     safeAlias ( param ) ; }^177^^^^^162^192^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^} else if  ( NodeUtil.isAssign ( varName )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P6_Replace_Expression]^} else {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isString ( parent )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^} else if  ( NodeUtil .isFunction ( rhs )   )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^}  if  ( NodeUtil.isAssign ( varName )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P9_Replace_Statement]^} else if  ( NodeUtil.isFunction ( parent )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P9_Replace_Statement]^} else if  ( NodeUtil.isAssign ( n )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P15_Unwrap_Block]^return ;^180^181^182^183^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {  return; }^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P16_Remove_Block]^^180^181^182^183^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {  return; }^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^180^^^^^165^195^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^180^^^^^165^195^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^180^^^^^165^195^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^180^^^^^165^195^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^180^^^^^165^195^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^} else if  ( NodeUtil.isAssign ( rhs )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^} else if  ( NodeUtil.isAssign ( param )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^180^^^^^165^195^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^} else if  ( NodeUtil.isFunction ( param )  )  {^177^^^^^162^192^} else if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^177^^^^^162^192^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^177^^^^^162^192^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^177^^^^^162^192^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^177^^^^^162^192^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^177^^^^^162^192^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^177^^^^^162^192^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^}  if  ( NodeUtil.isFunction ( param )  )  {^177^^^^^162^192^} else if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^if  ( isLocalNameReference ( t, varName )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^if  ( isLocalNameReference (  n )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^if  ( isLocalNameReference ( t )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^if  ( isLocalNameReference ( n, t )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^if  ( isStaticNameReference ( t, n )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P9_Replace_Statement]^if  ( isPrototypeNameReference ( n )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P15_Unwrap_Block]^return ;^185^186^187^188^^170^200^if  ( isLocalNameReference ( t, n )  )  {  return; }^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P16_Remove_Block]^^185^186^187^188^^170^200^if  ( isLocalNameReference ( t, n )  )  {  return; }^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( assignedValue == null )  {     return ; }^185^^^^^170^200^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( propQName == null )  {     return ; }^185^^^^^170^200^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^if  ( isPrototypeNameReference ( varName )  )  {^190^^^^^175^205^if  ( isPrototypeNameReference ( n )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^if  ( containsName ( n )  )  {^190^^^^^175^205^if  ( isPrototypeNameReference ( n )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^if  ( isPrototypeNameReference ( parent )  )  {^190^^^^^175^205^if  ( isPrototypeNameReference ( n )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P9_Replace_Statement]^if  ( isLocalNameReference ( t, n )  )  {^190^^^^^175^205^if  ( isPrototypeNameReference ( n )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {     recordStaticNameUse ( t, n, parent ) ; }else {     recordUnknownUse ( t, n, parent ) ; }^190^^^^^175^205^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^} else if  ( isStaticNameReference ( parent, t.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^} else if  ( isStaticNameReference (  t.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^} else if  ( isStaticNameReference ( n.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P6_Replace_Expression]^} else {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^} else if  ( maybeAliasNamesOnAssign ( n, t.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^} else if  ( isStaticNameReference ( n, t .getScopeRoot (  )   )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^}  if  ( maybeAliasNamesOnAssign ( varName, t.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P15_Unwrap_Block]^recordStaticNameUse(t, n, parent);^192^193^194^195^196^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  { recordStaticNameUse ( t, n, parent ) ; } else { recordUnknownUse ( t, n, parent ) ; }^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P16_Remove_Block]^^192^193^194^195^196^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  { recordStaticNameUse ( t, n, parent ) ; } else { recordUnknownUse ( t, n, parent ) ; }^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isPrototypeNameReference ( n )  )  {     recordPrototypePropUse ( t, n, parent ) ; }else     if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {         recordStaticNameUse ( t, n, parent ) ;     }else {         recordUnknownUse ( t, n, parent ) ;     }^192^^^^^177^207^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t, varName, parent ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t, n, varName ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordUnknownUse (  n, parent ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t,  parent ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t, n ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( parent, n, t ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( n, t, parent ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^recordStaticNameUse ( t, n, parent ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^recordStaticNameUse ( t, varName, parent ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^recordPrototypePropUse ( t, n, parent ) ;recordUnknownUse ( t, n, parent ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^recordStaticNameUse ( t, n, parent ) ;recordUnknownUse ( t, n, parent ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordStaticNameUse ( t, varName, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordStaticNameUse ( t, n, varName ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordStaticNameUse (  n, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordStaticNameUse ( t,  parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordStaticNameUse ( t, n ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordStaticNameUse ( n, t, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordStaticNameUse ( parent, n, t ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^recordUnknownUse ( t, n, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^recordStaticNameUse ( t, rhs, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^recordPrototypePropUse ( t, n, parent ) ;recordStaticNameUse ( t, n, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^recordUnknownUse ( t, n, parent ) ;recordStaticNameUse ( t, n, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^} else if  ( isStaticNameReference ( varName, t.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^} else if  ( isStaticNameReference ( t, n.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^} else if  ( maybeAliasNamesOnAssign ( parent, t.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordStaticNameUse ( t, parent, n ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^recordUnknownUse ( t, n, rhs ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t, varName, parent ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t, n, varName ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordUnknownUse (  n, parent ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t,  parent ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t, n ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( n, t, parent ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t, parent, n ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( parent, n, t ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^recordStaticNameUse ( t, n, parent ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^recordPrototypePropUse ( t, n, parent ) ;recordUnknownUse ( t, n, parent ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^recordStaticNameUse ( t, n, parent ) ;recordUnknownUse ( t, n, parent ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordPrototypePropUse ( t, varName, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordPrototypePropUse (  n, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordPrototypePropUse ( t,  parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordPrototypePropUse ( t, n ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordPrototypePropUse ( n, t, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordPrototypePropUse ( t, parent, n ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^recordStaticNameUse ( t, n, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^recordStaticNameUse ( t, n, rhs ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;recordPrototypePropUse ( t, n, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;recordPrototypePropUse ( t, n, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^recordUnknownUse ( t, n, parent ) ;recordPrototypePropUse ( t, n, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;recordPrototypePropUse ( t, n, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^prototypeProp.setType ( type ) ;recordPrototypePropUse ( t, n, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^recordStaticNameUse ( t, n, parent ) ;recordPrototypePropUse ( t, n, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^} else if  ( isStaticNameReference ( rhs, t.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^}  if  ( isStaticNameReference ( varName, t.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordUnknownUse ( t, parent, n ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isFunction ( param )  )  {^202^^^^^187^217^if  ( NodeUtil.isFunction ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssign ( rhs )  )  {^202^^^^^187^217^if  ( NodeUtil.isFunction ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil .getFunctionName ( n , n )   )  {^202^^^^^187^217^if  ( NodeUtil.isFunction ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P9_Replace_Statement]^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^202^^^^^187^217^if  ( NodeUtil.isFunction ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P9_Replace_Statement]^if  ( !NodeUtil.isString ( symbol )  )  {^202^^^^^187^217^if  ( NodeUtil.isFunction ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P15_Unwrap_Block]^return ;^202^203^204^205^^187^217^if  ( NodeUtil.isFunction ( rhs )  )  {  return; }^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P16_Remove_Block]^^202^203^204^205^^187^217^if  ( NodeUtil.isFunction ( rhs )  )  {  return; }^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^202^^^^^187^217^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^202^^^^^187^217^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^202^^^^^187^217^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^202^^^^^187^217^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^202^^^^^187^217^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( lhs )  && NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( varName )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( varName )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( rhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( lhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( lhs )  ) {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P6_Replace_Expression]^if  (  NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P6_Replace_Expression]^if  ( isName(lhs || isGetProp(lhs)) )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isNew ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil .isNew ( assignedValue )   || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isNew ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.getPrototypePropertyName ( lhs )  )  {^209^^^^^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^if  ( NodeUtil.isPrototypeProperty ( rhs )  )  {^209^^^^^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( rhs )  )  {^209^^^^^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P9_Replace_Statement]^if  ( !NodeUtil.isGetProp ( n )  )  {^209^^^^^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P9_Replace_Statement]^if  ( NodeUtil.isGetProp ( n )  )  {^209^^^^^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P15_Unwrap_Block]^com.google.javascript.jscomp.NameReferenceGraph.Name name = recordPrototypePropDefinition(t, lhs, getType(rhs), n, parent, parent.getParent()); name.setAliased(true);^209^210^211^212^213^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  { Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ; name.setAliased ( true ) ; }^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P16_Remove_Block]^^209^210^211^212^213^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  { Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ; name.setAliased ( true ) ; }^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  (  (  ( isName ( lhs )  )  ||  ( isGetProp ( lhs )  )  )  ||  ( isGetProp ( rhs )  )  )  {     if  ( isPrototypeProperty ( lhs )  )  {         Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;         name.setAliased ( true ) ;     } }^209^^^^^206^214^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, varName, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( varName ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name parentame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, varName, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition (  lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t,  getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) ,  parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n,  parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( parent, lhs, getType ( rhs ) , n, t, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name lhsame = recordPrototypePropDefinition ( t, n, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( rhs, lhs, getType ( t ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name rhsame = recordPrototypePropDefinition ( t, lhs, getType ( n ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name parentame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, n, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^Name name = recordClassConstructorOrInterface ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^Name name = recordPrototypePropDefinition ( t, lhs, pushContainingFunction ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent .getNext (  )   ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isPrototypeProperty ( lhs )  )  {     Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;     name.setAliased ( true ) ; }^210^^^^^206^214^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, rhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name rhsame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, rhs, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, parent, getType ( rhs ) , n, lhs, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, rhs, getType ( lhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^Name varNameame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^t, lhs, getType ( param ) , n, parent, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^t, lhs, pushContainingFunction ( rhs ) , n, parent, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^t, lhs, pushContainingFunction ( param ) , n, parent, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^211^212^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ; name.setAliased ( true ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^t, lhs, getType ( rhs ) , n, varName, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^t, lhs, getType ( rhs ) , n, parent, parent .getNext (  )   ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P3_Replace_Literal]^name.setAliased ( false ) ;^212^^^^^206^214^name.setAliased ( true ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^212^^^^^206^214^name.setAliased ( true ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^ref.setUnknown ( true ) ;name.setAliased ( true ) ;^212^^^^^206^214^name.setAliased ( true ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( lhs ) ;name.setAliased ( true ) ;^212^^^^^206^214^name.setAliased ( true ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( cur ) ;name.setAliased ( true ) ;^212^^^^^206^214^name.setAliased ( true ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( param ) ;name.setAliased ( true ) ;^212^^^^^206^214^name.setAliased ( true ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( rhs ) ;name.setAliased ( true ) ;^212^^^^^206^214^name.setAliased ( true ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, param, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name tame = recordPrototypePropDefinition ( n, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^Name varNameame = recordPrototypePropDefinition ( t, lhs, pushContainingFunction ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isPrototypeProperty ( varName )  )  {^209^^^^^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^if  ( NodeUtil.isPrototypeProperty ( parent )  )  {^209^^^^^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^209^^^^^206^214^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^209^^^^^206^214^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^209^^^^^206^214^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^209^^^^^206^214^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^209^^^^^206^214^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^209^^^^^206^214^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( lhs, t, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^t, lhs, getType ( varName ) , n, parent, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.getPrototypePropertyName ( lhs )  )  {^209^^^^^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil .getPrototypePropertyName ( n )   )  {^209^^^^^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^if  ( NodeUtil.isPrototypeProperty ( rhs )  )  {^209^^^^^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( rhs )  )  {^209^^^^^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P9_Replace_Statement]^if  ( !NodeUtil.isGetProp ( n )  )  {^209^^^^^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P9_Replace_Statement]^if  ( NodeUtil.isGetProp ( n )  )  {^209^^^^^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P15_Unwrap_Block]^com.google.javascript.jscomp.NameReferenceGraph.Name name = recordPrototypePropDefinition(t, lhs, getType(rhs), n, parent, parent.getParent()); name.setAliased(true);^209^210^211^212^213^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  { Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ; name.setAliased ( true ) ; }^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P16_Remove_Block]^^209^210^211^212^213^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  { Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ; name.setAliased ( true ) ; }^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  (  (  ( isName ( lhs )  )  ||  ( isGetProp ( lhs )  )  )  ||  ( isGetProp ( rhs )  )  )  {     if  ( isPrototypeProperty ( lhs )  )  {         Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;         name.setAliased ( true ) ;     } }^209^^^^^194^224^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( parent ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name varNameame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, rhs, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition (  lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t,  getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) ,  parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n,  parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( lhs, t, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, rhs, getType ( lhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( parent ) , n, rhs, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name rhsame = recordPrototypePropDefinition ( t, lhs, getType ( n ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^Name name = recordClassConstructorOrInterface ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^Name name = recordPrototypePropDefinition ( t, lhs, pushContainingFunction ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^Name name = recordPrototypePropDefinition ( t, lhs, pushContainingFunction ( varName ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isPrototypeProperty ( lhs )  )  {     Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;     name.setAliased ( true ) ; }^210^^^^^195^225^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, varName, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( rhs, lhs, getType ( t ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, parent, getType ( rhs ) , n, lhs, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent .getNext (  )   ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^t, lhs, getType ( parent ) , n, parent, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^t, lhs, pushContainingFunction ( rhs ) , n, parent, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^t, lhs, getType ( param ) , n, parent, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^211^212^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ; name.setAliased ( true ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^t, lhs, getType ( rhs ) , n, varName, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^t, lhs, getType ( rhs ) , n, parent, parent .getNext (  )   ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^t, lhs, getType ( rhs ) , n, rhs, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P3_Replace_Literal]^name.setAliased ( false ) ;^212^^^^^197^227^name.setAliased ( true ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^212^^^^^197^227^name.setAliased ( true ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^ref.setUnknown ( true ) ;name.setAliased ( true ) ;^212^^^^^197^227^name.setAliased ( true ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( lhs ) ;name.setAliased ( true ) ;^212^^^^^197^227^name.setAliased ( true ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( cur ) ;name.setAliased ( true ) ;^212^^^^^197^227^name.setAliased ( true ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( param ) ;name.setAliased ( true ) ;^212^^^^^197^227^name.setAliased ( true ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( rhs ) ;name.setAliased ( true ) ;^212^^^^^197^227^name.setAliased ( true ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P2_Replace_Operator]^if  ( assignedValue != null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^if  ( varName == null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^if  ( parent == this )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P9_Replace_Statement]^if  ( name == null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P9_Replace_Statement]^if  ( propQName == null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P9_Replace_Statement]^if  ( assign != null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P9_Replace_Statement]^if  ( qName == null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P9_Replace_Statement]^if  ( name != null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P15_Unwrap_Block]^return ;^222^223^224^^^207^237^if  ( assignedValue == null )  { return; }^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P16_Remove_Block]^^222^223^224^^^207^237^if  ( assignedValue == null )  { return; }^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isLocalNameReference ( t, n )  )  {     return ; }^222^^^^^207^237^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( propQName == null )  {     return ; }^222^^^^^207^237^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( qName == null )  {     return false; }^222^^^^^207^237^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^safeAlias ( parent ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^while  (  ( rhs = param.getNext (  )  )  != null )  {^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^while  (  ( param = param .getParent (  )   )  != null )  {^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^while  (  ( param =  parent.getNext (  )  )  !^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Node lhs = rhs.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^Node lhs = varName.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node getProp = call.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node assignedValue = varName.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^JSType type = getType ( n.getFirstChild (  )  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Node rhs = varName.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^Node rhs = n .getFirstChild (  )  ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^Node rhs = parent .getFirstChild (  )  ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node getProp = call.getFirstChild (  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node parent = root.getParent (  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node assignedValue = varName.getFirstChild (  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( varName ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name parentame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name lhsame = recordPrototypePropDefinition ( t, n, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, varName, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Node varName = rhs.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node getProp = call.getFirstChild (  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node parent = root.getParent (  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node assignedValue = varName.getFirstChild (  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^JSType type = getType ( n.getFirstChild (  )  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^Node assignedValue = varName .getLastChild (  )  ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;Node assignedValue = varName.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node assignedValue = varName.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node getProp = call.getFirstChild (  ) ;Node assignedValue = varName.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node assignedValue = varName.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node assignedValue = varName.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;Node assignedValue = varName.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;Node assignedValue = varName.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Node param = rhs.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^Node param = varName .getLastChild (  )  ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node getProp = call.getFirstChild (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node gParent = parent.getParent (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node parent = root.getParent (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node assignedValue = varName.getFirstChild (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^JSType type = getType ( n.getFirstChild (  )  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^switch  ( rhs.getType (  )  )  {^170^^^^^155^185^switch  ( n.getType (  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isGetProp ( param )  || parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil .isPrototypeProperty (  )   || parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^if  ( NodeUtil.isNew ( param )  || parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^173^^^^^158^188^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^173^^^^^158^188^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^173^^^^^158^188^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^173^^^^^158^188^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^173^^^^^158^188^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^173^^^^^158^188^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^parent .getNamedContainingFunction (  )   == Token.REF_SPECIAL )  {^174^^^^^159^189^parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^174^175^176^^^159^189^parent.getType (  )  == Token.REF_SPECIAL )  {  return;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^} else if  ( NodeUtil .getFunctionName ( n , varName )   )  {^177^^^^^162^192^} else if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^if  ( isLocalNameReference ( t, rhs )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^if  ( isLocalNameReference ( t, parent )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isLocalNameReference ( t, n )  )  {     return ; }^185^^^^^170^200^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^if  ( isPrototypeNameReference ( rhs )  )  {^190^^^^^175^205^if  ( isPrototypeNameReference ( n )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^if  ( containsName ( rhs )  )  {^190^^^^^175^205^if  ( isPrototypeNameReference ( n )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordPrototypePropUse ( t, rhs, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordPrototypePropUse ( t, n, varName ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordPrototypePropUse ( parent, n, t ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^recordStaticNameUse ( t, n, rhs ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^recordStaticNameUse ( t, parent, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^Node lhs = n .getLastChild (  )  ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;Node lhs = n.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Node rhs = rhs.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^Node rhs = parent.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;Node rhs = n.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^202^^^^^187^217^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parent )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^206^^^^^191^221^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^206^^^^^191^221^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^206^^^^^191^221^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^206^^^^^191^221^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^206^^^^^191^221^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^206^^^^^191^221^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^NodeUtil.isGetProp ( parent )  || NodeUtil.isGetProp ( rhs )  )  {^207^208^^^^192^222^NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^NodeUtil.isNew ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^207^208^^^^192^222^NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^NodeUtil.isGetProp ( varName )  || NodeUtil.isGetProp ( rhs )  )  {^207^208^^^^192^222^NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^207^^^^^192^222^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^207^^^^^192^222^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^207^^^^^192^222^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^207^^^^^192^222^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^207^^^^^192^222^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^207^^^^^192^222^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^NodeUtil.isGetProp ( varName )  )  {^208^^^^^193^223^NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^NodeUtil.isNew ( rhs )  )  {^208^^^^^193^223^NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^NodeUtil.isGetProp ( param )  )  {^208^^^^^193^223^NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isPrototypeProperty ( varName )  )  {^209^^^^^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^209^^^^^194^224^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^209^^^^^194^224^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^209^^^^^194^224^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^209^^^^^194^224^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^209^^^^^194^224^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^209^^^^^194^224^[Delete]^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name tame = recordPrototypePropDefinition ( n, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Name parentame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, n, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^t, lhs, getType ( varName ) , n, parent, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^t, lhs, getType ( rhs ) , n, param, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^maybeAliasNamesOnAssign ( parent, rhs ) ;^215^^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^maybeAliasNamesOnAssign (  rhs ) ;^215^^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^maybeAliasNamesOnAssign ( lhs ) ;^215^^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^maybeAliasNamesOnAssign ( rhs, lhs ) ;^215^^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^isStaticNameReference ( lhs, rhs ) ;^215^^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^maybeAliasNamesOnAssign ( lhs, varName ) ;^215^^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^215^216^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ; break;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^maybeAliasNamesOnAssign ( varName, assignedValue ) ;maybeAliasNamesOnAssign ( lhs, rhs ) ;^215^^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Node varName = parent.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^220^221^^^^205^235^Node varName = n.getFirstChild (  ) ; Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;Node varName = n.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Node assignedValue = rhs.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;Node assignedValue = varName.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^maybeAliasNamesOnAssign ( rhs, assignedValue ) ;^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^maybeAliasNamesOnAssign ( varName, rhs ) ;^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^maybeAliasNamesOnAssign (  assignedValue ) ;^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^maybeAliasNamesOnAssign ( varName ) ;^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^maybeAliasNamesOnAssign ( assignedValue, varName ) ;^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^isStaticNameReference ( varName, assignedValue ) ;^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^225^226^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ; break;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^maybeAliasNamesOnAssign ( lhs, rhs ) ;maybeAliasNamesOnAssign ( varName, assignedValue ) ;^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^Node param = varName.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^Node param = n .getLastChild (  )  ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;Node param = n.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^232^233^234^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  { if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  { safeAlias ( param ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( rhs )  || NodeUtil.isNew ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P8_Replace_Mix]^containsName ( rhs ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P5_Replace_Variable]^maybeRecordExport ( varName ) ;^238^^^^^223^253^maybeRecordExport ( n ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P7_Replace_Invocation]^safeAlias ( n ) ;^238^^^^^223^253^maybeRecordExport ( n ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P14_Delete_Statement]^^238^^^^^223^253^maybeRecordExport ( n ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[P2_Replace_Operator]^return NodeUtil.containsType ( n, Token.NAME )  && NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^244^245^246^^^243^247^return NodeUtil.containsType ( n, Token.NAME )  || NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  
[P7_Replace_Invocation]^return NodeUtil.isName ( n, Token.NAME )  || NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^244^245^246^^^243^247^return NodeUtil.containsType ( n, Token.NAME )  || NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  
[P7_Replace_Invocation]^return NodeUtil .isName ( n )   || NodeUtil^244^245^246^^^243^247^return NodeUtil.containsType ( n, Token.NAME )  || NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  
[P14_Delete_Statement]^^244^245^246^^^243^247^return NodeUtil.containsType ( n, Token.NAME )  || NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  
[P7_Replace_Invocation]^NodeUtil.isName ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^245^246^^^^243^247^NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  
[P8_Replace_Mix]^NodeUtil .isName ( n )   || NodeUtil^245^246^^^^243^247^NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  
[P14_Delete_Statement]^^245^246^^^^243^247^NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  
[P7_Replace_Invocation]^NodeUtil.isName ( n, Token.GETPROP ) ;^246^^^^^243^247^NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  
[P7_Replace_Invocation]^NodeUtil .isName ( n )  ;^246^^^^^243^247^NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  
[P14_Delete_Statement]^^246^^^^^243^247^NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( n )  && NodeUtil.isGetProp ( n )  )  {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( cur )  || NodeUtil.isGetProp ( n )  )  {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( n )  ) {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P6_Replace_Expression]^if  (  NodeUtil.isGetProp ( n )  )  {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P6_Replace_Expression]^if  ( name != null )  {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isNew ( n )  || NodeUtil.isGetProp ( n )  )  {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  || NodeUtil.isNew ( n )  )  {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  (  ( isName ( param )  )  ||  ( isGetProp ( param )  )  )  {     safeAlias ( param ) ; }^256^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;     return  ( v != null )  &&  ( v.isLocal (  )  ) ; }^256^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P2_Replace_Operator]^if  ( name == null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P8_Replace_Mix]^if  ( name != this )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P9_Replace_Statement]^if  ( propQName == null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P9_Replace_Statement]^if  ( assign != null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P9_Replace_Statement]^if  ( qName == null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P9_Replace_Statement]^if  ( rhs != null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P9_Replace_Statement]^if  ( constructor != null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P9_Replace_Statement]^if  ( assignedValue == null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P15_Unwrap_Block]^defineAndAlias(name); return ;^259^260^261^262^^255^280^if  ( name != null )  { defineAndAlias ( name ) ; return; }^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P16_Remove_Block]^^259^260^261^262^^255^280^if  ( name != null )  { defineAndAlias ( name ) ; return; }^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  (  ( qName == null )  ||  (  ( obj.getNext (  )  )  != null )  )  {     return ; }^259^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( name == null )  {     pushContainingFunction ( graph.UNKNOWN ) ;     return ; }^259^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P7_Replace_Invocation]^safeAlias ( name ) ;^260^^^^^255^280^defineAndAlias ( name ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P14_Delete_Statement]^^260^^^^^255^280^defineAndAlias ( name ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^safeAlias ( lhs ) ;defineAndAlias ( name ) ;^260^^^^^255^280^defineAndAlias ( name ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^safeAlias ( cur ) ;defineAndAlias ( name ) ;^260^^^^^255^280^defineAndAlias ( name ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^safeAlias ( param ) ;defineAndAlias ( name ) ;^260^^^^^255^280^defineAndAlias ( name ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^safeAlias ( rhs ) ;defineAndAlias ( name ) ;^260^^^^^255^280^defineAndAlias ( name ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P1_Replace_Type]^char name = n.getQualifiedName (  ) ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P5_Replace_Variable]^String curame = n.getQualifiedName (  ) ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P7_Replace_Invocation]^String name = n .getParent (  )  ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^String propQName = getProp.getQualifiedName (  ) ;String name = n.getQualifiedName (  ) ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^String qName = n.getQualifiedName (  ) ;String name = n.getQualifiedName (  ) ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^String propName = n.getLastChild (  ) .getString (  ) ;String name = n.getQualifiedName (  ) ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^String qName = obj.getQualifiedName (  ) ;String name = n.getQualifiedName (  ) ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^String name = NodeUtil.getFunctionName ( root, parent ) ;String name = n.getQualifiedName (  ) ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P8_Replace_Mix]^String curame = n .getParent (  )  ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P14_Delete_Statement]^^257^258^259^260^261^255^280^String name = n.getQualifiedName (  ) ;  if  ( name != null )  { defineAndAlias ( name ) ; return; }^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P14_Delete_Statement]^^260^261^^^^255^280^defineAndAlias ( name ) ; return;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P8_Replace_Mix]^if  ( name != false )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil .isNew ( cur )   || NodeUtil.isGetProp ( n )  )  {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^256^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^256^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^256^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^256^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^256^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^256^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isNew ( n )  )  {^265^^^^^255^280^if  ( NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P9_Replace_Statement]^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^265^^^^^255^280^if  ( NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P9_Replace_Statement]^if  ( !NodeUtil.isString ( symbol )  )  {^265^^^^^255^280^if  ( NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( rhs )  )  {^265^^^^^255^280^if  ( NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P6_Replace_Expression]^} else {^268^^^^^255^280^} else if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isString ( n )  )  {^268^^^^^255^280^} else if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P9_Replace_Statement]^} else if  ( NodeUtil.isFunction ( parent )  )  {^268^^^^^255^280^} else if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P9_Replace_Statement]^} else if  ( NodeUtil.isAssign ( parent )  )  {^268^^^^^255^280^} else if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( n.hasChildren (  )  )  {     Node cur = n.getFirstChild (  ) ;     do {         safeAlias ( cur ) ;     } while  (  ( cur = cur.getNext (  )  )  != null  ) ; }else { }^268^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( isGetProp ( n )  )  {     defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ; }else     if  ( isAssign ( n )  )  {         safeAlias ( n.getFirstChild (  )  ) ;     }else         if  ( n.hasChildren (  )  )  {             Node cur = n.getFirstChild (  ) ;             do {                 safeAlias ( cur ) ;             } while  (  ( cur = cur.getNext (  )  )  != null  ) ;         }else {         }^268^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P6_Replace_Expression]^} else {^272^^^^^255^280^} else if  ( n.hasChildren (  )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( isAssign ( n )  )  {     safeAlias ( n.getFirstChild (  )  ) ; }else     if  ( n.hasChildren (  )  )  {         Node cur = n.getFirstChild (  ) ;         do {             safeAlias ( cur ) ;         } while  (  ( cur = cur.getNext (  )  )  != null  ) ;     }else {     }^272^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P5_Replace_Variable]^} while  (  ( n = cur.getNext (  )  )  != null ) ;^276^^^^^255^280^} while  (  ( cur = cur.getNext (  )  )  != null ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P7_Replace_Invocation]^} while  (  ( cur = cur .getParent (  )   )  != null ) ;^276^^^^^255^280^} while  (  ( cur = cur.getNext (  )  )  != null ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P8_Replace_Mix]^} while  (  ( cur =  n.getNext (  )  )  !^276^^^^^255^280^} while  (  ( cur = cur.getNext (  )  )  != null ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P12_Insert_Condition]^if  ( qName == null || obj.getNext (  )  != null )  { } while  (  ( cur = cur.getNext (  )  )  != null ) ; }^276^^^^^255^280^} while  (  ( cur = cur.getNext (  )  )  != null ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P7_Replace_Invocation]^Node cur = n .getLastChild (  )  ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^Node getProp = call.getFirstChild (  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^Node assignedValue = varName.getFirstChild (  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^JSType type = getType ( n.getFirstChild (  )  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P5_Replace_Variable]^Node cur = cur.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P14_Delete_Statement]^^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;Node cur = n.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P14_Delete_Statement]^^276^^^^^255^280^} while  (  ( cur = cur.getNext (  )  )  != null ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P5_Replace_Variable]^safeAlias ( n ) ;^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P7_Replace_Invocation]^containsName ( cur ) ;^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P14_Delete_Statement]^^275^276^^^^255^280^safeAlias ( cur ) ; } while  (  ( cur = cur.getNext (  )  )  != null ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^name.setAliased ( true ) ;safeAlias ( cur ) ;^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^defineAndAlias ( name ) ;safeAlias ( cur ) ;^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^safeAlias ( lhs ) ;safeAlias ( cur ) ;^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^safeAlias ( param ) ;safeAlias ( cur ) ;^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^safeAlias ( rhs ) ;safeAlias ( cur ) ;^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P8_Replace_Mix]^} while  (  ( cur =  null.getNext (  )  )  !^276^^^^^255^280^} while  (  ( cur = cur.getNext (  )  )  != null ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P5_Replace_Variable]^} else if  ( cur.hasChildren (  )  )  {^272^^^^^255^280^} else if  ( n.hasChildren (  )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P7_Replace_Invocation]^} else if  ( n .getLastChild (  )   )  {^272^^^^^255^280^} else if  ( n.hasChildren (  )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P5_Replace_Variable]^safeAlias ( cur.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P7_Replace_Invocation]^containsName ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P7_Replace_Invocation]^safeAlias ( n .getLastChild (  )   ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P8_Replace_Mix]^containsName ( cur.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P14_Delete_Statement]^^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^Node getProp = call.getFirstChild (  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^Node assignedValue = varName.getFirstChild (  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^JSType type = getType ( n.getFirstChild (  )  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;safeAlias ( n.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P8_Replace_Mix]^safeAlias ( cur .getLastChild (  )   ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P8_Replace_Mix]^}  if  ( n .getLastChild (  )   )  {^272^^^^^255^280^} else if  ( n.hasChildren (  )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P14_Delete_Statement]^^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P5_Replace_Variable]^} else if  ( NodeUtil.isAssign ( cur )  )  {^268^^^^^255^280^} else if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P7_Replace_Invocation]^} else if  ( NodeUtil .isFunction ( cur )   )  {^268^^^^^255^280^} else if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^268^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^268^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^268^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^268^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^268^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^268^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P5_Replace_Variable]^defineAndAlias ( cur.getLastChild (  ) .getString (  )  ) ;^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P7_Replace_Invocation]^safeAlias ( n.getLastChild (  ) .getString (  )  ) ;^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P7_Replace_Invocation]^defineAndAlias ( n.getLastChild (  ) .hasOwnProperty (  )  ) ;^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P8_Replace_Mix]^safeAlias ( cur.getLastChild (  ) .getString (  )  ) ;^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P14_Delete_Statement]^^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P11_Insert_Donor_Statement]^String propName = n.getLastChild (  ) .getString (  ) ;defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P7_Replace_Invocation]^defineAndAlias ( n.getLastChild (  )  .getVar (  )   ) ;^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P8_Replace_Mix]^defineAndAlias ( cur .getFirstChild (  )  .getString (  )  ) ;^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P7_Replace_Invocation]^defineAndAlias ( n .getFirstChild (  )  .getString (  )  ) ;^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P8_Replace_Mix]^} while  (  ( n = cur .getParent (  )   )  != null ) ;^276^^^^^255^280^} while  (  ( cur = cur.getNext (  )  )  != null ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P8_Replace_Mix]^containsName ( n ) ;^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P8_Replace_Mix]^if  ( NodeUtil.isGetProp ( cur )  )  {^265^^^^^255^280^if  ( NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^265^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^265^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^265^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^265^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^265^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^265^^^^^255^280^[Delete]^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P8_Replace_Mix]^defineAndAlias ( cur.getLastChild (  ) .hasOwnProperty (  )  ) ;^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[P2_Replace_Operator]^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  || containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P2_Replace_Operator]^if  (  ( NodeUtil.isName ( lhs )  && NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P5_Replace_Variable]^if  (  ( NodeUtil.isName ( rhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( lhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P6_Replace_Expression]^if  (  ( NodeUtil.isName ( lhs )  ) {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P6_Replace_Expression]^if  (  NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P6_Replace_Expression]^if  ( isName(lhs) || isGetProp(lhs)) && containsName(rhs) && isFunction(rhs))) )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P6_Replace_Expression]^if  ( isName(lhs) || isGetProp(lhs) && containsName(rhs)) )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P6_Replace_Expression]^if  ( isName(lhs || isGetProp(lhs)) )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isNew ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isNew ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && safeAlias ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isAssign ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isName ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P8_Replace_Mix]^if  (  ( NodeUtil .isNew ( rhs )   || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P13_Insert_Block]^if  (  ( isGetProp ( parent )  )  ||  (  ( parent.getType (  )  )  ==  ( REF_SPECIAL )  )  )  {     return ; }else     if  ( isFunction ( parent )  )  {         return ;     }else         if  ( isAssign ( parent )  )  {             return ;         }^283^^^^^282^290^[Delete]^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P13_Insert_Block]^if  (  (  ( isName ( lhs )  )  ||  ( isGetProp ( lhs )  )  )  ||  ( isGetProp ( rhs )  )  )  {     if  ( isPrototypeProperty ( lhs )  )  {         Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;         name.setAliased ( true ) ;     } }^283^^^^^282^290^[Delete]^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P7_Replace_Invocation]^containsName ( lhs ) ;^287^^^^^282^290^safeAlias ( lhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P14_Delete_Statement]^^287^288^^^^282^290^safeAlias ( lhs ) ; safeAlias ( rhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^name.setAliased ( true ) ;safeAlias ( lhs ) ;^287^^^^^282^290^safeAlias ( lhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^defineAndAlias ( name ) ;safeAlias ( lhs ) ;^287^^^^^282^290^safeAlias ( lhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^safeAlias ( cur ) ;safeAlias ( lhs ) ;^287^^^^^282^290^safeAlias ( lhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^safeAlias ( param ) ;safeAlias ( lhs ) ;^287^^^^^282^290^safeAlias ( lhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^safeAlias ( rhs ) ;safeAlias ( lhs ) ;^287^^^^^282^290^safeAlias ( lhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P5_Replace_Variable]^safeAlias ( lhs ) ;^288^^^^^282^290^safeAlias ( rhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P7_Replace_Invocation]^containsName ( rhs ) ;^288^^^^^282^290^safeAlias ( rhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P8_Replace_Mix]^containsName ( lhs ) ;^288^^^^^282^290^safeAlias ( rhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P14_Delete_Statement]^^288^^^^^282^290^safeAlias ( rhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^name.setAliased ( true ) ;safeAlias ( rhs ) ;^288^^^^^282^290^safeAlias ( rhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^defineAndAlias ( name ) ;safeAlias ( rhs ) ;^288^^^^^282^290^safeAlias ( rhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^safeAlias ( lhs ) ;safeAlias ( rhs ) ;^288^^^^^282^290^safeAlias ( rhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^safeAlias ( cur ) ;safeAlias ( rhs ) ;^288^^^^^282^290^safeAlias ( rhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P11_Insert_Donor_Statement]^safeAlias ( param ) ;safeAlias ( rhs ) ;^288^^^^^282^290^safeAlias ( rhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P5_Replace_Variable]^if  (  ( NodeUtil.isName ( rhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^283^^^^^282^290^[Delete]^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^283^^^^^282^290^[Delete]^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^283^^^^^282^290^[Delete]^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^283^^^^^282^290^[Delete]^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^283^^^^^282^290^[Delete]^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^283^^^^^282^290^[Delete]^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil .isPrototypeProperty (  )   )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P8_Replace_Mix]^if  (  ( NodeUtil.isName ( rhs )  || NodeUtil .isPrototypeProperty (  )   )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P5_Replace_Variable]^containsName ( lhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^284^285^286^^^282^290^containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P7_Replace_Invocation]^safeAlias ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^284^285^286^^^282^290^containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P5_Replace_Variable]^!NodeUtil.isFunction ( lhs )  && !NodeUtil.isNew ( rhs )  )  {^285^286^^^^282^290^!NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P7_Replace_Invocation]^!NodeUtil.isAssign ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^285^286^^^^282^290^!NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P7_Replace_Invocation]^!NodeUtil .getFunctionName ( rhs , lhs )   && !NodeUtil.isNew ( rhs )  )  {^285^286^^^^282^290^!NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P8_Replace_Mix]^!NodeUtil.isAssign ( lhs )  && !NodeUtil.isNew ( rhs )  )  {^285^286^^^^282^290^!NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P14_Delete_Statement]^^285^286^287^^^282^290^!NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  { safeAlias ( lhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P5_Replace_Variable]^!NodeUtil.isNew ( lhs )  )  {^286^^^^^282^290^!NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P7_Replace_Invocation]^!NodeUtil.isName ( rhs )  )  {^286^^^^^282^290^!NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P14_Delete_Statement]^^286^287^^^^282^290^!NodeUtil.isNew ( rhs )  )  { safeAlias ( lhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P5_Replace_Variable]^safeAlias ( rhs ) ;^287^^^^^282^290^safeAlias ( lhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P14_Delete_Statement]^^287^^^^^282^290^safeAlias ( lhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( false ) ;^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] boolean  isExtern  String  name  
[P5_Replace_Variable]^graph.defineNameIfNotExists (  isExtern ) .setAliased ( true ) ;^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] boolean  isExtern  String  name  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( name ) .setAliased ( true ) ;^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] boolean  isExtern  String  name  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( isExtern, name ) .setAliased ( true ) ;^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] boolean  isExtern  String  name  
[P7_Replace_Invocation]^graph .defineNameIfNotExists ( name , isExtern )  .setAliased ( true ) ;^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] boolean  isExtern  String  name  
[P14_Delete_Statement]^^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] boolean  isExtern  String  name  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] boolean  isExtern  String  name  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] boolean  isExtern  String  name  
[P5_Replace_Variable]^Preconditions.checkArgument ( NodeUtil.isCall ( symbol )  ) ;^297^^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil.isName ( call )  ) ;^297^^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil .isName ( symbol )   ) ;^297^^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P14_Delete_Statement]^^297^298^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ; Node getProp = call.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^297^^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( objType != null ) ;Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^297^^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^297^^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^297^^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P5_Replace_Variable]^Node getProp = symbol.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^Node getProp = call .getLastChild (  )  ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;Node getProp = call.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node getProp = call.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node getProp = call.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node getProp = call.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Node assignedValue = varName.getFirstChild (  ) ;Node getProp = call.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^JSType type = getType ( n.getFirstChild (  )  ) ;Node getProp = call.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;Node getProp = call.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;Node getProp = call.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P14_Delete_Statement]^^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;Node getProp = call.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P5_Replace_Variable]^if  ( !NodeUtil.isGetProp ( symbol )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^if  ( !NodeUtil.isNew ( getProp )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^if  ( !NodeUtil .isPrototypeProperty (  )   )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P8_Replace_Mix]^if  ( !NodeUtil.isNew ( symbol )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P9_Replace_Statement]^if  ( !NodeUtil.isString ( symbol )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( rhs )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( n )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P9_Replace_Statement]^if  ( !NodeUtil.isGetProp ( n )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P9_Replace_Statement]^if  ( NodeUtil.isGetProp ( n )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P9_Replace_Statement]^if  ( NodeUtil.isAssign ( n )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P15_Unwrap_Block]^return ;^299^300^301^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  { return; }^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P16_Remove_Block]^^299^300^301^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  { return; }^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^299^^^^^284^314^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^299^^^^^284^314^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^299^^^^^284^314^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( ! ( equals ( propQName )  )  )  {     return ; }^299^^^^^284^314^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^299^^^^^284^314^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^299^^^^^284^314^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^299^^^^^284^314^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P1_Replace_Type]^char propQName = getProp.getQualifiedName (  ) ;^303^^^^^288^318^String propQName = getProp.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P5_Replace_Variable]^String propQName = symbol.getQualifiedName (  ) ;^303^^^^^288^318^String propQName = getProp.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^String qName = n.getQualifiedName (  ) ;String propQName = getProp.getQualifiedName (  ) ;^303^^^^^288^318^String propQName = getProp.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^String name = n.getQualifiedName (  ) ;String propQName = getProp.getQualifiedName (  ) ;^303^^^^^288^318^String propQName = getProp.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^String propName = n.getLastChild (  ) .getString (  ) ;String propQName = getProp.getQualifiedName (  ) ;^303^^^^^288^318^String propQName = getProp.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^String qName = obj.getQualifiedName (  ) ;String propQName = getProp.getQualifiedName (  ) ;^303^^^^^288^318^String propQName = getProp.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P14_Delete_Statement]^^303^304^305^306^307^288^318^String propQName = getProp.getQualifiedName (  ) ;  if  ( propQName == null )  { return; }^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P2_Replace_Operator]^if  ( propQName != null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P5_Replace_Variable]^if  ( qName == null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P8_Replace_Mix]^if  ( propQName == false )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P9_Replace_Statement]^if  ( name == null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P9_Replace_Statement]^if  ( assign != null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P9_Replace_Statement]^if  ( rhs != null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P9_Replace_Statement]^if  ( name != null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P9_Replace_Statement]^if  ( assignedValue == null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P15_Unwrap_Block]^return ;^305^306^307^^^290^320^if  ( propQName == null )  { return; }^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P16_Remove_Block]^^305^306^307^^^290^320^if  ( propQName == null )  { return; }^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( assignedValue == null )  {     return ; }^305^^^^^290^320^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( isLocalNameReference ( t, n )  )  {     return ; }^305^^^^^290^320^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( qName == null )  {     return false; }^305^^^^^290^320^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P2_Replace_Operator]^if  ( propQName.endsWith ( ".call" )  && propQName.endsWith ( ".apply" )  )  {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P3_Replace_Literal]^if  ( propQName.endsWith ( ".callc" )  || propQName.endsWith ( ".apply" )  )  {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P3_Replace_Literal]^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".applyappl" )  )  {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P5_Replace_Variable]^if  ( qName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P6_Replace_Expression]^if  ( propQName.endsWith ( ".call" )  ) {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P6_Replace_Expression]^if  (  propQName.endsWith ( ".apply" )  )  {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P15_Unwrap_Block]^graph.defineNameIfNotExists(getProp.getFirstChild().getQualifiedName(), isExtern).markExposedToCallOrApply();^311^312^313^314^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  { graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ; }^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P16_Remove_Block]^^311^312^313^314^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  { graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ; }^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  )  ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( isExtern.getFirstChild (  ) .getQualifiedName (  ) , getProp ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .hasOwnProperty (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^graph .defineNameIfNotExists ( propQName , isExtern )  , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .setAliased (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P8_Replace_Mix]^graph.defineNameIfNotExists ( symbol .getLastChild (  )  .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P14_Delete_Statement]^^312^313^314^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ; }^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  (  ( propQName.endsWith ( ".call" )  )  ||  ( propQName.endsWith ( ".apply" )  )  )  {     graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ; }^312^^^^^297^327^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( symbol.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^graph .defineNameIfNotExists ( qName , isExtern )  , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^graph.defineNameIfNotExists ( getProp.getFirstChild (  )  .getParent (  )  , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^graph.defineNameIfNotExists ( getProp .getLastChild (  )  .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P8_Replace_Mix]^graph.defineNameIfNotExists ( symbol.getFirstChild (  ) .setAliased (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P3_Replace_Literal]^if  ( propQName.endsWith ( "calcall" )  || propQName.endsWith ( ".apply" )  )  {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern )  .markExported (  )  ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P3_Replace_Literal]^if  ( !"Soog.exportSymbol".equals ( propQName )  )  {^316^^^^^301^331^if  ( !"goog.exportSymbol".equals ( propQName )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P5_Replace_Variable]^if  ( !"goog.exportSymbol".equals ( qName )  )  {^316^^^^^301^331^if  ( !"goog.exportSymbol".equals ( propQName )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^if  ( !"goog.exportSymbol" .endsWith ( qName )   )  {^316^^^^^301^331^if  ( !"goog.exportSymbol".equals ( propQName )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P15_Unwrap_Block]^return ;^316^317^318^^^301^331^if  ( !"goog.exportSymbol".equals ( propQName )  )  { return; }^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P16_Remove_Block]^^316^317^318^^^301^331^if  ( !"goog.exportSymbol".equals ( propQName )  )  { return; }^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^316^^^^^301^331^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^316^^^^^301^331^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P3_Replace_Literal]^if  ( !"goog.exportSymbolg.exp".equals ( propQName )  )  {^316^^^^^301^331^if  ( !"goog.exportSymbol".equals ( propQName )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( ! ( equals ( propQName )  )  )  {     return ; }^316^^^^^301^331^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P5_Replace_Variable]^Node symbol = obj.getNext (  ) ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P8_Replace_Mix]^Node symbol = obj .getParent (  )  ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node symbol = getProp.getNext (  ) ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Node gParent = parent.getParent (  ) ;Node symbol = getProp.getNext (  ) ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Node ggParent = gParent.getParent (  ) ;Node symbol = getProp.getNext (  ) ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Node parent = root.getParent (  ) ;Node symbol = getProp.getNext (  ) ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Node obj = symbol.getNext (  ) ;Node symbol = getProp.getNext (  ) ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^Node symbol = getProp .getParent (  )  ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P8_Replace_Mix]^Node symbol = symbol.getNext (  ) ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P14_Delete_Statement]^^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P5_Replace_Variable]^if  ( !NodeUtil.isString ( obj )  )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^if  ( !NodeUtil.isAssign ( symbol )  )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^if  ( !NodeUtil .isAssign ( obj )   )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( rhs )  )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( n )  )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P9_Replace_Statement]^if  ( !NodeUtil.isGetProp ( n )  )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P9_Replace_Statement]^if  ( NodeUtil.isGetProp ( n )  )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P9_Replace_Statement]^if  ( NodeUtil.isAssign ( n )  )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P9_Replace_Statement]^if  ( !NodeUtil.isGetProp ( getProp )  )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P15_Unwrap_Block]^return ;^321^322^323^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  { return; }^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P16_Remove_Block]^^321^322^323^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  { return; }^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^321^^^^^306^336^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^321^^^^^306^336^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^321^^^^^306^336^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( ! ( equals ( propQName )  )  )  {     return ; }^321^^^^^306^336^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^321^^^^^306^336^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^321^^^^^306^336^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^321^^^^^306^336^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P5_Replace_Variable]^Node obj = getProp.getNext (  ) ;^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^Node obj = symbol .getParent (  )  ;^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node obj = symbol.getNext (  ) ;^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Node gParent = parent.getParent (  ) ;Node obj = symbol.getNext (  ) ;^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Node ggParent = gParent.getParent (  ) ;Node obj = symbol.getNext (  ) ;^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Node parent = root.getParent (  ) ;Node obj = symbol.getNext (  ) ;^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^Node symbol = getProp.getNext (  ) ;Node obj = symbol.getNext (  ) ;^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P5_Replace_Variable]^Node obj = obj.getNext (  ) ;^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P14_Delete_Statement]^^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P1_Replace_Type]^char qName = obj.getQualifiedName (  ) ;^326^^^^^311^341^String qName = obj.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P5_Replace_Variable]^String qName = symbol.getQualifiedName (  ) ;^326^^^^^311^341^String qName = obj.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^String propQName = getProp.getQualifiedName (  ) ;String qName = obj.getQualifiedName (  ) ;^326^^^^^311^341^String qName = obj.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^String qName = n.getQualifiedName (  ) ;String qName = obj.getQualifiedName (  ) ;^326^^^^^311^341^String qName = obj.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^String name = n.getQualifiedName (  ) ;String qName = obj.getQualifiedName (  ) ;^326^^^^^311^341^String qName = obj.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^String name = NodeUtil.getFunctionName ( root, parent ) ;String qName = obj.getQualifiedName (  ) ;^326^^^^^311^341^String qName = obj.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^String qName = obj .getParent (  )  ;^326^^^^^311^341^String qName = obj.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P14_Delete_Statement]^^326^327^328^329^330^311^341^String qName = obj.getQualifiedName (  ) ;  if  ( qName == null || obj.getNext (  )  != null )  { return; }^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P2_Replace_Operator]^if  ( qName == null && obj.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P2_Replace_Operator]^if  ( qName != null || obj.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P2_Replace_Operator]^if  ( qName == null || obj.getNext (  )  == null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P5_Replace_Variable]^if  ( propQName == null || obj.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P5_Replace_Variable]^if  ( qName == null || symbol.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P5_Replace_Variable]^if  ( obj == null || qName.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P6_Replace_Expression]^if  ( qName == null ) {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P6_Replace_Expression]^if  (  obj.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^if  ( qName == null || obj .getParent (  )   != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P8_Replace_Mix]^if  ( qName == this ) {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P15_Unwrap_Block]^return ;^328^329^330^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  { return; }^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P16_Remove_Block]^^328^329^330^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  { return; }^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P13_Insert_Block]^if  ( name != null )  {     defineAndAlias ( name ) ;     return ; }^328^^^^^313^343^[Delete]^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( qName, true ) .markExported (  ) ;^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( propQName, false ) .markExported (  ) ;^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P5_Replace_Variable]^graph.defineNameIfNotExists (  false ) .markExported (  ) ;^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P7_Replace_Invocation]^graph.connect ( qName, false ) .markExported (  ) ;^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P8_Replace_Mix]^graph.connect ( propQName, false ) .markExported (  ) ;^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P14_Delete_Statement]^^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[P6_Replace_Expression]^if  ( v != null )  {^341^^^^^338^346^if  ( NodeUtil.isName ( n )  )  {^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P7_Replace_Invocation]^if  ( NodeUtil.isNew ( n )  )  {^341^^^^^338^346^if  ( NodeUtil.isName ( n )  )  {^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P9_Replace_Statement]^if  ( !NodeUtil.isString ( symbol )  )  {^341^^^^^338^346^if  ( NodeUtil.isName ( n )  )  {^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( rhs )  )  {^341^^^^^338^346^if  ( NodeUtil.isName ( n )  )  {^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P15_Unwrap_Block]^com.google.javascript.jscomp.Scope.Var v = t.getScope().getVar(n.getString()); return (v != null) && (v.isLocal());^341^342^343^344^^338^346^if  ( NodeUtil.isName ( n )  )  { Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ; return v != null && v.isLocal (  ) ; }^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P16_Remove_Block]^^341^342^343^344^^338^346^if  ( NodeUtil.isName ( n )  )  { Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ; return v != null && v.isLocal (  ) ; }^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P2_Replace_Operator]^return v != null || v.isLocal (  ) ;^343^^^^^338^346^return v != null && v.isLocal (  ) ;^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P2_Replace_Operator]^return v == null && v.isLocal (  ) ;^343^^^^^338^346^return v != null && v.isLocal (  ) ;^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P8_Replace_Mix]^return   v.isLocal (  ) ;^343^^^^^338^346^return v != null && v.isLocal (  ) ;^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P5_Replace_Variable]^Var v = n.getScope (  ) .getVar ( t.getString (  )  ) ;^342^^^^^338^346^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P7_Replace_Invocation]^Var v = t .getScopeRoot (  )  .getVar ( n.getString (  )  ) ;^342^^^^^338^346^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P7_Replace_Invocation]^Var v = t.getScope (  ) .getVar ( n .getVar (  )   ) ;^342^^^^^338^346^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P8_Replace_Mix]^Var v = t.getScope (  )  .getString (  )  ;^342^^^^^338^346^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P14_Delete_Statement]^^342^^^^^338^346^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P14_Delete_Statement]^^342^343^^^^338^346^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ; return v != null && v.isLocal (  ) ;^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P14_Delete_Statement]^^343^^^^^338^346^return v != null && v.isLocal (  ) ;^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^341^^^^^338^346^[Delete]^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^341^^^^^338^346^[Delete]^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^341^^^^^338^346^[Delete]^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^341^^^^^338^346^[Delete]^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^341^^^^^338^346^[Delete]^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^341^^^^^338^346^[Delete]^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P3_Replace_Literal]^return true;^345^^^^^338^346^return false;^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[P2_Replace_Operator]^Preconditions.checkArgument ( NodeUtil.isName ( n )  && NodeUtil.isGetProp ( n )  ) ;^352^^^^^351^362^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^352^^^^^351^362^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil.isNew ( n )  || NodeUtil.isGetProp ( n )  ) ;^352^^^^^351^362^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isNew ( n )  ) ;^352^^^^^351^362^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil .isPrototypeProperty (  )   ) ;^352^^^^^351^362^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P14_Delete_Statement]^^352^^^^^351^362^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P7_Replace_Invocation]^if  ( NodeUtil.isNew ( n )  )  {^353^^^^^351^362^if  ( NodeUtil.isName ( n )  )  {^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P9_Replace_Statement]^if  ( !NodeUtil.isString ( symbol )  )  {^353^^^^^351^362^if  ( NodeUtil.isName ( n )  )  {^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( rhs )  )  {^353^^^^^351^362^if  ( NodeUtil.isName ( n )  )  {^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P15_Unwrap_Block]^return true;^353^354^355^^^351^362^if  ( NodeUtil.isName ( n )  )  { return true; }^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P16_Remove_Block]^^353^354^355^^^351^362^if  ( NodeUtil.isName ( n )  )  { return true; }^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^353^^^^^351^362^[Delete]^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^353^^^^^351^362^[Delete]^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^353^^^^^351^362^[Delete]^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^353^^^^^351^362^[Delete]^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^353^^^^^351^362^[Delete]^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P3_Replace_Literal]^return false;^354^^^^^351^362^return true;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^353^^^^^351^362^[Delete]^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P1_Replace_Type]^char qName = n.getQualifiedName (  ) ;^356^^^^^351^362^String qName = n.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P7_Replace_Invocation]^String qName = n .getParent (  )  ;^356^^^^^351^362^String qName = n.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P11_Insert_Donor_Statement]^String propQName = getProp.getQualifiedName (  ) ;String qName = n.getQualifiedName (  ) ;^356^^^^^351^362^String qName = n.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P11_Insert_Donor_Statement]^String name = n.getQualifiedName (  ) ;String qName = n.getQualifiedName (  ) ;^356^^^^^351^362^String qName = n.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P11_Insert_Donor_Statement]^String propName = n.getLastChild (  ) .getString (  ) ;String qName = n.getQualifiedName (  ) ;^356^^^^^351^362^String qName = n.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P11_Insert_Donor_Statement]^String qName = obj.getQualifiedName (  ) ;String qName = n.getQualifiedName (  ) ;^356^^^^^351^362^String qName = n.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P11_Insert_Donor_Statement]^String name = NodeUtil.getFunctionName ( root, parent ) ;String qName = n.getQualifiedName (  ) ;^356^^^^^351^362^String qName = n.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P14_Delete_Statement]^^356^357^358^359^^351^362^String qName = n.getQualifiedName (  ) ; if  ( qName == null )  { return false; }^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P2_Replace_Operator]^if  ( qName != null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P8_Replace_Mix]^if  ( qName == this )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P9_Replace_Statement]^if  ( name == null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P9_Replace_Statement]^if  ( propQName == null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P9_Replace_Statement]^if  ( assign != null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P9_Replace_Statement]^if  ( rhs != null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P9_Replace_Statement]^if  ( name != null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P9_Replace_Statement]^if  ( assignedValue == null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P15_Unwrap_Block]^return false;^357^358^359^^^351^362^if  ( qName == null )  { return false; }^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P16_Remove_Block]^^357^358^359^^^351^362^if  ( qName == null )  { return false; }^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P13_Insert_Block]^if  ( assignedValue == null )  {     return ; }^357^^^^^351^362^[Delete]^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P13_Insert_Block]^if  ( propQName == null )  {     return ; }^357^^^^^351^362^[Delete]^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P3_Replace_Literal]^return true;^358^^^^^351^362^return false;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P3_Replace_Literal]^return scope.isDeclared ( qName, false ) ;^361^^^^^351^362^return scope.isDeclared ( qName, true ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P5_Replace_Variable]^return scope.isDeclared (  true ) ;^361^^^^^351^362^return scope.isDeclared ( qName, true ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P5_Replace_Variable]^return qName.isDeclared ( scope, true ) ;^361^^^^^351^362^return scope.isDeclared ( qName, true ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P14_Delete_Statement]^^361^^^^^351^362^return scope.isDeclared ( qName, true ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[P7_Replace_Invocation]^if  ( !NodeUtil.isNew ( n )  )  {^368^^^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P9_Replace_Statement]^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^368^^^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P9_Replace_Statement]^if  ( !NodeUtil.isString ( symbol )  )  {^368^^^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( rhs )  )  {^368^^^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( n )  )  {^368^^^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P9_Replace_Statement]^if  ( NodeUtil.isGetProp ( n )  )  {^368^^^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P9_Replace_Statement]^if  ( NodeUtil.isAssign ( n )  )  {^368^^^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P9_Replace_Statement]^if  ( !NodeUtil.isGetProp ( getProp )  )  {^368^^^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P15_Unwrap_Block]^return false;^368^369^370^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  { return false; }^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P16_Remove_Block]^^368^369^370^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  { return false; }^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^368^^^^^367^376^[Delete]^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^368^^^^^367^376^[Delete]^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^368^^^^^367^376^[Delete]^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^368^^^^^367^376^[Delete]^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^368^^^^^367^376^[Delete]^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P3_Replace_Literal]^return true;^369^^^^^367^376^return false;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P8_Replace_Mix]^if  ( !NodeUtil .isPrototypeProperty (  )   )  {^368^^^^^367^376^if  ( !NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^368^^^^^367^376^[Delete]^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P7_Replace_Invocation]^JSType type = pushContainingFunction ( n.getFirstChild (  )  ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;JSType type = getType ( n.getFirstChild (  )  ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;JSType type = getType ( n.getFirstChild (  )  ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P11_Insert_Donor_Statement]^Node getProp = call.getFirstChild (  ) ;JSType type = getType ( n.getFirstChild (  )  ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;JSType type = getType ( n.getFirstChild (  )  ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P11_Insert_Donor_Statement]^JSType type = getType ( root ) ;JSType type = getType ( n.getFirstChild (  )  ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;JSType type = getType ( n.getFirstChild (  )  ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P11_Insert_Donor_Statement]^Node instance = n.getFirstChild (  ) ;JSType type = getType ( n.getFirstChild (  )  ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P7_Replace_Invocation]^JSType type = getType ( n .getLastChild (  )   ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P14_Delete_Statement]^^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;JSType type = getType ( n.getFirstChild (  )  ) ;^371^^^^^367^376^JSType type = getType ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P2_Replace_Operator]^if  ( type.isUnknownType (  )  && type.isUnionType (  )  )  {^372^^^^^367^376^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  {^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P6_Replace_Expression]^if  ( type.isUnknownType (  )  ) {^372^^^^^367^376^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  {^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P6_Replace_Expression]^if  (  type.isUnionType (  )  )  {^372^^^^^367^376^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  {^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P7_Replace_Invocation]^if  ( type .isUnionType (  )   || type.isUnionType (  )  )  {^372^^^^^367^376^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  {^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P9_Replace_Statement]^if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^372^^^^^367^376^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  {^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P15_Unwrap_Block]^return false;^372^373^374^^^367^376^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  { return false; }^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P16_Remove_Block]^^372^373^374^^^367^376^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  { return false; }^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P3_Replace_Literal]^return true;^373^^^^^367^376^return false;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P2_Replace_Operator]^return  ( type instanceof InstanceObjectType && type.autoboxesTo (  )  != null ) ;^375^^^^^367^376^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  != null ) ;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P2_Replace_Operator]^return  ( type  ==  InstanceObjectType || type.autoboxesTo (  )  != null ) ;^375^^^^^367^376^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  != null ) ;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P2_Replace_Operator]^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  == null ) ;^375^^^^^367^376^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  != null ) ;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P8_Replace_Mix]^return  ( type instanceof InstanceObjectType || type .isConstructor (  )   != null ) ;^375^^^^^367^376^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  != null ) ;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P14_Delete_Statement]^^375^^^^^367^376^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  != null ) ;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[P2_Replace_Operator]^if  ( getNamedContainingFunction (  )  >= graph.MAIN )  {^380^^^^^378^398^if  ( getNamedContainingFunction (  )  != graph.MAIN )  {^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P7_Replace_Invocation]^if  ( popContainingFunction (  )  != graph.MAIN )  {^380^^^^^378^398^if  ( getNamedContainingFunction (  )  != graph.MAIN )  {^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P15_Unwrap_Block]^^380^381^^^384^378^398^if  ( getNamedContainingFunction (  )  != graph.MAIN )  {  }^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P13_Insert_Block]^if  (  ( getNamedContainingFunction (  )  )  !=  ( graph.MAIN )  )  { }^380^^^^^378^398^[Delete]^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P2_Replace_Operator]^if  ( type.isFunctionType (  )  || type.isConstructor (  )  )  {^385^^^^^378^398^if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P6_Replace_Expression]^if  ( type.isFunctionType (  )  ) {^385^^^^^378^398^if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P6_Replace_Expression]^if  (  type.isConstructor (  )  )  {^385^^^^^378^398^if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P7_Replace_Invocation]^if  ( type .isUnionType (  )   && type.isConstructor (  )  )  {^385^^^^^378^398^if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P8_Replace_Mix]^if  ( type.isFunctionType (  )  && type .isFunctionType (  )   )  {^385^^^^^378^398^if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P9_Replace_Statement]^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  {^385^^^^^378^398^if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^if  ( NodeUtil.isAssign ( rValue )  )  {^391^^^^^378^398^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P7_Replace_Invocation]^if  ( NodeUtil.isString ( n )  )  {^391^^^^^378^398^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P9_Replace_Statement]^if  ( !NodeUtil.isString ( symbol )  )  {^391^^^^^378^398^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P15_Unwrap_Block]^symbol.addAssignmentDeclaration(n);^391^392^393^394^395^378^398^if  ( NodeUtil.isAssign ( n )  )  { symbol.addAssignmentDeclaration ( n ) ; } else { symbol.addFunctionDeclaration ( n ) ; }^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P16_Remove_Block]^^391^392^393^394^395^378^398^if  ( NodeUtil.isAssign ( n )  )  { symbol.addAssignmentDeclaration ( n ) ; } else { symbol.addFunctionDeclaration ( n ) ; }^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P13_Insert_Block]^if  ( rhs != null )  {     symbol.setType ( getType ( rhs )  ) ;     if  ( isAssign ( n )  )  {         symbol.addAssignmentDeclaration ( n ) ;     }else {         symbol.addFunctionDeclaration ( n ) ;     } }^391^^^^^378^398^[Delete]^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^symbol.addFunctionDeclaration ( rValue ) ;^394^^^^^378^398^symbol.addFunctionDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P7_Replace_Invocation]^symbol .addAssignmentDeclaration ( parent )  ;^394^^^^^378^398^symbol.addFunctionDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P14_Delete_Statement]^^394^^^^^378^398^symbol.addFunctionDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P11_Insert_Donor_Statement]^prototypeProp.addAssignmentDeclaration ( assign ) ;symbol.addFunctionDeclaration ( n ) ;^394^^^^^378^398^symbol.addFunctionDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P11_Insert_Donor_Statement]^symbol.addAssignmentDeclaration ( n ) ;symbol.addFunctionDeclaration ( n ) ;^394^^^^^378^398^symbol.addFunctionDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^symbol.addAssignmentDeclaration ( rValue ) ;^392^^^^^378^398^symbol.addAssignmentDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P14_Delete_Statement]^^392^^^^^378^398^symbol.addAssignmentDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^Name symbol = graph.defineNameIfNotExists (  isExtern ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^Name symbol = graph.defineNameIfNotExists ( name ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^Name symbol = name.defineNameIfNotExists ( graph, isExtern ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^Name symbol = isExtern.defineNameIfNotExists ( name, graph ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^Name symbol = graph.defineNameIfNotExists ( isExtern, name ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P8_Replace_Mix]^Name symbol = null.defineNameIfNotExists ( name, isExtern ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P11_Insert_Donor_Statement]^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P11_Insert_Donor_Statement]^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P7_Replace_Invocation]^Name symbol = graph .defineNameIfNotExists ( name , isExtern )  ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P14_Delete_Statement]^^389^390^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ; symbol.setType ( type ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P8_Replace_Mix]^symbol .setType ( type )  ;^390^^^^^378^398^symbol.setType ( type ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P14_Delete_Statement]^^390^^^^^378^398^symbol.setType ( type ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P11_Insert_Donor_Statement]^prototypeProp.setType ( type ) ;symbol.setType ( type ) ;^390^^^^^378^398^symbol.setType ( type ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P11_Insert_Donor_Statement]^name.setType ( getType ( n )  ) ;symbol.setType ( type ) ;^390^^^^^378^398^symbol.setType ( type ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P11_Insert_Donor_Statement]^symbol.setType ( getType ( rhs )  ) ;symbol.setType ( type ) ;^390^^^^^378^398^symbol.setType ( type ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunction ( n )   )  {^391^^^^^378^398^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P8_Replace_Mix]^if  ( NodeUtil.isString ( rValue )  )  {^391^^^^^378^398^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^391^^^^^378^398^[Delete]^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^391^^^^^378^398^[Delete]^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^391^^^^^378^398^[Delete]^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^391^^^^^378^398^[Delete]^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^391^^^^^378^398^[Delete]^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^391^^^^^378^398^[Delete]^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P7_Replace_Invocation]^symbol .addAssignmentDeclaration ( rValue )  ;^394^^^^^378^398^symbol.addFunctionDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( rValueame,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, n, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , n ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface (   ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type,  parent, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n,  parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  )  ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( rValueame,  ( FunctionType )  type, n, parent, parent.getParent (  ) , n ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, rValue, parent.getParent (  ) , parent ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P7_Replace_Invocation]^return recordPrototypePropDefinition ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P7_Replace_Invocation]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent .getNext (  )  , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( parentame,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( parentame,  ( FunctionType )  type, n, n, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P8_Replace_Mix]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, rValue, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P14_Delete_Statement]^^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^name,  ( FunctionType )  type, n, rValue, parent.getParent (  ) , rValue ) ;^387^^^^^378^398^name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P7_Replace_Invocation]^name,  ( FunctionType )  type, n, parent, parent .getNext (  )  , rValue ) ;^387^^^^^378^398^name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P14_Delete_Statement]^^387^^^^^378^398^name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P11_Insert_Donor_Statement]^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^387^^^^^378^398^name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P11_Insert_Donor_Statement]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^387^^^^^378^398^name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P7_Replace_Invocation]^symbol .addFunctionDeclaration ( gParent )  ;^392^^^^^378^398^symbol.addAssignmentDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , parent ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( n,  ( FunctionType )  type, name, parent, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P5_Replace_Variable]^return recordClassConstructorOrInterface ( parent,  ( FunctionType )  type, n, name, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P8_Replace_Mix]^return recordPrototypePropDefinition ( rValueame,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P14_Delete_Statement]^^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[P7_Replace_Invocation]^JSType constructor = pushContainingFunction ( NodeUtil.getPrototypeClassName ( qName )  ) ;^407^^^^^406^435^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^JSType constructor = getType ( NodeUtil.getPrototypePropertyName ( qName )  ) ;^407^^^^^406^435^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P8_Replace_Mix]^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( parent )  ) ;^407^^^^^406^435^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P11_Insert_Donor_Statement]^String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;^407^^^^^406^435^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^JSType constructor = getType ( NodeUtil .getPrototypePropertyName ( assign )   ) ;^407^^^^^406^435^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P14_Delete_Statement]^^407^408^^^^406^435^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ; FunctionType classType = null;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P11_Insert_Donor_Statement]^String className = null;FunctionType classType = null;^408^^^^^406^435^FunctionType classType = null;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P1_Replace_Type]^char className = null;^409^^^^^406^435^String className = null;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P11_Insert_Donor_Statement]^FunctionType classType = null;String className = null;^409^^^^^406^435^String className = null;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P2_Replace_Operator]^if  ( constructor instanceof FunctionType || constructor.isConstructor (  )  )  {^411^^^^^406^435^if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P2_Replace_Operator]^if  ( constructor  >  FunctionType && constructor.isConstructor (  )  )  {^411^^^^^406^435^if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P6_Replace_Expression]^if  ( constructor instanceof FunctionType ) {^411^^^^^406^435^if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P6_Replace_Expression]^if  (  constructor.isConstructor (  )  )  {^411^^^^^406^435^if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^classType = compiler.getTypeRegistry (  ) .getQualifiedName ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^417^418^^^^411^420^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^classType = compiler.getTypeRegistry (  )  .getQualifiedName (  )  ;^417^418^^^^411^420^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P8_Replace_Mix]^classType ;^417^418^^^^411^420^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^className = NodeUtil.getPrototypeClassName ( parent ) .getQualifiedName (  ) ;^419^^^^^411^420^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^className = NodeUtil.getPrototypeClassName ( qName ) .setAliased (  ) ;^419^^^^^411^420^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^className = NodeUtil.getPrototypeClassName ( qName )  .getParent (  )  ;^419^^^^^411^420^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^className = NodeUtil.getPrototypePropertyName ( qName ) .getQualifiedName (  ) ;^419^^^^^411^420^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P14_Delete_Statement]^^417^418^^^^411^420^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P14_Delete_Statement]^^419^420^^^^411^420^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ; }^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^className = NodeUtil .getPrototypePropertyName ( gParent )  .getQualifiedName (  ) ;^419^^^^^411^420^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^419^^^^^411^420^[Delete]^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^419^^^^^411^420^[Delete]^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^419^^^^^411^420^[Delete]^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^419^^^^^411^420^[Delete]^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^419^^^^^411^420^[Delete]^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^419^^^^^411^420^[Delete]^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P8_Replace_Mix]^classType =   ( FunctionType )  constructor;^413^^^^^406^435^classType =  ( FunctionType )  constructor;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P8_Replace_Mix]^className =  null.getReferenceName (  ) ;^414^^^^^406^435^className = classType.getReferenceName (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P14_Delete_Statement]^^414^^^^^406^435^className = classType.getReferenceName (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^classType = compiler.getTypeRegistry (  ) .getQualifiedName ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^417^418^^^^406^435^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^classType = compiler.getTypeRegistry (  )  .getQualifiedName (  )  ;^417^418^^^^406^435^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P8_Replace_Mix]^classType  =  classType ;^417^418^^^^406^435^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^className = NodeUtil.getPrototypeClassName ( parent ) .getQualifiedName (  ) ;^419^^^^^406^435^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^className = NodeUtil.getPrototypeClassName ( qName ) .setAliased (  ) ;^419^^^^^406^435^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^className = NodeUtil.getPrototypePropertyName ( qName ) .getQualifiedName (  ) ;^419^^^^^406^435^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^className = NodeUtil .getPrototypePropertyName ( parent )  .getQualifiedName (  ) ;^419^^^^^406^435^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^if  ( type instanceof FunctionType && constructor.isConstructor (  )  )  {^411^^^^^406^435^if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^if  ( constructor instanceof FunctionType && constructor .isFunctionType (  )   )  {^411^^^^^406^435^if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^className = classType .getPrototype (  )  ;^414^^^^^406^435^className = classType.getReferenceName (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P14_Delete_Statement]^^417^418^^^^406^435^classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^className = NodeUtil.getPrototypeClassName ( qName )  .getParent (  )  ;^419^^^^^406^435^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P14_Delete_Statement]^^419^420^^^^406^435^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ; }^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^419^^^^^406^435^[Delete]^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^419^^^^^406^435^[Delete]^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^419^^^^^406^435^[Delete]^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^419^^^^^406^435^[Delete]^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^419^^^^^406^435^[Delete]^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^419^^^^^406^435^[Delete]^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^recordClassConstructorOrInterface ( qNameStr, classType, null, null, null, null ) ;^422^423^^^^406^435^recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^recordClassConstructorOrInterface (  classType, null, null, null, null ) ;^422^423^^^^406^435^recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^recordClassConstructorOrInterface ( className,  null, null, null, null ) ;^422^423^^^^406^435^recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^recordClassConstructorOrInterface ( classType, className, null, null, null, null ) ;^422^423^^^^406^435^recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^recordPrototypePropDefinition ( className, classType, null, null, null, null ) ;^422^423^^^^406^435^recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P14_Delete_Statement]^^422^423^^^^406^435^recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P1_Replace_Type]^char qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^425^426^^^^406^435^String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P3_Replace_Literal]^String qNameStr = className + ".prototype.ototype" + NodeUtil.getPrototypePropertyName ( qName ) ;^425^426^^^^406^435^String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^String parentStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^425^426^^^^406^435^String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^String classNameStr = qName + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^425^426^^^^406^435^String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^String qNameStr = className + ".prototype." + NodeUtil.isPrototypeProperty ( qName ) ;^425^426^^^^406^435^String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P11_Insert_Donor_Statement]^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^425^426^^^^406^435^String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^NodeUtil.getPrototypePropertyName ( parent ) ;^426^^^^^406^435^NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^NodeUtil.isPrototypeProperty ( qName ) ;^426^^^^^406^435^NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P14_Delete_Statement]^^426^^^^^406^435^NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P11_Insert_Donor_Statement]^prototypeProp.setType ( type ) ;NodeUtil.getPrototypePropertyName ( qName ) ;^426^^^^^406^435^NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^Name prototypeProp = graph.defineNameIfNotExists ( className, isExtern ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^Name prototypeProp = 3.defineNameIfNotExists ( qNameStr, isExtern ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^Name prototypeProp = graph.defineNameIfNotExists (  isExtern ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^Name prototypeProp = qNameStr.defineNameIfNotExists ( graph, isExtern ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^Name prototypeProp = isExtern.defineNameIfNotExists ( qNameStr, graph ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P8_Replace_Mix]^Name prototypeProp = null.defineNameIfNotExists ( qNameStr, isExtern ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P11_Insert_Donor_Statement]^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P11_Insert_Donor_Statement]^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^Name prototypeProp = graph.defineNameIfNotExists ( isExtern, qNameStr ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P14_Delete_Statement]^^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P2_Replace_Operator]^Preconditions.checkNotNull ( prototypeProp, qNameStr  &&  " should be in the name graph as a node." ) ;^428^429^^^^406^435^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P3_Replace_Literal]^Preconditions.checkNotNull ( prototypeProp, qNameStr + "in tshould be in the name graph as a node." ) ;^428^429^^^^406^435^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^Preconditions.checkNotNull (  qNameStr + " should be in the name graph as a node." ) ;^428^429^^^^406^435^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^Preconditions.checkNotNull ( prototypeProp + " should be in the name graph as a node." ) ;^428^429^^^^406^435^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^Preconditions.checkNotNull ( qNameStr, prototypeProp + " should be in the name graph as a node." ) ;^428^429^^^^406^435^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P8_Replace_Mix]^Preconditions.checkNotNull ( prototypeProp, className + " should be in the name graph as a node." ) ;^428^429^^^^406^435^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P14_Delete_Statement]^^428^429^^^^406^435^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P2_Replace_Operator]^if  ( assign == null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^if  ( qName != null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P8_Replace_Mix]^if  ( assign != true )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P9_Replace_Statement]^if  ( name == null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P9_Replace_Statement]^if  ( propQName == null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P9_Replace_Statement]^if  ( qName == null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P9_Replace_Statement]^if  ( rhs != null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P9_Replace_Statement]^if  ( constructor != null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P9_Replace_Statement]^if  ( name != null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P9_Replace_Statement]^if  ( assignedValue == null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P15_Unwrap_Block]^prototypeProp.addAssignmentDeclaration(assign);^430^431^432^^^406^435^if  ( assign != null )  { prototypeProp.addAssignmentDeclaration ( assign ) ; }^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P16_Remove_Block]^^430^431^432^^^406^435^if  ( assign != null )  { prototypeProp.addAssignmentDeclaration ( assign ) ; }^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^prototypeProp.addAssignmentDeclaration ( qName ) ;^431^^^^^406^435^prototypeProp.addAssignmentDeclaration ( assign ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P14_Delete_Statement]^^431^^^^^406^435^prototypeProp.addAssignmentDeclaration ( assign ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P11_Insert_Donor_Statement]^symbol.addAssignmentDeclaration ( n ) ;prototypeProp.addAssignmentDeclaration ( assign ) ;^431^^^^^406^435^prototypeProp.addAssignmentDeclaration ( assign ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P11_Insert_Donor_Statement]^symbol.addFunctionDeclaration ( n ) ;prototypeProp.addAssignmentDeclaration ( assign ) ;^431^^^^^406^435^prototypeProp.addAssignmentDeclaration ( assign ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P13_Insert_Block]^if  ( assign != null )  {     prototypeProp.addAssignmentDeclaration ( assign ) ; }^431^^^^^406^435^[Delete]^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P7_Replace_Invocation]^prototypeProp .addFunctionDeclaration ( qName )  ;^431^^^^^406^435^prototypeProp.addAssignmentDeclaration ( assign ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^prototypeProp.setType ( constructor ) ;^433^^^^^406^435^prototypeProp.setType ( type ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P8_Replace_Mix]^prototypeProp .setType ( type )  ;^433^^^^^406^435^prototypeProp.setType ( type ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P14_Delete_Statement]^^433^434^^^^406^435^prototypeProp.setType ( type ) ; return prototypeProp;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P11_Insert_Donor_Statement]^recordPrototypePropUse ( t, n, parent ) ;prototypeProp.setType ( type ) ;^433^^^^^406^435^prototypeProp.setType ( type ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P11_Insert_Donor_Statement]^symbol.setType ( type ) ;prototypeProp.setType ( type ) ;^433^^^^^406^435^prototypeProp.setType ( type ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P11_Insert_Donor_Statement]^NodeUtil.getPrototypePropertyName ( qName ) ;prototypeProp.setType ( type ) ;^433^^^^^406^435^prototypeProp.setType ( type ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[P5_Replace_Variable]^if  ( isExterparent )  {^439^^^^^437^449^if  ( isExtern )  {^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P9_Replace_Statement]^if  ( !isExtern )  {^439^^^^^437^449^if  ( isExtern )  {^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P4_Replace_Constructor]^Reference reference = new Reference (  parent ) ;^443^^^^^437^449^Reference reference = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P4_Replace_Constructor]^Reference reference = new Reference ( n ) ;^443^^^^^437^449^Reference reference = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P5_Replace_Variable]^Reference reference = parentew Reference ( n, n ) ;^443^^^^^437^449^Reference reference = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P5_Replace_Variable]^Reference reference = parentew Reference ( n, parent ) ;^443^^^^^437^449^Reference reference = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P5_Replace_Variable]^Reference reference = new Reference ( n, n ) ;^443^^^^^437^449^Reference reference = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P11_Insert_Donor_Statement]^Reference ref = new Reference ( n, parent ) ;Reference reference = new Reference ( n, parent ) ;^443^^^^^437^449^Reference reference = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P5_Replace_Variable]^Name parentame = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P5_Replace_Variable]^Name name = null.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P5_Replace_Variable]^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  )  ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P5_Replace_Variable]^Name graphame = n.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P5_Replace_Variable]^Name name = isExtern.defineNameIfNotExists ( n.getQualifiedName (  ) , graph ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P5_Replace_Variable]^Name isExtername = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , n ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P7_Replace_Invocation]^Name name = graph.defineNameIfNotExists ( n .getParent (  )  , isExtern ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P11_Insert_Donor_Statement]^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P11_Insert_Donor_Statement]^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P14_Delete_Statement]^^444^445^446^447^448^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ; name.setType ( getType ( n )  ) ; graph.connect ( getNamedContainingFunction (  ) , reference, name ) ; return reference; }^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P5_Replace_Variable]^name.setType ( getType ( parent )  ) ;^445^^^^^437^449^name.setType ( getType ( n )  ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P7_Replace_Invocation]^name.setType ( pushContainingFunction ( n )  ) ;^445^^^^^437^449^name.setType ( getType ( n )  ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P14_Delete_Statement]^^445^^^^^437^449^name.setType ( getType ( n )  ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P11_Insert_Donor_Statement]^JSType type = getType ( root ) ;name.setType ( getType ( n )  ) ;^445^^^^^437^449^name.setType ( getType ( n )  ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P11_Insert_Donor_Statement]^symbol.setType ( type ) ;name.setType ( getType ( n )  ) ;^445^^^^^437^449^name.setType ( getType ( n )  ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P11_Insert_Donor_Statement]^JSType instanceType = getType ( instance ) ;name.setType ( getType ( n )  ) ;^445^^^^^437^449^name.setType ( getType ( n )  ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P11_Insert_Donor_Statement]^symbol.setType ( getType ( rhs )  ) ;name.setType ( getType ( n )  ) ;^445^^^^^437^449^name.setType ( getType ( n )  ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) ,  name ) ;^446^^^^^437^449^graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , reference ) ;^446^^^^^437^449^graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , name, reference ) ;^446^^^^^437^449^graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P7_Replace_Invocation]^graph.connect ( popContainingFunction (  ) , reference, name ) ;^446^^^^^437^449^graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P14_Delete_Statement]^^446^447^^^^437^449^graph.connect ( getNamedContainingFunction (  ) , reference, name ) ; return reference;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P12_Insert_Condition]^if  ( getNamedContainingFunction (  )  != graph.MAIN )  { graph.connect ( getNamedContainingFunction (  ) , reference, name ) ; }^446^^^^^437^449^graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P14_Delete_Statement]^^446^^^^^437^449^graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P8_Replace_Mix]^return true;^441^^^^^437^449^return null;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P8_Replace_Mix]^return this;^441^^^^^437^449^return null;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P8_Replace_Mix]^name.setType ( pushContainingFunction ( parent )  ) ;^445^^^^^437^449^name.setType ( getType ( n )  ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P14_Delete_Statement]^^445^446^^^^437^449^name.setType ( getType ( n )  ) ; graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[P5_Replace_Variable]^Preconditions.checkArgument ( NodeUtil.isGetProp ( parent )  ) ;^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil.isNew ( n )  ) ;^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P14_Delete_Statement]^^453^454^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ; Node instance = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P12_Insert_Condition]^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  { Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ; }^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P12_Insert_Condition]^if  ( !NodeUtil.isGetProp ( n )  )  { Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ; }^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P12_Insert_Condition]^if  ( NodeUtil.isGetProp ( n )  )  { Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ; }^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P12_Insert_Condition]^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  { Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ; }^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil .isPrototypeProperty (  )   ) ;^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P14_Delete_Statement]^^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^Node instance = parent.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^Node cur = n.getFirstChild (  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^Node root = t.getScopeRoot (  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^Node param = n.getFirstChild (  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^Node getProp = call.getFirstChild (  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^Node assignedValue = varName.getFirstChild (  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^JSType type = getType ( n.getFirstChild (  )  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^Node rhs = n.getLastChild (  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P14_Delete_Statement]^^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^safeAlias ( n.getFirstChild (  )  ) ;Node instance = n.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^JSType parentType = getType ( instance ) ;^455^^^^^452^480^JSType instanceType = getType ( instance ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P7_Replace_Invocation]^JSType instanceType = pushContainingFunction ( instance ) ;^455^^^^^452^480^JSType instanceType = getType ( instance ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P8_Replace_Mix]^JSType parentType = pushContainingFunction ( instance ) ;^455^^^^^452^480^JSType instanceType = getType ( instance ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^JSType type = getType ( root ) ;JSType instanceType = getType ( instance ) ;^455^^^^^452^480^JSType instanceType = getType ( instance ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P14_Delete_Statement]^^455^^^^^452^480^JSType instanceType = getType ( instance ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^name.setType ( getType ( n )  ) ;JSType instanceType = getType ( instance ) ;^455^^^^^452^480^JSType instanceType = getType ( instance ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^symbol.setType ( getType ( rhs )  ) ;JSType instanceType = getType ( instance ) ;^455^^^^^452^480^JSType instanceType = getType ( instance ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P8_Replace_Mix]^JSType boxedType = instanceType .isConstructor (  )  ;^456^^^^^452^480^JSType boxedType = instanceType.autoboxesTo (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^JSType type = getType ( root ) ;JSType boxedType = instanceType.autoboxesTo (  ) ;^456^^^^^452^480^JSType boxedType = instanceType.autoboxesTo (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^ObjectType objType = instanceType.toObjectType (  ) ;JSType boxedType = instanceType.autoboxesTo (  ) ;^456^^^^^452^480^JSType boxedType = instanceType.autoboxesTo (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^JSType boxedType = boxedType.autoboxesTo (  ) ;^456^^^^^452^480^JSType boxedType = instanceType.autoboxesTo (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P14_Delete_Statement]^^456^457^^^^452^480^JSType boxedType = instanceType.autoboxesTo (  ) ; instanceType = boxedType != null ? boxedType : instanceType;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P2_Replace_Operator]^instanceType = boxedType == null ? boxedType : instanceType;^457^^^^^452^480^instanceType = boxedType != null ? boxedType : instanceType;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^instanceType = instanceType != null ? boxedType : boxedType;^457^^^^^452^480^instanceType = boxedType != null ? boxedType : instanceType;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P6_Replace_Expression]^instanceType  =  instanceType;^457^^^^^452^480^instanceType = boxedType != null ? boxedType : instanceType;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P6_Replace_Expression]^instanceType  =  boxedType ;^457^^^^^452^480^instanceType = boxedType != null ? boxedType : instanceType;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P8_Replace_Mix]^instanceType = boxedType != true ? boxedType : instanceType;^457^^^^^452^480^instanceType = boxedType != null ? boxedType : instanceType;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P8_Replace_Mix]^ObjectType objType = boxedType.toObjectType (  ) ;^460^^^^^452^480^ObjectType objType = instanceType.toObjectType (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^ObjectType prototype = type.getPrototype (  ) ;ObjectType objType = instanceType.toObjectType (  ) ;^460^^^^^452^480^ObjectType objType = instanceType.toObjectType (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^JSType boxedType = instanceType.autoboxesTo (  ) ;ObjectType objType = instanceType.toObjectType (  ) ;^460^^^^^452^480^ObjectType objType = instanceType.toObjectType (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P7_Replace_Invocation]^ObjectType objType = instanceType .isFunctionType (  )  ;^460^^^^^452^480^ObjectType objType = instanceType.toObjectType (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P14_Delete_Statement]^^460^^^^^452^480^ObjectType objType = instanceType.toObjectType (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P2_Replace_Operator]^Preconditions.checkState ( objType == null ) ;^461^^^^^452^480^Preconditions.checkState ( objType != null ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( objType != null ) ;^461^^^^^452^480^Preconditions.checkState ( objType != null ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P14_Delete_Statement]^^461^^^^^452^480^Preconditions.checkState ( objType != null ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;Preconditions.checkState ( objType != null ) ;^461^^^^^452^480^Preconditions.checkState ( objType != null ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;Preconditions.checkState ( objType != null ) ;^461^^^^^452^480^Preconditions.checkState ( objType != null ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^if  ( !isExterparent )  {^463^^^^^452^480^if  ( !isExtern )  {^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P9_Replace_Statement]^if  ( isExtern )  {^463^^^^^452^480^if  ( !isExtern )  {^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P2_Replace_Operator]^if  ( constructor == null )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^if  ( constructor != parentull )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P8_Replace_Mix]^if  ( constructor != this )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P9_Replace_Statement]^if  ( assign != null )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P9_Replace_Statement]^if  ( rhs != null )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P9_Replace_Statement]^if  ( name != null )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P15_Unwrap_Block]^java.lang.String propName = n.getLastChild().getString(); if (!(constructor.getPrototype().hasOwnProperty(propName))) {    recordSuperClassPrototypePropUse(constructor, propName, ref);}; recordSubclassPrototypePropUse(constructor, propName, ref);^468^469^470^471^472^452^480^if  ( constructor != null )  { String propName = n.getLastChild (  ) .getString (  ) ; if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  { recordSuperClassPrototypePropUse ( constructor, propName, ref ) ; }^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P16_Remove_Block]^^468^469^470^471^472^452^480^if  ( constructor != null )  { String propName = n.getLastChild (  ) .getString (  ) ; if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  { recordSuperClassPrototypePropUse ( constructor, propName, ref ) ; }^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordUnknownUse ( t, instance, parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordUnknownUse ( t, n, instance ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordUnknownUse (  n, parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordUnknownUse ( t,  parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordUnknownUse ( t, n ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordUnknownUse ( n, t, parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordUnknownUse ( t, parent, n ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordUnknownUse ( parent, n, t ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P7_Replace_Invocation]^recordStaticNameUse ( t, n, parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P14_Delete_Statement]^^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^recordPrototypePropUse ( t, n, parent ) ;recordUnknownUse ( t, n, parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^recordStaticNameUse ( t, n, parent ) ;recordUnknownUse ( t, n, parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P8_Replace_Mix]^if  ( !constructor.getPrototype (  )  .markExported (  )   )  {^470^^^^^452^480^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P9_Replace_Statement]^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^470^^^^^452^480^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P9_Replace_Statement]^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^470^^^^^452^480^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P15_Unwrap_Block]^recordSuperClassPrototypePropUse(constructor, propName, ref);^470^471^472^^^452^480^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  { recordSuperClassPrototypePropUse ( constructor, propName, ref ) ; }^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P16_Remove_Block]^^470^471^472^^^452^480^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  { recordSuperClassPrototypePropUse ( constructor, propName, ref ) ; }^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordSuperClassPrototypePropUse (  propName, ref ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordSuperClassPrototypePropUse ( constructor,  ref ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordSuperClassPrototypePropUse ( constructor, propName ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordSuperClassPrototypePropUse ( ref, propName, constructor ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordSuperClassPrototypePropUse ( constructor, ref, propName ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P7_Replace_Invocation]^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P14_Delete_Statement]^^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^recordPrototypePropUse ( t, n, parent ) ;recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P1_Replace_Type]^char propName = n.getLastChild (  ) .getchar (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^String propName = parent.getLastChild (  ) .getString (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P7_Replace_Invocation]^String propName = n.getLastChild (  ) .hasOwnProperty (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P7_Replace_Invocation]^String propName = n.getLastChild (  )  .getVar (  )  ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^String propQName = getProp.getQualifiedName (  ) ;String propName = n.getLastChild (  ) .getString (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^String qName = n.getQualifiedName (  ) ;String propName = n.getLastChild (  ) .getString (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^String name = n.getQualifiedName (  ) ;String propName = n.getLastChild (  ) .getString (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P14_Delete_Statement]^^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;String propName = n.getLastChild (  ) .getString (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P8_Replace_Mix]^if  ( !constructor .getSubTypes (  )  .hasOwnProperty ( propName )  )  {^470^^^^^452^480^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordSuperClassPrototypePropUse ( propName, constructor, ref ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordSubclassPrototypePropUse (  propName, ref ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( constructor,  ref ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( constructor, propName ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( propName, constructor, ref ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( constructor, ref, propName ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P7_Replace_Invocation]^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P14_Delete_Statement]^^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^recordPrototypePropUse ( t, n, parent ) ;recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P4_Replace_Constructor]^Reference ref = new Reference (  parent ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P4_Replace_Constructor]^Reference ref = new Reference ( n ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^Reference ref = instanceew Reference ( n, parent ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^Reference ref = parentew Reference ( n, n ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P8_Replace_Mix]^Reference ref = new Reference ( n, instance ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^Reference ref = parentew Reference ( n, parent ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^Reference ref = new Reference ( n, n ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^Reference reference = new Reference ( n, parent ) ;Reference ref = new Reference ( n, parent ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P7_Replace_Invocation]^FunctionType constructor = objType .getOwnPropertyNames (  )  ;^467^^^^^452^480^FunctionType constructor = objType.getConstructor (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^FunctionType superClass = classType.getSuperClassConstructor (  ) ;FunctionType constructor = objType.getConstructor (  ) ;^467^^^^^452^480^FunctionType constructor = objType.getConstructor (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P14_Delete_Statement]^^467^^^^^452^480^FunctionType constructor = objType.getConstructor (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P7_Replace_Invocation]^String propName = n .getFirstChild (  )  .getString (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordUnknownUse ( t, instance, parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordUnknownUse ( t, n, instance ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordUnknownUse (  n, parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordUnknownUse ( t,  parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordUnknownUse ( t, n ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordUnknownUse ( parent, n, t ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordUnknownUse ( t, parent, n ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P7_Replace_Invocation]^recordStaticNameUse ( t, n, parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P14_Delete_Statement]^^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^recordPrototypePropUse ( t, n, parent ) ;recordUnknownUse ( t, n, parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P11_Insert_Donor_Statement]^recordStaticNameUse ( t, n, parent ) ;recordUnknownUse ( t, n, parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P8_Replace_Mix]^if  ( constructor != true )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordUnknownUse ( t, parent, parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( ref, propName, constructor ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P5_Replace_Variable]^recordUnknownUse ( n, t, parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P8_Replace_Mix]^recordStaticNameUse ( t, instance, parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[P8_Replace_Mix]^FunctionType superClass = classType .isConstructor (  )  ;^487^^^^^485^498^FunctionType superClass = classType.getSuperClassConstructor (  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P11_Insert_Donor_Statement]^FunctionType constructor = objType.getConstructor (  ) ;FunctionType superClass = classType.getSuperClassConstructor (  ) ;^487^^^^^485^498^FunctionType superClass = classType.getSuperClassConstructor (  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P5_Replace_Variable]^FunctionType superClass = superClass.getSuperClassConstructor (  ) ;^487^^^^^485^498^FunctionType superClass = classType.getSuperClassConstructor (  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P14_Delete_Statement]^^487^^^^^485^498^FunctionType superClass = classType.getSuperClassConstructor (  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P11_Insert_Donor_Statement]^superClass = superClass.getSuperClassConstructor (  ) ;FunctionType superClass = classType.getSuperClassConstructor (  ) ;^487^^^^^485^498^FunctionType superClass = classType.getSuperClassConstructor (  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P2_Replace_Operator]^while  ( superClass == null )  {^488^^^^^485^498^while  ( superClass != null )  {^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P5_Replace_Variable]^while  ( classType != null )  {^488^^^^^485^498^while  ( superClass != null )  {^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P5_Replace_Variable]^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^489^^^^^485^498^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P5_Replace_Variable]^if  ( prop.getPrototype (  ) .hasOwnProperty ( superClass )  )  {^489^^^^^485^498^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P6_Replace_Expression]^if  ( superClass.getReferenceName (  )  + " )  {^489^^^^^485^498^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P7_Replace_Invocation]^if  ( superClass .getSubTypes (  )  .hasOwnProperty ( prop )  )  {^489^^^^^485^498^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P8_Replace_Mix]^if  ( superClass.getPrototype (  )  .markExported (  )   )  {^489^^^^^485^498^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P9_Replace_Statement]^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^489^^^^^485^498^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P13_Insert_Block]^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {     graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists (  (  (  ( classType.getReferenceName (  )  )  + " )  + prop ) , false )  ) ; }^489^^^^^485^498^[Delete]^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P7_Replace_Invocation]^superClass = superClass .isConstructor (  )  ;^495^^^^^485^498^superClass = superClass.getSuperClassConstructor (  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P8_Replace_Mix]^superClass =  classType.getSuperClassConstructor (  ) ;^495^^^^^485^498^superClass = superClass.getSuperClassConstructor (  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P14_Delete_Statement]^^495^^^^^485^498^superClass = superClass.getSuperClassConstructor (  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P11_Insert_Donor_Statement]^FunctionType superClass = classType.getSuperClassConstructor (  ) ;superClass = superClass.getSuperClassConstructor (  ) ;^495^^^^^485^498^superClass = superClass.getSuperClassConstructor (  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (  ^  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P3_Replace_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype.rot" + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P3_Replace_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, true )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) ,  graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." +  false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , graph, ref.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , superClass, graph.defineNameIfNotExists ( ref.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref, prop.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + graph, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P7_Replace_Invocation]^graph.connect ( popContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P7_Replace_Invocation]^graph.connect ( getNamedContainingFunction (  ) , ref, graph .defineNameIfNotExists ( prop , isExtern )   ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P14_Delete_Statement]^^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P13_Insert_Block]^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {     graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists (  (  (  ( classType.getReferenceName (  )  )  + " )  + prop ) , false )  ) ; }^490^^^^^485^498^[Delete]^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P13_Insert_Block]^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {     graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists (  (  (  ( superClass.getReferenceName (  )  )  + " )  + prop ) , false )  ) ;     return ; }else {     superClass = superClass.getSuperClassConstructor (  ) ; }^490^^^^^485^498^[Delete]^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P13_Insert_Block]^if  (  ( getNamedContainingFunction (  )  )  !=  ( graph.MAIN )  )  { }^490^^^^^485^498^[Delete]^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  <=  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  !=  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype.ro" + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, true )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." +  false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( prop.getReferenceName (  )  + ".prototype." + superClass, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P14_Delete_Statement]^^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P11_Insert_Donor_Statement]^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P11_Insert_Donor_Statement]^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P7_Replace_Invocation]^superClass .getPrototype (  )   + ".prototype." + prop, false )  ) ;^492^^^^^485^498^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P14_Delete_Statement]^^492^493^^^^485^498^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ; return;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^492^^^^^485^498^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P11_Insert_Donor_Statement]^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^492^^^^^485^498^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^492^^^^^485^498^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P8_Replace_Mix]^if  ( classType .getSubTypes (  )  .hasOwnProperty ( prop )  )  {^489^^^^^485^498^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (  <  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (  !=  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P3_Replace_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".pr" + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref, superClass.defineNameIfNotExists ( graph.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , prop, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + ref, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P8_Replace_Mix]^graph.connect ( popContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  <<  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  <  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + "r" + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P7_Replace_Invocation]^graph.defineNameIfNotExists ( superClass .getPrototype (  )   + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P14_Delete_Statement]^^492^^^^^485^498^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (  >  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (  &&  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P3_Replace_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + "tprototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P7_Replace_Invocation]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass .getPrototype (  )   + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  &&  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  >  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype.prototyp" + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (  |  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P3_Replace_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype..prototyp" + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( prop.getReferenceName (  )  + ".prototype." + superClass, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  ||  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + "totyp" + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P8_Replace_Mix]^superClass = classType .isConstructor (  )  ;^495^^^^^485^498^superClass = superClass.getSuperClassConstructor (  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[P5_Replace_Variable]^if  ( subclass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^506^^^^^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^if  ( prop.getPrototype (  ) .hasOwnProperty ( classType )  )  {^506^^^^^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P6_Replace_Expression]^if  ( classType.getReferenceName (  )  + " )  {^506^^^^^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P7_Replace_Invocation]^if  ( classType .getSubTypes (  )  .hasOwnProperty ( prop )  )  {^506^^^^^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P9_Replace_Statement]^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^506^^^^^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P9_Replace_Statement]^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^506^^^^^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P15_Unwrap_Block]^graph.connect(getNamedContainingFunction(), ref, graph.defineNameIfNotExists((((classType.getReferenceName()) + ".prototype.") + prop), false));^506^507^508^509^510^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  { graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ; }^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P16_Remove_Block]^^506^507^508^509^510^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  { graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ; }^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P13_Insert_Block]^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {     graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists (  (  (  ( superClass.getReferenceName (  )  )  + " )  + prop ) , false )  ) ;     return ; }else {     superClass = superClass.getSuperClassConstructor (  ) ; }^506^^^^^504^516^[Delete]^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (  ^  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (  <<  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P3_Replace_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + "ototy" + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P3_Replace_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, true )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref, null.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) ,  graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." +  false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , graph, ref.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , classType, graph.defineNameIfNotExists ( ref.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref, prop.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + graph, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P7_Replace_Invocation]^graph.connect ( popContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P7_Replace_Invocation]^graph.connect ( getNamedContainingFunction (  ) , ref, graph .defineNameIfNotExists ( prop , isExtern )   ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P7_Replace_Invocation]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType .getPrototype (  )   + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P8_Replace_Mix]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( subclass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P14_Delete_Statement]^^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P13_Insert_Block]^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {     graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists (  (  (  ( classType.getReferenceName (  )  )  + " )  + prop ) , false )  ) ; }^507^^^^^504^516^[Delete]^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P13_Insert_Block]^if  (  ( getNamedContainingFunction (  )  )  !=  ( graph.MAIN )  )  { }^507^^^^^504^516^[Delete]^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( classType.getReferenceName (  >  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( classType.getReferenceName (  &  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype..pro" + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, true )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( subclass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." +  false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( prop.getReferenceName (  )  + ".prototype." + classType, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P14_Delete_Statement]^^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P11_Insert_Donor_Statement]^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P11_Insert_Donor_Statement]^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P8_Replace_Mix]^classType .getPrototype (  )   + ".prototype." + prop, false )  ) ;^509^^^^^504^516^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P14_Delete_Statement]^^509^^^^^504^516^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P11_Insert_Donor_Statement]^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^509^^^^^504^516^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^509^^^^^504^516^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^509^^^^^504^516^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^509^^^^^504^516^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (  <  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P2_Replace_Operator]^graph.connect ( getNamedContainingFunction (   instanceof   ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P3_Replace_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + "ototype" + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( prop.getReferenceName (  )  + ".prototype." + classType, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( classType.getReferenceName (  !=  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P2_Replace_Operator]^graph.defineNameIfNotExists ( classType.getReferenceName (   instanceof   )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + "prprototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P2_Replace_Operator]^if  ( classType.getSubTypes (  )  == null )  {^511^^^^^504^516^if  ( classType.getSubTypes (  )  != null )  {^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P8_Replace_Mix]^if  ( classType .getPrototype (  )   != false )  {^511^^^^^504^516^if  ( classType.getSubTypes (  )  != null )  {^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P15_Unwrap_Block]^for (com.google.javascript.rhino.jstype.FunctionType subclass : classType.getSubTypes()) {    recordSubclassPrototypePropUse(subclass, prop, ref);};^511^512^513^514^^504^516^if  ( classType.getSubTypes (  )  != null )  { for  ( FunctionType subclass : classType.getSubTypes (  )  )  { recordSubclassPrototypePropUse ( subclass, prop, ref ) ; }^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P16_Remove_Block]^^511^512^513^514^^504^516^if  ( classType.getSubTypes (  )  != null )  { for  ( FunctionType subclass : classType.getSubTypes (  )  )  { recordSubclassPrototypePropUse ( subclass, prop, ref ) ; }^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^for  ( FunctionType subclass : subclass.getSubTypes (  )  )  {^512^^^^^504^516^for  ( FunctionType subclass : classType.getSubTypes (  )  )  {^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P7_Replace_Invocation]^for  ( FunctionType subclass : classType .getPrototype (  )   )  {^512^^^^^504^516^for  ( FunctionType subclass : classType.getSubTypes (  )  )  {^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P8_Replace_Mix]^for  ( FunctionType subclass : subclass .getPrototype (  )   )  {^512^^^^^504^516^for  ( FunctionType subclass : classType.getSubTypes (  )  )  {^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P14_Delete_Statement]^^512^513^514^^^504^516^for  ( FunctionType subclass : classType.getSubTypes (  )  )  { recordSubclassPrototypePropUse ( subclass, prop, ref ) ; }^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( classType, prop, ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^recordSubclassPrototypePropUse (  prop, ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( subclass,  ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( subclass, prop ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( ref, prop, subclass ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^recordSubclassPrototypePropUse ( prop, subclass, ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P7_Replace_Invocation]^recordSuperClassPrototypePropUse ( subclass, prop, ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P14_Delete_Statement]^^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P11_Insert_Donor_Statement]^recordPrototypePropUse ( t, n, parent ) ;recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P11_Insert_Donor_Statement]^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P11_Insert_Donor_Statement]^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P5_Replace_Variable]^if  ( subclass.getSubTypes (  )  != null )  {^511^^^^^504^516^if  ( classType.getSubTypes (  )  != null )  {^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P8_Replace_Mix]^if  ( classType .getPrototype (  )   != null )  {^511^^^^^504^516^if  ( classType.getSubTypes (  )  != null )  {^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[P8_Replace_Mix]^if  ( isExterparent )  {^519^^^^^518^529^if  ( isExtern )  {^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P9_Replace_Statement]^if  ( !isExtern )  {^519^^^^^518^529^if  ( isExtern )  {^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P4_Replace_Constructor]^Reference ref = new Reference (  parent ) ;^524^^^^^518^529^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P4_Replace_Constructor]^Reference ref = new Reference ( n ) ;^524^^^^^518^529^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P5_Replace_Variable]^Reference ref = parentew Reference ( n, n ) ;^524^^^^^518^529^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P7_Replace_Invocation]^new Pair<Name, Reference> ( popContainingFunction (  ) , ref )  ) ;^527^^^^^518^529^new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P5_Replace_Variable]^Reference ref = parentew Reference ( n, parent ) ;^524^^^^^518^529^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P5_Replace_Variable]^Reference ref = new Reference ( n, n ) ;^524^^^^^518^529^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P11_Insert_Donor_Statement]^Reference reference = new Reference ( n, parent ) ;Reference ref = new Reference ( n, parent ) ;^524^^^^^518^529^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P5_Replace_Variable]^Preconditions.checkArgument ( NodeUtil.isGetProp ( parent )  ) ;^523^^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^523^^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil.isNew ( n )  ) ;^523^^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil .isPrototypeProperty (  )   ) ;^523^^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P8_Replace_Mix]^Preconditions.checkArgument ( NodeUtil.isNew ( parent )  ) ;^523^^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P14_Delete_Statement]^^523^^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^523^^^^^518^529^[Delete]^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^523^^^^^518^529^[Delete]^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^523^^^^^518^529^[Delete]^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^523^^^^^518^529^[Delete]^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^523^^^^^518^529^[Delete]^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^523^^^^^518^529^[Delete]^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P3_Replace_Literal]^ref.setUnknown ( false ) ;^525^^^^^518^529^ref.setUnknown ( true ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P14_Delete_Statement]^^525^^^^^518^529^ref.setUnknown ( true ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P11_Insert_Donor_Statement]^name.setAliased ( true ) ;ref.setUnknown ( true ) ;^525^^^^^518^529^ref.setUnknown ( true ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P4_Replace_Constructor]^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) ew Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P4_Replace_Constructor]^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  )  )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P5_Replace_Variable]^unknownNameUse.put ( parent.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P7_Replace_Invocation]^unknownNameUse.put ( n.getLastChild (  ) .hasOwnProperty (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P7_Replace_Invocation]^unknownNameUse.put ( n.getLastChild (  )  .getVar (  )  , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P7_Replace_Invocation]^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( popContainingFunction (  ) , ref )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P14_Delete_Statement]^^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P11_Insert_Donor_Statement]^new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P7_Replace_Invocation]^unknownNameUse.put ( n .getFirstChild (  )  .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P14_Delete_Statement]^^527^^^^^518^529^new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P11_Insert_Donor_Statement]^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^527^^^^^518^529^new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P11_Insert_Donor_Statement]^graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^527^^^^^518^529^new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P14_Delete_Statement]^^523^524^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ; Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P5_Replace_Variable]^unknownNameUse.put ( ref.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , n )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P8_Replace_Mix]^unknownNameUse.put ( parent .getFirstChild (  )  .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P8_Replace_Mix]^unknownNameUse.put ( parent.getLastChild (  ) .hasOwnProperty (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[P2_Replace_Operator]^Preconditions.checkArgument ( type.isConstructor (  )  && type.isInterface (  )  ) ;^538^^^^^535^555^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( type.isConstructor (  )  || type.isInterface (  )  ) ;^538^^^^^535^555^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P7_Replace_Invocation]^Preconditions.checkArgument ( type.isConstructor (  )  || type .isConstructor (  )   ) ;^538^^^^^535^555^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P14_Delete_Statement]^^538^^^^^535^555^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^538^^^^^535^555^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^538^^^^^535^555^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^538^^^^^535^555^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P14_Delete_Statement]^^538^539^^^^535^555^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ; Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P5_Replace_Variable]^Name symbol = graph.defineNameIfNotExists ( prop, isExtern ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P5_Replace_Variable]^Name symbol = graph.defineNameIfNotExists (  isExtern ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P5_Replace_Variable]^Name symbol = graph.defineNameIfNotExists ( name ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P5_Replace_Variable]^Name symbol = graph.defineNameIfNotExists ( isExtern, name ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P5_Replace_Variable]^Name symbol = isExtern.defineNameIfNotExists ( name, graph ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P11_Insert_Donor_Statement]^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P11_Insert_Donor_Statement]^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P5_Replace_Variable]^Name symbol = name.defineNameIfNotExists ( graph, isExtern ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P14_Delete_Statement]^^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P2_Replace_Operator]^if  ( rhs == null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P5_Replace_Variable]^if  ( parent != null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P5_Replace_Variable]^if  ( rhs != parentull )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P5_Replace_Variable]^if  ( n != rhsull )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P8_Replace_Mix]^if  ( parent != false )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P9_Replace_Statement]^if  ( name == null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P9_Replace_Statement]^if  ( propQName == null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P9_Replace_Statement]^if  ( assign != null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P9_Replace_Statement]^if  ( qName == null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P9_Replace_Statement]^if  ( constructor != null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P9_Replace_Statement]^if  ( name != null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P13_Insert_Block]^if  ( isAssign ( n )  )  {     symbol.addAssignmentDeclaration ( n ) ; }else {     symbol.addFunctionDeclaration ( n ) ; }^540^^^^^535^555^[Delete]^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P5_Replace_Variable]^if  ( NodeUtil.isAssign ( rhs )  )  {^543^^^^^535^555^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P7_Replace_Invocation]^if  ( NodeUtil.isString ( n )  )  {^543^^^^^535^555^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P9_Replace_Statement]^if  ( !NodeUtil.isString ( symbol )  )  {^543^^^^^535^555^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P15_Unwrap_Block]^symbol.addAssignmentDeclaration(n);^543^544^545^546^547^535^555^if  ( NodeUtil.isAssign ( n )  )  { symbol.addAssignmentDeclaration ( n ) ; } else { symbol.addFunctionDeclaration ( n ) ; }^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P16_Remove_Block]^^543^544^545^546^547^535^555^if  ( NodeUtil.isAssign ( n )  )  { symbol.addAssignmentDeclaration ( n ) ; } else { symbol.addFunctionDeclaration ( n ) ; }^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P13_Insert_Block]^if  ( rhs != null )  {     symbol.setType ( getType ( rhs )  ) ;     if  ( isAssign ( n )  )  {         symbol.addAssignmentDeclaration ( n ) ;     }else {         symbol.addFunctionDeclaration ( n ) ;     } }^543^^^^^535^555^[Delete]^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P7_Replace_Invocation]^symbol .addAssignmentDeclaration ( gParent )  ;^546^^^^^535^555^symbol.addFunctionDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P8_Replace_Mix]^symbol.addFunctionDeclaration ( rhs ) ;^546^^^^^535^555^symbol.addFunctionDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P14_Delete_Statement]^^546^^^^^535^555^symbol.addFunctionDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P11_Insert_Donor_Statement]^prototypeProp.addAssignmentDeclaration ( assign ) ;symbol.addFunctionDeclaration ( n ) ;^546^^^^^535^555^symbol.addFunctionDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P11_Insert_Donor_Statement]^symbol.addAssignmentDeclaration ( n ) ;symbol.addFunctionDeclaration ( n ) ;^546^^^^^535^555^symbol.addFunctionDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P5_Replace_Variable]^symbol.addAssignmentDeclaration ( rhs ) ;^544^^^^^535^555^symbol.addAssignmentDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P7_Replace_Invocation]^symbol .addFunctionDeclaration ( parent )  ;^544^^^^^535^555^symbol.addAssignmentDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P14_Delete_Statement]^^544^^^^^535^555^symbol.addAssignmentDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P5_Replace_Variable]^symbol.setType ( getType ( parent )  ) ;^542^^^^^535^555^symbol.setType ( getType ( rhs )  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P7_Replace_Invocation]^symbol.setType ( pushContainingFunction ( rhs )  ) ;^542^^^^^535^555^symbol.setType ( getType ( rhs )  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P8_Replace_Mix]^symbol.setType ( pushContainingFunction ( parent )  ) ;^542^^^^^535^555^symbol.setType ( getType ( rhs )  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P14_Delete_Statement]^^542^^^^^535^555^symbol.setType ( getType ( rhs )  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P11_Insert_Donor_Statement]^JSType type = getType ( root ) ;symbol.setType ( getType ( rhs )  ) ;^542^^^^^535^555^symbol.setType ( getType ( rhs )  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P11_Insert_Donor_Statement]^symbol.setType ( type ) ;symbol.setType ( getType ( rhs )  ) ;^542^^^^^535^555^symbol.setType ( getType ( rhs )  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P11_Insert_Donor_Statement]^name.setType ( getType ( n )  ) ;symbol.setType ( getType ( rhs )  ) ;^542^^^^^535^555^symbol.setType ( getType ( rhs )  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P11_Insert_Donor_Statement]^JSType instanceType = getType ( instance ) ;symbol.setType ( getType ( rhs )  ) ;^542^^^^^535^555^symbol.setType ( getType ( rhs )  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P8_Replace_Mix]^if  ( NodeUtil.isString ( rhs )  )  {^543^^^^^535^555^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P13_Insert_Block]^if  ( ! ( isGetProp ( getProp )  )  )  {     return ; }^543^^^^^535^555^[Delete]^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P13_Insert_Block]^if  ( ! ( isString ( symbol )  )  )  {     return ; }^543^^^^^535^555^[Delete]^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P13_Insert_Block]^if  ( isFunction ( rhs )  )  {     return ; }^543^^^^^535^555^[Delete]^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P13_Insert_Block]^if  ( ! ( isGetProp ( n )  )  )  {     return false; }^543^^^^^535^555^[Delete]^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P13_Insert_Block]^if  ( isAssign ( parent )  )  {     return ; }^543^^^^^535^555^[Delete]^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P13_Insert_Block]^if  ( isName ( n )  )  {     return true; }^543^^^^^535^555^[Delete]^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P7_Replace_Invocation]^symbol .setType ( 2 )  ;^542^^^^^535^555^symbol.setType ( getType ( rhs )  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P8_Replace_Mix]^symbol .addFunctionDeclaration ( gParent )  ;^544^^^^^535^555^symbol.addAssignmentDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P7_Replace_Invocation]^symbol .addAssignmentDeclaration ( parent )  ;^546^^^^^535^555^symbol.addFunctionDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P7_Replace_Invocation]^ObjectType prototype = type .getSubTypes (  )  ;^549^^^^^535^555^ObjectType prototype = type.getPrototype (  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P11_Insert_Donor_Statement]^ObjectType objType = instanceType.toObjectType (  ) ;ObjectType prototype = type.getPrototype (  ) ;^549^^^^^535^555^ObjectType prototype = type.getPrototype (  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P14_Delete_Statement]^^549^^^^^535^555^ObjectType prototype = type.getPrototype (  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P1_Replace_Type]^for  ( char prop : prototype.getOwnPropertyNames (  )  )  {^550^^^^^535^555^for  ( String prop : prototype.getOwnPropertyNames (  )  )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P14_Delete_Statement]^^550^551^552^553^^535^555^for  ( String prop : prototype.getOwnPropertyNames (  )  )  { graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ; }^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P3_Replace_Literal]^graph.defineNameIfNotExists ( name + ".prototype..pr" + prop, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( prop + ".prototype." + prop, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( name + ".prototype." +  isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P5_Replace_Variable]^graph.defineNameIfNotExists ( name + ".prototype." + prop ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P7_Replace_Invocation]^graph.connect ( name + ".prototype." + prop, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P7_Replace_Invocation]^graph .defineNameIfNotExists ( name , isExtern )  ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P8_Replace_Mix]^graph.defineNameIfNotExists ( name + ".prototype." + name, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P14_Delete_Statement]^^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P11_Insert_Donor_Statement]^classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P11_Insert_Donor_Statement]^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[P11_Insert_Donor_Statement]^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
