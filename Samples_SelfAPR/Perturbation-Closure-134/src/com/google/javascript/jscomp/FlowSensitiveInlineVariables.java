[P1_Replace_Type]^private final char varName;^189^^^^^184^194^private final String varName;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [VARIABLES] 
[P8_Replace_Mix]^private  Node defCfgNode;^193^^^^^188^198^private final Node defCfgNode;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [VARIABLES] 
[P8_Replace_Mix]^private  Node use;^196^^^^^191^201^private final Node use;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [VARIABLES] 
[P8_Replace_Mix]^private  Node useCfgNode;^197^^^^^192^202^private final Node useCfgNode;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [VARIABLES] 
[P1_Replace_Type]^private  long  numUseWithinUseCfgNode;^201^^^^^196^206^private int numUseWithinUseCfgNode;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^81^^^^^80^82^this.compiler = compiler;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Preconditions.checkArgument ( NodeUtil.isName ( useCfgNode )  ) ;^204^^^^^203^209^Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil.isVar ( use )  ) ;^204^^^^^203^209^Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^204^^^^^203^209^Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isFunction ( t.getScopeRoot (  )  )  ) ;Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;^204^^^^^203^209^Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;^204^^^^^203^209^Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^204^205^^^^203^209^Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ; this.varName = varName;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^this.varName =  null;^205^^^^^203^209^this.varName = varName;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^this.defCfgNode = useCfgNode;^206^^^^^203^209^this.defCfgNode = defCfgNode;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^this.useCfgNode = useCfgNode;this.defCfgNode = defCfgNode;^206^^^^^203^209^this.defCfgNode = defCfgNode;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^this.use = useCfgNode;^207^^^^^203^209^this.use = use;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^this.useCfgNode = useCfgNode;this.use = use;^207^^^^^203^209^this.use = use;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^this.useCfgNode = use;^208^^^^^203^209^this.useCfgNode = useCfgNode;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^this.useCfgNode =  null;^208^^^^^203^209^this.useCfgNode = useCfgNode;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^this.defCfgNode = defCfgNode;this.useCfgNode = useCfgNode;^208^^^^^203^209^this.useCfgNode = useCfgNode;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^this.use = use;this.useCfgNode = useCfgNode;^208^^^^^203^209^this.useCfgNode = useCfgNode;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( t.traverse (  )  )  {^87^^^^^85^114^if  ( t.inGlobalScope (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P15_Unwrap_Block]^return ;^87^88^89^^^85^114^if  ( t.inGlobalScope (  )  )  { return; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P16_Remove_Block]^^87^88^89^^^85^114^if  ( t.inGlobalScope (  )  )  { return; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( graphNode == null )  {     return ; }^87^^^^^85^114^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, true ) ;^92^^^^^85^114^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, false ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isAssign ( useCfgNode )   ) ;^94^^^^^85^114^Preconditions.checkState ( NodeUtil.isFunction ( t.getScopeRoot (  )  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil.isFunction ( t.traverse (  )  )  ) ;^94^^^^^85^114^Preconditions.checkState ( NodeUtil.isFunction ( t.getScopeRoot (  )  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil.isFunction ( t .getScope (  )   )  ) ;^94^^^^^85^114^Preconditions.checkState ( NodeUtil.isFunction ( t.getScopeRoot (  )  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^94^95^^^^85^114^Preconditions.checkState ( NodeUtil.isFunction ( t.getScopeRoot (  )  )  ) ; cfa.process ( null, t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;Preconditions.checkState ( NodeUtil.isFunction ( t.getScopeRoot (  )  )  ) ;^94^^^^^85^114^Preconditions.checkState ( NodeUtil.isFunction ( t.getScopeRoot (  )  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;Preconditions.checkState ( NodeUtil.isFunction ( t.getScopeRoot (  )  )  ) ;^94^^^^^85^114^Preconditions.checkState ( NodeUtil.isFunction ( t.getScopeRoot (  )  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^94^^^^^85^114^Preconditions.checkState ( NodeUtil.isFunction ( t.getScopeRoot (  )  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^cfa.process ( null.getScopeRoot (  ) .getLastChild (  )  ) ;^95^^^^^85^114^cfa.process ( null, t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^cfa.process ( null, t.getScopeRoot (  ) .isExported (  )  ) ;^95^^^^^85^114^cfa.process ( null, t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^cfa.process ( null, t.traverse (  ) .getLastChild (  )  ) ;^95^^^^^85^114^cfa.process ( null, t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^cfa.process ( null, t .getScope (  )  .getLastChild (  )  ) ;^95^^^^^85^114^cfa.process ( null, t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^95^^^^^85^114^cfa.process ( null, t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^t.getScopeRoot (  ) .getLastChild (  )  ) ;cfa.process ( null, t.getScopeRoot (  ) .getLastChild (  )  ) ;^95^^^^^85^114^cfa.process ( null, t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^cfa.process ( null, t.getScopeRoot (  )  .getType (  )   ) ;^95^^^^^85^114^cfa.process ( null, t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^95^96^^^^85^114^cfa.process ( null, t.getScopeRoot (  ) .getLastChild (  )  ) ; cfg = cfa.getCfg (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^cfg = cfa.process (  ) ;^96^^^^^85^114^cfg = cfa.getCfg (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^cfg =  null.getCfg (  ) ;^96^^^^^85^114^cfg = cfa.getCfg (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^96^^^^^85^114^cfg = cfa.getCfg (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^reachingDef = new MustBeReachingVariableDef ( cfg.getScope (  ) , compiler ) ;^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^reachingDef = new MustBeReachingVariableDef (  t.getScope (  ) , compiler ) ;^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  )  ) ;^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^reachingDef = new MustBeReachingVariableDef ( t, cfg.getScope (  ) , compiler ) ;^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^reachingDef = new MustBeReachingVariableDef ( compiler, t.getScope (  ) , cfg ) ;^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^reachingDef = new MustBeReachingVariableDef ( cfg, compiler.getScope (  ) , t ) ;^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^reachingDef = new MustBeReachingVariableDef ( cfg, t.traverse (  ) , compiler ) ;^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^reachingDef = new MustBeReachingVariableDef ( cfg, t .getScopeRoot (  )  , compiler ) ;^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^reachingDef =  new MusnullBeReachingVariableDef ( cfg, null.genullScope (  ) , compiler ) ;^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^98^^^^^85^114^reachingDef.analyze (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^reachingUses.analyze (  ) ;reachingDef.analyze (  ) ;^98^^^^^85^114^reachingDef.analyze (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^candidates  =  candidates ;^99^^^^^85^114^candidates = Lists.newLinkedList (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^99^^^^^85^114^candidates = Lists.newLinkedList (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^new NodeTraversal (  new GatherCandiates (  )  ) .traverse ( t.getScopeRoot (  ) .getLastChild (  )  ) ;^103^104^^^^85^114^new NodeTraversal ( compiler, new GatherCandiates (  )  ) .traverse ( t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^new NodeTraversal ( t, new GatherCandiates (  )  ) .traverse ( compiler.getScopeRoot (  ) .getLastChild (  )  ) ;^103^104^^^^85^114^new NodeTraversal ( compiler, new GatherCandiates (  )  ) .traverse ( t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^new NodeTraversal ( compiler, new GatherCandiates (  )  ) .traverse ( t.getScopeRoot (  ) .isExported (  )  ) ;^103^104^^^^85^114^new NodeTraversal ( compiler, new GatherCandiates (  )  ) .traverse ( t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^new NodeTraversal ( compiler, new GatherCandiates (  )  ) .traverse ( t.getScopeRoot (  )  .getType (  )   ) ;^103^104^^^^85^114^new NodeTraversal ( compiler, new GatherCandiates (  )  ) .traverse ( t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^new NodeTraversal ( compiler, new GatherCandiates (  )  ) .traverse ( t.traverse (  ) .getLastChild (  )  ) ;^103^104^^^^85^114^new NodeTraversal ( compiler, new GatherCandiates (  )  ) .traverse ( t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^103^104^^^^85^114^new NodeTraversal ( compiler, new GatherCandiates (  )  ) .traverse ( t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^t.getScopeRoot (  ) .isExported (  )  ) ;^104^^^^^85^114^t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^t.traverse (  ) .getLastChild (  )  ) ;^104^^^^^85^114^t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^t .getScope (  )  .getLastChild (  )  ) ;^104^^^^^85^114^t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^104^^^^^85^114^t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Node rhs = def.getLastChild (  ) ;t.getScopeRoot (  ) .getLastChild (  )  ) ;^104^^^^^85^114^t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^cfa.process ( null, t.getScopeRoot (  ) .getLastChild (  )  ) ;t.getScopeRoot (  ) .getLastChild (  )  ) ;^104^^^^^85^114^t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^reachingUses = new MaybeReachingVariableUse ( cfg.getScope (  ) , compiler ) ;^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^reachingUses = new MaybeReachingVariableUse (  t.getScope (  ) , compiler ) ;^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  )  ) ;^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^reachingUses = new MaybeReachingVariableUse ( t, cfg.getScope (  ) , compiler ) ;^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^reachingUses = new MaybeReachingVariableUse ( compiler, t.getScope (  ) , cfg ) ;^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^reachingUses = new MaybeReachingVariableUse ( cfg, t.traverse (  ) , compiler ) ;^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^reachingUses = new MaybeReachingVariableUse ( cfg, t .getScopeRoot (  )  , compiler ) ;^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^reachingUses =  new MaybeReachingVariableUse ( cfg, null.genullScope (  ) , compiler ) ;^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^reachingUses = new MaybeReachingVariableUse ( cfg, compiler.getScope (  ) , t ) ;^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^108^^^^^85^114^reachingUses.analyze (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^reachingDef.analyze (  ) ;reachingUses.analyze (  ) ;^108^^^^^85^114^reachingUses.analyze (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P15_Unwrap_Block]^c.inlineVariable();^110^111^112^^^85^114^if  ( c.canInline (  )  )  { c.inlineVariable (  ) ; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P16_Remove_Block]^^110^111^112^^^85^114^if  ( c.canInline (  )  )  { c.inlineVariable (  ) ; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^c .canInline (  )  ;^111^^^^^85^114^c.inlineVariable (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^111^^^^^85^114^c.inlineVariable (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( c .Candidate ( varName , use , useCfgNode , use )   )  {^110^^^^^85^114^if  ( c.canInline (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^( new NodeTraversal ( compiler, this )  ) .traverse ( useCfgNode ) ;^121^^^^^120^122^( new NodeTraversal ( compiler, this )  ) .traverse ( root ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  externs  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^( new NodeTraversal (  this )  ) .traverse ( root ) ;^121^^^^^120^122^( new NodeTraversal ( compiler, this )  ) .traverse ( root ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  externs  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^( new NodeTraversal ( root, this )  ) .traverse ( compiler ) ;^121^^^^^120^122^( new NodeTraversal ( compiler, this )  ) .traverse ( root ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  externs  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^( new NodeTraversal ( compiler, this )  ) .traverse ( use ) ;^121^^^^^120^122^( new NodeTraversal ( compiler, this )  ) .traverse ( root ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  externs  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^121^^^^^120^122^( new NodeTraversal ( compiler, this )  ) .traverse ( root ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  externs  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( useCfgNode ) ;^143^^^^^128^158^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( n ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^DiGraphNode<Node, Branch> graphNode = n.getDirectedGraphNode ( cfg ) ;^143^^^^^128^158^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( n ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( parent ) ;^143^^^^^128^158^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( n ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^DiGraphNode<Node, Branch> graphNode = 2.getDirectedGraphNode ( n ) ;^143^^^^^128^158^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( n ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P14_Delete_Statement]^^143^^^^^128^158^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( n ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P2_Replace_Operator]^if  ( graphNode != null )  {^144^^^^^129^159^if  ( graphNode == null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^if  ( graphNode == true )  {^144^^^^^129^159^if  ( graphNode == null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P9_Replace_Statement]^if  ( def == null )  {^144^^^^^129^159^if  ( graphNode == null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P9_Replace_Statement]^if  ( defNode != null )  {^144^^^^^129^159^if  ( graphNode == null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P15_Unwrap_Block]^return ;^144^145^146^147^^129^159^if  ( graphNode == null )  {  return; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P16_Remove_Block]^^144^145^146^147^^129^159^if  ( graphNode == null )  {  return; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P13_Insert_Block]^if  (  ( uses.size (  )  )  != 1 )  {     return false; }^144^^^^^129^159^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P13_Insert_Block]^if  ( t.inGlobalScope (  )  )  {     return ; }^144^^^^^129^159^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P13_Insert_Block]^if  (  ( def )  == null )  {     return false; }^144^^^^^129^159^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P14_Delete_Statement]^^148^149^^^^133^163^FlowState<MustDef> state = graphNode.getAnnotation (  ) ; final MustDef defs = state.getIn (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P14_Delete_Statement]^^149^^^^^134^164^final MustDef defs = state.getIn (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^final Node cfgNode = root;^150^^^^^135^165^final Node cfgNode = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^final Node cfgNode = useCfgNode;^150^^^^^135^165^final Node cfgNode = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC)) || (parent.getType() == DEC) || parent.getType() == LP) )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC) || parent.getType() == DEC) )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent) || parent.getType() == INC) )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n) || isVar(parent)) )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent && parent.getFirstChild() == n) )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( parent.getFirstChild (  )  == n )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( parent.getType (  )  == INC )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( parent.getType (  )  == DEC )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( parent.getType (  )  == LP )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( parent.getType (  )  == CATCH )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( defNode != null )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( n )  )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( use )  )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( defCfgNode )  )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P9_Replace_Statement]^if  ( NodeUtil.isAssign ( def )  )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P13_Insert_Block]^if  (  (  (  (  (  (  ( isAssignmentOp ( parent )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  ||  ( isVar ( parent )  )  )  ||  (  ( parent.getType (  )  )  ==  ( INC )  )  )  ||  (  ( parent.getType (  )  )  ==  ( DEC )  )  )  ||  (  ( parent.getType (  )  )  ==  ( LP )  )  )  ||  (  ( parent.getType (  )  )  ==  ( CATCH )  )  )  {     return ; }^156^^^^^141^171^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) && NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  || parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  != n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  <= n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  >= n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( root )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) ) {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  (  NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC)) || (parent.getType() == DEC) || parent.getType() == LP) )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC) || parent.getType() == DEC) )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent) || parent.getType() == INC) )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n) || isVar(parent)) )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent && parent.getFirstChild() == n) )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( parent.getFirstChild (  )  == n )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( parent.getType (  )  == INC )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( parent.getType (  )  == DEC )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( parent.getType (  )  == LP )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P6_Replace_Expression]^if  ( parent.getType (  )  == CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssign ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.removeChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent .getLastChild (  )   == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isName ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.removeChild (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent .getString (  )   == Token.INC || parent^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P15_Unwrap_Block]^return ;^159^160^161^162^163^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  { return; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P16_Remove_Block]^^159^160^161^162^163^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  { return; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^if  ( compiler.getCodingConvention (  ) .isExported ( varName )  )  {^167^^^^^152^182^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^if  ( name.getCodingConvention (  ) .isExported ( compiler )  )  {^167^^^^^152^182^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^if  ( compiler.getCodingConvention (  ) .equals ( name )  )  {^167^^^^^152^182^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^if  ( compiler.getCodingConvention (  )  .getType (  )   )  {^167^^^^^152^182^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^if  ( compiler.reportCodeChange (  ) .isExported ( name )  )  {^167^^^^^152^182^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P15_Unwrap_Block]^return ;^167^168^169^^^152^182^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  { return; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P16_Remove_Block]^^167^168^169^^^152^182^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  { return; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P2_Replace_Operator]^if  ( defNode == null )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^if  ( root != null )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^if  ( defNode != rootull )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^if  ( n != defNodeull )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^if  ( defNode != true )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P9_Replace_Statement]^if  ( def == null )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P9_Replace_Statement]^if  ( graphNode == null )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P15_Unwrap_Block]^candidates.add(new com.google.javascript.jscomp.FlowSensitiveInlineVariables.Candidate(name, defNode, n, cfgNode));^172^173^174^^^157^187^if  ( defNode != null )  { candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P16_Remove_Block]^^172^173^174^^^157^187^if  ( defNode != null )  { candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P4_Replace_Constructor]^candidates.add ( new Candidate (  defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P4_Replace_Constructor]^candidates.add ( new Candidate ( name,  n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P4_Replace_Constructor]^candidates.add ( new Candidate ( name, defNode,  cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P4_Replace_Constructor]^candidates.add ( new Candidate ( name, defNode, n )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^candidates.add ( new Candidate ( varName, defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, useCfgNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^candidates.add ( useCfgNodeew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, defNode, n, root )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^candidates.add ( nameew Candidate ( n, defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, cfgNode, n, defNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^candidates.add ( defNodeew Candidate ( name, n, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P13_Insert_Block]^if  ( defNode != null )  {     candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ; }^173^^^^^158^188^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, root, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^candidates.add ( rootew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, defNode, n, use )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^candidates.add ( new Candidate ( cfgNode, defNode, n, name )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^candidates.add ( cfgNodeew Candidate ( name, defNode, n, n )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^candidates.add ( new Candidate ( name, defNode, n, useCfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P14_Delete_Statement]^^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^candidates.add ( new Candidate ( defNode, name, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P1_Replace_Type]^char name = n.getchar (  ) ;^166^^^^^151^181^String name = n.getString (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^String useame = n.getString (  ) ;^166^^^^^151^181^String name = n.getString (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^String name = n.removeChild (  ) ;^166^^^^^151^181^String name = n.getString (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^String rootame = n.getString (  ) ;^166^^^^^151^181^String name = n.getString (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( varName, cfgNode ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef (  cfgNode ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( name ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^Node defNode = name.getDef ( reachingDef, cfgNode ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^Node defNode = cfgNode.getDef ( name, reachingDef ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P11_Insert_Donor_Statement]^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;Node defNode = reachingDef.getDef ( name, cfgNode ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^if  (  ( NodeUtil .isAssign ( use )   && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^if  (  ( NodeUtil.isAssignmentOp ( useCfgNode )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^159^^^^^144^174^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^if  (  ( NodeUtil.isAssignmentOp ( useCfgNode )  && parent.removeChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^|| NodeUtil.isVar ( useCfgNode )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^145^175^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^|| NodeUtil.isName ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^145^175^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^|| NodeUtil.isName ( use )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^145^175^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^160^^^^^145^175^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^|| NodeUtil.isVar ( n )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^145^175^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^|| NodeUtil.isVar ( parent )  || parent.removeChild (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^145^175^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^parent.getType (  )  == Token.DEC || root.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^146^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^parent.removeChild (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^146^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^parent.getType (  )  == Token.DEC || useCfgNode.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^146^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P14_Delete_Statement]^^161^162^163^^^146^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  { return;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^parent.removeChild (  )  == Token.CATCH )  {^162^^^^^147^177^parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^parent .getString (  )   == Token.CATCH )  {^162^^^^^147^177^parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P14_Delete_Statement]^^162^163^^^^147^177^parent.getType (  )  == Token.CATCH )  { return;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^String useCfgNodeame = n.getString (  ) ;^166^^^^^151^181^String name = n.getString (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^String name = n .getParent (  )  ;^166^^^^^151^181^String name = n.getString (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^String parentame = n.getString (  ) ;^166^^^^^151^181^String name = n.getString (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P14_Delete_Statement]^^166^^^^^151^181^String name = n.getString (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {     return ; }^167^^^^^152^182^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( name, useCfgNode ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( cfgNode, name ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^Node defNode = reachingDef.getDef ( name, root ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P14_Delete_Statement]^^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^candidates.add ( parentew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^candidates.add ( useew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  > n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == use ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.null || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^if  ( use != null )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^if  ( defNode != false )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, use, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^AbstractCfgNodeTraversalCallback gatherCb = parentew AbstractCfgNodeTraversalCallback (  )  {^151^152^^^^136^166^AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^AbstractCfgNodeTraversalCallback gatherCb = useCfgNodeew AbstractCfgNodeTraversalCallback (  )  {^151^152^^^^136^166^AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( name, use ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^if  ( NodeUtil .isVar ( cfgNode )   )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^156^^^^^141^171^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^if  (  ( NodeUtil.isAssign ( useCfgNode )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.removeChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^|| NodeUtil.isName ( n )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^145^175^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^|| NodeUtil.isVar ( parent )  || parent .getString (  )   == Token.INC || parent^160^161^162^^^145^175^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P7_Replace_Invocation]^parent .getString (  )   == Token.DEC || parent^161^162^^^^146^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^parent.getType (  )  == Token.DEC || n.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^146^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, use, gatherCb ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  gatherCb ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, cfgNode ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^NodeTraversal.traverse (  cfgNode, gatherCb ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^NodeTraversal.traverse ( cfgNode, compiler, gatherCb ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^NodeTraversal.traverse ( gatherCb, cfgNode, compiler ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P8_Replace_Mix]^NodeTraversal.traverse ( compiler, useCfgNode, gatherCb ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P14_Delete_Statement]^^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, n, gatherCb ) ;NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( useCfgNode )  )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC)) || (parent.getType() == DEC) || parent.getType() == LP) )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC) || parent.getType() == DEC) )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent) || parent.getType() == INC) )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n) || isVar(parent)) )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent && parent.getFirstChild() == n) )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( parent.getFirstChild (  )  == n )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( parent.getType (  )  == INC )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( parent.getType (  )  == DEC )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( parent.getType (  )  == LP )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( parent.getType (  )  == CATCH )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( defNode != null )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( n )  )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( defCfgNode )  )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P9_Replace_Statement]^if  ( NodeUtil.isAssign ( def )  )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  (  (  (  (  (  ( isAssignmentOp ( parent )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  ||  ( isVar ( parent )  )  )  ||  (  ( parent.getType (  )  )  ==  ( INC )  )  )  ||  (  ( parent.getType (  )  )  ==  ( DEC )  )  )  ||  (  ( parent.getType (  )  )  ==  ( LP )  )  )  ||  (  ( parent.getType (  )  )  ==  ( CATCH )  )  )  {     return ; }^156^^^^^155^176^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) && NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  || parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  != n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  >= n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  <= n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  < n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( useCfgNode )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == use ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) ) {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  (  NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC)) || (parent.getType() == DEC) || parent.getType() == LP) )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC) || parent.getType() == DEC) )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent) || parent.getType() == INC) )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n) || isVar(parent)) )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent && parent.getFirstChild() == n) )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( parent.getFirstChild (  )  == n )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( parent.getType (  )  == INC )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( parent.getType (  )  == DEC )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( parent.getType (  )  == LP )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( parent.getType (  )  == CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssign ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.removeChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent .getLastChild (  )   == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isName ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil .isName ( def )   || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.removeChild (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent .getString (  )   == Token.INC || parent^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == use ) ) {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P15_Unwrap_Block]^return ;^159^160^161^162^163^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  { return; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P16_Remove_Block]^^159^160^161^162^163^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  { return; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( compiler.getCodingConvention (  ) .isExported ( varName )  )  {^167^^^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( name.getCodingConvention (  ) .isExported ( compiler )  )  {^167^^^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( compiler.getCodingConvention (  ) .equals ( name )  )  {^167^^^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( compiler.reportCodeChange (  ) .isExported ( name )  )  {^167^^^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P15_Unwrap_Block]^return ;^167^168^169^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  { return; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P16_Remove_Block]^^167^168^169^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  { return; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^if  ( defNode == null )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( useCfgNode != null )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( defNode != useCfgNodeull )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( n != defNodeull )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( defNode != false )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P9_Replace_Statement]^if  ( def == null )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P9_Replace_Statement]^if  ( graphNode == null )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P15_Unwrap_Block]^candidates.add(new com.google.javascript.jscomp.FlowSensitiveInlineVariables.Candidate(name, defNode, n, cfgNode));^172^173^174^^^155^176^if  ( defNode != null )  { candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P16_Remove_Block]^^172^173^174^^^155^176^if  ( defNode != null )  { candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P4_Replace_Constructor]^candidates.add ( new Candidate (  defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P4_Replace_Constructor]^candidates.add ( new Candidate ( name,  n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P4_Replace_Constructor]^candidates.add ( new Candidate ( name, defNode,  cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P4_Replace_Constructor]^candidates.add ( new Candidate ( name, defNode, n )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^candidates.add ( new Candidate ( varName, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^candidates.add ( useCfgNodeew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, defNode, n, root )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^candidates.add ( nameew Candidate ( n, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^candidates.add ( defNodeew Candidate ( name, n, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, cfgNode, n, defNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( defNode != null )  {     candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ; }^173^^^^^155^176^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, useCfgNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^candidates.add ( rootew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^candidates.add ( cfgNodeew Candidate ( name, defNode, n, n )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^candidates.add ( new Candidate ( cfgNode, defNode, n, name )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^candidates.add ( useew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, root, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, defNode, n, useCfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P1_Replace_Type]^char name = n.getchar (  ) ;^166^^^^^155^176^String name = n.getString (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^String useCfgNodeame = n.getString (  ) ;^166^^^^^155^176^String name = n.getString (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^String name = n.removeChild (  ) ;^166^^^^^155^176^String name = n.getString (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( varName, cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( name, useCfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef (  cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( name ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( cfgNode, name ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node defNode = cfgNode.getDef ( name, reachingDef ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node defNode = name.getDef ( reachingDef, cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;Node defNode = reachingDef.getDef ( name, cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^159^^^^^155^176^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^|| NodeUtil.isVar ( n )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^155^176^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^|| NodeUtil.isName ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^155^176^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^|| NodeUtil.isVar ( useCfgNode )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^155^176^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^160^^^^^155^176^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^|| NodeUtil.isVar ( root )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^155^176^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^|| NodeUtil.isVar ( parent )  || parent.removeChild (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^155^176^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^|| NodeUtil.isVar ( use )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^155^176^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^parent.getType (  )  == Token.DEC || root.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^155^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^parent.removeChild (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^155^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^parent .getString (  )   == Token.DEC || parent^161^162^^^^155^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^161^162^163^^^155^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  { return;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^parent.getType (  )  == Token.DEC || useCfgNode.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^155^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^parent.removeChild (  )  == Token.CATCH )  {^162^^^^^155^176^parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^162^163^^^^155^176^parent.getType (  )  == Token.CATCH )  { return;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^String parentame = n.getString (  ) ;^166^^^^^155^176^String name = n.getString (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^166^^^^^155^176^String name = n.getString (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {     return ; }^167^^^^^155^176^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, parent, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^candidates.add ( parentew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  > n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == useCfgNode ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == root ) || NodeUtil.isVar ( parent )  || parent.removeChild (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( name, use ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( root )  )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^156^^^^^155^176^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( use )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.removeChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^parent.getType (  )  == Token.DEC || n.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^155^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^parent .getString (  )   == Token.CATCH )  {^162^^^^^155^176^parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^String name = n .getParent (  )  ;^166^^^^^155^176^String name = n.getString (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( compiler.getCodingConvention (  )  .getType (  )   )  {^167^^^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( compiler.getCodingConvention (  ) .equals ( varName )  )  {^167^^^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( name, root ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^candidates.add ( new Candidate ( defNode, name, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isFunction ( root )  )  {^214^^^^^199^229^if  ( NodeUtil.isFunction ( defCfgNode )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunction (  )   )  {^214^^^^^199^229^if  ( NodeUtil.isFunction ( defCfgNode )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil.isFunction ( n )  )  {^214^^^^^199^229^if  ( NodeUtil.isFunction ( defCfgNode )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P9_Replace_Statement]^if  ( NodeUtil.isAssign ( def )  )  {^214^^^^^199^229^if  ( NodeUtil.isFunction ( defCfgNode )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( n )  )  {^214^^^^^199^229^if  ( NodeUtil.isFunction ( defCfgNode )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P15_Unwrap_Block]^return false;^214^215^216^^^199^229^if  ( NodeUtil.isFunction ( defCfgNode )  )  { return false; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P16_Remove_Block]^^214^215^216^^^199^229^if  ( NodeUtil.isFunction ( defCfgNode )  )  { return false; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  ( isName ( n )  )  &&  ( n.getString (  ) .equals ( varName )  )  )  {      ( numUseWithinUseCfgNode ) ++; }^214^^^^^199^229^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  ( isName ( lhs )  )  &&  ( lhs.getString (  ) .equals ( varName )  )  )  {     def = n; }^214^^^^^199^229^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( mayHaveSideEffects ( def.getLastChild (  )  )  )  {     return false; }^214^^^^^199^229^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  ( isAssign ( def )  )  &&  ( ! ( isExprAssign ( def.getParent (  )  )  )  )  )  {     return false; }^214^^^^^199^229^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^return true;^215^^^^^200^230^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isFunction ( use )  )  {^214^^^^^199^229^if  ( NodeUtil.isFunction ( defCfgNode )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^214^^^^^199^229^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^getDefinition ( n, null ) ;^218^^^^^203^233^getDefinition ( defCfgNode, null ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^getDefinition ( parent, null ) ;^218^^^^^203^233^getDefinition ( defCfgNode, null ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^218^^^^^203^233^getDefinition ( defCfgNode, null ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^getNumUseInUseCfgNode ( useCfgNode, null ) ;getDefinition ( defCfgNode, null ) ;^218^^^^^203^233^getDefinition ( defCfgNode, null ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^getNumUseInUseCfgNode ( use, null ) ;^219^^^^^204^234^getNumUseInUseCfgNode ( useCfgNode, null ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^219^^^^^204^234^getNumUseInUseCfgNode ( useCfgNode, null ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^getDefinition ( defCfgNode, null ) ;getNumUseInUseCfgNode ( useCfgNode, null ) ;^219^^^^^204^234^getNumUseInUseCfgNode ( useCfgNode, null ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^if  ( def != null )  {^222^^^^^207^237^if  ( def == null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( useCfgNode == null )  {^222^^^^^207^237^if  ( def == null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( def == false )  {^222^^^^^207^237^if  ( def == null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P9_Replace_Statement]^if  ( graphNode == null )  {^222^^^^^207^237^if  ( def == null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P9_Replace_Statement]^if  ( defNode != null )  {^222^^^^^207^237^if  ( def == null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P15_Unwrap_Block]^return false;^222^223^224^^^207^237^if  ( def == null )  { return false; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P16_Remove_Block]^^222^223^224^^^207^237^if  ( def == null )  { return false; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  ( uses.size (  )  )  != 1 )  {     return false; }^222^^^^^207^237^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( graphNode == null )  {     return ; }^222^^^^^207^237^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  ( numUseWithinUseCfgNode )  != 1 )  {     return false; }^222^^^^^207^237^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^return true;^223^^^^^208^238^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^if  ( NodeUtil.isAssign ( def )  || !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isAssign ( root )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( NodeUtil.isAssign ( def )  ) {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  (  !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isFunction ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isFunction ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getString (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P15_Unwrap_Block]^return false;^228^229^230^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  { return false; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P16_Remove_Block]^^228^229^230^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  { return false; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  ( isName ( lhs )  )  &&  ( lhs.getString (  ) .equals ( varName )  )  )  {     def = n; }^228^^^^^213^243^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( mayHaveSideEffects ( def.getLastChild (  )  )  )  {     return false; }^228^^^^^213^243^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^228^^^^^213^243^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^return true;^229^^^^^214^244^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isAssign ( n )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil .isExprAssign (  )   && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil.isAssign ( parent )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil.isAssign ( useCfgNode )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.mayHaveSideEffects ( use.getLastChild (  )  )  )  {^235^^^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isFunction ( def.getLastChild (  )  )  )  {^235^^^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil .isAssignmentOp ( defNode )   )  {^235^^^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.mayHaveSideEffects ( def.getFirstChild (  )  )  )  {^235^^^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil.mayHaveSideEffects ( n.getLastChild (  )  )  )  {^235^^^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P15_Unwrap_Block]^return false;^235^236^237^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  { return false; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P16_Remove_Block]^^235^236^237^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  { return false; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  ( isName ( n )  )  &&  ( n.getString (  ) .equals ( varName )  )  )  {      ( numUseWithinUseCfgNode ) ++; }^235^^^^^220^250^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  ( isName ( lhs )  )  &&  ( lhs.getString (  ) .equals ( varName )  )  )  {     def = n; }^235^^^^^220^250^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  ( isAssign ( def )  )  &&  ( ! ( isExprAssign ( def.getParent (  )  )  )  )  )  {     return false; }^235^^^^^220^250^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^235^^^^^220^250^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^return true;^236^^^^^221^251^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.mayHaveSideEffects ( root.getLastChild (  )  )  )  {^235^^^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.mayHaveSideEffects ( def .getType (  )   )  )  {^235^^^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil.isFunction ( n.getLastChild (  )  )  )  {^235^^^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( mayHaveSideEffects ( def.getLastChild (  )  )  )  {     return false; }^235^^^^^220^250^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^if  ( numUseWithinUseCfgNode <= 1 )  {^244^^^^^229^259^if  ( numUseWithinUseCfgNode != 1 )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^if  ( numUseWithinUseCfgNode != 5 )  {^244^^^^^229^259^if  ( numUseWithinUseCfgNode != 1 )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( numUseWithinUseCfgNode != 0 )  {^244^^^^^229^259^if  ( numUseWithinUseCfgNode != 1 )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P15_Unwrap_Block]^return false;^244^245^246^^^229^259^if  ( numUseWithinUseCfgNode != 1 )  { return false; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P16_Remove_Block]^^244^245^246^^^229^259^if  ( numUseWithinUseCfgNode != 1 )  { return false; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  ( uses.size (  )  )  != 1 )  {     return false; }^244^^^^^229^259^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  ( def )  == null )  {     return false; }^244^^^^^229^259^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^return true;^245^^^^^230^260^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.has ( root.getLastChild (  ) , new Predicate<Node> (  )  {^255^256^^^^240^270^if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.has ( def.getFirstChild (  ) , new Predicate<Node> (  )  {^255^256^^^^240^270^if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil.has ( parent.getLastChild (  ) , new Predicate<Node> (  )  {^255^256^^^^240^270^if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^return true;^278^^^^^255^279^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^return false;^266^^^^^251^281^return true;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^return true;^268^^^^^253^283^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^return !NodeUtil.isFunction ( n ) ;^275^^^^^260^290^return !NodeUtil.isFunction ( input ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^return !NodeUtil.isAssign ( input ) ;^275^^^^^260^290^return !NodeUtil.isFunction ( input ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^return !NodeUtil.isAssign ( n ) ;^275^^^^^260^290^return !NodeUtil.isFunction ( input ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P12_Insert_Condition]^if  ( NodeUtil.isFunction ( defCfgNode )  )  { return !NodeUtil.isFunction ( input ) ; }^275^^^^^260^290^return !NodeUtil.isFunction ( input ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^return true;^278^^^^^263^293^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.has ( n.getLastChild (  ) , new Predicate<Node> (  )  {^255^256^^^^240^270^if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil .isAssign ( useCfgNode )   {^255^256^^^^240^270^if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil .isAssign ( def )   {^255^256^^^^240^270^if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.has ( useCfgNode.getLastChild (  ) , new Predicate<Node> (  )  {^255^256^^^^240^270^if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.has ( def .getType (  )  , new Predicate<Node> (  )  {^255^256^^^^240^270^if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^switch  ( use.getType (  )  )  {^259^^^^^244^274^switch  ( input.getType (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^switch  ( input.removeChild (  )  )  {^259^^^^^244^274^switch  ( input.getType (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^switch  ( n.getType (  )  )  {^259^^^^^244^274^switch  ( input.getType (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^return !NodeUtil.isFunction ( root ) ;^275^^^^^260^290^return !NodeUtil.isFunction ( input ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^return !NodeUtil.isFunction ( use ) ;^275^^^^^260^290^return !NodeUtil.isFunction ( input ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^275^^^^^260^290^return !NodeUtil.isFunction ( input ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Collection<Node> uses = reachingUses.getUses ( name, defCfgNode ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Collection<Node> uses = reachingUses.getUses ( varName, n ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Collection<Node> uses = reachingUses.getUses (  defCfgNode ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Collection<Node> uses = reachingUses.getUses ( varName ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Collection<Node> uses = varName.getUses ( reachingUses, defCfgNode ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Collection<Node> uses = reachingUses.getUses ( defCfgNode, varName ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^Collection<Node> uses = reachingUses.analyze ( varName, defCfgNode ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Node defNode = reachingDef.getDef ( name, cfgNode ) ;Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Collection<Node> uses = reachingUses.getUses ( varName, useCfgNode ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Collection<Node> uses = defCfgNode.getUses ( varName, reachingUses ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^if  ( uses.size (  )  == 1 )  {^283^^^^^268^298^if  ( uses.size (  )  != 1 )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^if  ( uses.size (  )  != 4 )  {^283^^^^^268^298^if  ( uses.size (  )  != 1 )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^if  ( uses.size() - 2  != 1 )  {^283^^^^^268^298^if  ( uses.size (  )  != 1 )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( uses.size (  )  != 0  )  {^283^^^^^268^298^if  ( uses.size (  )  != 1 )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P15_Unwrap_Block]^return false;^283^284^285^^^268^298^if  ( uses.size (  )  != 1 )  { return false; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P16_Remove_Block]^^283^284^285^^^268^298^if  ( uses.size (  )  != 1 )  { return false; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  ( def )  == null )  {     return false; }^283^^^^^268^298^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( graphNode == null )  {     return ; }^283^^^^^268^298^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  ( numUseWithinUseCfgNode )  != 1 )  {     return false; }^283^^^^^268^298^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^return true;^284^^^^^269^299^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^if  ( uses.size() - 1  != 1 )  {^283^^^^^268^298^if  ( uses.size (  )  != 1 )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^return false;^287^^^^^272^302^return true;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^return false;^266^^^^^258^269^return true;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^switch  ( useCfgNode.getType (  )  )  {^259^^^^^258^269^switch  ( input.getType (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^switch  ( input.removeChild (  )  )  {^259^^^^^258^269^switch  ( input.getType (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^switch  ( use.getType (  )  )  {^259^^^^^258^269^switch  ( input.getType (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^return true;^268^^^^^258^269^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^return !NodeUtil.isFunction ( useCfgNode ) ;^275^^^^^273^276^return !NodeUtil.isFunction ( input ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^return !NodeUtil.isAssign ( input ) ;^275^^^^^273^276^return !NodeUtil.isFunction ( input ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^return !NodeUtil .isAssign ( defCfgNode )  ;^275^^^^^273^276^return !NodeUtil.isFunction ( input ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P12_Insert_Condition]^if  ( NodeUtil.isFunction ( defCfgNode )  )  { return !NodeUtil.isFunction ( input ) ; }^275^^^^^273^276^return !NodeUtil.isFunction ( input ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^return !NodeUtil .isAssign ( use )  ;^275^^^^^273^276^return !NodeUtil.isFunction ( input ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^275^^^^^273^276^return !NodeUtil.isFunction ( input ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node useParent = def.getParent (  ) ;^294^^^^^293^314^Node defParent = def.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^Node defParent = def.getString (  ) ;^294^^^^^293^314^Node defParent = def.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^Node rootParent = def.getParent (  ) ;^294^^^^^293^314^Node defParent = def.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Node useParent = use.getParent (  ) ;Node defParent = def.getParent (  ) ;^294^^^^^293^314^Node defParent = def.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Node rhs = def.getLastChild (  ) ;Node defParent = def.getParent (  ) ;^294^^^^^293^314^Node defParent = def.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^294^295^^^^293^314^Node defParent = def.getParent (  ) ; Node useParent = use.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^defParent = defParent.getParent (  ) ;Node defParent = def.getParent (  ) ;^294^^^^^293^314^Node defParent = def.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^defParent.detachFromParent (  ) ;Node defParent = def.getParent (  ) ;^294^^^^^293^314^Node defParent = def.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node parentParent = use.getParent (  ) ;^295^^^^^293^314^Node useParent = use.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^Node useParent = use.getString (  ) ;^295^^^^^293^314^Node useParent = use.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Node defParent = def.getParent (  ) ;Node useParent = use.getParent (  ) ;^295^^^^^293^314^Node useParent = use.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^Node rhsParent = use .getString (  )  ;^295^^^^^293^314^Node useParent = use.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^295^^^^^293^314^Node useParent = use.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^defParent = defParent.getParent (  ) ;Node useParent = use.getParent (  ) ;^295^^^^^293^314^Node useParent = use.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^defParent.detachFromParent (  ) ;Node useParent = use.getParent (  ) ;^295^^^^^293^314^Node useParent = use.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^while  ( defParent.getParent (  ) .getType (  )  != Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^while  ( defParent.getParent (  ) .isExported (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^while  ( defParent.removeChild (  ) .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^while  ( defParent .getString (  )  .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^while  ( useParent.getParent (  ) .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^defParent = useParent.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^defParent = defParent.removeChild (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^defParent = use.removeChild (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Node useParent = use.getParent (  ) ;defParent = defParent.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Node defParent = def.getParent (  ) ;defParent = defParent.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^defParent.detachFromParent (  ) ;defParent = defParent.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isAssign ( useCfgNode )  )  {^296^^^^^293^314^if  ( NodeUtil.isAssign ( def )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isFunction ( def )  )  {^296^^^^^293^314^if  ( NodeUtil.isAssign ( def )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil.isAssign ( use )  )  {^296^^^^^293^314^if  ( NodeUtil.isAssign ( def )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( defCfgNode )  )  {^296^^^^^293^314^if  ( NodeUtil.isAssign ( def )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( n )  )  {^296^^^^^293^314^if  ( NodeUtil.isAssign ( def )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^} else if  ( NodeUtil.isVar ( useCfgNode )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^} else if  ( NodeUtil.isVar ( useParent )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^} else if  ( NodeUtil.isVar ( defParentParent )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^} else {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isName ( defParent )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^} else if  ( NodeUtil .isName ( useCfgNode )   )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^}  if  ( NodeUtil.isName ( useParent )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^Preconditions.checkState ( true, "No other definitions can be inlined." ) ;^311^^^^^293^314^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^Preconditions.checkState ( false, "hero other definitions can be inlined." ) ;^311^^^^^293^314^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^311^^^^^293^314^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^311^^^^^293^314^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^311^^^^^293^314^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^Node rhs = def.getFirstChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^Node rhs = def .getType (  )  ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node rhs = def.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Node defParent = def.getParent (  ) ;Node rhs = def.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node rhs = rhs.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^t.getScopeRoot (  ) .getLastChild (  )  ) ;Node rhs = def.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P12_Insert_Condition]^if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  { Node rhs = def.getLastChild (  ) ; def.removeChild ( rhs ) ; }^307^308^^^^293^314^Node rhs = def.getLastChild (  ) ; def.removeChild ( rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^def.removeChild ( use ) ;^308^^^^^293^314^def.removeChild ( rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^def.removeChild ( useParent ) ;^308^^^^^293^314^def.removeChild ( rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^308^309^^^^293^314^def.removeChild ( rhs ) ; useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^useParent.replaceChild ( use, rhs ) ;def.removeChild ( rhs ) ;^308^^^^^293^314^def.removeChild ( rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^useParent.replaceChild ( use, useParent ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^useParent.replaceChild ( useParent, rhs ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^useParent.replaceChild ( use ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^useParent.replaceChild (  rhs ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^useParent.replaceChild ( rhs, use ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^useParent.replaceChild ( useCfgNode, rhs ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^def.removeChild ( rhs ) ;useParent.replaceChild ( use, rhs ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node rhs = useParent.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^Node rhs = root.getFirstChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^} else if  ( NodeUtil.isVar ( rhs )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^306^^^^^293^314^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^Node rhs = use.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^def.removeChild ( root ) ;^308^^^^^293^314^def.removeChild ( rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^def .replaceChild ( defNode , def )  ;^308^^^^^293^314^def.removeChild ( rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^308^^^^^293^314^def.removeChild ( rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^useParent.replaceChild ( use, use ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^Preconditions.checkState ( false, "er definitions can be ino other definitions can be inlined." ) ;^311^^^^^293^314^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^while  ( defParent.getParent (  ) .getType (  )  < Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^while  ( parent.getParent (  ) .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^defParent = useCfgNode.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^defParent = defParent .getString (  )  ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^defParent =  parent.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^defParent = root.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^defParent = use.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node rhs = useCfgNode.getLastChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^Node rhs = def.getFirstChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^Node rhs = root.getLastChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node rhs = def.getLastChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Node defParent = def.getParent (  ) ;Node rhs = def.getLastChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node rhs = rhs.getLastChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^Node rhs = def .getType (  )  ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^Node rhs = useParent.getFirstChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^t.getScopeRoot (  ) .getLastChild (  )  ) ;Node rhs = def.getLastChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P12_Insert_Condition]^if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  { Node rhs = def.getLastChild (  ) ; rhs.detachFromParent (  ) ; }^297^298^^^^293^314^Node rhs = def.getLastChild (  ) ; rhs.detachFromParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^rhs.removeChild (  ) ;^298^^^^^293^314^rhs.detachFromParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^298^^^^^293^314^rhs.detachFromParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^defParent.detachFromParent (  ) ;rhs.detachFromParent (  ) ;^298^^^^^293^314^rhs.detachFromParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil.isAssign ( defParent )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isAssign ( useCfgNode )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isFunction ( t.getScopeRoot (  )  )  ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil .isExprAssign (  )   ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^while  ( root.getParent (  ) .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^while  ( parent.removeChild (  ) .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^301^302^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  { defParent = defParent.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^while  ( rhs.getParent (  ) .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^defParent = rhs.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^defParent.removeChild (  ) ;^304^^^^^293^314^defParent.detachFromParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^304^305^^^^293^314^defParent.detachFromParent (  ) ; useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Node useParent = use.getParent (  ) ;defParent.detachFromParent (  ) ;^304^^^^^293^314^defParent.detachFromParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^rhs.detachFromParent (  ) ;defParent.detachFromParent (  ) ;^304^^^^^293^314^defParent.detachFromParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Node defParent = def.getParent (  ) ;defParent.detachFromParent (  ) ;^304^^^^^293^314^defParent.detachFromParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^defParent = defParent.getParent (  ) ;defParent.detachFromParent (  ) ;^304^^^^^293^314^defParent.detachFromParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^useParent.replaceChild ( use, parent ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^useParent.replaceChild ( use ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^useParent.replaceChild (  rhs ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^useParent.replaceChild ( rhs, use ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^useParent .getLastChild (  )  ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^useParent.replaceChild ( use, n ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^def.removeChild ( rhs ) ;useParent.replaceChild ( use, rhs ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^} else if  ( NodeUtil.isVar ( root )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^} else if  ( NodeUtil.isVar ( useParentParent )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^} else if  ( NodeUtil.isVar ( def )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^Preconditions.checkState ( false, " definitions " ) ;^311^^^^^293^314^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^Node rhs = useParent.getFirstChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node rhs = parent.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^307^308^^^^293^314^Node rhs = def.getLastChild (  ) ; def.removeChild ( rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^useParent.replaceChild ( use, useCfgNode ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node rhs = parent.getLastChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^Node rhs = useCfgNode .getType (  )  ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isAssign ( rhs )  )  {^296^^^^^293^314^if  ( NodeUtil.isAssign ( def )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil .isExprAssign (  )   )  {^296^^^^^293^314^if  ( NodeUtil.isAssign ( def )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^296^^^^^293^314^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^297^298^^^^293^314^Node rhs = def.getLastChild (  ) ; rhs.detachFromParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isExpressionNode ( useParent )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isExpressionNode ( rhs )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^defParent .getParent (  )  ;^304^^^^^293^314^defParent.detachFromParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^304^^^^^293^314^defParent.detachFromParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^useParent.replaceChild ( use, useCfgNode ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^useParent.replaceChild ( root, rhs ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^useParent.replaceChild ( n, rhs ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^} else if  ( NodeUtil.isVar ( parent )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^Node rhs = useCfgNode.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^useParent .getLastChild (  )  ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P3_Replace_Literal]^Preconditions.checkState ( false, "nitions can be inlinedo other definitions can be inlined." ) ;^311^^^^^293^314^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^313^^^^^293^314^compiler.reportCodeChange (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^313^^^^^293^314^compiler.reportCodeChange (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^if  ( n.getString (  ) .equals ( varName )  || n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( parent.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( n.getString (  ) .equals ( name )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( varName.getString (  ) .equals ( n )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( n.getString (  ) .equals ( varName )  ) {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  (  n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( n.getString (  ) .isExported ( varName )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( n.removeChild (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( n.getString (  ) .equals ( varName )  && n.removeChild (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( n.getString (  ) .equals ( varName )  && n .getLastChild (  )   )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P15_Unwrap_Block]^def = n;^329^330^331^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  { def = n; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P16_Remove_Block]^^329^330^331^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  { def = n; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^def = lhs;^330^^^^^321^344^def = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^def =  rhs;^330^^^^^321^344^def = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( lhs )  || lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( useCfgNode )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( name )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( varName )  && lhs.getString (  ) .equals ( lhs )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( lhs )  ) {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  (  lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil .isVar ( root )   && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .isExported ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( lhs )  && lhs.removeChild (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( use )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P15_Unwrap_Block]^def = n;^336^337^338^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  { def = n; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P16_Remove_Block]^^336^337^338^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  { def = n; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  ( isName ( n )  )  &&  ( n.getString (  ) .equals ( varName )  )  )  {      ( numUseWithinUseCfgNode ) ++; }^336^^^^^321^344^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( mayHaveSideEffects ( def.getLastChild (  )  )  )  {     return false; }^336^^^^^321^344^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  ( isAssign ( def )  )  &&  ( ! ( isExprAssign ( def.getParent (  )  )  )  )  )  {     return false; }^336^^^^^321^344^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^336^^^^^321^344^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^def = lhs;^337^^^^^321^344^def = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^def =  parent;^337^^^^^321^344^def = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^def =  parent;^330^^^^^321^344^def = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^def =  useParent;^337^^^^^321^344^def = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^AbstractCfgNodeTraversalCallback gatherCb = rootew AbstractCfgNodeTraversalCallback (  )  {^322^323^^^^321^344^AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node lhs = parent.getFirstChild (  ) ;^335^^^^^321^344^Node lhs = n.getFirstChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^Node lhs = n.removeChild (  ) ;^335^^^^^321^344^Node lhs = n.getFirstChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^Node lhs = useParent.getFirstChild (  ) ;^335^^^^^321^344^Node lhs = n.getFirstChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Node rhs = def.getLastChild (  ) ;Node lhs = n.getFirstChild (  ) ;^335^^^^^321^344^Node lhs = n.getFirstChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^switch  ( useCfgNode.getType (  )  )  {^327^^^^^321^344^switch  ( n.getType (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^switch  ( n.removeChild (  )  )  {^327^^^^^321^344^switch  ( n.getType (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^switch  ( n .getString (  )   )  {^327^^^^^321^344^switch  ( n.getType (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^switch  ( parent.removeChild (  )  )  {^327^^^^^321^344^switch  ( n.getType (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( lhs.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( rhs.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node lhs = root.getFirstChild (  ) ;^335^^^^^321^344^Node lhs = n.getFirstChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^Node lhs = useParent.removeChild (  ) ;^335^^^^^321^344^Node lhs = n.getFirstChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^335^^^^^321^344^Node lhs = n.getFirstChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( root )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( n )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( lhs )  && lhs .getParent (  )  .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( parent )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( rhs )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, n ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^NodeTraversal.traverse (  n, gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^NodeTraversal.traverse ( n, compiler, gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^NodeTraversal.traverse ( gatherCb, n, compiler ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^NodeTraversal .traverse (  )  ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^NodeTraversal.traverse ( compiler, parent, gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;NodeTraversal.traverse ( compiler, n, gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^if  ( n.getString (  ) .equals ( varName )  || n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( lhs.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( n.getString (  ) .equals ( name )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( varName.getString (  ) .equals ( n )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( n.getString (  ) .equals ( varName )  ) {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  (  n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( n.getString (  ) .isExported ( varName )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( n.getString (  )  .getLastChild (  )   && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( n.removeChild (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( n .getParent (  )  .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( n.getString (  ) .equals ( varName )  && n.removeChild (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P15_Unwrap_Block]^def = n;^329^330^331^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  { def = n; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P16_Remove_Block]^^329^330^331^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  { def = n; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^def = use;^330^^^^^326^341^def = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^def =  useParent;^330^^^^^326^341^def = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( lhs )  || lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( useParent )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( name )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( varName )  && lhs.getString (  ) .equals ( lhs )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( lhs )  ) {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  (  lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .isExported ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  )  .getLastChild (  )   )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( lhs )  && lhs.removeChild (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( lhs )  && lhs.removeChild (  ) .equals ( name )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P15_Unwrap_Block]^def = n;^336^337^338^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  { def = n; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P16_Remove_Block]^^336^337^338^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  { def = n; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  ( isName ( n )  )  &&  ( n.getString (  ) .equals ( varName )  )  )  {      ( numUseWithinUseCfgNode ) ++; }^336^^^^^326^341^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( mayHaveSideEffects ( def.getLastChild (  )  )  )  {     return false; }^336^^^^^326^341^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  ( isAssign ( def )  )  &&  ( ! ( isExprAssign ( def.getParent (  )  )  )  )  )  {     return false; }^336^^^^^326^341^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^336^^^^^326^341^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^def = useCfgNode;^337^^^^^326^341^def = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^def =  parent;^337^^^^^326^341^def = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^def = parent;^330^^^^^326^341^def = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^def = root;^337^^^^^326^341^def = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^def =  rhs;^337^^^^^326^341^def = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node lhs = root.getFirstChild (  ) ;^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^Node lhs = n.removeChild (  ) ;^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^Node lhs = n .getLastChild (  )  ;^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^Node rhs = def.getLastChild (  ) ;Node lhs = n.getFirstChild (  ) ;^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^switch  ( useParent.getType (  )  )  {^327^^^^^326^341^switch  ( n.getType (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^switch  ( n.removeChild (  )  )  {^327^^^^^326^341^switch  ( n.getType (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^switch  ( root.removeChild (  )  )  {^327^^^^^326^341^switch  ( n.getType (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( n.removeChild (  ) .equals ( name )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( parent.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( n.getString (  ) .equals ( varName )  && n .getLastChild (  )   )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( lhs.getString (  ) .equals ( varName )  && n.removeChild (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^Node lhs = parent.getFirstChild (  ) ;^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^Node lhs = useCfgNode.getFirstChild (  ) ;^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parent )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil .isVar ( externs )   && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil.isVar ( n )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( rhs )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( lhs )  && lhs .getParent (  )  .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( use )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( n )  || n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parant )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( name )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( varName )  && n.getString (  ) .equals ( n )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( n )  ) {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  (  n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( n )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil .isVar ( defParent )   && n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && n.getString (  ) .isExported ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && n.removeChild (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  (  n.getString (  ) .equals ( name )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P15_Unwrap_Block]^(numUseWithinUseCfgNode)++;^357^358^359^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  { numUseWithinUseCfgNode++; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P16_Remove_Block]^^357^358^359^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  { numUseWithinUseCfgNode++; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  ( isName ( lhs )  )  &&  ( lhs.getString (  ) .equals ( varName )  )  )  {     def = n; }^357^^^^^350^364^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( mayHaveSideEffects ( def.getLastChild (  )  )  )  {     return false; }^357^^^^^350^364^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^357^^^^^350^364^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^AbstractCfgNodeTraversalCallback gatherCb = parantew AbstractCfgNodeTraversalCallback (  )  {^352^353^^^^350^364^AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( use )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( rhs )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && n.getString (  )  .getLastChild (  )   )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( n )  && n.getString (  ) .isExported ( name )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && n .getParent (  )  .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, parent, gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, n ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^NodeTraversal.traverse (  n, gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^NodeTraversal.traverse ( n, compiler, gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, gatherCb, n ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P8_Replace_Mix]^NodeTraversal .traverse (  )  ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P14_Delete_Statement]^^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;NodeTraversal.traverse ( compiler, n, gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( n )  || n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parant )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( name )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( varName )  && n.getString (  ) .equals ( n )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( n )  ) {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P6_Replace_Expression]^if  (  n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( n )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil .isVar ( def )   && n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && n.getString (  ) .isExported ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && n.getString (  )  .getLastChild (  )   )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && n.removeChild (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P15_Unwrap_Block]^(numUseWithinUseCfgNode)++;^357^358^359^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  { numUseWithinUseCfgNode++; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P16_Remove_Block]^^357^358^359^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  { numUseWithinUseCfgNode++; }^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  (  ( isName ( lhs )  )  &&  ( lhs.getString (  ) .equals ( varName )  )  )  {     def = n; }^357^^^^^356^360^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( mayHaveSideEffects ( def.getLastChild (  )  )  )  {     return false; }^357^^^^^356^360^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^357^^^^^356^360^[Delete]^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parent )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( rhs )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[P5_Replace_Variable]^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( parent ) ;^143^^^^^128^158^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( n ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^DiGraphNode<Node, Branch> graphNode = n.getDirectedGraphNode ( cfg ) ;^143^^^^^128^158^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( n ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P14_Delete_Statement]^^143^^^^^128^158^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( n ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P2_Replace_Operator]^if  ( graphNode != null )  {^144^^^^^129^159^if  ( graphNode == null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P8_Replace_Mix]^if  ( graphNode == false )  {^144^^^^^129^159^if  ( graphNode == null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P9_Replace_Statement]^if  ( defNode != null )  {^144^^^^^129^159^if  ( graphNode == null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P15_Unwrap_Block]^return ;^144^145^146^147^^129^159^if  ( graphNode == null )  {  return; }^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P16_Remove_Block]^^144^145^146^147^^129^159^if  ( graphNode == null )  {  return; }^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P14_Delete_Statement]^^148^149^^^^133^163^FlowState<MustDef> state = graphNode.getAnnotation (  ) ; final MustDef defs = state.getIn (  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P14_Delete_Statement]^^149^150^^^^134^164^final MustDef defs = state.getIn (  ) ; final Node cfgNode = n;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^final Node cfgNode = parent;^150^^^^^135^165^final Node cfgNode = n;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parent )  )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC)) || (parent.getType() == DEC) || parent.getType() == LP) )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC) || parent.getType() == DEC) )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent) || parent.getType() == INC) )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n) || isVar(parent)) )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent && parent.getFirstChild() == n) )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( parent.getFirstChild (  )  == n )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( parent.getType (  )  == INC )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( parent.getType (  )  == DEC )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( parent.getType (  )  == LP )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( parent.getType (  )  == CATCH )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( defNode != null )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( n )  )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P13_Insert_Block]^if  (  (  (  (  (  (  ( isAssignmentOp ( parent )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  ||  ( isVar ( parent )  )  )  ||  (  ( parent.getType (  )  )  ==  ( INC )  )  )  ||  (  ( parent.getType (  )  )  ==  ( DEC )  )  )  ||  (  ( parent.getType (  )  )  ==  ( LP )  )  )  ||  (  ( parent.getType (  )  )  ==  ( CATCH )  )  )  {     return ; }^156^^^^^141^171^[Delete]^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) && NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  || parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  != n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  <= n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  > n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  >= n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( defNode )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == defNode ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) ) {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  (  NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC)) || (parent.getType() == DEC) || parent.getType() == LP) )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC) || parent.getType() == DEC) )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent) || parent.getType() == INC) )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n) || isVar(parent)) )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent && parent.getFirstChild() == n) )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( parent.getFirstChild (  )  == n )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( parent.getType (  )  == INC )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( parent.getType (  )  == DEC )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( parent.getType (  )  == LP )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P6_Replace_Expression]^if  ( parent.getType (  )  == CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isName ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isName ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil .isName ( cfgNode )   || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent .getString (  )   == Token.INC || parent^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P8_Replace_Mix]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent .getString (  )   == Token.INC || parent^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P15_Unwrap_Block]^return ;^159^160^161^162^163^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  { return; }^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P16_Remove_Block]^^159^160^161^162^163^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  { return; }^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^if  ( name.getCodingConvention (  ) .isExported ( compiler )  )  {^167^^^^^152^182^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P8_Replace_Mix]^if  ( 4.getCodingConvention (  ) .isExported ( name )  )  {^167^^^^^152^182^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P15_Unwrap_Block]^return ;^167^168^169^^^152^182^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  { return; }^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P16_Remove_Block]^^167^168^169^^^152^182^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  { return; }^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P2_Replace_Operator]^if  ( defNode == null )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^if  ( parent != null )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^if  ( defNode != parentull )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^if  ( n != defNodeull )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P8_Replace_Mix]^if  ( defNode != false )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P9_Replace_Statement]^if  ( graphNode == null )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P15_Unwrap_Block]^candidates.add(new com.google.javascript.jscomp.FlowSensitiveInlineVariables.Candidate(name, defNode, n, cfgNode));^172^173^174^^^157^187^if  ( defNode != null )  { candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ; }^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P16_Remove_Block]^^172^173^174^^^157^187^if  ( defNode != null )  { candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ; }^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P4_Replace_Constructor]^candidates.add ( new Candidate (  defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P4_Replace_Constructor]^candidates.add ( new Candidate ( name,  n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P4_Replace_Constructor]^candidates.add ( new Candidate ( name, defNode,  cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P4_Replace_Constructor]^candidates.add ( new Candidate ( name, defNode, n )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, parent, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^candidates.add ( parentew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, defNode, n, parent )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^candidates.add ( new Candidate ( cfgNode, defNode, n, name )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^candidates.add ( new Candidate ( defNode, name, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^candidates.add ( cfgNodeew Candidate ( name, defNode, n, n )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P13_Insert_Block]^if  ( defNode != null )  {     candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ; }^173^^^^^158^188^[Delete]^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, cfgNode, n, defNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P14_Delete_Statement]^^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^candidates.add ( nameew Candidate ( n, defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^candidates.add ( defNodeew Candidate ( name, n, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P1_Replace_Type]^char name = n.getchar (  ) ;^166^^^^^151^181^String name = n.getString (  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P7_Replace_Invocation]^String name = n .getFirstChild (  )  ;^166^^^^^151^181^String name = n.getString (  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P8_Replace_Mix]^String parentame = n.getString (  ) ;^166^^^^^151^181^String name = n.getString (  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( name, parent ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^Node defNode = null.getDef ( name, cfgNode ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef (  cfgNode ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( name ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^Node defNode = name.getDef ( reachingDef, cfgNode ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( cfgNode, name ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^Node defNode = cfgNode.getDef ( name, reachingDef ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P8_Replace_Mix]^if  (  ( NodeUtil .isName ( cfgNode )   && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^|| NodeUtil.isVar ( n )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^145^175^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P7_Replace_Invocation]^|| NodeUtil.isName ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^145^175^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P7_Replace_Invocation]^|| NodeUtil.isVar ( parent )  || parent .getString (  )   == Token.INC || parent^160^161^162^^^145^175^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^parent.getType (  )  == Token.DEC || n.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^146^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P14_Delete_Statement]^^161^162^163^^^146^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  { return;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P8_Replace_Mix]^parent .getString (  )   == Token.DEC || parent^161^162^^^^146^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P14_Delete_Statement]^^162^163^^^^147^177^parent.getType (  )  == Token.CATCH )  { return;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P14_Delete_Statement]^^166^^^^^151^181^String name = n.getString (  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {     return ; }^167^^^^^152^182^[Delete]^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P14_Delete_Statement]^^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.2 )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent .getString (  )   == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil .isName ( defNode )   || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P8_Replace_Mix]^if  ( parent != this )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^AbstractCfgNodeTraversalCallback gatherCb = parentew AbstractCfgNodeTraversalCallback (  )  {^151^152^^^^136^166^AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P7_Replace_Invocation]^if  ( NodeUtil .isVar ( defNode )   )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P8_Replace_Mix]^if  (  ( NodeUtil.isName ( n )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P8_Replace_Mix]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent .getString (  )   == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P8_Replace_Mix]^parent .getString (  )   == Token.DEC || n^161^162^^^^146^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P7_Replace_Invocation]^parent .getString (  )   == Token.CATCH )  {^162^^^^^147^177^parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  gatherCb ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, cfgNode ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^NodeTraversal.traverse (  cfgNode, gatherCb ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^NodeTraversal.traverse ( cfgNode, compiler, gatherCb ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, gatherCb, cfgNode ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^NodeTraversal.traverse ( gatherCb, cfgNode, compiler ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P14_Delete_Statement]^^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parent )  )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC)) || (parent.getType() == DEC) || parent.getType() == LP) )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC) || parent.getType() == DEC) )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent) || parent.getType() == INC) )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n) || isVar(parent)) )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent && parent.getFirstChild() == n) )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getFirstChild (  )  == n )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == INC )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == DEC )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == LP )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == CATCH )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( defNode != null )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( n )  )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil .isVar ( parent )   )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P13_Insert_Block]^if  (  (  (  (  (  (  ( isAssignmentOp ( parent )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  ||  ( isVar ( parent )  )  )  ||  (  ( parent.getType (  )  )  ==  ( INC )  )  )  ||  (  ( parent.getType (  )  )  ==  ( DEC )  )  )  ||  (  ( parent.getType (  )  )  ==  ( LP )  )  )  ||  (  ( parent.getType (  )  )  ==  ( CATCH )  )  )  {     return ; }^156^^^^^155^176^[Delete]^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) && NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  || parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  != n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  >= n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  < n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == defNode ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) ) {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  (  NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC)) || (parent.getType() == DEC) || parent.getType() == LP) )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC) || parent.getType() == DEC) )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent) || parent.getType() == INC) )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n) || isVar(parent)) )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent && parent.getFirstChild() == n) )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getFirstChild (  )  == n )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == INC )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == DEC )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == LP )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isName ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isName ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent .getString (  )   == Token.INC || parent^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P8_Replace_Mix]^if  (  ( NodeUtil.isAssignmentOp ( defNode )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P15_Unwrap_Block]^return ;^159^160^161^162^163^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  { return; }^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P16_Remove_Block]^^159^160^161^162^163^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  { return; }^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^if  ( name.getCodingConvention (  ) .isExported ( compiler )  )  {^167^^^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P15_Unwrap_Block]^return ;^167^168^169^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  { return; }^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P16_Remove_Block]^^167^168^169^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  { return; }^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P2_Replace_Operator]^if  ( defNode == null )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^if  ( parent != null )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^if  ( defNode != parentull )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P8_Replace_Mix]^if  ( defNode != true )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P9_Replace_Statement]^if  ( graphNode == null )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P15_Unwrap_Block]^candidates.add(new com.google.javascript.jscomp.FlowSensitiveInlineVariables.Candidate(name, defNode, n, cfgNode));^172^173^174^^^155^176^if  ( defNode != null )  { candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ; }^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P16_Remove_Block]^^172^173^174^^^155^176^if  ( defNode != null )  { candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ; }^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P4_Replace_Constructor]^candidates.add ( new Candidate (  defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P4_Replace_Constructor]^candidates.add ( new Candidate ( name,  n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P4_Replace_Constructor]^candidates.add ( new Candidate ( name, defNode,  cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P4_Replace_Constructor]^candidates.add ( new Candidate ( name, defNode, n )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, parent, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^candidates.add ( parentew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, defNode, n, parent )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^candidates.add ( new Candidate ( cfgNode, defNode, n, name )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^candidates.add ( new Candidate ( defNode, name, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^candidates.add ( defNodeew Candidate ( name, n, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, cfgNode, n, defNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P13_Insert_Block]^if  ( defNode != null )  {     candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ; }^173^^^^^155^176^[Delete]^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^candidates.add ( cfgNodeew Candidate ( name, defNode, n, n )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P14_Delete_Statement]^^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P1_Replace_Type]^char name = n.getchar (  ) ;^166^^^^^155^176^String name = n.getString (  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^String parentame = n.getString (  ) ;^166^^^^^155^176^String name = n.getString (  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( name, parent ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef (  cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( name ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( cfgNode, name ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^Node defNode = cfgNode.getDef ( name, reachingDef ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P8_Replace_Mix]^Node defNode = 2.getDef ( name, cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^if  (  ( NodeUtil .isName ( n )   && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^|| NodeUtil.isVar ( n )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^155^176^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^|| NodeUtil.isName ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^155^176^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^parent.getType (  )  == Token.DEC || n.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^155^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P14_Delete_Statement]^^161^162^163^^^155^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  { return;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^parent .getString (  )   == Token.CATCH )  {^162^^^^^155^176^parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P14_Delete_Statement]^^162^163^^^^155^176^parent.getType (  )  == Token.CATCH )  { return;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^String name = n .getFirstChild (  )  ;^166^^^^^155^176^String name = n.getString (  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P14_Delete_Statement]^^166^^^^^155^176^String name = n.getString (  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {     return ; }^167^^^^^155^176^[Delete]^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( name, n ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^Node defNode = name.getDef ( reachingDef, cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P14_Delete_Statement]^^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  <= n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent .getString (  )   == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P8_Replace_Mix]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.3 || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P8_Replace_Mix]^if  ( defNode != false )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^candidates.add ( nameew Candidate ( n, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^|| NodeUtil .isName ( n )   || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^155^176^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^|| NodeUtil.isVar ( parent )  || parent .getString (  )   == Token.INC || parent^160^161^162^^^155^176^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P8_Replace_Mix]^if  ( this.getCodingConvention (  ) .isExported ( name )  )  {^167^^^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parent )  )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC)) || (parent.getType() == DEC) || parent.getType() == LP) )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC) || parent.getType() == DEC) )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent) || parent.getType() == INC) )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n) || isVar(parent)) )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent && parent.getFirstChild() == n) )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getFirstChild (  )  == n )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == INC )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == DEC )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == LP )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == CATCH )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( defNode != null )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( n )  )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P13_Insert_Block]^if  (  (  (  (  (  (  ( isAssignmentOp ( parent )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  ||  ( isVar ( parent )  )  )  ||  (  ( parent.getType (  )  )  ==  ( INC )  )  )  ||  (  ( parent.getType (  )  )  ==  ( DEC )  )  )  ||  (  ( parent.getType (  )  )  ==  ( LP )  )  )  ||  (  ( parent.getType (  )  )  ==  ( CATCH )  )  )  {     return ; }^156^^^^^155^176^[Delete]^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) && NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  || parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  != n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  <= n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) ) {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  (  NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC)) || (parent.getType() == DEC) || parent.getType() == LP) )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent)) || (parent.getType() == INC) || parent.getType() == DEC) )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n)) || isVar(parent) || parent.getType() == INC) )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent) && (parent.getFirstChild() == n) || isVar(parent)) )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( isAssignmentOp(parent && parent.getFirstChild() == n) )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getFirstChild (  )  == n )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == INC )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == DEC )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == LP )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isVar ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isAssignmentOp ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent .getString (  )   == Token.INC || parent^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P15_Unwrap_Block]^return ;^159^160^161^162^163^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  { return; }^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P16_Remove_Block]^^159^160^161^162^163^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  { return; }^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^if  ( name.getCodingConvention (  ) .isExported ( compiler )  )  {^167^^^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P8_Replace_Mix]^if  ( 4.getCodingConvention (  ) .isExported ( name )  )  {^167^^^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P15_Unwrap_Block]^return ;^167^168^169^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  { return; }^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P16_Remove_Block]^^167^168^169^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  { return; }^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P2_Replace_Operator]^if  ( defNode == null )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^if  ( parent != null )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^if  ( defNode != parentull )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^if  ( n != defNodeull )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P8_Replace_Mix]^if  ( defNode != true )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P15_Unwrap_Block]^candidates.add(new com.google.javascript.jscomp.FlowSensitiveInlineVariables.Candidate(name, defNode, n, cfgNode));^172^173^174^^^155^176^if  ( defNode != null )  { candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ; }^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P16_Remove_Block]^^172^173^174^^^155^176^if  ( defNode != null )  { candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ; }^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P4_Replace_Constructor]^candidates.add ( new Candidate (  defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P4_Replace_Constructor]^candidates.add ( new Candidate ( name,  n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P4_Replace_Constructor]^candidates.add ( new Candidate ( name, defNode,  cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P4_Replace_Constructor]^candidates.add ( new Candidate ( name, defNode, n )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, parent, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^candidates.add ( parentew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, defNode, n, parent )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^candidates.add ( new Candidate ( defNode, name, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, cfgNode, n, defNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^candidates.add ( defNodeew Candidate ( name, n, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P13_Insert_Block]^if  ( defNode != null )  {     candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ; }^173^^^^^155^176^[Delete]^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P14_Delete_Statement]^^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^candidates.add ( nameew Candidate ( n, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^candidates.add ( cfgNodeew Candidate ( name, defNode, n, n )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P1_Replace_Type]^char name = n.getchar (  ) ;^166^^^^^155^176^String name = n.getString (  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P8_Replace_Mix]^String parentame = n.getString (  ) ;^166^^^^^155^176^String name = n.getString (  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( name, parent ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef (  cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( name ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^Node defNode = reachingDef.getDef ( cfgNode, name ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^Node defNode = cfgNode.getDef ( name, reachingDef ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^if  (  ( NodeUtil .isName ( n )   && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^|| NodeUtil.isVar ( n )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^155^176^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^|| NodeUtil.isAssignmentOp ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^155^176^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P8_Replace_Mix]^|| NodeUtil .isName ( n )   || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^155^176^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^parent.getType (  )  == Token.DEC || n.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^155^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^parent .getString (  )   == Token.DEC || parent^161^162^^^^155^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P8_Replace_Mix]^parent .getString (  )   == Token.DEC || n^161^162^^^^155^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P14_Delete_Statement]^^161^162^163^^^155^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  { return;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^parent .getString (  )   == Token.CATCH )  {^162^^^^^155^176^parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P14_Delete_Statement]^^162^163^^^^155^176^parent.getType (  )  == Token.CATCH )  { return;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P14_Delete_Statement]^^166^^^^^155^176^String name = n.getString (  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {     return ; }^167^^^^^155^176^[Delete]^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^Node defNode = name.getDef ( reachingDef, cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P14_Delete_Statement]^^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P2_Replace_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  > n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( defNode )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == defNode ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil .isName ( parent )   || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^candidates.add ( new Candidate ( name, defNode, n, n )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^candidates.add ( new Candidate ( cfgNode, defNode, n, name )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil .isVar ( parent )   )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P7_Replace_Invocation]^|| NodeUtil .isName ( parent )   || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^155^176^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P8_Replace_Mix]^String parentame = n .getFirstChild (  )  ;^166^^^^^155^176^String name = n.getString (  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P1_Replace_Type]^private final char varName;^189^^^^^184^194^private final String varName;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P8_Replace_Mix]^private  Node use;^196^^^^^191^201^private final Node use;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P1_Replace_Type]^private  short  numUseWithinUseCfgNode;^201^^^^^196^206^private int numUseWithinUseCfgNode;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P8_Replace_Mix]^private  long  numUseWithinUseCfgNode;^201^^^^^196^206^private int numUseWithinUseCfgNode;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[P5_Replace_Variable]^Preconditions.checkArgument ( NodeUtil.isName ( useCfgNode )  ) ;^204^^^^^203^209^Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^204^^^^^203^209^Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil.isVar ( use )  ) ;^204^^^^^203^209^Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[P14_Delete_Statement]^^204^^^^^203^209^Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;^204^^^^^203^209^Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil .isVar ( useCfgNode )   ) ;^204^^^^^203^209^Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[P14_Delete_Statement]^^204^205^^^^203^209^Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ; this.varName = varName;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[P8_Replace_Mix]^this.varName =  null;^205^^^^^203^209^this.varName = varName;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[P5_Replace_Variable]^this.defCfgNode = useCfgNode;^206^^^^^203^209^this.defCfgNode = defCfgNode;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[P8_Replace_Mix]^this.defCfgNode =  null;^206^^^^^203^209^this.defCfgNode = defCfgNode;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[P11_Insert_Donor_Statement]^this.useCfgNode = useCfgNode;this.defCfgNode = defCfgNode;^206^^^^^203^209^this.defCfgNode = defCfgNode;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[P5_Replace_Variable]^this.use = useCfgNode;^207^^^^^203^209^this.use = use;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[P11_Insert_Donor_Statement]^this.useCfgNode = useCfgNode;this.use = use;^207^^^^^203^209^this.use = use;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[P5_Replace_Variable]^this.useCfgNode = use;^208^^^^^203^209^this.useCfgNode = useCfgNode;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[P11_Insert_Donor_Statement]^this.defCfgNode = defCfgNode;this.useCfgNode = useCfgNode;^208^^^^^203^209^this.useCfgNode = useCfgNode;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[P11_Insert_Donor_Statement]^this.use = use;this.useCfgNode = useCfgNode;^208^^^^^203^209^this.useCfgNode = useCfgNode;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isExprAssign ( defCfgNode )  )  {^214^^^^^199^229^if  ( NodeUtil.isFunction ( defCfgNode )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil.isFunction ( use )  )  {^214^^^^^199^229^if  ( NodeUtil.isFunction ( defCfgNode )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P9_Replace_Statement]^if  ( NodeUtil.isAssign ( def )  )  {^214^^^^^199^229^if  ( NodeUtil.isFunction ( defCfgNode )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P15_Unwrap_Block]^return false;^214^215^216^^^199^229^if  ( NodeUtil.isFunction ( defCfgNode )  )  { return false; }^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P16_Remove_Block]^^214^215^216^^^199^229^if  ( NodeUtil.isFunction ( defCfgNode )  )  { return false; }^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P13_Insert_Block]^if  (  ( isName ( lhs )  )  &&  ( lhs.getString (  ) .equals ( varName )  )  )  {     def = n; }^214^^^^^199^229^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P13_Insert_Block]^if  (  ( isName ( n )  )  &&  ( n.getString (  ) .equals ( varName )  )  )  {      ( numUseWithinUseCfgNode ) ++; }^214^^^^^199^229^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P13_Insert_Block]^if  ( mayHaveSideEffects ( def.getLastChild (  )  )  )  {     return false; }^214^^^^^199^229^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P13_Insert_Block]^if  (  ( isAssign ( def )  )  &&  ( ! ( isExprAssign ( def.getParent (  )  )  )  )  )  {     return false; }^214^^^^^199^229^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P3_Replace_Literal]^return true;^215^^^^^200^230^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isFunction ( useCfgNode )  )  {^214^^^^^199^229^if  ( NodeUtil.isFunction ( defCfgNode )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil .isAssign ( defCfgNode )   )  {^214^^^^^199^229^if  ( NodeUtil.isFunction ( defCfgNode )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^214^^^^^199^229^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P5_Replace_Variable]^getDefinition ( useCfgNode, null ) ;^218^^^^^203^233^getDefinition ( defCfgNode, null ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P8_Replace_Mix]^getDefinition ( use, null ) ;^218^^^^^203^233^getDefinition ( defCfgNode, null ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P14_Delete_Statement]^^218^219^^^^203^233^getDefinition ( defCfgNode, null ) ; getNumUseInUseCfgNode ( useCfgNode, null ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P11_Insert_Donor_Statement]^getNumUseInUseCfgNode ( useCfgNode, null ) ;getDefinition ( defCfgNode, null ) ;^218^^^^^203^233^getDefinition ( defCfgNode, null ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P5_Replace_Variable]^getNumUseInUseCfgNode ( use, null ) ;^219^^^^^204^234^getNumUseInUseCfgNode ( useCfgNode, null ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P14_Delete_Statement]^^219^^^^^204^234^getNumUseInUseCfgNode ( useCfgNode, null ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P11_Insert_Donor_Statement]^getDefinition ( defCfgNode, null ) ;getNumUseInUseCfgNode ( useCfgNode, null ) ;^219^^^^^204^234^getNumUseInUseCfgNode ( useCfgNode, null ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P2_Replace_Operator]^if  ( def != null )  {^222^^^^^207^237^if  ( def == null )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P5_Replace_Variable]^if  ( use == null )  {^222^^^^^207^237^if  ( def == null )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P8_Replace_Mix]^if  ( def == false )  {^222^^^^^207^237^if  ( def == null )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P15_Unwrap_Block]^return false;^222^223^224^^^207^237^if  ( def == null )  { return false; }^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P16_Remove_Block]^^222^223^224^^^207^237^if  ( def == null )  { return false; }^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P13_Insert_Block]^if  (  ( uses.size (  )  )  != 1 )  {     return false; }^222^^^^^207^237^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P13_Insert_Block]^if  (  ( numUseWithinUseCfgNode )  != 1 )  {     return false; }^222^^^^^207^237^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P3_Replace_Literal]^return true;^223^^^^^208^238^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P2_Replace_Operator]^if  ( NodeUtil.isAssign ( def )  || !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P6_Replace_Expression]^if  ( NodeUtil.isAssign ( def )  ) {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P6_Replace_Expression]^if  (  !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isExprAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.mayHaveSideEffects ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getString (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil.isAssign ( use )  ) {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P15_Unwrap_Block]^return false;^228^229^230^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  { return false; }^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P16_Remove_Block]^^228^229^230^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  { return false; }^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P13_Insert_Block]^if  (  ( isName ( lhs )  )  &&  ( lhs.getString (  ) .equals ( varName )  )  )  {     def = n; }^228^^^^^213^243^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P13_Insert_Block]^if  ( mayHaveSideEffects ( def.getLastChild (  )  )  )  {     return false; }^228^^^^^213^243^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^228^^^^^213^243^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P3_Replace_Literal]^return true;^229^^^^^214^244^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.isAssign ( useCfgNode )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil .isExprAssign (  )   && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil.isAssign ( useCfgNode )  && !NodeUtil.isExprAssign ( def.getString (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.isExprAssign ( def.getLastChild (  )  )  )  {^235^^^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.mayHaveSideEffects ( def.getFirstChild (  )  )  )  {^235^^^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil.mayHaveSideEffects ( useCfgNode.getLastChild (  )  )  )  {^235^^^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P15_Unwrap_Block]^return false;^235^236^237^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  { return false; }^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P16_Remove_Block]^^235^236^237^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  { return false; }^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P13_Insert_Block]^if  (  ( isName ( lhs )  )  &&  ( lhs.getString (  ) .equals ( varName )  )  )  {     def = n; }^235^^^^^220^250^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P13_Insert_Block]^if  (  ( isName ( n )  )  &&  ( n.getString (  ) .equals ( varName )  )  )  {      ( numUseWithinUseCfgNode ) ++; }^235^^^^^220^250^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P13_Insert_Block]^if  (  ( isAssign ( def )  )  &&  ( ! ( isExprAssign ( def.getParent (  )  )  )  )  )  {     return false; }^235^^^^^220^250^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^235^^^^^220^250^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P3_Replace_Literal]^return true;^236^^^^^221^251^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P13_Insert_Block]^if  ( mayHaveSideEffects ( def.getLastChild (  )  )  )  {     return false; }^235^^^^^220^250^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil.mayHaveSideEffects ( useCfgNode.getFirstChild (  )  )  )  {^235^^^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P2_Replace_Operator]^if  ( numUseWithinUseCfgNode == 1 )  {^244^^^^^229^259^if  ( numUseWithinUseCfgNode != 1 )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P3_Replace_Literal]^if  ( numUseWithinUseCfgNode != numUseWithinUseCfgNode )  {^244^^^^^229^259^if  ( numUseWithinUseCfgNode != 1 )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P8_Replace_Mix]^if  ( numUseWithinUseCfgNode != 2 )  {^244^^^^^229^259^if  ( numUseWithinUseCfgNode != 1 )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P15_Unwrap_Block]^return false;^244^245^246^^^229^259^if  ( numUseWithinUseCfgNode != 1 )  { return false; }^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P16_Remove_Block]^^244^245^246^^^229^259^if  ( numUseWithinUseCfgNode != 1 )  { return false; }^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P13_Insert_Block]^if  (  ( uses.size (  )  )  != 1 )  {     return false; }^244^^^^^229^259^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P13_Insert_Block]^if  (  ( def )  == null )  {     return false; }^244^^^^^229^259^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P3_Replace_Literal]^return true;^245^^^^^230^260^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.has ( useCfgNode.getLastChild (  ) , new Predicate<Node> (  )  {^255^256^^^^240^270^if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P7_Replace_Invocation]^if  ( NodeUtil.has ( def.getFirstChild (  ) , new Predicate<Node> (  )  {^255^256^^^^240^270^if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P3_Replace_Literal]^return true;^278^^^^^255^279^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P3_Replace_Literal]^return false;^266^^^^^251^281^return true;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P3_Replace_Literal]^return true;^268^^^^^253^283^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P5_Replace_Variable]^return !NodeUtil.isFunction ( useCfgNode ) ;^275^^^^^260^290^return !NodeUtil.isFunction ( input ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P7_Replace_Invocation]^return !NodeUtil.isAssign ( input ) ;^275^^^^^260^290^return !NodeUtil.isFunction ( input ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P8_Replace_Mix]^return !NodeUtil .isAssign ( defCfgNode )  ;^275^^^^^260^290^return !NodeUtil.isFunction ( input ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P12_Insert_Condition]^if  ( NodeUtil.isFunction ( defCfgNode )  )  { return !NodeUtil.isFunction ( input ) ; }^275^^^^^260^290^return !NodeUtil.isFunction ( input ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P3_Replace_Literal]^return true;^278^^^^^263^293^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P8_Replace_Mix]^if  ( NodeUtil .isAssign ( input )   {^255^256^^^^240^270^if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P5_Replace_Variable]^if  ( NodeUtil.has ( use.getLastChild (  ) , new Predicate<Node> (  )  {^255^256^^^^240^270^if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P5_Replace_Variable]^switch  ( use.getType (  )  )  {^259^^^^^244^274^switch  ( input.getType (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P7_Replace_Invocation]^switch  ( input.removeChild (  )  )  {^259^^^^^244^274^switch  ( input.getType (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P7_Replace_Invocation]^switch  ( input .getParent (  )   )  {^259^^^^^244^274^switch  ( input.getType (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P8_Replace_Mix]^switch  ( useCfgNode.getType (  )  )  {^259^^^^^244^274^switch  ( input.getType (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P7_Replace_Invocation]^return !NodeUtil .isAssign ( use )  ;^275^^^^^260^290^return !NodeUtil.isFunction ( input ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P14_Delete_Statement]^^275^^^^^260^290^return !NodeUtil.isFunction ( input ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P5_Replace_Variable]^Collection<Node> uses = reachingUses.getUses ( varName, use ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P5_Replace_Variable]^Collection<Node> uses = reachingUses.getUses (  defCfgNode ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P5_Replace_Variable]^Collection<Node> uses = reachingUses.getUses ( varName ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P5_Replace_Variable]^Collection<Node> uses = varName.getUses ( reachingUses, defCfgNode ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P5_Replace_Variable]^Collection<Node> uses = reachingUses.getUses ( defCfgNode, varName ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P5_Replace_Variable]^Collection<Node> uses = defCfgNode.getUses ( varName, reachingUses ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P8_Replace_Mix]^Collection<Node> uses = reachingUses.getUses ( varName, useCfgNode ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P14_Delete_Statement]^^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P2_Replace_Operator]^if  ( uses.size (  )  <= 1 )  {^283^^^^^268^298^if  ( uses.size (  )  != 1 )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P3_Replace_Literal]^if  ( uses.size (  )  != -2 )  {^283^^^^^268^298^if  ( uses.size (  )  != 1 )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P3_Replace_Literal]^if  ( uses.size() - 9  != 1 )  {^283^^^^^268^298^if  ( uses.size (  )  != 1 )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P8_Replace_Mix]^if  ( uses.size (  )  != 0  )  {^283^^^^^268^298^if  ( uses.size (  )  != 1 )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P15_Unwrap_Block]^return false;^283^284^285^^^268^298^if  ( uses.size (  )  != 1 )  { return false; }^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P16_Remove_Block]^^283^284^285^^^268^298^if  ( uses.size (  )  != 1 )  { return false; }^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P13_Insert_Block]^if  (  ( def )  == null )  {     return false; }^283^^^^^268^298^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P13_Insert_Block]^if  (  ( numUseWithinUseCfgNode )  != 1 )  {     return false; }^283^^^^^268^298^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P3_Replace_Literal]^return true;^284^^^^^269^299^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P3_Replace_Literal]^if  ( uses.size() + 3  != 1 )  {^283^^^^^268^298^if  ( uses.size (  )  != 1 )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P8_Replace_Mix]^if  ( this.size (  )  != 1 )  {^283^^^^^268^298^if  ( uses.size (  )  != 1 )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P3_Replace_Literal]^return false;^287^^^^^272^302^return true;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P3_Replace_Literal]^return false;^266^^^^^258^269^return true;^[CLASS] Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P7_Replace_Invocation]^switch  ( input.removeChild (  )  )  {^259^^^^^258^269^switch  ( input.getType (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P8_Replace_Mix]^switch  ( useCfgNode.getType (  )  )  {^259^^^^^258^269^switch  ( input.getType (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P3_Replace_Literal]^return true;^268^^^^^258^269^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P5_Replace_Variable]^return !NodeUtil.isFunction ( useCfgNode ) ;^275^^^^^273^276^return !NodeUtil.isFunction ( input ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P7_Replace_Invocation]^return !NodeUtil.isAssign ( input ) ;^275^^^^^273^276^return !NodeUtil.isFunction ( input ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P12_Insert_Condition]^if  ( NodeUtil.isFunction ( defCfgNode )  )  { return !NodeUtil.isFunction ( input ) ; }^275^^^^^273^276^return !NodeUtil.isFunction ( input ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P8_Replace_Mix]^return !NodeUtil.isFunction ( use ) ;^275^^^^^273^276^return !NodeUtil.isFunction ( input ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P14_Delete_Statement]^^275^^^^^273^276^return !NodeUtil.isFunction ( input ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[P5_Replace_Variable]^Node useParentParent = def.getParent (  ) ;^294^^^^^293^314^Node defParent = def.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^Node defParent = def.getString (  ) ;^294^^^^^293^314^Node defParent = def.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^Node useCfgNodeParent = def.getString (  ) ;^294^^^^^293^314^Node defParent = def.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^Node useParent = use.getParent (  ) ;Node defParent = def.getParent (  ) ;^294^^^^^293^314^Node defParent = def.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^Node rhs = def.getLastChild (  ) ;Node defParent = def.getParent (  ) ;^294^^^^^293^314^Node defParent = def.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^294^295^^^^293^314^Node defParent = def.getParent (  ) ; Node useParent = use.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^defParent = defParent.getParent (  ) ;Node defParent = def.getParent (  ) ;^294^^^^^293^314^Node defParent = def.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^defParent.detachFromParent (  ) ;Node defParent = def.getParent (  ) ;^294^^^^^293^314^Node defParent = def.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^Node useCfgNodeParent = use.getParent (  ) ;^295^^^^^293^314^Node useParent = use.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^Node useParent = use.getString (  ) ;^295^^^^^293^314^Node useParent = use.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^Node useCfgNodeParent = use .getString (  )  ;^295^^^^^293^314^Node useParent = use.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^Node defParent = def.getParent (  ) ;Node useParent = use.getParent (  ) ;^295^^^^^293^314^Node useParent = use.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^Node useParentParent = use.getParent (  ) ;^295^^^^^293^314^Node useParent = use.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^295^^^^^293^314^Node useParent = use.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^defParent = defParent.getParent (  ) ;Node useParent = use.getParent (  ) ;^295^^^^^293^314^Node useParent = use.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^defParent.detachFromParent (  ) ;Node useParent = use.getParent (  ) ;^295^^^^^293^314^Node useParent = use.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P2_Replace_Operator]^while  ( defParent.getParent (  ) .getType (  )  != Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^while  ( useParent.getParent (  ) .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^while  ( defParent.getParent (  ) .equals (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^while  ( defParent.removeChild (  ) .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^while  ( defParent .getString (  )  .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^while  ( useCfgNode.getParent (  ) .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^defParent = useCfgNode.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^defParent = defParent.removeChild (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^defParent = defParent .getString (  )  ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^defParent =  use.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^defParent = useParent.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^defParent = useCfgNode .getString (  )  ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^Node useParent = use.getParent (  ) ;defParent = defParent.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^Node defParent = def.getParent (  ) ;defParent = defParent.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^defParent.detachFromParent (  ) ;defParent = defParent.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( NodeUtil.isExprAssign ( def )  )  {^296^^^^^293^314^if  ( NodeUtil.isAssign ( def )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^if  ( NodeUtil.isAssign ( useParent )  )  {^296^^^^^293^314^if  ( NodeUtil.isAssign ( def )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( defCfgNode )  )  {^296^^^^^293^314^if  ( NodeUtil.isAssign ( def )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^} else if  ( NodeUtil.isVar ( useParent )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^} else if  ( NodeUtil.isVar ( useParentParent )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P6_Replace_Expression]^} else {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isName ( defParent )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P3_Replace_Literal]^Preconditions.checkState ( true, "No other definitions can be inlined." ) ;^311^^^^^293^314^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P3_Replace_Literal]^Preconditions.checkState ( false, "No other definitions can be inlined.o other de" ) ;^311^^^^^293^314^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^311^^^^^293^314^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^311^^^^^293^314^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^Node rhs = useParent.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^Node rhs = def.getFirstChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node rhs = def.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^Node defParent = def.getParent (  ) ;Node rhs = def.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P12_Insert_Condition]^if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  { Node rhs = def.getLastChild (  ) ; def.removeChild ( rhs ) ; }^307^308^^^^293^314^Node rhs = def.getLastChild (  ) ; def.removeChild ( rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^Node rhs = useCfgNode.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^307^308^^^^293^314^Node rhs = def.getLastChild (  ) ; def.removeChild ( rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^def.removeChild ( useCfgNode ) ;^308^^^^^293^314^def.removeChild ( rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^def .replaceChild ( input , def )  ;^308^^^^^293^314^def.removeChild ( rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^308^309^^^^293^314^def.removeChild ( rhs ) ; useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^useParent.replaceChild ( use, rhs ) ;def.removeChild ( rhs ) ;^308^^^^^293^314^def.removeChild ( rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^useParent.replaceChild ( use, useCfgNode ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^useParent.replaceChild ( useParent, rhs ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^useParent.replaceChild ( use ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^useParent.replaceChild (  rhs ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^useParent .getLastChild (  )  ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^def.removeChild ( rhs ) ;useParent.replaceChild ( use, rhs ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^} else if  ( NodeUtil.isVar ( useCfgNode )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^} else if  ( NodeUtil .isName ( use )   )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^306^^^^^293^314^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^def .replaceChild ( defCfgNode , useParent )  ;^308^^^^^293^314^def.removeChild ( rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^def.removeChild ( useParent ) ;^308^^^^^293^314^def.removeChild ( rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^308^^^^^293^314^def.removeChild ( rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P3_Replace_Literal]^Preconditions.checkState ( false, "No other definitions can be inlined. oth" ) ;^311^^^^^293^314^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^311^^^^^293^314^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P2_Replace_Operator]^while  ( defParent.getParent (  ) .getType (  )  >= Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^while  ( use.getParent (  ) .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^while  ( defParent.getParent (  )  .getParent (  )   == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^defParent =  null.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^Node rhs = useParent.getLastChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^Node rhs = def.getFirstChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node rhs = def.getLastChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^Node defParent = def.getParent (  ) ;Node rhs = def.getLastChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P12_Insert_Condition]^if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  { Node rhs = def.getLastChild (  ) ; rhs.detachFromParent (  ) ; }^297^298^^^^293^314^Node rhs = def.getLastChild (  ) ; rhs.detachFromParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^Node rhs = useCfgNode.getLastChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^297^298^^^^293^314^Node rhs = def.getLastChild (  ) ; rhs.detachFromParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^rhs.removeChild (  ) ;^298^^^^^293^314^rhs.detachFromParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^rhs .getParent (  )  ;^298^^^^^293^314^rhs.detachFromParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^298^^^^^293^314^rhs.detachFromParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^defParent.detachFromParent (  ) ;rhs.detachFromParent (  ) ;^298^^^^^293^314^rhs.detachFromParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isExpressionNode ( useParent )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil.isAssign ( defParent )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isExprAssign (  )   ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isAssign ( useParent )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isExpressionNode ( useCfgNode )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^301^302^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  { defParent = defParent.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^defParent.removeChild (  ) ;^304^^^^^293^314^defParent.detachFromParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^defParent .getParent (  )  ;^304^^^^^293^314^defParent.detachFromParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^304^^^^^293^314^defParent.detachFromParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^Node useParent = use.getParent (  ) ;defParent.detachFromParent (  ) ;^304^^^^^293^314^defParent.detachFromParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^rhs.detachFromParent (  ) ;defParent.detachFromParent (  ) ;^304^^^^^293^314^defParent.detachFromParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^Node defParent = def.getParent (  ) ;defParent.detachFromParent (  ) ;^304^^^^^293^314^defParent.detachFromParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^defParent = defParent.getParent (  ) ;defParent.detachFromParent (  ) ;^304^^^^^293^314^defParent.detachFromParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^useParent.replaceChild ( use, useParent ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^useParent.replaceChild ( useParent, rhs ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^useParent.replaceChild ( use ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^useParent.replaceChild (  rhs ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^useParent .getLastChild (  )  ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^def.removeChild ( rhs ) ;useParent.replaceChild ( use, rhs ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^}  if  ( NodeUtil.isVar ( useParent )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P3_Replace_Literal]^Preconditions.checkState ( false, "definitions can be inl" ) ;^311^^^^^293^314^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^Node rhs = use.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^useParent.replaceChild ( useCfgNode, rhs ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^Node rhs = useParent.getFirstChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( NodeUtil.isAssign ( use )  )  {^296^^^^^293^314^if  ( NodeUtil.isAssign ( def )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^296^^^^^293^314^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isExpressionNode ( use )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^while  ( useParent.removeChild (  ) .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^304^305^^^^293^314^defParent.detachFromParent (  ) ; useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^useParent.replaceChild ( useCfgNode, rhs ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^useParent.replaceChild ( rhs, use ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^useParent.replaceChild ( use, useParent ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P3_Replace_Literal]^Preconditions.checkState ( false, "er definitions can bo other definitions can be inlined." ) ;^311^^^^^293^314^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^313^^^^^293^314^compiler.reportCodeChange (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[P2_Replace_Operator]^if  ( n.getString (  ) .equals ( varName )  || n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( use.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( varName.getString (  ) .equals ( n )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P6_Replace_Expression]^if  ( n.getString (  ) .equals ( varName )  ) {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P6_Replace_Expression]^if  (  n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( n.getString (  )  .getType (  )   && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( n.removeChild (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( n .getParent (  )  .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( n.getString (  ) .equals ( varName )  && n.removeChild (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^if  ( parent.getString (  ) .equals ( varName )  ) {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P15_Unwrap_Block]^def = n;^329^330^331^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  { def = n; }^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P16_Remove_Block]^^329^330^331^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  { def = n; }^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^def = useParent;^330^^^^^321^344^def = n;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^def =  rhs;^330^^^^^321^344^def = n;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( lhs )  || lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( varName )  && lhs.getString (  ) .equals ( lhs )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( lhs )  ) {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P6_Replace_Expression]^if  (  lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( lhs )  && lhs.removeChild (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( lhs )  && lhs .getParent (  )  .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P15_Unwrap_Block]^def = n;^336^337^338^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  { def = n; }^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P16_Remove_Block]^^336^337^338^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  { def = n; }^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P13_Insert_Block]^if  (  ( isName ( n )  )  &&  ( n.getString (  ) .equals ( varName )  )  )  {      ( numUseWithinUseCfgNode ) ++; }^336^^^^^321^344^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P13_Insert_Block]^if  ( mayHaveSideEffects ( def.getLastChild (  )  )  )  {     return false; }^336^^^^^321^344^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P13_Insert_Block]^if  (  ( isAssign ( def )  )  &&  ( ! ( isExprAssign ( def.getParent (  )  )  )  )  )  {     return false; }^336^^^^^321^344^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^336^^^^^321^344^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^def = useParent;^337^^^^^321^344^def = n;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^def = parent;^330^^^^^321^344^def = n;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^def =  useCfgNode;^330^^^^^321^344^def = n;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^def = rhs;^337^^^^^321^344^def = n;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^AbstractCfgNodeTraversalCallback gatherCb = useParentew AbstractCfgNodeTraversalCallback (  )  {^322^323^^^^321^344^AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^AbstractCfgNodeTraversalCallback gatherCb = parentew AbstractCfgNodeTraversalCallback (  )  {^322^323^^^^321^344^AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^Node lhs = n.removeChild (  ) ;^335^^^^^321^344^Node lhs = n.getFirstChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^Node lhs = n .getLastChild (  )  ;^335^^^^^321^344^Node lhs = n.getFirstChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^Node rhs = def.getLastChild (  ) ;Node lhs = n.getFirstChild (  ) ;^335^^^^^321^344^Node lhs = n.getFirstChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^327^^^^^321^344^switch  ( n.getType (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^switch  ( n.removeChild (  )  )  {^327^^^^^321^344^switch  ( n.getType (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^switch  ( n .getParent (  )   )  {^327^^^^^321^344^switch  ( n.getType (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^switch  ( use.getType (  )  )  {^327^^^^^321^344^switch  ( n.getType (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^if  ( rhs.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( useParent.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^if  ( useParent .getParent (  )  .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( parent.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^if  ( parent.getString (  ) .equals ( varName )  && n.removeChild (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^Node lhs = parent.getFirstChild (  ) ;^335^^^^^321^344^Node lhs = n.getFirstChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^335^^^^^321^344^Node lhs = n.getFirstChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( useParent )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^if  ( NodeUtil.isVar ( rhs )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  )  .getType (  )   )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( parent )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( use )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, rhs, gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, n ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^NodeTraversal.traverse (  n, gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^NodeTraversal.traverse ( n, compiler, gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^NodeTraversal.traverse ( gatherCb, n, compiler ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^NodeTraversal.traverse ( compiler, parent, gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P2_Replace_Operator]^if  ( n.getString (  ) .equals ( varName )  || n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( useParent.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( varName.getString (  ) .equals ( n )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P6_Replace_Expression]^if  ( n.getString (  ) .equals ( varName )  ) {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P6_Replace_Expression]^if  (  n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( n.removeChild (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( n.getString (  ) .equals ( varName )  && n.removeChild (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( n.getString (  ) .equals ( varName )  && n .getLastChild (  )   )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^if  ( rhs.getString (  ) .equals ( varName )  ) {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P15_Unwrap_Block]^def = n;^329^330^331^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  { def = n; }^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P16_Remove_Block]^^329^330^331^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  { def = n; }^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^def = use;^330^^^^^326^341^def = n;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^def =  useCfgNode;^330^^^^^326^341^def = n;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( lhs )  || lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( useParent )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( varName )  && lhs.getString (  ) .equals ( lhs )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( lhs )  ) {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P6_Replace_Expression]^if  (  lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  )  .getType (  )   )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( lhs )  && lhs.removeChild (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P15_Unwrap_Block]^def = n;^336^337^338^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  { def = n; }^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P16_Remove_Block]^^336^337^338^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  { def = n; }^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P13_Insert_Block]^if  (  ( isName ( n )  )  &&  ( n.getString (  ) .equals ( varName )  )  )  {      ( numUseWithinUseCfgNode ) ++; }^336^^^^^326^341^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P13_Insert_Block]^if  ( mayHaveSideEffects ( def.getLastChild (  )  )  )  {     return false; }^336^^^^^326^341^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P13_Insert_Block]^if  (  ( isAssign ( def )  )  &&  ( ! ( isExprAssign ( def.getParent (  )  )  )  )  )  {     return false; }^336^^^^^326^341^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^336^^^^^326^341^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^def = rhs;^337^^^^^326^341^def = n;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^def = parent;^330^^^^^326^341^def = n;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^def =  rhs;^330^^^^^326^341^def = n;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^def =  null;^337^^^^^326^341^def = n;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^Node lhs = rhs.getFirstChild (  ) ;^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^Node lhs = n.removeChild (  ) ;^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^Node lhs = n .getLastChild (  )  ;^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^Node lhs = use.getFirstChild (  ) ;^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P11_Insert_Donor_Statement]^Node rhs = def.getLastChild (  ) ;Node lhs = n.getFirstChild (  ) ;^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^switch  ( useParent.getType (  )  )  {^327^^^^^326^341^switch  ( n.getType (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^switch  ( n.removeChild (  )  )  {^327^^^^^326^341^switch  ( n.getType (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^switch  ( n .getParent (  )   )  {^327^^^^^326^341^switch  ( n.getType (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( rhs.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^if  ( parent.removeChild (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( parent.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( n .getParent (  )  .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^if  ( useCfgNode.getString (  ) .equals ( varName )  && n.removeChild (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^Node lhs = useParent.getFirstChild (  ) ;^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parent )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( rhs )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( n )  || n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( use )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( varName )  && n.getString (  ) .equals ( n )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( n )  ) {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P6_Replace_Expression]^if  (  n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( n )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && n.getString (  )  .getType (  )   )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && n.removeChild (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P15_Unwrap_Block]^(numUseWithinUseCfgNode)++;^357^358^359^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  { numUseWithinUseCfgNode++; }^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P16_Remove_Block]^^357^358^359^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  { numUseWithinUseCfgNode++; }^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P13_Insert_Block]^if  (  ( isName ( lhs )  )  &&  ( lhs.getString (  ) .equals ( varName )  )  )  {     def = n; }^357^^^^^350^364^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P13_Insert_Block]^if  ( mayHaveSideEffects ( def.getLastChild (  )  )  )  {     return false; }^357^^^^^350^364^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^357^^^^^350^364^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^AbstractCfgNodeTraversalCallback gatherCb = useParentew AbstractCfgNodeTraversalCallback (  )  {^352^353^^^^350^364^AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^AbstractCfgNodeTraversalCallback gatherCb = parentew AbstractCfgNodeTraversalCallback (  )  {^352^353^^^^350^364^AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^if  ( NodeUtil.isVar ( parent )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( useParent )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( parent )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( parent )  && n.removeChild (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, useParent, gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, n ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^NodeTraversal.traverse (  n, gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, gatherCb, n ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^NodeTraversal.traverse ( gatherCb, n, compiler ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^NodeTraversal.traverse ( n, compiler, gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^NodeTraversal.traverse ( null, n, gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P14_Delete_Statement]^^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( n )  || n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parent )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( varName )  && n.getString (  ) .equals ( n )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( n )  ) {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P6_Replace_Expression]^if  (  n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( n )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && n.removeChild (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P15_Unwrap_Block]^(numUseWithinUseCfgNode)++;^357^358^359^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  { numUseWithinUseCfgNode++; }^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P16_Remove_Block]^^357^358^359^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  { numUseWithinUseCfgNode++; }^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P13_Insert_Block]^if  (  ( isName ( lhs )  )  &&  ( lhs.getString (  ) .equals ( varName )  )  )  {     def = n; }^357^^^^^356^360^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P13_Insert_Block]^if  ( mayHaveSideEffects ( def.getLastChild (  )  )  )  {     return false; }^357^^^^^356^360^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P13_Insert_Block]^if  ( isFunction ( defCfgNode )  )  {     return false; }^357^^^^^356^360^[Delete]^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( use )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( NodeUtil .isVar ( useCfgNode )   && n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( useCfgNode )  && n.removeChild (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && n .getParent (  )  .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( use )  && n.removeChild (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[P3_Replace_Literal]^return false;^266^^^^^258^269^return true;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  Node  input  
[P3_Replace_Literal]^return true;^268^^^^^258^269^return false;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  Node  input  
[P14_Delete_Statement]^^275^^^^^273^276^return !NodeUtil.isFunction ( input ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  Node  input  
[P2_Replace_Operator]^if  ( n.getString (  ) .equals ( varName )  || n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P5_Replace_Variable]^if  ( parent.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P5_Replace_Variable]^if  ( varName.getString (  ) .equals ( n )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P6_Replace_Expression]^if  ( n.getString (  ) .equals ( varName )  ) {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P6_Replace_Expression]^if  (  n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P8_Replace_Mix]^if  ( parent.getString (  ) .equals ( varName )  ) {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P15_Unwrap_Block]^def = n;^329^330^331^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  { def = n; }^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P16_Remove_Block]^^329^330^331^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  { def = n; }^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P5_Replace_Variable]^def = parent;^330^^^^^326^341^def = n;^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( lhs )  || lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parent )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( varName )  && lhs.getString (  ) .equals ( lhs )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( lhs )  ) {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P6_Replace_Expression]^if  (  lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P8_Replace_Mix]^if  (  lhs .getFirstChild (  )  .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P15_Unwrap_Block]^def = n;^336^337^338^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  { def = n; }^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P16_Remove_Block]^^336^337^338^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  { def = n; }^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P5_Replace_Variable]^def = parent;^337^^^^^326^341^def = n;^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P5_Replace_Variable]^Node lhs = parent.getFirstChild (  ) ;^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P7_Replace_Invocation]^Node lhs = n .getString (  )  ;^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^327^^^^^326^341^switch  ( n.getType (  )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P7_Replace_Invocation]^switch  ( n .getString (  )   )  {^327^^^^^326^341^switch  ( n.getType (  )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P7_Replace_Invocation]^if  ( n .getFirstChild (  )  .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P14_Delete_Statement]^^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( n )  || n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parent )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( varName )  && n.getString (  ) .equals ( n )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( n )  ) {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P6_Replace_Expression]^if  (  n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P15_Unwrap_Block]^(numUseWithinUseCfgNode)++;^357^358^359^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  { numUseWithinUseCfgNode++; }^[CLASS] 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P16_Remove_Block]^^357^358^359^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  { numUseWithinUseCfgNode++; }^[CLASS] 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( 2 )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
