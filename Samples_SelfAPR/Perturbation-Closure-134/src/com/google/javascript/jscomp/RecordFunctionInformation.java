[P8_Replace_Mix]^private  FunctionNames functionNames;^34^^^^^29^39^private final FunctionNames functionNames;^[CLASS] RecordFunctionInformation 1   [VARIABLES] 
[P8_Replace_Mix]^private  FunctionInformationMap.Builder mapBuilder;^39^^^^^34^44^private final FunctionInformationMap.Builder mapBuilder;^[CLASS] RecordFunctionInformation 1   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^49^^^^^47^52^this.compiler = compiler;^[CLASS] RecordFunctionInformation 1  [METHOD] <init> [RETURN_TYPE] FunctionNames)   Compiler compiler FunctionNames functionNames [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P8_Replace_Mix]^this.functionNames =  null;^50^^^^^47^52^this.functionNames = functionNames;^[CLASS] RecordFunctionInformation 1  [METHOD] <init> [RETURN_TYPE] FunctionNames)   Compiler compiler FunctionNames functionNames [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P8_Replace_Mix]^this.mapBuilder ;^51^^^^^47^52^this.mapBuilder = FunctionInformationMap.newBuilder (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] <init> [RETURN_TYPE] FunctionNames)   Compiler compiler FunctionNames functionNames [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P14_Delete_Statement]^^51^52^^^^47^52^this.mapBuilder = FunctionInformationMap.newBuilder (  ) ; }^[CLASS] RecordFunctionInformation 1  [METHOD] <init> [RETURN_TYPE] FunctionNames)   Compiler compiler FunctionNames functionNames [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P5_Replace_Variable]^return this.build (  ) ;^58^^^^^57^59^return mapBuilder.build (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] getMap [RETURN_TYPE] FunctionInformationMap   [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P7_Replace_Invocation]^return mapBuilder.addModule (  ) ;^58^^^^^57^59^return mapBuilder.build (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] getMap [RETURN_TYPE] FunctionInformationMap   [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P14_Delete_Statement]^^58^^^^^57^59^return mapBuilder.build (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] getMap [RETURN_TYPE] FunctionInformationMap   [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, this ) ;^63^^^^^62^78^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^63^^^^^62^78^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, this ) ;^63^^^^^62^78^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, this ) ;^63^^^^^62^78^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P7_Replace_Invocation]^NodeTraversal .getSourceName (  )  ;^63^^^^^62^78^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P14_Delete_Statement]^^63^^^^^62^78^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P7_Replace_Invocation]^JSModuleGraph graph = compiler.setModuleName (  ) ;^65^^^^^62^78^JSModuleGraph graph = compiler.getModuleGraph (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P11_Insert_Donor_Statement]^JSModule module = t.getModule (  ) ;JSModuleGraph graph = compiler.getModuleGraph (  ) ;^65^^^^^62^78^JSModuleGraph graph = compiler.getModuleGraph (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P14_Delete_Statement]^^65^^^^^62^78^JSModuleGraph graph = compiler.getModuleGraph (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P2_Replace_Operator]^if  ( graph != null )  {^66^^^^^62^78^if  ( graph == null )  {^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P8_Replace_Mix]^if  ( graph == true )  {^66^^^^^62^78^if  ( graph == null )  {^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P9_Replace_Statement]^if  ( module != null )  {^66^^^^^62^78^if  ( graph == null )  {^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P5_Replace_Variable]^return o1.getName (  ) .compareTo ( m.getName (  )  ) ;^72^^^^^62^78^return o1.getName (  ) .compareTo ( o2.getName (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P5_Replace_Variable]^return o2.getName (  ) .compareTo ( o1.getName (  )  ) ;^72^^^^^62^78^return o1.getName (  ) .compareTo ( o2.getName (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P8_Replace_Mix]^return m.getName (  ) .compareTo ( o2.getName (  )  ) ;^72^^^^^62^78^return o1.getName (  ) .compareTo ( o2.getName (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P14_Delete_Statement]^^70^71^72^73^^62^78^for  ( JSModule m : Sets.newTreeSet ( new Comparator<JSModule> (  )  { public int compare ( JSModule o1, JSModule o2 )  { return o1.getName (  ) .compareTo ( o2.getName (  )  ) ; }^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P14_Delete_Statement]^^72^^^^^62^78^return o1.getName (  ) .compareTo ( o2.getName (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P5_Replace_Variable]^return o2.getName (  ) .compareTo ( o2.getName (  )  ) ;^72^^^^^62^78^return o1.getName (  ) .compareTo ( o2.getName (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P5_Replace_Variable]^return o1.getName (  ) .compareTo ( o1.getName (  )  ) ;^72^^^^^62^78^return o1.getName (  ) .compareTo ( o2.getName (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P14_Delete_Statement]^^74^75^^^^62^78^}, graph.getAllModules (  )  )  )  { addModuleInformation ( m ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P5_Replace_Variable]^addModuleInformation ( o2 ) ;^75^^^^^62^78^addModuleInformation ( m ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P14_Delete_Statement]^^75^76^^^^62^78^addModuleInformation ( m ) ; }^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P11_Insert_Donor_Statement]^addModuleInformation ( null ) ;addModuleInformation ( m ) ;^75^^^^^62^78^addModuleInformation ( m ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P11_Insert_Donor_Statement]^addModuleInformation ( m ) ;addModuleInformation ( null ) ;^67^^^^^62^78^addModuleInformation ( null ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Compiler  compiler  boolean  Builder  mapBuilder  Node  externs  root  JSModule  m  o1  o2  JSModuleGraph  graph  FunctionNames  functionNames  
[P5_Replace_Variable]^return o2.getName (  ) .compareTo ( o1.getName (  )  ) ;^72^^^^^71^73^return o1.getName (  ) .compareTo ( o2.getName (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] compare [RETURN_TYPE] int   JSModule o1 JSModule o2 [VARIABLES] Compiler  compiler  JSModule  o1  o2  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P14_Delete_Statement]^^72^^^^^71^73^return o1.getName (  ) .compareTo ( o2.getName (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] compare [RETURN_TYPE] int   JSModule o1 JSModule o2 [VARIABLES] Compiler  compiler  JSModule  o1  o2  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P5_Replace_Variable]^return o2.getName (  ) .compareTo ( o2.getName (  )  ) ;^72^^^^^71^73^return o1.getName (  ) .compareTo ( o2.getName (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] compare [RETURN_TYPE] int   JSModule o1 JSModule o2 [VARIABLES] Compiler  compiler  JSModule  o1  o2  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P5_Replace_Variable]^return o1.getName (  ) .compareTo ( o1.getName (  )  ) ;^72^^^^^71^73^return o1.getName (  ) .compareTo ( o2.getName (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] compare [RETURN_TYPE] int   JSModule o1 JSModule o2 [VARIABLES] Compiler  compiler  JSModule  o1  o2  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P2_Replace_Operator]^if  ( n.getType (  )  < Token.FUNCTION )  {^82^^^^^81^102^if  ( n.getType (  )  != Token.FUNCTION )  {^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P5_Replace_Variable]^if  ( parent.getType (  )  != Token.FUNCTION )  {^82^^^^^81^102^if  ( n.getType (  )  != Token.FUNCTION )  {^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P8_Replace_Mix]^if  ( parent .getLineno (  )   != Token.FUNCTION )  {^82^^^^^81^102^if  ( n.getType (  )  != Token.FUNCTION )  {^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P15_Unwrap_Block]^return ;^82^83^84^^^81^102^if  ( n.getType (  )  != Token.FUNCTION )  { return; }^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P16_Remove_Block]^^82^83^84^^^81^102^if  ( n.getType (  )  != Token.FUNCTION )  { return; }^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P1_Replace_Type]^short  id = functionNames.getFunctionId ( n ) ;^86^^^^^81^102^int id = functionNames.getFunctionId ( n ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P5_Replace_Variable]^int id = functionNames.getFunctionId ( parent ) ;^86^^^^^81^102^int id = functionNames.getFunctionId ( n ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P5_Replace_Variable]^int id = n.getFunctionId ( functionNames ) ;^86^^^^^81^102^int id = functionNames.getFunctionId ( n ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P7_Replace_Invocation]^int id = functionNames.getFunctionName ( n ) ;^86^^^^^81^102^int id = functionNames.getFunctionId ( n ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P14_Delete_Statement]^^86^^^^^81^102^int id = functionNames.getFunctionId ( n ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P2_Replace_Operator]^if  ( id <= 0 )  {^87^^^^^81^102^if  ( id < 0 )  {^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P3_Replace_Literal]^if  ( id < 6 )  {^87^^^^^81^102^if  ( id < 0 )  {^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P8_Replace_Mix]^if  ( id < 0L )  {^87^^^^^81^102^if  ( id < 0 )  {^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P15_Unwrap_Block]^return ;^87^88^89^90^^81^102^if  ( id < 0 )  {  return; }^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P16_Remove_Block]^^87^88^89^90^^81^102^if  ( id < 0 )  {  return; }^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P1_Replace_Type]^char compiledSource = compiler.toSource ( n ) ;^92^^^^^81^102^String compiledSource = compiler.toSource ( n ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P5_Replace_Variable]^String compiledSource = compiler.toSource ( parent ) ;^92^^^^^81^102^String compiledSource = compiler.toSource ( n ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P5_Replace_Variable]^String compiledSource = n.toSource ( compiler ) ;^92^^^^^81^102^String compiledSource = compiler.toSource ( n ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P14_Delete_Statement]^^92^93^^^^81^102^String compiledSource = compiler.toSource ( n ) ; JSModule module = t.getModule (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P11_Insert_Donor_Statement]^source = compiler.toSource (  ) ;String compiledSource = compiler.toSource ( n ) ;^92^^^^^81^102^String compiledSource = compiler.toSource ( n ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P11_Insert_Donor_Statement]^source = compiler.toSource ( module ) ;String compiledSource = compiler.toSource ( n ) ;^92^^^^^81^102^String compiledSource = compiler.toSource ( n ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P7_Replace_Invocation]^JSModule module = t .getSourceName (  )  ;^93^^^^^81^102^JSModule module = t.getModule (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P11_Insert_Donor_Statement]^JSModuleGraph graph = compiler.getModuleGraph (  ) ;JSModule module = t.getModule (  ) ;^93^^^^^81^102^JSModule module = t.getModule (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P14_Delete_Statement]^^93^^^^^81^102^JSModule module = t.getModule (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P11_Insert_Donor_Statement]^name = module.getName (  ) ;JSModule module = t.getModule (  ) ;^93^^^^^81^102^JSModule module = t.getModule (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P5_Replace_Variable]^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( parent.getLineno (  )  )^94^95^96^97^^81^102^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  )^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P5_Replace_Variable]^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( n ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( id.getLineno (  )  )^94^95^96^97^^81^102^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  )^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P7_Replace_Invocation]^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setSize ( id ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  )^94^95^96^97^^81^102^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  )^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P7_Replace_Invocation]^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n .getType (  )   )^94^95^96^97^^81^102^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  )^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P5_Replace_Variable]^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( t ) .setSourceName ( id.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  )^94^95^96^97^^81^102^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  )^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P5_Replace_Variable]^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id ) .setSourceName ( n.getSourceName (  )  ) .setLineNumber ( t.getLineno (  )  )^94^95^96^97^^81^102^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  )^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P8_Replace_Mix]^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setSize ( id ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( parent.getLineno (  )  )^94^95^96^97^^81^102^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  )^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P7_Replace_Invocation]^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id ) .setSourceName ( t.getSourceName (  )  )  .setName (  )^94^95^96^97^^81^102^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  )^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P7_Replace_Invocation]^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id ) .setSourceName ( t .getModule (  )   ) .setLineNumber ( n.getLineno (  )  )^94^95^96^97^^81^102^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  )^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P7_Replace_Invocation]^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id )  .setModuleName (  )  .setLineNumber ( n.getLineno (  )  )^94^95^96^97^^81^102^mapBuilder.addEntry ( FunctionInformationMap.Entry.newBuilder (  ) .setId ( id ) .setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  )^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P3_Replace_Literal]^.setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  ) .setModuleName ( module == null ? "" : module.getName (  )  ) .setSize ( compiledSource.length() + 1  )^96^97^98^99^^81^102^.setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  ) .setModuleName ( module == null ? "" : module.getName (  )  ) .setSize ( compiledSource.length (  )  )^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P6_Replace_Expression]^.setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  ) .setModuleName ( module.getName (  )  ) .setSize ( compiledSource.length (  )  )^96^97^98^99^^81^102^.setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  ) .setModuleName ( module == null ? "" : module.getName (  )  ) .setSize ( compiledSource.length (  )  )^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P7_Replace_Invocation]^.setSourceName ( t .getModule (  )   ) .setLineNumber ( n.getLineno (  )  ) .setModuleName ( module == null ? "" : module.getName (  )  ) .setSize ( compiledSource.length (  )  )^96^97^98^99^^81^102^.setSourceName ( t.getSourceName (  )  ) .setLineNumber ( n.getLineno (  )  ) .setModuleName ( module == null ? "" : module.getName (  )  ) .setSize ( compiledSource.length (  )  )^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P3_Replace_Literal]^.setLineNumber ( n.getLineno (  )  ) .setModuleName ( module == null ? "" : module.getName (  )  ) .setSize ( compiledSource.length() + 7  ) .setName ( functionNames.getFunctionName ( n )  )^97^98^99^100^^81^102^.setLineNumber ( n.getLineno (  )  ) .setModuleName ( module == null ? "" : module.getName (  )  ) .setSize ( compiledSource.length (  )  ) .setName ( functionNames.getFunctionName ( n )  )^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P5_Replace_Variable]^.setLineNumber ( parent.getLineno (  )  ) .setModuleName ( module == null ? "" : module.getName (  )  ) .setSize ( compiledSource.length (  )  ) .setName ( functionNames.getFunctionName ( n )  )^97^98^99^100^^81^102^.setLineNumber ( n.getLineno (  )  ) .setModuleName ( module == null ? "" : module.getName (  )  ) .setSize ( compiledSource.length (  )  ) .setName ( functionNames.getFunctionName ( n )  )^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P6_Replace_Expression]^.setLineNumber ( n.getLineno (  )  ) .setModuleName ( module.getName (  )  ) .setSize ( compiledSource.length (  )  ) .setName ( functionNames.getFunctionName ( n )  )^97^98^99^100^^81^102^.setLineNumber ( n.getLineno (  )  ) .setModuleName ( module == null ? "" : module.getName (  )  ) .setSize ( compiledSource.length (  )  ) .setName ( functionNames.getFunctionName ( n )  )^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P3_Replace_Literal]^.setModuleName ( module == null ? "" : module.getName (  )  ) .setSize ( compiledSource.length() + 5  ) .setName ( functionNames.getFunctionName ( n )  ) .setCompiledSource ( compiledSource ) .build (  )  ) ;^98^99^100^101^^81^102^.setModuleName ( module == null ? "" : module.getName (  )  ) .setSize ( compiledSource.length (  )  ) .setName ( functionNames.getFunctionName ( n )  ) .setCompiledSource ( compiledSource ) .build (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P6_Replace_Expression]^.setModuleName ( module.getName (  )  ) .setSize ( compiledSource.length (  )  ) .setName ( functionNames.getFunctionName ( n )  ) .setCompiledSource ( compiledSource ) .build (  )  ) ;^98^99^100^101^^81^102^.setModuleName ( module == null ? "" : module.getName (  )  ) .setSize ( compiledSource.length (  )  ) .setName ( functionNames.getFunctionName ( n )  ) .setCompiledSource ( compiledSource ) .build (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P3_Replace_Literal]^.setSize ( compiledSource.length() + 3  ) .setName ( functionNames.getFunctionName ( n )  ) .setCompiledSource ( compiledSource ) .build (  )  ) ;^99^100^101^^^81^102^.setSize ( compiledSource.length (  )  ) .setName ( functionNames.getFunctionName ( n )  ) .setCompiledSource ( compiledSource ) .build (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P14_Delete_Statement]^^99^100^101^^^81^102^.setSize ( compiledSource.length (  )  ) .setName ( functionNames.getFunctionName ( n )  ) .setCompiledSource ( compiledSource ) .build (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P5_Replace_Variable]^.setName ( functionNames.getFunctionName ( parent )  ) .setCompiledSource ( compiledSource ) .build (  )  ) ;^100^101^^^^81^102^.setName ( functionNames.getFunctionName ( n )  ) .setCompiledSource ( compiledSource ) .build (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P5_Replace_Variable]^.setName ( n.getFunctionName ( functionNames )  ) .setCompiledSource ( compiledSource ) .build (  )  ) ;^100^101^^^^81^102^.setName ( functionNames.getFunctionName ( n )  ) .setCompiledSource ( compiledSource ) .build (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P7_Replace_Invocation]^.setName ( functionNames.getFunctionId ( n )  ) .setCompiledSource ( compiledSource ) .build (  )  ) ;^100^101^^^^81^102^.setName ( functionNames.getFunctionName ( n )  ) .setCompiledSource ( compiledSource ) .build (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P7_Replace_Invocation]^.setName ( functionNames .getFunctionId ( parent )   ) .setCompiledSource ( compiledSource ) .build (  )  ) ;^100^101^^^^81^102^.setName ( functionNames.getFunctionName ( n )  ) .setCompiledSource ( compiledSource ) .build (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P14_Delete_Statement]^^100^101^^^^81^102^.setName ( functionNames.getFunctionName ( n )  ) .setCompiledSource ( compiledSource ) .build (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Compiler  compiler  boolean  NodeTraversal  t  Builder  mapBuilder  Node  n  parent  JSModule  module  String  compiledSource  int  id  FunctionNames  functionNames  
[P1_Replace_Type]^char name;^116^^^^^115^129^String name;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P11_Insert_Donor_Statement]^String source;String name;^116^^^^^115^129^String name;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P1_Replace_Type]^char source;^117^^^^^115^129^String source;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P11_Insert_Donor_Statement]^String name;String source;^117^^^^^115^129^String source;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P2_Replace_Operator]^if  ( module == null )  {^118^^^^^115^129^if  ( module != null )  {^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P8_Replace_Mix]^if  ( module != false )  {^118^^^^^115^129^if  ( module != null )  {^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P9_Replace_Statement]^if  ( graph == null )  {^118^^^^^115^129^if  ( module != null )  {^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P8_Replace_Mix]^name ;^122^^^^^115^129^name = "";^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P7_Replace_Invocation]^source = compiler.setSourceName (  ) ;^123^^^^^115^129^source = compiler.toSource (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P8_Replace_Mix]^source  =  source ;^123^^^^^115^129^source = compiler.toSource (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P11_Insert_Donor_Statement]^source = compiler.toSource ( module ) ;source = compiler.toSource (  ) ;^123^^^^^115^129^source = compiler.toSource (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P14_Delete_Statement]^^123^^^^^115^129^source = compiler.toSource (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P11_Insert_Donor_Statement]^String compiledSource = compiler.toSource ( n ) ;source = compiler.toSource (  ) ;^123^^^^^115^129^source = compiler.toSource (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P8_Replace_Mix]^name =  null.getName (  ) ;^119^^^^^115^129^name = module.getName (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P5_Replace_Variable]^source = module.toSource ( compiler ) ;^120^^^^^115^129^source = compiler.toSource ( module ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P8_Replace_Mix]^source =  compiler.toSource ( null ) ;^120^^^^^115^129^source = compiler.toSource ( module ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P11_Insert_Donor_Statement]^source = compiler.toSource (  ) ;source = compiler.toSource ( module ) ;^120^^^^^115^129^source = compiler.toSource ( module ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P14_Delete_Statement]^^119^^^^^115^129^name = module.getName (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P11_Insert_Donor_Statement]^JSModule module = t.getModule (  ) ;name = module.getName (  ) ;^119^^^^^115^129^name = module.getName (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P14_Delete_Statement]^^120^^^^^115^129^source = compiler.toSource ( module ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P11_Insert_Donor_Statement]^String compiledSource = compiler.toSource ( n ) ;source = compiler.toSource ( module ) ;^120^^^^^115^129^source = compiler.toSource ( module ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P8_Replace_Mix]^name  =  name ;^122^^^^^115^129^name = "";^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P8_Replace_Mix]^source  = null ;^123^^^^^115^129^source = compiler.toSource (  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P14_Delete_Statement]^^119^120^^^^115^129^name = module.getName (  ) ; source = compiler.toSource ( module ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P7_Replace_Invocation]^mapBuilder.addModule ( FunctionInformationMap.Module.newBuilder (  ) .setCompiledSource ( name ) .setCompiledSource ( source ) .build (  )  ) ;^126^127^128^^^115^129^mapBuilder.addModule ( FunctionInformationMap.Module.newBuilder (  ) .setName ( name ) .setCompiledSource ( source ) .build (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P8_Replace_Mix]^mapBuilder.addModule ( FunctionInformationMap.Module.newBuilder (  ) .setCompiledSource ( name ) .setCompiledSource ( name ) .build (  )  ) ;^126^127^128^^^115^129^mapBuilder.addModule ( FunctionInformationMap.Module.newBuilder (  ) .setName ( name ) .setCompiledSource ( source ) .build (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P14_Delete_Statement]^^126^127^128^129^^115^129^mapBuilder.addModule ( FunctionInformationMap.Module.newBuilder (  ) .setName ( name ) .setCompiledSource ( source ) .build (  )  ) ; }^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P5_Replace_Variable]^mapBuilder.addModule ( FunctionInformationMap.Module.newBuilder (  ) .setName ( source ) .setCompiledSource ( name ) .build (  )  ) ;^126^127^128^^^115^129^mapBuilder.addModule ( FunctionInformationMap.Module.newBuilder (  ) .setName ( name ) .setCompiledSource ( source ) .build (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P8_Replace_Mix]^mapBuilder.addModule ( FunctionInformationMap.Module.newBuilder (  )  .setSize ( 1 )  .setCompiledSource ( source ) .build (  )  ) ;^126^127^128^^^115^129^mapBuilder.addModule ( FunctionInformationMap.Module.newBuilder (  ) .setName ( name ) .setCompiledSource ( source ) .build (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P5_Replace_Variable]^mapBuilder.addModule ( FunctionInformationMap.Module.newBuilder (  ) .setName ( source ) .setCompiledSource ( source ) .build (  )  ) ;^126^127^128^^^115^129^mapBuilder.addModule ( FunctionInformationMap.Module.newBuilder (  ) .setName ( name ) .setCompiledSource ( source ) .build (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P7_Replace_Invocation]^mapBuilder.addModule ( FunctionInformationMap.Module.newBuilder (  )  .setSize ( 3 )  .setCompiledSource ( source ) .build (  )  ) ;^126^127^128^^^115^129^mapBuilder.addModule ( FunctionInformationMap.Module.newBuilder (  ) .setName ( name ) .setCompiledSource ( source ) .build (  )  ) ;^[CLASS] RecordFunctionInformation 1  [METHOD] addModuleInformation [RETURN_TYPE] void   JSModule module [VARIABLES] Compiler  compiler  JSModule  module  String  name  source  boolean  Builder  mapBuilder  FunctionNames  functionNames  
[P5_Replace_Variable]^return o2.getName (  ) .compareTo ( o1.getName (  )  ) ;^72^^^^^71^73^return o1.getName (  ) .compareTo ( o2.getName (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   JSModule o1 JSModule o2 [VARIABLES] boolean  JSModule  o1  o2  
[P14_Delete_Statement]^^72^^^^^71^73^return o1.getName (  ) .compareTo ( o2.getName (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   JSModule o1 JSModule o2 [VARIABLES] boolean  JSModule  o1  o2  
[P5_Replace_Variable]^return o2.getName (  ) .compareTo ( o2.getName (  )  ) ;^72^^^^^71^73^return o1.getName (  ) .compareTo ( o2.getName (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   JSModule o1 JSModule o2 [VARIABLES] boolean  JSModule  o1  o2  
[P5_Replace_Variable]^return o1.getName (  ) .compareTo ( o1.getName (  )  ) ;^72^^^^^71^73^return o1.getName (  ) .compareTo ( o2.getName (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   JSModule o1 JSModule o2 [VARIABLES] boolean  JSModule  o1  o2  
