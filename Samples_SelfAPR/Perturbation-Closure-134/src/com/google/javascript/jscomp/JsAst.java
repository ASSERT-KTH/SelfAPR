[P8_Replace_Mix]^private  final Logger logger_ = Logger.getLogger ( JsAst.class.getName (  )  ) ;^36^^^^^31^41^private static final Logger logger_ = Logger.getLogger ( JsAst.class.getName (  )  ) ;^[CLASS] JsAst   [VARIABLES] 
[P1_Replace_Type]^private static final  short  serialVersionUID = 1L;^37^^^^^32^42^private static final long serialVersionUID = 1L;^[CLASS] JsAst   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = 1;^37^^^^^32^42^private static final long serialVersionUID = 1L;^[CLASS] JsAst   [VARIABLES] 
[P1_Replace_Type]^private char fileName;^40^^^^^35^45^private String fileName;^[CLASS] JsAst   [VARIABLES] 
[P8_Replace_Mix]^this.sourceFile =  null;^44^^^^^43^46^this.sourceFile = sourceFile;^[CLASS] JsAst  [METHOD] <init> [RETURN_TYPE] SourceFile)   SourceFile sourceFile [VARIABLES] SourceFile  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[P11_Insert_Donor_Statement]^sourceFile = file;this.sourceFile = sourceFile;^44^^^^^43^46^this.sourceFile = sourceFile;^[CLASS] JsAst  [METHOD] <init> [RETURN_TYPE] SourceFile)   SourceFile sourceFile [VARIABLES] SourceFile  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[P8_Replace_Mix]^this.fileName =  null.getName (  ) ;^45^^^^^43^46^this.fileName = sourceFile.getName (  ) ;^[CLASS] JsAst  [METHOD] <init> [RETURN_TYPE] SourceFile)   SourceFile sourceFile [VARIABLES] SourceFile  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[P14_Delete_Statement]^^45^^^^^43^46^this.fileName = sourceFile.getName (  ) ;^[CLASS] JsAst  [METHOD] <init> [RETURN_TYPE] SourceFile)   SourceFile sourceFile [VARIABLES] SourceFile  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[P2_Replace_Operator]^if  ( root != null )  {^50^^^^^49^54^if  ( root == null )  {^[CLASS] JsAst  [METHOD] getAstRoot [RETURN_TYPE] Node   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  sourceFile  String  fileName  Logger  logger_  long  serialVersionUID  
[P8_Replace_Mix]^if  ( root == this )  {^50^^^^^49^54^if  ( root == null )  {^[CLASS] JsAst  [METHOD] getAstRoot [RETURN_TYPE] Node   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  sourceFile  String  fileName  Logger  logger_  long  serialVersionUID  
[P15_Unwrap_Block]^createAst(compiler);^50^51^52^^^49^54^if  ( root == null )  { createAst ( compiler ) ; }^[CLASS] JsAst  [METHOD] getAstRoot [RETURN_TYPE] Node   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  sourceFile  String  fileName  Logger  logger_  long  serialVersionUID  
[P16_Remove_Block]^^50^51^52^^^49^54^if  ( root == null )  { createAst ( compiler ) ; }^[CLASS] JsAst  [METHOD] getAstRoot [RETURN_TYPE] Node   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  sourceFile  String  fileName  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^getAstRoot ( compiler ) ;^51^^^^^49^54^createAst ( compiler ) ;^[CLASS] JsAst  [METHOD] getAstRoot [RETURN_TYPE] Node   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  sourceFile  String  fileName  Logger  logger_  long  serialVersionUID  
[P14_Delete_Statement]^^51^^^^^49^54^createAst ( compiler ) ;^[CLASS] JsAst  [METHOD] getAstRoot [RETURN_TYPE] Node   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  sourceFile  String  fileName  Logger  logger_  long  serialVersionUID  
[P8_Replace_Mix]^root = true;^58^^^^^57^63^root = null;^[CLASS] JsAst  [METHOD] clearAst [RETURN_TYPE] void   [VARIABLES] SourceFile  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[P7_Replace_Invocation]^sourceFile.getCode (  ) ;^62^^^^^57^63^sourceFile.clearCachedSource (  ) ;^[CLASS] JsAst  [METHOD] clearAst [RETURN_TYPE] void   [VARIABLES] SourceFile  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[P14_Delete_Statement]^^62^^^^^57^63^sourceFile.clearCachedSource (  ) ;^[CLASS] JsAst  [METHOD] clearAst [RETURN_TYPE] void   [VARIABLES] SourceFile  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^Preconditions.checkState ( fileNameName.equals ( file.getName (  )  )  ) ;^72^^^^^71^74^Preconditions.checkState ( fileName.equals ( file.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] setSourceFile [RETURN_TYPE] void   SourceFile file [VARIABLES] SourceFile  file  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^Preconditions.checkState ( file.equals ( fileName.getName (  )  )  ) ;^72^^^^^71^74^Preconditions.checkState ( fileName.equals ( file.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] setSourceFile [RETURN_TYPE] void   SourceFile file [VARIABLES] SourceFile  file  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[P8_Replace_Mix]^Preconditions.checkState ( sourceFileName.equals ( file.getName (  )  )  ) ;^72^^^^^71^74^Preconditions.checkState ( fileName.equals ( file.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] setSourceFile [RETURN_TYPE] void   SourceFile file [VARIABLES] SourceFile  file  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[P14_Delete_Statement]^^72^^^^^71^74^Preconditions.checkState ( fileName.equals ( file.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] setSourceFile [RETURN_TYPE] void   SourceFile file [VARIABLES] SourceFile  file  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[P14_Delete_Statement]^^72^73^^^^71^74^Preconditions.checkState ( fileName.equals ( file.getName (  )  )  ) ; sourceFile = file;^[CLASS] JsAst  [METHOD] setSourceFile [RETURN_TYPE] void   SourceFile file [VARIABLES] SourceFile  file  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^sourceFile = sourceFile;^73^^^^^71^74^sourceFile = file;^[CLASS] JsAst  [METHOD] setSourceFile [RETURN_TYPE] void   SourceFile file [VARIABLES] SourceFile  file  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[P8_Replace_Mix]^sourceFile =  null;^73^^^^^71^74^sourceFile = file;^[CLASS] JsAst  [METHOD] setSourceFile [RETURN_TYPE] void   SourceFile file [VARIABLES] SourceFile  file  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[P11_Insert_Donor_Statement]^this.sourceFile = sourceFile;sourceFile = file;^73^^^^^71^74^sourceFile = file;^[CLASS] JsAst  [METHOD] setSourceFile [RETURN_TYPE] void   SourceFile file [VARIABLES] SourceFile  file  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^parse ( compiler, file.getName (  ) , sourceFile.getCode (  )  ) ;^78^^^^^76^83^parse ( compiler, sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^parse (  sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;^78^^^^^76^83^parse ( compiler, sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^parse ( compiler.getName (  ) , sourceFile.getCode (  )  ) ;^78^^^^^76^83^parse ( compiler, sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^parse ( sourceFile, compiler.getName (  ) , sourceFile.getCode (  )  ) ;^78^^^^^76^83^parse ( compiler, sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^createAst ( compiler, sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;^78^^^^^76^83^parse ( compiler, sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^parse ( compiler, sourceFile.getCode (  ) , sourceFile.getCode (  )  ) ;^78^^^^^76^83^parse ( compiler, sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^parse ( compiler, sourceFile.getName (  ) , sourceFile.getName (  )  ) ;^78^^^^^76^83^parse ( compiler, sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P14_Delete_Statement]^^78^^^^^76^83^parse ( compiler, sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P8_Replace_Mix]^parse ( compiler, file.getCode (  ) , sourceFile.getCode (  )  ) ;^78^^^^^76^83^parse ( compiler, sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, file.getName (  )  )  ) ;^80^81^^^^76^83^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR.getName (  )  )  ) ;^80^81^^^^76^83^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^compiler.normalizeNodeTypes ( JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^80^81^^^^76^83^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getCode (  )  )  ) ;^80^81^^^^76^83^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P14_Delete_Statement]^^80^81^^^^76^83^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceName )  ) ;compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^80^81^^^^76^83^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P11_Insert_Donor_Statement]^JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^80^81^^^^76^83^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^JSError.make ( AbstractCompiler.READ_ERROR, file.getName (  )  )  ) ;^81^^^^^76^83^JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getCode (  )  )  ) ;^81^^^^^76^83^JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P14_Delete_Statement]^^81^^^^^76^83^JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceName )  ) ;JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^81^^^^^76^83^JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^81^^^^^76^83^JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^root = ParserRunner.parse ( fileName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^root = ParserRunner.parse ( sourceName, fileName, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^root = ParserRunner.parse (  sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^root = ParserRunner.parse ( sourceName,  compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^root = ParserRunner.parse ( sourceName, sourceStr.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  )  ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^root = ParserRunner.parse ( sourceStr, sourceName, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^root = ParserRunner.parse ( sourceName, compiler, sourceStr.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^root = ParserRunner.parse ( sourceName, logger_, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , sourceStr ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^root = ParserRunner.parse ( sourceName, sourceStr, compiler.normalizeNodeTypes (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^root = ParserRunner.parse ( sourceName, sourceStr, compiler .normalizeNodeTypes ( root )  , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.normalizeNodeTypes (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.normalizeNodeTypes (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P8_Replace_Mix]^root =  ParserRunner.parse ( sourceStr, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P2_Replace_Operator]^logger_.fine ( "Parsing: "  >  sourceName ) ;^88^^^^^85^108^logger_.fine ( "Parsing: " + sourceName ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P3_Replace_Literal]^logger_.fine ( "Parsin" + sourceName ) ;^88^^^^^85^108^logger_.fine ( "Parsing: " + sourceName ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^logger_.fine ( "Parsing: " + sourceStr ) ;^88^^^^^85^108^logger_.fine ( "Parsing: " + sourceName ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P14_Delete_Statement]^^88^^^^^85^108^logger_.fine ( "Parsing: " + sourceName ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^root = ParserRunner.parse ( sourceName, sourceName, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^root = ParserRunner.parse ( logger_, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , sourceName ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^root = ParserRunner.parse ( compiler, sourceStr, sourceName.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^root = ParserRunner .parse ( compiler , sourceName , sourceStr )  , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P8_Replace_Mix]^root = ParserRunner.parse ( fileName, sourceStr, compiler.normalizeNodeTypes (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^compiler.normalizeNodeTypes (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^90^91^92^^^85^108^compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^compiler .getDefaultErrorReporter (  )  , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^90^91^92^^^85^108^compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P14_Delete_Statement]^^90^91^92^^^85^108^compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^compiler.normalizeNodeTypes (  ) , logger_ ) ;^91^92^^^^85^108^compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P14_Delete_Statement]^^91^92^^^^85^108^compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^root = ParserRunner.parse ( sourceName, sourceStr, logger_.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , compiler ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^root = ParserRunner .parse ( compiler , sourceStr , fileName )  , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P8_Replace_Mix]^root =  ParserRunner.parse ( null, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P2_Replace_Operator]^logger_.fine ( "Parsing: "  |  sourceName ) ;^88^^^^^85^108^logger_.fine ( "Parsing: " + sourceName ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P3_Replace_Literal]^logger_.fine ( "Parsingarsing: " + sourceName ) ;^88^^^^^85^108^logger_.fine ( "Parsing: " + sourceName ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceStr )  ) ;^94^^^^^85^108^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceName )  ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR )  ) ;^94^^^^^85^108^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceName )  ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^compiler .getTypeRegistry (  )  ;^94^^^^^85^108^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceName )  ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P14_Delete_Statement]^^94^^^^^85^108^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceName )  ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P11_Insert_Donor_Statement]^JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceName )  ) ;^94^^^^^85^108^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceName )  ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceName )  ) ;^94^^^^^85^108^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceName )  ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P2_Replace_Operator]^if  ( root == null && compiler.hasHaltingErrors (  )  )  {^97^^^^^85^108^if  ( root == null || compiler.hasHaltingErrors (  )  )  {^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P2_Replace_Operator]^if  ( root != null || compiler.hasHaltingErrors (  )  )  {^97^^^^^85^108^if  ( root == null || compiler.hasHaltingErrors (  )  )  {^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^if  ( compiler == null || root.hasHaltingErrors (  )  )  {^97^^^^^85^108^if  ( root == null || compiler.hasHaltingErrors (  )  )  {^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P6_Replace_Expression]^if  ( root == null ) {^97^^^^^85^108^if  ( root == null || compiler.hasHaltingErrors (  )  )  {^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P6_Replace_Expression]^if  (  compiler.hasHaltingErrors (  )  )  {^97^^^^^85^108^if  ( root == null || compiler.hasHaltingErrors (  )  )  {^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^if  ( root == null || compiler.normalizeNodeTypes (  )  )  {^97^^^^^85^108^if  ( root == null || compiler.hasHaltingErrors (  )  )  {^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P8_Replace_Mix]^if  ( root == false ) {^97^^^^^85^108^if  ( root == null || compiler.hasHaltingErrors (  )  )  {^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^compiler.annotateCodingConvention ( root ) ;^101^^^^^85^108^compiler.normalizeNodeTypes ( root ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P14_Delete_Statement]^^101^^^^^85^108^compiler.normalizeNodeTypes ( root ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P11_Insert_Donor_Statement]^compiler.annotateCodingConvention ( root ) ;compiler.normalizeNodeTypes ( root ) ;^101^^^^^85^108^compiler.normalizeNodeTypes ( root ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^compiler.normalizeNodeTypes ( root ) ;^102^^^^^85^108^compiler.annotateCodingConvention ( root ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P14_Delete_Statement]^^102^^^^^85^108^compiler.annotateCodingConvention ( root ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P11_Insert_Donor_Statement]^compiler.normalizeNodeTypes ( root ) ;compiler.annotateCodingConvention ( root ) ;^102^^^^^85^108^compiler.annotateCodingConvention ( root ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P8_Replace_Mix]^root  = null ;^99^^^^^85^108^root = new Node ( Token.BLOCK ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P8_Replace_Mix]^root ;^99^^^^^85^108^root = new Node ( Token.BLOCK ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P8_Replace_Mix]^if  ( root == null || compiler .getDefaultErrorReporter (  )   )  {^97^^^^^85^108^if  ( root == null || compiler.hasHaltingErrors (  )  )  {^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P7_Replace_Invocation]^compiler .isIdeMode (  )  ;^101^^^^^85^108^compiler.normalizeNodeTypes ( root ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^root.putProp ( Node.SOURCENAME_PROP, sourceStr ) ;^107^^^^^85^108^root.putProp ( Node.SOURCENAME_PROP, sourceName ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P5_Replace_Variable]^root.putProp ( Node.SOURCENAME_PROP ) ;^107^^^^^85^108^root.putProp ( Node.SOURCENAME_PROP, sourceName ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[P14_Delete_Statement]^^107^^^^^85^108^root.putProp ( Node.SOURCENAME_PROP, sourceName ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
