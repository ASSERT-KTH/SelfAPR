[P3_Replace_Literal]^super ( consumer, outputCharset, false ) ;^35^^^^^34^36^super ( consumer, outputCharset, true ) ;^[CLASS] TypedCodeGenerator  [METHOD] <init> [RETURN_TYPE] Charset)   CodeConsumer consumer Charset outputCharset [VARIABLES] boolean  CodeConsumer  consumer  Charset  outputCharset  
[P5_Replace_Variable]^super (  outputCharset, true ) ;^35^^^^^34^36^super ( consumer, outputCharset, true ) ;^[CLASS] TypedCodeGenerator  [METHOD] <init> [RETURN_TYPE] Charset)   CodeConsumer consumer Charset outputCharset [VARIABLES] boolean  CodeConsumer  consumer  Charset  outputCharset  
[P5_Replace_Variable]^super ( consumer,  true ) ;^35^^^^^34^36^super ( consumer, outputCharset, true ) ;^[CLASS] TypedCodeGenerator  [METHOD] <init> [RETURN_TYPE] Charset)   CodeConsumer consumer Charset outputCharset [VARIABLES] boolean  CodeConsumer  consumer  Charset  outputCharset  
[P5_Replace_Variable]^super ( outputCharset, consumer, true ) ;^35^^^^^34^36^super ( consumer, outputCharset, true ) ;^[CLASS] TypedCodeGenerator  [METHOD] <init> [RETURN_TYPE] Charset)   CodeConsumer consumer Charset outputCharset [VARIABLES] boolean  CodeConsumer  consumer  Charset  outputCharset  
[P14_Delete_Statement]^^35^^^^^34^36^super ( consumer, outputCharset, true ) ;^[CLASS] TypedCodeGenerator  [METHOD] <init> [RETURN_TYPE] Charset)   CodeConsumer consumer Charset outputCharset [VARIABLES] boolean  CodeConsumer  consumer  Charset  outputCharset  
[P2_Replace_Operator]^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK && n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P2_Replace_Operator]^if  ( n.getParent (  ) .getType (  )  <= Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P2_Replace_Operator]^if  ( n.getParent (  ) .getType (  )  < Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P2_Replace_Operator]^if  ( n.getParent (  ) .getType (  )  >= Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P2_Replace_Operator]^if  ( n.getParent (  ) .getType (  )  > Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P2_Replace_Operator]^if  ( n.getParent (  ) .getType (  )  != Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK ) {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  (  n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( n.getParent (  ) .getType (  )  == BLOCK )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( n.getParent (  ) .getType (  )  == SCRIPT )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( n.getType() == FUNCTION )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( n.getType() == EXPR_RESULT && getType() == ASSIGN )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( n.getType (  )  == EXPR_RESULT )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( n.getFirstChild (  ) .getType (  )  == ASSIGN )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( (n.getType() == VAR) && getFirstChild() != null) && getType() == FUNCTION )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( (n.getType() == VAR && getFirstChild() != null) )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( n.getType (  )  == VAR )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( n.getFirstChild (  ) .getFirstChild (  )  != null )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == FUNCTION )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^if  ( n.getParent (  ) .equals (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^if  ( n.getParent (  )  .getInstanceType (  )   == Token.BLOCK || n.getParent (  )^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.FUNCTION )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( n.getType() == EXPR_RESULT && getType() == ASSIGN )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( n.getType (  )  == EXPR_RESULT )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( n.getFirstChild (  ) .getType (  )  == ASSIGN )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( (n.getType() == VAR) && getFirstChild() != null) && getType() == FUNCTION )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( (n.getType() == VAR && getFirstChild() != null) )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( n.getType (  )  == VAR )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( n.getFirstChild (  ) .getFirstChild (  )  != null )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^if  ( n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == FUNCTION )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^if  ( n.equals (  )  == Token.FUNCTION )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^if  ( n .getInstanceType (  )   == Token.FUNCTION )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P2_Replace_Operator]^} else if  ( n.getType (  )  == Token.EXPR_RESULT || n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P2_Replace_Operator]^} else if  ( n.getType (  )  <= Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P2_Replace_Operator]^} else if  ( n.getType (  )  >= Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P2_Replace_Operator]^} else if  ( n.getType (  )  != Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P5_Replace_Variable]^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.0 )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == Token.EXPR_RESULT ) {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^} else if  (  n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == EXPR_RESULT )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^} else if  ( n.getFirstChild (  ) .getType (  )  == ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^} else if  ( (n.getType() == VAR) && getFirstChild() != null) && getType() == FUNCTION )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^} else if  ( (n.getType() == VAR && getFirstChild() != null) )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == VAR )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^} else if  ( n.getFirstChild (  ) .getFirstChild (  )  != null )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^} else if  ( n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == FUNCTION )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^} else {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^} else if  ( n.equals (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n .getString (  )  .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.equals (  ) .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^} else if  ( n .getInstanceType (  )   == Token.EXPR_RESULT && n.getFirstChild (  )^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P2_Replace_Operator]^} else if  ( n.getType (  )  == Token.VAR || n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P2_Replace_Operator]^} else if  ( n.getType (  )  != Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P2_Replace_Operator]^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  == null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P5_Replace_Variable]^} else if  ( rhs.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == Token.VAR ) {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^} else if  (  n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^} else if  ( (n.getType() == VAR && getFirstChild() != null) )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == VAR )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^} else if  ( n.getFirstChild (  ) .getFirstChild (  )  != null )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^} else if  ( n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P6_Replace_Expression]^} else {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^} else if  ( n.getType (  )  == Token.VAR && n.equals (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^} else if  ( n.getType (  )  == Token.VAR && n .getString (  )^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^} else if  ( n.equals (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^}  if  (  n.getFirstChild (  ) .getFirstChild (  )  != this && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P15_Unwrap_Block]^add(getFunctionAnnotation(n.getFirstChild().getFirstChild()));^48^49^50^51^52^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  { add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ; }^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P16_Remove_Block]^^48^49^50^51^52^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  { add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ; }^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P5_Replace_Variable]^add ( getFunctionAnnotation ( rhs.getFirstChild (  ) .getFirstChild (  )  )  ) ;^51^^^^^39^56^add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^getTypeAnnotation ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^51^^^^^39^56^add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^add ( getTypeAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^51^^^^^39^56^add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^add ( getFunctionAnnotation ( n.equals (  ) .getFirstChild (  )  )  ) ;^51^^^^^39^56^add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P14_Delete_Statement]^^51^^^^^39^56^add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^add ( getFunctionAnnotation ( n .getString (  )^51^^^^^39^56^add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^} else if  ( n .getInstanceType (  )   == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  )^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P5_Replace_Variable]^&& rhs.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^49^50^^^^39^56^&& n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^&& n.equals (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^49^50^^^^39^56^&& n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^&& n .getString (  )^49^50^^^^39^56^&& n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P14_Delete_Statement]^^49^50^51^^^39^56^&& n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  { add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^&& n.getFirstChild (  ) .getFirstChild (  ) .equals (  )  == Token.FUNCTION )  {^50^^^^^39^56^&& n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^&& n.getFirstChild (  ) .getFirstChild (  )  .getInstanceType (  )   == Token.FUNCTION )  {^50^^^^^39^56^&& n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^&& n.equals (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^50^^^^^39^56^&& n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^&& rhs.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^50^^^^^39^56^&& n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P14_Delete_Statement]^^50^51^^^^39^56^&& n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  { add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^&& rhs .getString (  )^50^^^^^39^56^&& n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^&& n .getString (  )^50^^^^^39^56^&& n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^Node rhs = n.equals (  ) .getFirstChild (  ) ;^46^^^^^39^56^Node rhs = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^Node rhs = n .getString (  )^46^^^^^39^56^Node rhs = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P11_Insert_Donor_Statement]^Node paramNode = funType.getSource (  ) .getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;Node rhs = n.getFirstChild (  ) .getFirstChild (  ) ;^46^^^^^39^56^Node rhs = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P5_Replace_Variable]^Node rhs = rhs.getFirstChild (  ) .getFirstChild (  ) ;^46^^^^^39^56^Node rhs = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P14_Delete_Statement]^^46^47^^^^39^56^Node rhs = n.getFirstChild (  ) .getFirstChild (  ) ; add ( getTypeAnnotation ( rhs )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P11_Insert_Donor_Statement]^add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;Node rhs = n.getFirstChild (  ) .getFirstChild (  ) ;^46^^^^^39^56^Node rhs = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P5_Replace_Variable]^add ( getTypeAnnotation ( n )  ) ;^47^^^^^39^56^add ( getTypeAnnotation ( rhs )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^getTypeAnnotation ( getTypeAnnotation ( rhs )  ) ;^47^^^^^39^56^add ( getTypeAnnotation ( rhs )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^add ( getFunctionAnnotation ( rhs )  ) ;^47^^^^^39^56^add ( getTypeAnnotation ( rhs )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P14_Delete_Statement]^^47^^^^^39^56^add ( getTypeAnnotation ( rhs )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P11_Insert_Donor_Statement]^add ( getFunctionAnnotation ( n )  ) ;add ( getTypeAnnotation ( rhs )  ) ;^47^^^^^39^56^add ( getTypeAnnotation ( rhs )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P11_Insert_Donor_Statement]^return getFunctionAnnotation ( node ) ;add ( getTypeAnnotation ( rhs )  ) ;^47^^^^^39^56^add ( getTypeAnnotation ( rhs )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^add ( getFunctionAnnotation ( n )  ) ;^47^^^^^39^56^add ( getTypeAnnotation ( rhs )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^}  if  ( rhs.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != true && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^add ( getTypeAnnotation ( rhs.getFirstChild (  ) .getFirstChild (  )  )  ) ;^51^^^^^39^56^add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P5_Replace_Variable]^} else if  ( rhs.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P5_Replace_Variable]^&& rhs.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^45^^^^^39^56^&& n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^&& n.getFirstChild (  ) .equals (  )  == Token.ASSIGN )  {^45^^^^^39^56^&& n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P14_Delete_Statement]^^45^46^^^^39^56^&& n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  { Node rhs = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^&& n .getString (  )  .getType (  )  == Token.ASSIGN )  {^45^^^^^39^56^&& n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P14_Delete_Statement]^^46^^^^^39^56^Node rhs = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P5_Replace_Variable]^add ( getFunctionAnnotation ( rhs )  ) ;^43^^^^^39^56^add ( getFunctionAnnotation ( n )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^getTypeAnnotation ( getFunctionAnnotation ( n )  ) ;^43^^^^^39^56^add ( getFunctionAnnotation ( n )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^add ( getTypeAnnotation ( n )  ) ;^43^^^^^39^56^add ( getFunctionAnnotation ( n )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P14_Delete_Statement]^^43^^^^^39^56^add ( getFunctionAnnotation ( n )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P11_Insert_Donor_Statement]^return getFunctionAnnotation ( node ) ;add ( getFunctionAnnotation ( n )  ) ;^43^^^^^39^56^add ( getFunctionAnnotation ( n )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P11_Insert_Donor_Statement]^add ( getTypeAnnotation ( rhs )  ) ;add ( getFunctionAnnotation ( n )  ) ;^43^^^^^39^56^add ( getFunctionAnnotation ( n )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P2_Replace_Operator]^} else if  ( n.getType (  )  > Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P2_Replace_Operator]^} else if  ( n.getType (  )  < Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P5_Replace_Variable]^} else if  ( n.getType (  )  == Token.null && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P5_Replace_Variable]^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.0 )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^}  if  ( rhs.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != false && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^&& rhs.equals (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^50^^^^^39^56^&& n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^}  if  (  n.getFirstChild (  ) .getFirstChild (  )  != false && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^add ( getFunctionAnnotation ( rhs.equals (  ) .getFirstChild (  )  )  ) ;^51^^^^^39^56^add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P5_Replace_Variable]^if  ( rhs.getType (  )  == Token.FUNCTION )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^add ( getTypeAnnotation ( rhs )  ) ;^43^^^^^39^56^add ( getFunctionAnnotation ( n )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^&& n.getFirstChild (  )  .getInstanceType (  )   == Token.ASSIGN )  {^45^^^^^39^56^&& n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^&& rhs .getString (  )^49^50^^^^39^56^&& n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.FUNCTION )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P2_Replace_Operator]^if  ( n.getType (  )  <= Token.FUNCTION )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^}  if  (  n .getString (  )  .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^}  if  ( n.getType (  )  == Token.VAR ) {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^add ( getFunctionAnnotation ( rhs .getString (  )^51^^^^^39^56^add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^}  if  (  n.getFirstChild (  ) .getFirstChild (  )  != true && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^&& rhs .getString (  )  .getType (  )  == Token.ASSIGN )  {^45^^^^^39^56^&& n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^} else if  ( n.getType (  )  == Token.this ) {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^&& rhs.equals (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^49^50^^^^39^56^&& n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^}  if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != false && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P5_Replace_Variable]^if  ( rhs.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P8_Replace_Mix]^if  ( rhs.getParent (  ) .equals (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^if  ( n .getString (  )  .getType (  )  == Token.BLOCK || n^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P5_Replace_Variable]^|| rhs.getParent (  ) .getType (  )  == Token.SCRIPT )  {^41^^^^^39^56^|| n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^|| n.getParent (  ) .equals (  )  == Token.SCRIPT )  {^41^^^^^39^56^|| n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P14_Delete_Statement]^^41^42^43^^^39^56^|| n.getParent (  ) .getType (  )  == Token.SCRIPT )  { if  ( n.getType (  )  == Token.FUNCTION )  { add ( getFunctionAnnotation ( n )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P5_Replace_Variable]^super.add (  context ) ;^55^^^^^39^56^super.add ( n, context ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P5_Replace_Variable]^super.add ( n ) ;^55^^^^^39^56^super.add ( n, context ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P14_Delete_Statement]^^55^^^^^39^56^super.add ( n, context ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[P7_Replace_Invocation]^JSType type = node .getType (  )  ;^60^^^^^59^69^JSType type = node.getJSType (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P11_Insert_Donor_Statement]^JSType retType = funType.getReturnType (  ) ;JSType type = node.getJSType (  ) ;^60^^^^^59^69^JSType type = node.getJSType (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P11_Insert_Donor_Statement]^FunctionType funType =  ( FunctionType )  node.getJSType (  ) ;JSType type = node.getJSType (  ) ;^60^^^^^59^69^JSType type = node.getJSType (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P14_Delete_Statement]^^60^^^^^59^69^JSType type = node.getJSType (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P2_Replace_Operator]^if  ( type  |  FunctionType )  {^61^^^^^59^69^if  ( type instanceof FunctionType )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P6_Replace_Expression]^if  ( ((type != null) && !(type.isUnknownType())) && !(type.isEmptyType()) && !(type.isVoidType()) )  {^61^^^^^59^69^if  ( type instanceof FunctionType )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P6_Replace_Expression]^if  ( ((type != null) && !(type.isUnknownType()) && !(type.isEmptyType())) )  {^61^^^^^59^69^if  ( type instanceof FunctionType )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P6_Replace_Expression]^if  ( (type != null && !(type.isUnknownType())) )  {^61^^^^^59^69^if  ( type instanceof FunctionType )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P6_Replace_Expression]^if  ( type != null )  {^61^^^^^59^69^if  ( type instanceof FunctionType )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P6_Replace_Expression]^if  ( "/** @type {" + node.getJSType() + "} */\n" )  {^61^^^^^59^69^if  ( type instanceof FunctionType )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P6_Replace_Expression]^if  ( "/** @type {" + node.getJSType (  ) )  {^61^^^^^59^69^if  ( type instanceof FunctionType )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P13_Insert_Block]^if  (  (  (  ( type != null )  &&  ( ! ( type.isUnknownType (  )  )  )  )  &&  ( ! ( type.isEmptyType (  )  )  )  )  &&  ( ! ( type.isVoidType (  )  )  )  )  {     return  ( "/** @type {" +  ( node.getJSType (  )  )  )  + "} */\n"; }else {     return ""; }^61^^^^^59^69^[Delete]^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P2_Replace_Operator]^} else if  ( type != null || !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^63^64^^^^59^69^} else if  ( type != null && !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P2_Replace_Operator]^} else if  ( type == null && !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^63^64^^^^59^69^} else if  ( type != null && !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P6_Replace_Expression]^} else if  ( type != null ) {^63^64^^^^59^69^} else if  ( type != null && !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P6_Replace_Expression]^} else if  (  !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^63^64^^^^59^69^} else if  ( type != null && !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P6_Replace_Expression]^} else if  ( ((type != null) && !(type.isUnknownType()) && !(type.isEmptyType())) )  {^63^64^^^^59^69^} else if  ( type != null && !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P6_Replace_Expression]^} else if  ( (type != null && !(type.isUnknownType())) )  {^63^64^^^^59^69^} else if  ( type != null && !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P6_Replace_Expression]^} else if  ( "/** @type {" + node.getJSType() + "} */\n" )  {^63^64^^^^59^69^} else if  ( type != null && !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P6_Replace_Expression]^} else if  ( "/** @type {" + node.getJSType (  ) )  {^63^64^^^^59^69^} else if  ( type != null && !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P6_Replace_Expression]^} else {^63^64^^^^59^69^} else if  ( type != null && !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P7_Replace_Invocation]^} else if  ( type != null && !type.isUnknownType (  ) && !type .isVoidType (  )   && !type.isVoidType (  )  )  {^63^64^^^^59^69^} else if  ( type != null && !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P15_Unwrap_Block]^return ("/** @type {" + (node.getJSType())) + "} */\n";^63^64^65^66^67^59^69^} else if  ( type != null && !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  { r } else { return ""; }^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P16_Remove_Block]^^63^64^65^66^67^59^69^} else if  ( type != null && !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  { r } else { return ""; }^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P13_Insert_Block]^if  ( type instanceof FunctionType )  {     return getFunctionAnnotation ( node ) ; }else     if  (  (  (  ( type != null )  &&  ( ! ( type.isUnknownType (  )  )  )  )  &&  ( ! ( type.isEmptyType (  )  )  )  )  &&  ( ! ( type.isVoidType (  )  )  )  )  {         return  ( "/** @type {" +  ( node.getJSType (  )  )  )  + "} */\n";     }else {         return "";     }^63^^^^^59^69^[Delete]^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P13_Insert_Block]^if  (  (  ( retType != null )  &&  ( ! ( retType.isUnknownType (  )  )  )  )  &&  ( ! ( retType.isEmptyType (  )  )  )  )  {     sb.append (  (  ( " * @return {" + retType )  + "}\n" )  ) ; }^63^^^^^59^69^[Delete]^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P14_Delete_Statement]^^65^66^67^^^59^69^r } else { return "";^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P7_Replace_Invocation]^return getTypeAnnotation ( node ) ;^62^^^^^59^69^return getFunctionAnnotation ( node ) ;^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P14_Delete_Statement]^^62^^^^^59^69^return getFunctionAnnotation ( node ) ;^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P7_Replace_Invocation]^} else if  ( type != null && !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type .isEmptyType (  )   )  {^63^64^^^^59^69^} else if  ( type != null && !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P8_Replace_Mix]^} else if  ( type != null && !type .isVoidType (  )  && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^63^64^^^^59^69^} else if  ( type != null && !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P7_Replace_Invocation]^&& !type .isVoidType (  )   && !type.isVoidType (  )  )  {^64^^^^^59^69^&& !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[P5_Replace_Variable]^if  ( paramNode.getJSType (  ) .isUnknownType (  )  )  {^77^^^^^62^92^if  ( node.getJSType (  ) .isUnknownType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^if  ( node.getJSType (  ) .equals (  )  )  {^77^^^^^62^92^if  ( node.getJSType (  ) .isUnknownType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^if  ( node.getJSType (  )  .isVoidType (  )   )  {^77^^^^^62^92^if  ( node.getJSType (  ) .isUnknownType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^if  ( node .getType (  )  .isUnknownType (  )  )  {^77^^^^^62^92^if  ( node.getJSType (  ) .isUnknownType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P15_Unwrap_Block]^return "";^77^78^79^^^62^92^if  ( node.getJSType (  ) .isUnknownType (  )  )  { return ""; }^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P16_Remove_Block]^^77^78^79^^^62^92^if  ( node.getJSType (  ) .isUnknownType (  )  )  { return ""; }^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P13_Insert_Block]^if  ( node.getJSType (  ) .isUnknownType (  )  )  {     return ""; }^77^^^^^62^92^[Delete]^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P8_Replace_Mix]^if  ( paramNode .getType (  )  .isUnknownType (  )  )  {^77^^^^^62^92^if  ( node.getJSType (  ) .isUnknownType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P5_Replace_Variable]^FunctionType funType =  ( FunctionType )  paramNode.getJSType (  ) ;^80^^^^^65^95^FunctionType funType =  ( FunctionType )  node.getJSType (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^JSType type = node.getJSType (  ) ;FunctionType funType =  ( FunctionType )  node.getJSType (  ) ;^80^^^^^65^95^FunctionType funType =  ( FunctionType )  node.getJSType (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^JSType retType = funType.getReturnType (  ) ;FunctionType funType =  ( FunctionType )  node.getJSType (  ) ;^80^^^^^65^95^FunctionType funType =  ( FunctionType )  node.getJSType (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P14_Delete_Statement]^^80^^^^^65^95^FunctionType funType =  ( FunctionType )  node.getJSType (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^Node paramNode = funType.getSource (  ) .equals (  ) .getNext (  ) .getFirstChild (  ) ;^89^90^^^^74^104^Node paramNode = funType.getSource (  ) .getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^Node paramNode = funType.getSource (  ) .getFirstChild (  ) .equals (  ) .getFirstChild (  ) ;^89^90^^^^74^104^Node paramNode = funType.getSource (  ) .getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^Node paramNode = funType.getSource (  ) .getFirstChild (  )  .getType (  )  .getFirstChild (  ) ;^89^90^^^^74^104^Node paramNode = funType.getSource (  ) .getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^Node paramNode = funType .getReturnType (  )  .getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^89^90^^^^74^104^Node paramNode = funType.getSource (  ) .getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^Node rhs = n.getFirstChild (  ) .getFirstChild (  ) ;Node paramNode = funType.getSource (  ) .getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^89^90^^^^74^104^Node paramNode = funType.getSource (  ) .getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^Node paramNode = funType.getSource (  )  .getString (  )  .getNext (  )^89^90^^^^74^104^Node paramNode = funType.getSource (  ) .getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P14_Delete_Statement]^^89^90^^^^74^104^Node paramNode = funType.getSource (  ) .getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^if  ( paramNode != null )  {^95^^^^^80^110^if  ( paramNode == null )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P5_Replace_Variable]^if  ( node == null )  {^95^^^^^80^110^if  ( paramNode == null )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P8_Replace_Mix]^if  ( node == false )  {^95^^^^^80^110^if  ( paramNode == null )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P15_Unwrap_Block]^break;^95^96^97^^^80^110^if  ( paramNode == null )  { break; }^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P16_Remove_Block]^^95^96^97^^^80^110^if  ( paramNode == null )  { break; }^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P8_Replace_Mix]^paramNode =  node.getNext (  ) ;^101^^^^^86^116^paramNode = paramNode.getNext (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^for  ( Node n : funType .getImplementedInterfaces (  )   )  {^93^^^^^78^108^for  ( Node n : funType.getParameters (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P14_Delete_Statement]^^93^94^95^96^97^78^108^for  ( Node n : funType.getParameters (  )  )  {  if  ( paramNode == null )  { break; }^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^sb.append ( " * @param {" + n.getJSType (  <=  )  + "} " ) ;^98^^^^^83^113^sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^sb.append ( " * @param {"  &&  n.getJSType (  )  + "} " ) ;^98^^^^^83^113^sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " * @param { " + n.getJSType (  )  + "} " ) ;^98^^^^^83^113^sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " * @param {" + n.getJSType (  )  + "" ) ;^98^^^^^83^113^sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P8_Replace_Mix]^sb.append ( " * @param {" + paramNode.getJSType (  )  + "} " ) ;^98^^^^^83^113^sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P14_Delete_Statement]^^98^^^^^83^113^sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;^98^^^^^83^113^sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( paramNode.getString (  )  ) ;sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;^98^^^^^83^113^sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;^98^^^^^83^113^sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @return {" + retType + "}\n" ) ;sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;^98^^^^^83^113^sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^sb.append ( " * @param {" + n .getType (  )   + "} " ) ;^98^^^^^83^113^sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P8_Replace_Mix]^sb.append ( " * @param {" + paramNode .getType (  )   + "} " ) ;^98^^^^^83^113^sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P14_Delete_Statement]^^98^99^^^^83^113^sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ; sb.append ( paramNode.getString (  )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P8_Replace_Mix]^sb.append ( node.getString (  )  ) ;^99^^^^^84^114^sb.append ( paramNode.getString (  )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P14_Delete_Statement]^^99^100^^^^84^114^sb.append ( paramNode.getString (  )  ) ; sb.append ( "\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^paramNode = paramNode.getNext (  ) ;sb.append ( paramNode.getString (  )  ) ;^99^^^^^84^114^sb.append ( paramNode.getString (  )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;sb.append ( paramNode.getString (  )  ) ;^99^^^^^84^114^sb.append ( paramNode.getString (  )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( "" ) ;^100^^^^^85^115^sb.append ( "\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P14_Delete_Statement]^^100^^^^^85^115^sb.append ( "\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " */\n" ) ;sb.append ( "\n" ) ;^100^^^^^85^115^sb.append ( "\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @interface\n" ) ;sb.append ( "\n" ) ;^100^^^^^85^115^sb.append ( "\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @constructor\n" ) ;sb.append ( "\n" ) ;^100^^^^^85^115^sb.append ( "\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^paramNode = paramNode .getType (  )  ;^101^^^^^86^116^paramNode = paramNode.getNext (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P14_Delete_Statement]^^101^^^^^86^116^paramNode = paramNode.getNext (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( paramNode.getString (  )  ) ;paramNode = paramNode.getNext (  ) ;^101^^^^^86^116^paramNode = paramNode.getNext (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^JSType type = node.getJSType (  ) ;JSType retType = funType.getReturnType (  ) ;^105^^^^^90^120^JSType retType = funType.getReturnType (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^FunctionType funType =  ( FunctionType )  node.getJSType (  ) ;JSType retType = funType.getReturnType (  ) ;^105^^^^^90^120^JSType retType = funType.getReturnType (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^JSType retType = funType .getSource (  )  ;^105^^^^^90^120^JSType retType = funType.getReturnType (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P14_Delete_Statement]^^105^^^^^90^120^JSType retType = funType.getReturnType (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^if  ( retType != null || !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  {^106^^^^^91^121^if  ( retType != null && !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^if  ( retType == null && !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  {^106^^^^^91^121^if  ( retType != null && !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P6_Replace_Expression]^if  ( retType != null ) {^106^^^^^91^121^if  ( retType != null && !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P6_Replace_Expression]^if  (  !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  {^106^^^^^91^121^if  ( retType != null && !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P6_Replace_Expression]^if  ( (retType != null && !(retType.isUnknownType())) )  {^106^^^^^91^121^if  ( retType != null && !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P6_Replace_Expression]^if  ( " * @return {" + retType + "}\n" )  {^106^^^^^91^121^if  ( retType != null && !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P6_Replace_Expression]^if  ( " * @return {" + retType )  {^106^^^^^91^121^if  ( retType != null && !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^if  ( retType != null && !retType .isVoidType (  )   && !retType.isEmptyType (  )  )  {^106^^^^^91^121^if  ( retType != null && !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^if  ( retType != null && !retType.isUnknownType (  )  && !retType .isVoidType (  )   )  {^106^^^^^91^121^if  ( retType != null && !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P8_Replace_Mix]^if  ( retType != true ) {^106^^^^^91^121^if  ( retType != null && !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P15_Unwrap_Block]^sb.append(((" * @return {" + retType) + "}\n"));^106^107^108^^^91^121^if  ( retType != null && !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  { sb.append ( " * @return {" + retType + "}\n" ) ; }^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P16_Remove_Block]^^106^107^108^^^91^121^if  ( retType != null && !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  { sb.append ( " * @return {" + retType + "}\n" ) ; }^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P13_Insert_Block]^if  (  (  (  ( type != null )  &&  ( ! ( type.isUnknownType (  )  )  )  )  &&  ( ! ( type.isEmptyType (  )  )  )  )  &&  ( ! ( type.isVoidType (  )  )  )  )  {     return  ( "/** @type {" +  ( node.getJSType (  )  )  )  + "} */\n"; }else {     return ""; }^106^^^^^91^121^[Delete]^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^sb.append ( " * @return {"  <=  retType  <=  "}\n" ) ;^107^^^^^92^122^sb.append ( " * @return {" + retType + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^sb.append ( " * @return {"  >  retType + "}\n" ) ;^107^^^^^92^122^sb.append ( " * @return {" + retType + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " *" + retType + "}\n" ) ;^107^^^^^92^122^sb.append ( " * @return {" + retType + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " * @return {" + retType + "}" ) ;^107^^^^^92^122^sb.append ( " * @return {" + retType + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P14_Delete_Statement]^^107^^^^^92^122^sb.append ( " * @return {" + retType + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^sb.append ( " * @return {"  ||  retType  ||  "}\n" ) ;^107^^^^^92^122^sb.append ( " * @return {" + retType + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^sb.append ( " * @return {"  <<  retType + "}\n" ) ;^107^^^^^92^122^sb.append ( " * @return {" + retType + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " * @return {" + retType + "" ) ;^107^^^^^92^122^sb.append ( " * @return {" + retType + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^if  ( funType.isConstructor (  )  && funType.isInterface (  )  )  {^111^^^^^96^126^if  ( funType.isConstructor (  )  || funType.isInterface (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P6_Replace_Expression]^if  ( funType.isConstructor (  )  ) {^111^^^^^96^126^if  ( funType.isConstructor (  )  || funType.isInterface (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P6_Replace_Expression]^if  (  funType.isInterface (  )  )  {^111^^^^^96^126^if  ( funType.isConstructor (  )  || funType.isInterface (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P6_Replace_Expression]^if  ( " * @extends {" + superInstance + "}\n" )  {^111^^^^^96^126^if  ( funType.isConstructor (  )  || funType.isInterface (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P6_Replace_Expression]^if  ( " * @extends {" + superInstance )  {^111^^^^^96^126^if  ( funType.isConstructor (  )  || funType.isInterface (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P6_Replace_Expression]^if  ( " * @implements {" + interfaze + "}\n" )  {^111^^^^^96^126^if  ( funType.isConstructor (  )  || funType.isInterface (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P6_Replace_Expression]^if  ( " * @implements {" + interfaze )  {^111^^^^^96^126^if  ( funType.isConstructor (  )  || funType.isInterface (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^if  ( funType.isConstructor (  )  || funType .getImplementedInterfaces (  )   )  {^111^^^^^96^126^if  ( funType.isConstructor (  )  || funType.isInterface (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P8_Replace_Mix]^if  (  funType .getImplementedInterfaces (  )   )  {^111^^^^^96^126^if  ( funType.isConstructor (  )  || funType.isInterface (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P15_Unwrap_Block]^com.google.javascript.rhino.jstype.ObjectType superInstance = funType.getSuperClassConstructor().getInstanceType(); if (!(superInstance.toString().equals("Object"))) {    sb.append(((" * @extends {" + superInstance) + "}\n"));}; for (com.google.javascript.rhino.jstype.ObjectType interfaze : funType.getImplementedInterfaces()) {    sb.append(((" * @implements {" + interfaze) + "}\n"));}; if (funType.isConstructor()) {    sb.append(" * @constructor\n");}else    if (funType.isInterface()) {        sb.append(" * @interface\n");    };^111^112^113^114^115^96^126^if  ( funType.isConstructor (  )  || funType.isInterface (  )  )  { ObjectType superInstance = funType.getSuperClassConstructor (  ) .getInstanceType (  ) ; if  ( !superInstance.toString (  ) .equals ( "Object" )  )  { sb.append ( " * @extends {"  + superInstance + "}\n" ) ; }^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P16_Remove_Block]^^111^112^113^114^115^96^126^if  ( funType.isConstructor (  )  || funType.isInterface (  )  )  { ObjectType superInstance = funType.getSuperClassConstructor (  ) .getInstanceType (  ) ; if  ( !superInstance.toString (  ) .equals ( "Object" )  )  { sb.append ( " * @extends {"  + superInstance + "}\n" ) ; }^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^if  ( !superInstance.toString (  ) .equals ( "ObjectOb" )  )  {^114^^^^^99^129^if  ( !superInstance.toString (  ) .equals ( "Object" )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P6_Replace_Expression]^if  ( " * @extends {" + superInstance )  {^114^^^^^99^129^if  ( !superInstance.toString (  ) .equals ( "Object" )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^if  ( !superInstance.toString (  )  .getFirstChild (  )   )  {^114^^^^^99^129^if  ( !superInstance.toString (  ) .equals ( "Object" )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P8_Replace_Mix]^if  ( superInstance.toString (  ) .equals ( "Object" )  )  {^114^^^^^99^129^if  ( !superInstance.toString (  ) .equals ( "Object" )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P15_Unwrap_Block]^sb.append(((" * @extends {" + superInstance) + "}\n"));^114^115^116^^^99^129^if  ( !superInstance.toString (  ) .equals ( "Object" )  )  { sb.append ( " * @extends {"  + superInstance + "}\n" ) ; }^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P16_Remove_Block]^^114^115^116^^^99^129^if  ( !superInstance.toString (  ) .equals ( "Object" )  )  { sb.append ( " * @extends {"  + superInstance + "}\n" ) ; }^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^sb.append ( " * @extends {"  >>  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^sb.append ( " * @extends {"  <=  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " * * @extends {"  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " * @extends {"  + superInstance + "\" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P5_Replace_Variable]^sb.append ( " * @extends {"  + interfaze + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P14_Delete_Statement]^^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @interface\n" ) ;sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @return {" + retType + "}\n" ) ;sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P15_Unwrap_Block]^sb.append(" * @constructor\n");^122^123^124^125^126^107^137^if  ( funType.isConstructor (  )  )  { sb.append ( " * @constructor\n" ) ; } else if  ( funType.isInterface (  )  )  { sb.append ( " * @interface\n" ) ; }^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P16_Remove_Block]^^122^123^124^125^126^107^137^if  ( funType.isConstructor (  )  )  { sb.append ( " * @constructor\n" ) ; } else if  ( funType.isInterface (  )  )  { sb.append ( " * @interface\n" ) ; }^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P6_Replace_Expression]^} else {^124^^^^^109^139^} else if  ( funType.isInterface (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^} else if  ( funType .getImplementedInterfaces (  )   )  {^124^^^^^109^139^} else if  ( funType.isInterface (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P15_Unwrap_Block]^sb.append(" * @interface\n");^124^125^126^^^109^139^} else if  ( funType.isInterface (  )  )  { sb.append ( " * @interface\n" ) ; }^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P16_Remove_Block]^^124^125^126^^^109^139^} else if  ( funType.isInterface (  )  )  { sb.append ( " * @interface\n" ) ; }^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " * @interface\n* @" ) ;^125^^^^^110^140^sb.append ( " * @interface\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P14_Delete_Statement]^^125^^^^^110^140^sb.append ( " * @interface\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;sb.append ( " * @interface\n" ) ;^125^^^^^110^140^sb.append ( " * @interface\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " */\n" ) ;sb.append ( " * @interface\n" ) ;^125^^^^^110^140^sb.append ( " * @interface\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;sb.append ( " * @interface\n" ) ;^125^^^^^110^140^sb.append ( " * @interface\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( "\n" ) ;sb.append ( " * @interface\n" ) ;^125^^^^^110^140^sb.append ( " * @interface\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @return {" + retType + "}\n" ) ;sb.append ( " * @interface\n" ) ;^125^^^^^110^140^sb.append ( " * @interface\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @constructor\n" ) ;sb.append ( " * @interface\n" ) ;^125^^^^^110^140^sb.append ( " * @interface\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( "nter" ) ;^125^^^^^110^140^sb.append ( " * @interface\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " * " ) ;^123^^^^^108^138^sb.append ( " * @constructor\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P14_Delete_Statement]^^123^^^^^108^138^sb.append ( " * @constructor\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " */\n" ) ;sb.append ( " * @constructor\n" ) ;^123^^^^^108^138^sb.append ( " * @constructor\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @interface\n" ) ;sb.append ( " * @constructor\n" ) ;^123^^^^^108^138^sb.append ( " * @constructor\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;sb.append ( " * @constructor\n" ) ;^123^^^^^108^138^sb.append ( " * @constructor\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( "\n" ) ;sb.append ( " * @constructor\n" ) ;^123^^^^^108^138^sb.append ( " * @constructor\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @return {" + retType + "}\n" ) ;sb.append ( " * @constructor\n" ) ;^123^^^^^108^138^sb.append ( " * @constructor\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " * @interface\n@in" ) ;^125^^^^^110^140^sb.append ( " * @interface\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^ObjectType superInstance = funType.getSuperClassConstructor (  ) .equals (  ) ;^112^113^^^^97^127^ObjectType superInstance = funType.getSuperClassConstructor (  ) .getInstanceType (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^ObjectType superInstance = funType.getSuperClassConstructor (  )  .getType (  )  ;^112^113^^^^97^127^ObjectType superInstance = funType.getSuperClassConstructor (  ) .getInstanceType (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^ObjectType superInstance = funType .isConstructor (  )  .getInstanceType (  ) ;^112^113^^^^97^127^ObjectType superInstance = funType.getSuperClassConstructor (  ) .getInstanceType (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^funType.getSuperClassConstructor (  ) .equals (  ) ;^113^^^^^98^128^funType.getSuperClassConstructor (  ) .getInstanceType (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P14_Delete_Statement]^^113^^^^^98^128^funType.getSuperClassConstructor (  ) .getInstanceType (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^if  ( !superInstance.toString (  ) .equals ( "Obbject" )  )  {^114^^^^^99^129^if  ( !superInstance.toString (  ) .equals ( "Object" )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^sb.append ( " * @extends {"  <  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^sb.append ( " * @extends {"  ||  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( "* @exte* @extends {"  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " * @extends {"  + superInstance + "\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P14_Delete_Statement]^^118^119^120^^^103^133^for  ( ObjectType interfaze : funType.getImplementedInterfaces (  )  )  { sb.append ( " * @implements {"  + interfaze + "}\n" ) ; }^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^sb.append ( " * @implements {"  >=  + interfaze + "}\n" ) ;^119^^^^^104^134^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^sb.append ( " * @implements {"  &&  + interfaze + "}\n" ) ;^119^^^^^104^134^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " * @implements {le"  + interfaze + "}\n" ) ;^119^^^^^104^134^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P5_Replace_Variable]^sb.append ( " * @implements {"  + superInstance + "}\n" ) ;^119^^^^^104^134^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P14_Delete_Statement]^^119^^^^^104^134^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^119^^^^^104^134^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @interface\n" ) ;sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^119^^^^^104^134^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^119^^^^^104^134^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @return {" + retType + "}\n" ) ;sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^119^^^^^104^134^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @constructor\n" ) ;sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^119^^^^^104^134^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^if  ( funType .getSuperClassConstructor (  )   )  {^122^^^^^107^137^if  ( funType.isConstructor (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " @co" ) ;^123^^^^^108^138^sb.append ( " * @constructor\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " * @interface\nte" ) ;^125^^^^^110^140^sb.append ( " * @interface\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^if  ( !superInstance.toString (  ) .equals ( "ObjectObje" )  )  {^114^^^^^99^129^if  ( !superInstance.toString (  ) .equals ( "Object" )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^sb.append ( " * @extends {"  ^  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " * @extends { *"  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P8_Replace_Mix]^}  if  ( funType .getImplementedInterfaces (  )   )  {^124^^^^^109^139^} else if  ( funType.isInterface (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " * @interface\nrface" ) ;^125^^^^^110^140^sb.append ( " * @interface\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " * @inter* @interface\n" ) ;^125^^^^^110^140^sb.append ( " * @interface\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( "nstruct" ) ;^123^^^^^108^138^sb.append ( " * @constructor\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^sb .append ( 0 )  ;^123^^^^^108^138^sb.append ( " * @constructor\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P8_Replace_Mix]^}  if  ( funType.isInterface (  )  )  {^124^^^^^109^139^} else if  ( funType.isInterface (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( "terfa* @interface\n" ) ;^125^^^^^110^140^sb.append ( " * @interface\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^funType.getSuperClassConstructor (  )  .getType (  )  ;^113^^^^^98^128^funType.getSuperClassConstructor (  ) .getInstanceType (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^if  ( !superInstance.toString (  ) .equals ( "jbject" )  )  {^114^^^^^99^129^if  ( !superInstance.toString (  ) .equals ( "Object" )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^sb.append ( " * @extends {"  <<  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^sb.append ( " * @extends {"  ==  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( "* @extends {"  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " * @extends {"  + superInstance + "}" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^sb .append ( null )  ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P2_Replace_Operator]^sb.append ( " * @implements {"  ||  + interfaze + "}\n" ) ;^119^^^^^104^134^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( "* * @implements {"  + interfaze + "}\n" ) ;^119^^^^^104^134^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " * @constructor\n @c" ) ;^123^^^^^108^138^sb.append ( " * @constructor\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( "" ) ;^125^^^^^110^140^sb.append ( " * @interface\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P3_Replace_Literal]^sb.append ( " */\n *" ) ;^128^^^^^113^143^sb.append ( " */\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P14_Delete_Statement]^^128^129^^^^113^143^sb.append ( " */\n" ) ; return sb.toString (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @interface\n" ) ;sb.append ( " */\n" ) ;^128^^^^^113^143^sb.append ( " */\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( "\n" ) ;sb.append ( " */\n" ) ;^128^^^^^113^143^sb.append ( " */\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P11_Insert_Donor_Statement]^sb.append ( " * @constructor\n" ) ;sb.append ( " */\n" ) ;^128^^^^^113^143^sb.append ( " */\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P7_Replace_Invocation]^return sb.append (  ) ;^129^^^^^114^144^return sb.toString (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[P14_Delete_Statement]^^129^^^^^114^144^return sb.toString (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
