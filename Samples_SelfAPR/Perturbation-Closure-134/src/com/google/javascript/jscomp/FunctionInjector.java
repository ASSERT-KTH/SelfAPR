[P8_Replace_Mix]^private Set<String> knownConstants ;^41^^^^^36^46^private Set<String> knownConstants = Sets.newHashSet (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult   [VARIABLES] 
[P8_Replace_Mix]^Node callNode;^76^^^^^71^81^final Node callNode;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult   [VARIABLES] 
[P8_Replace_Mix]^InliningMode mode;^78^^^^^73^83^final InliningMode mode;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult   [VARIABLES] 
[P1_Replace_Type]^private static final  short  NAME_COST_ESTIMATE = InlineCostEstimator.ESTIMATED_IDENTIFIER_COST;^93^94^^^^93^94^private static final int NAME_COST_ESTIMATE = InlineCostEstimator.ESTIMATED_IDENTIFIER_COST;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult   [VARIABLES] 
[P1_Replace_Type]^private static final  long  COMMA_COST = 1;^97^^^^^92^102^private static final int COMMA_COST = 1;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult   [VARIABLES] 
[P3_Replace_Literal]^private static final int COMMA_COST = 6;^97^^^^^92^102^private static final int COMMA_COST = 1;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult   [VARIABLES] 
[P8_Replace_Mix]^private static final int COMMA_COST = 0;^97^^^^^92^102^private static final int COMMA_COST = 1;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult   [VARIABLES] 
[P1_Replace_Type]^private static final  short  PAREN_COST = 2;^100^^^^^95^105^private static final int PAREN_COST = 2;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult   [VARIABLES] 
[P3_Replace_Literal]^private static final int PAREN_COST = 9;^100^^^^^95^105^private static final int PAREN_COST = 2;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult   [VARIABLES] 
[P8_Replace_Mix]^private static final int PAREN_COST = 2L;^100^^^^^95^105^private static final int PAREN_COST = 2;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult   [VARIABLES] 
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^52^^^^^48^57^Preconditions.checkNotNull ( compiler ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] Supplier,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean allowDecomposition [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^52^53^^^^48^57^Preconditions.checkNotNull ( compiler ) ; Preconditions.checkNotNull ( safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] Supplier,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean allowDecomposition [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Preconditions.checkNotNull ( compiler ) ;^52^^^^^48^57^Preconditions.checkNotNull ( compiler ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] Supplier,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean allowDecomposition [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( compiler.isNormalized (  )  ) ;Preconditions.checkNotNull ( compiler ) ;^52^^^^^48^57^Preconditions.checkNotNull ( compiler ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] Supplier,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean allowDecomposition [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( safeNameIdSupplier ) ;Preconditions.checkNotNull ( compiler ) ;^52^^^^^48^57^Preconditions.checkNotNull ( compiler ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] Supplier,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean allowDecomposition [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( cArg ) ;Preconditions.checkNotNull ( compiler ) ;^52^^^^^48^57^Preconditions.checkNotNull ( compiler ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] Supplier,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean allowDecomposition [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPoint ) ;Preconditions.checkNotNull ( compiler ) ;^52^^^^^48^57^Preconditions.checkNotNull ( compiler ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] Supplier,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean allowDecomposition [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^53^^^^^48^57^Preconditions.checkNotNull ( safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] Supplier,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean allowDecomposition [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^53^^^^^48^57^Preconditions.checkNotNull ( safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] Supplier,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean allowDecomposition [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;Preconditions.checkNotNull ( safeNameIdSupplier ) ;^53^^^^^48^57^Preconditions.checkNotNull ( safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] Supplier,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean allowDecomposition [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Preconditions.checkNotNull ( safeNameIdSupplier ) ;^53^^^^^48^57^Preconditions.checkNotNull ( safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] Supplier,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean allowDecomposition [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( compiler ) ;Preconditions.checkNotNull ( safeNameIdSupplier ) ;^53^^^^^48^57^Preconditions.checkNotNull ( safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] Supplier,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean allowDecomposition [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( cArg ) ;Preconditions.checkNotNull ( safeNameIdSupplier ) ;^53^^^^^48^57^Preconditions.checkNotNull ( safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] Supplier,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean allowDecomposition [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPoint ) ;Preconditions.checkNotNull ( safeNameIdSupplier ) ;^53^^^^^48^57^Preconditions.checkNotNull ( safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] Supplier,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean allowDecomposition [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^this.compiler =  null;^54^^^^^48^57^this.compiler = compiler;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] Supplier,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean allowDecomposition [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^this.module = module;this.compiler = compiler;^54^^^^^48^57^this.compiler = compiler;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] Supplier,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean allowDecomposition [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^this.mode = mode;this.compiler = compiler;^54^^^^^48^57^this.compiler = compiler;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] Supplier,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean allowDecomposition [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^this.safeNameIdSupplier =  null;^55^^^^^48^57^this.safeNameIdSupplier = safeNameIdSupplier;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] Supplier,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean allowDecomposition [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^this.allowDecomposition =  null;^56^^^^^48^57^this.allowDecomposition = allowDecomposition;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] Supplier,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean allowDecomposition [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^this.callNode =  null;^81^^^^^80^84^this.callNode = callNode;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] FunctionInjector$InliningMode)   Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^this.mode = mode;this.callNode = callNode;^81^^^^^80^84^this.callNode = callNode;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] FunctionInjector$InliningMode)   Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^this.module =  null;^82^^^^^80^84^this.module = module;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] FunctionInjector$InliningMode)   Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.module = module;^82^^^^^80^84^this.module = module;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] FunctionInjector$InliningMode)   Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^checkModules = false;this.module = module;^82^^^^^80^84^this.module = module;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] FunctionInjector$InliningMode)   Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^this.mode = mode;this.module = module;^82^^^^^80^84^this.module = module;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] FunctionInjector$InliningMode)   Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^this.mode = DIRECT;^83^^^^^80^84^this.mode = mode;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] FunctionInjector$InliningMode)   Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.mode = mode;^83^^^^^80^84^this.mode = mode;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] FunctionInjector$InliningMode)   Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^this.module = module;this.mode = mode;^83^^^^^80^84^this.mode = mode;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] FunctionInjector$InliningMode)   Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^this.callNode = callNode;this.mode = mode;^83^^^^^80^84^this.mode = mode;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] <init> [RETURN_TYPE] FunctionInjector$InliningMode)   Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  callNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node block = NodeUtil.getFunctionBody ( callNode ) ;^113^^^^^112^141^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node block = NodeUtil.isFunction ( fnNode ) ;^113^^^^^112^141^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node block = NodeUtil .isFunction ( block )  ;^113^^^^^112^141^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node argsNode = NodeUtil.getFnParameters ( fnNode ) ;Node block = NodeUtil.getFunctionBody ( fnNode ) ;^113^^^^^112^141^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node block = fnNode.getLastChild (  ) ;Node block = NodeUtil.getFunctionBody ( fnNode ) ;^113^^^^^112^141^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^113^^^^^112^141^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.isNameReferenced ( fnNode, fnName )  )  {^117^^^^^112^141^if  ( NodeUtil.isNameReferenced ( block, fnName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^117^^^^^112^141^if  ( NodeUtil.isNameReferenced ( block, fnName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.isNameReferenced (  fnName )  )  {^117^^^^^112^141^if  ( NodeUtil.isNameReferenced ( block, fnName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.isNameReferenced ( block )  )  {^117^^^^^112^141^if  ( NodeUtil.isNameReferenced ( block, fnName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.isNameReferenced ( fnName, block )  )  {^117^^^^^112^141^if  ( NodeUtil.isNameReferenced ( block, fnName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil.isLhs ( block, fnName )  )  {^117^^^^^112^141^if  ( NodeUtil.isNameReferenced ( block, fnName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.isLhs ( block, fnRecursionName )  )  {^117^^^^^112^141^if  ( NodeUtil.isNameReferenced ( block, fnName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P9_Replace_Statement]^if  ( NodeUtil.isNameReferenced ( block, "arguments" )  )  {^117^^^^^112^141^if  ( NodeUtil.isNameReferenced ( block, fnName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return false;^117^118^119^^^112^141^if  ( NodeUtil.isNameReferenced ( block, fnName )  )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^117^118^119^^^112^141^if  ( NodeUtil.isNameReferenced ( block, fnName )  )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunction ( parent )  )  {     break; }^117^^^^^112^141^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( containsFunctionDeclaration ( block )  )  {     return false; }^117^^^^^112^141^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isNameReferenced ( block, "arguments" )  )  {     return false; }^117^^^^^112^141^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isLoopStructure ( parent )  )  {     return true; }^117^^^^^112^141^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunctionObjectApply ( callNode )  )  {     return false; }^117^^^^^112^141^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^return true;^118^^^^^112^141^return false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isNameReferenced ( block, fnName )  )  {     return false; }^117^^^^^112^141^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P1_Replace_Type]^char fnRecursionName = fnNode.getFirstChild (  ) .getchar (  ) ;^121^^^^^112^141^String fnRecursionName = fnNode.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^String fnRecursionName = callNode.getFirstChild (  ) .getString (  ) ;^121^^^^^112^141^String fnRecursionName = fnNode.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^String fnRecursionName = fnNode.getFirstChild (  )  .getFirstChild (  )  ;^121^^^^^112^141^String fnRecursionName = fnNode.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^String fnRecursionName = fnNode.newString (  ) .getString (  ) ;^121^^^^^112^141^String fnRecursionName = fnNode.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;String fnRecursionName = fnNode.getFirstChild (  ) .getString (  ) ;^121^^^^^112^141^String fnRecursionName = fnNode.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;String fnRecursionName = fnNode.getFirstChild (  ) .getString (  ) ;^121^^^^^112^141^String fnRecursionName = fnNode.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^String fnRecursionName = fnNode .getLastChild (  )  .getString (  ) ;^121^^^^^112^141^String fnRecursionName = fnNode.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^121^^^^^112^141^String fnRecursionName = fnNode.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^resultName = parent.getFirstChild (  ) .getString (  ) ;String fnRecursionName = fnNode.getFirstChild (  ) .getString (  ) ;^121^^^^^112^141^String fnRecursionName = fnNode.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^String fnRecursionName = callNode .getLastChild (  )  .getString (  ) ;^121^^^^^112^141^String fnRecursionName = fnNode.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( fnRecursionName != null || !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^122^123^124^125^^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( fnRecursionName == null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^122^123^124^125^^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( fnName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^122^123^124^125^^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( fnNode, fnRecursionName )  )  {^122^123^124^125^^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block )  )  {^122^123^124^125^^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced (  fnRecursionName )  )  {^122^123^124^125^^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( fnName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnRecursionName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^122^123^124^125^^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( block != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( fnRecursionName, fnRecursionName )  )  {^122^123^124^125^^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( fnRecursionName != null ) {^122^123^124^125^^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  (  !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^122^123^124^125^^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( ((fnRecursionName != null) && !(fnRecursionName.isEmpty()) && !(fnRecursionName.equals(fnName))) )  {^122^123^124^125^^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( (fnRecursionName != null && !(fnRecursionName.isEmpty())) )  {^122^123^124^125^^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( fnRecursionName != null && !fnRecursionName.equals (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^122^123^124^125^^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isLhs ( block, fnRecursionName )  )  {^122^123^124^125^^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( fnRecursionName != false ) {^122^123^124^125^^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return false;^122^123^124^125^126^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^122^123^124^125^126^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^return true;^126^^^^^122^127^return false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^return true;^126^^^^^112^141^return false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnName )  )  {^123^124^125^^^112^141^&& !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& !fnRecursionName.equals (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^123^124^125^^^112^141^&& !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block )  )  {^124^125^^^^112^141^&& !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& !fnRecursionName.equals ( fnRecursionName ) && NodeUtil.isNameReferenced ( block, fnName )  )  {^124^125^^^^112^141^&& !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^124^125^126^^^112^141^&& !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  { return false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& NodeUtil.isNameReferenced ( fnNode, fnRecursionName )  )  {^125^^^^^112^141^&& NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& NodeUtil.isNameReferenced ( block, fnName )  )  {^125^^^^^112^141^&& NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& NodeUtil.isNameReferenced (  fnRecursionName )  )  {^125^^^^^112^141^&& NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& NodeUtil.isNameReferenced ( block )  )  {^125^^^^^112^141^&& NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& NodeUtil.isNameReferenced ( fnRecursionName, block )  )  {^125^^^^^112^141^&& NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& NodeUtil.isLhs ( block, fnRecursionName )  )  {^125^^^^^112^141^&& NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& NodeUtil.isLhs ( fnNode, fnRecursionName )  )  {^125^^^^^112^141^&& NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^125^126^^^^112^141^&& NodeUtil.isNameReferenced ( block, fnRecursionName )  )  { return false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^if  ( NodeUtil.isNameReferenced ( block, "u" )  )  {^130^^^^^112^141^if  ( NodeUtil.isNameReferenced ( block, "arguments" )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.isNameReferenced ( fnNode, "arguments" )  )  {^130^^^^^112^141^if  ( NodeUtil.isNameReferenced ( block, "arguments" )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil.isLhs ( block, "arguments" )  )  {^130^^^^^112^141^if  ( NodeUtil.isNameReferenced ( block, "arguments" )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil .isNodeTypeReferenced (  )   )  {^130^^^^^112^141^if  ( NodeUtil.isNameReferenced ( block, "arguments" )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P9_Replace_Statement]^if  ( NodeUtil.isNameReferenced ( block, fnName )  )  {^130^^^^^112^141^if  ( NodeUtil.isNameReferenced ( block, "arguments" )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return false;^130^131^132^^^112^141^if  ( NodeUtil.isNameReferenced ( block, "arguments" )  )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^130^131^132^^^112^141^if  ( NodeUtil.isNameReferenced ( block, "arguments" )  )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunction ( parent )  )  {     break; }^130^^^^^112^141^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isNameReferenced ( block, fnName )  )  {     return false; }^130^^^^^112^141^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( containsFunctionDeclaration ( block )  )  {     return false; }^130^^^^^112^141^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isLoopStructure ( parent )  )  {     return true; }^130^^^^^112^141^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunctionObjectApply ( callNode )  )  {     return false; }^130^^^^^112^141^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^return true;^131^^^^^112^141^return false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isNameReferenced ( block, "arguments" )  )  {     return false; }^130^^^^^112^141^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.containsFunctionDeclaration ( fnNode )  )  {^136^^^^^112^141^if  ( NodeUtil.containsFunctionDeclaration ( block )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil.isFunctionObjectCall ( block )  )  {^136^^^^^112^141^if  ( NodeUtil.containsFunctionDeclaration ( block )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return false;^136^137^138^^^112^141^if  ( NodeUtil.containsFunctionDeclaration ( block )  )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^136^137^138^^^112^141^if  ( NodeUtil.containsFunctionDeclaration ( block )  )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunction ( parent )  )  {     break; }^136^^^^^112^141^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isNameReferenced ( block, fnName )  )  {     return false; }^136^^^^^112^141^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isNameReferenced ( block, "arguments" )  )  {     return false; }^136^^^^^112^141^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isLoopStructure ( parent )  )  {     return true; }^136^^^^^112^141^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunctionObjectApply ( callNode )  )  {     return false; }^136^^^^^112^141^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^return true;^137^^^^^112^141^return false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( containsFunctionDeclaration ( block )  )  {     return false; }^136^^^^^112^141^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^return false;^140^^^^^112^141^return true;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( !isSupportedCallType ( fnNode )  )  {^157^^^^^152^174^if  ( !isSupportedCallType ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( !classifyCallSite ( callNode )  )  {^157^^^^^152^174^if  ( !isSupportedCallType ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;^157^158^159^^^152^174^if  ( !isSupportedCallType ( callNode )  )  { return CanInlineResult.NO; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^157^158^159^^^152^174^if  ( !isSupportedCallType ( callNode )  )  { return CanInlineResult.NO; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  )  {     return NO; }^157^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  (  ( ! ( allowDecomposition )  )  &&  ( callSiteType ==  ( DECOMPOSABLE_EXPRESSION )  )  )  {     return NO; }^157^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( callSiteType ==  ( UNSUPPORTED )  )  {     return NO; }^157^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isDirectCallNodeReplacementPossible ( fnNode )  )  )  {     return NO; }^157^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( mayHaveSideEffects ( cArg )  )  {     return NO; }^157^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( referencesThis &&  ( ! ( isFunctionObjectCall ( callNode )  )  )  )  {     return NO; }^157^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isDirectCallNodeReplacementPossible ( fnNode )  )  )  {     return NO; }^158^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isSupportedCallType ( callNode )  )  )  {     return NO; }^158^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( referencesThis || !NodeUtil.isFunctionObjectCall ( callNode )  )  {^162^^^^^152^174^if  ( referencesThis && !NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( allowDecomposition && !NodeUtil.isFunctionObjectCall ( callNode )  )  {^162^^^^^152^174^if  ( referencesThis && !NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( referencesThis && !NodeUtil.isFunctionObjectCall ( fnNode )  )  {^162^^^^^152^174^if  ( referencesThis && !NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( referencesThis ) {^162^^^^^152^174^if  ( referencesThis && !NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  (  !NodeUtil.isFunctionObjectCall ( callNode )  )  {^162^^^^^152^174^if  ( referencesThis && !NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( referencesThis && !NodeUtil.isFunctionObjectApply ( callNode )  )  {^162^^^^^152^174^if  ( referencesThis && !NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( referencesThis && !NodeUtil.isFunctionObjectApply ( fnNode )  )  {^162^^^^^152^174^if  ( referencesThis && !NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;^162^163^^165^166^152^174^if  ( referencesThis && !NodeUtil.isFunctionObjectCall ( callNode )  )  {  return CanInlineResult.NO; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^162^163^^165^166^152^174^if  ( referencesThis && !NodeUtil.isFunctionObjectCall ( callNode )  )  {  return CanInlineResult.NO; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  )  {     return NO; }^162^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  (  ( mayEffectMutableState ( cArg )  )  &&  (  ( getNameReferenceCount ( block, fnParam.getString (  )  )  )  > 1 )  )  {     return NO; }^162^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  (  ( ! ( allowDecomposition )  )  &&  ( callSiteType ==  ( DECOMPOSABLE_EXPRESSION )  )  )  {     return NO; }^162^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( callSiteType ==  ( UNSUPPORTED )  )  {     return NO; }^162^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( cArg != null )  {     if  ( mayHaveSideEffects ( cArg )  )  {         return NO;     }     cArg = cArg.getNext (  ) ; }^162^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( cArg != null )  {     if  (  ( mayEffectMutableState ( cArg )  )  &&  (  ( getNameReferenceCount ( block, fnParam.getString (  )  )  )  > 1 )  )  {         return NO;     } }^162^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isDirectCallNodeReplacementPossible ( fnNode )  )  )  {     return NO; }^162^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isSupportedCallType ( callNode )  )  )  {     return NO; }^162^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( mayHaveSideEffects ( cArg )  )  {     return NO; }^162^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunctionObjectApply ( callNode )  )  {     return false; }^162^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( referencesThis && !NodeUtil .isFunctionObjectApply ( block )   )  {^162^^^^^152^174^if  ( referencesThis && !NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunction ( parent )  )  {     break; }^162^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isNameReferenced ( block, fnName )  )  {     return false; }^162^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( containsFunctionDeclaration ( block )  )  {     return false; }^162^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isLoopStructure ( parent )  )  {     return true; }^162^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( mode <= InliningMode.DIRECT )  {^168^^^^^152^174^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( BLOCK == InliningMode.DIRECT )  {^168^^^^^152^174^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( mode == InliningMode.mode )  {^168^^^^^152^174^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P9_Replace_Statement]^if  ( ref.mode == InliningMode.BLOCK )  {^168^^^^^152^174^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return canInlineReferenceDirectly(callNode, fnNode);^168^169^170^171^172^152^174^if  ( mode == InliningMode.DIRECT )  { return canInlineReferenceDirectly ( callNode, fnNode ) ; } else { return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^168^169^170^171^172^152^174^if  ( mode == InliningMode.DIRECT )  { return canInlineReferenceDirectly ( callNode, fnNode ) ; } else { return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( mode ==  ( DIRECT )  )  {     return inlineReturnValue ( callNode, fnNode ) ; }else {     return inlineFunction ( callNode, fnNode, fnName ) ; }^168^^^^^152^174^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return canInlineReferenceAsStatementBlock ( t, block, fnNode, needAliases ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return canInlineReferenceAsStatementBlock ( t, callNode, callNode, needAliases ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return canInlineReferenceAsStatementBlock (  callNode, fnNode, needAliases ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return canInlineReferenceAsStatementBlock ( t,  fnNode, needAliases ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return canInlineReferenceAsStatementBlock ( t, callNode,  needAliases ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return canInlineReferenceAsStatementBlock ( needAliases, callNode, fnNode, t ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return canInlineReferenceAsStatementBlock ( callNode, t, fnNode, needAliases ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return canInlineReferenceAsStatementBlock ( t, callNode, needAliases, fnNode ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return canInlineReferenceAsStatementBlock ( t, needAliases, fnNode, callNode ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^return callMeetsBlockInliningRequirements ( t, callNode, fnNode, needAliases ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return canInlineReferenceAsStatementBlock ( t, fnNode, callNode, needAliases ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, 2 ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return canInlineReferenceDirectly ( block, fnNode ) ;^169^^^^^152^174^return canInlineReferenceDirectly ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return canInlineReferenceDirectly ( callNode, block ) ;^169^^^^^152^174^return canInlineReferenceDirectly ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return canInlineReferenceDirectly (  fnNode ) ;^169^^^^^152^174^return canInlineReferenceDirectly ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return canInlineReferenceDirectly ( callNode ) ;^169^^^^^152^174^return canInlineReferenceDirectly ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return canInlineReferenceDirectly ( fnNode, callNode ) ;^169^^^^^152^174^return canInlineReferenceDirectly ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^return inlineReturnValue ( callNode, fnNode ) ;^169^^^^^152^174^return canInlineReferenceDirectly ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^169^^^^^152^174^return canInlineReferenceDirectly ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return canInlineReferenceAsStatementBlock ( t, fnNode, fnNode, needAliases ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return canInlineReferenceAsStatementBlock ( t, callNode, block, needAliases ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return canInlineReferenceAsStatementBlock ( fnNode, callNode, t, needAliases ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( callNode.getFirstChild (  ) .getType (  )  <= Token.NAME )  {^182^^^^^181^194^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( callNode.getFirstChild (  ) .getType (  )  == Token.NAME )  {^182^^^^^181^194^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( thisValue == null || thisValue.getType() != THIS )  {^182^^^^^181^194^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( thisValue == null )  {^182^^^^^181^194^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( thisValue.getType (  )  != THIS )  {^182^^^^^181^194^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( callNode.newString (  ) .getType (  )  != Token.NAME )  {^182^^^^^181^194^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( callNode .getLastChild (  )  .getType (  )  != Token.NAME )  {^182^^^^^181^194^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( callNode.getFirstChild (  ) .newString (  )  != Token.NAME )  {^182^^^^^181^194^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( callNode.getFirstChild (  )  .getString (  )   != Token.NAME )  {^182^^^^^181^194^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( fnNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^182^^^^^181^194^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {    com.google.javascript.rhino.Node thisValue = callNode.getFirstChild().getNext();    if ((thisValue == null) || ((thisValue.getType()) != (com.google.javascript.rhino.Token.THIS))) {        return false;    }}else    if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode)) {        return false;    };^182^183^184^185^186^181^194^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  { if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  { Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ; if  ( thisValue == null || thisValue.getType (  )  != Token.THIS )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^182^183^184^185^186^181^194^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  { if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  { Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ; if  ( thisValue == null || thisValue.getType (  )  != Token.THIS )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  (  ( callNode.getFirstChild (  ) .getType (  )  )  !=  ( NAME )  )  {     if  ( isFunctionObjectCall ( callNode )  )  {         checkNotNull ( cArg ) ;         checkState (  (  ( cArg.getType (  )  )  ==  ( THIS )  )  ) ;         cArg = cArg.getNext (  ) ;     }else {         checkState (  ( ! ( isFunctionObjectApply ( callNode )  )  )  ) ;     } }^182^^^^^181^194^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunctionObjectCall ( callNode )  )  {     Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;     if  (  ( thisValue == null )  ||  (  ( thisValue.getType (  )  )  !=  ( THIS )  )  )  {         return false;     } }else     if  ( isFunctionObjectApply ( callNode )  )  {         return false;     }^182^^^^^181^194^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.isFunctionObjectCall ( fnNode )  )  {^183^^^^^181^194^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( thisValue == null )  {^183^^^^^181^194^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( thisValue.getType (  )  != THIS )  {^183^^^^^181^194^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil.isFunctionObjectApply ( callNode )  )  {^183^^^^^181^194^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node thisValue = callNode.getFirstChild().getNext(); if ((thisValue == null) || ((thisValue.getType()) != (com.google.javascript.rhino.Token.THIS))) {    return false;};^183^184^185^186^187^181^194^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  { Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ; if  ( thisValue == null || thisValue.getType (  )  != Token.THIS )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^183^184^185^186^187^181^194^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  { Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ; if  ( thisValue == null || thisValue.getType (  )  != Token.THIS )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  (  ( callNode.getFirstChild (  ) .getType (  )  )  !=  ( NAME )  )  {     if  ( isFunctionObjectCall ( callNode )  )  {         Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;         if  (  ( thisValue == null )  ||  (  ( thisValue.getType (  )  )  !=  ( THIS )  )  )  {             return false;         }     }else         if  ( isFunctionObjectApply ( callNode )  )  {             return false;         }      }^183^^^^^181^194^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunctionObjectCall ( callNode )  )  {     checkNotNull ( cArg ) ;     checkState (  (  ( cArg.getType (  )  )  ==  ( THIS )  )  ) ;     cArg = cArg.getNext (  ) ; }else {     checkState (  ( ! ( isFunctionObjectApply ( callNode )  )  )  ) ; }^183^^^^^181^194^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( NodeUtil.isFunctionObjectApply ( thisValue )  )  {^188^^^^^181^194^} else if  ( NodeUtil.isFunctionObjectApply ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else {^188^^^^^181^194^} else if  ( NodeUtil.isFunctionObjectApply ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^188^^^^^181^194^} else if  ( NodeUtil.isFunctionObjectApply ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^}  if  ( NodeUtil.isFunctionObjectApply ( thisValue )  )  {^188^^^^^181^194^} else if  ( NodeUtil.isFunctionObjectApply ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return false;^188^189^190^^^181^194^} else if  ( NodeUtil.isFunctionObjectApply ( callNode )  )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^188^189^190^^^181^194^} else if  ( NodeUtil.isFunctionObjectApply ( callNode )  )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunction ( parent )  )  {     break; }^188^^^^^181^194^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isNameReferenced ( block, fnName )  )  {     return false; }^188^^^^^181^194^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( containsFunctionDeclaration ( block )  )  {     return false; }^188^^^^^181^194^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isNameReferenced ( block, "arguments" )  )  {     return false; }^188^^^^^181^194^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( referencesThis &&  ( ! ( isFunctionObjectCall ( callNode )  )  )  )  {     return NO; }^188^^^^^181^194^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isLoopStructure ( parent )  )  {     return true; }^188^^^^^181^194^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^return true;^189^^^^^181^194^return false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( NodeUtil .isFunctionObjectCall ( block )   )  {^188^^^^^181^194^} else if  ( NodeUtil.isFunctionObjectApply ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunctionObjectApply ( callNode )  )  {     return false; }^188^^^^^181^194^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( thisValue == null && thisValue.getType (  )  != Token.THIS )  {^185^^^^^181^194^if  ( thisValue == null || thisValue.getType (  )  != Token.THIS )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( thisValue != null || thisValue.getType (  )  != Token.THIS )  {^185^^^^^181^194^if  ( thisValue == null || thisValue.getType (  )  != Token.THIS )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( thisValue == null || thisValue.getType (  )  == Token.THIS )  {^185^^^^^181^194^if  ( thisValue == null || thisValue.getType (  )  != Token.THIS )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( fnNode == null || thisValue.getType (  )  != Token.THIS )  {^185^^^^^181^194^if  ( thisValue == null || thisValue.getType (  )  != Token.THIS )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( thisValue == null ) {^185^^^^^181^194^if  ( thisValue == null || thisValue.getType (  )  != Token.THIS )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  (  thisValue.getType (  )  != Token.THIS )  {^185^^^^^181^194^if  ( thisValue == null || thisValue.getType (  )  != Token.THIS )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( thisValue.getType (  )  != THIS )  {^185^^^^^181^194^if  ( thisValue == null || thisValue.getType (  )  != Token.THIS )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( thisValue == null || thisValue.newString (  )  != Token.THIS )  {^185^^^^^181^194^if  ( thisValue == null || thisValue.getType (  )  != Token.THIS )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( thisValue == false ) {^185^^^^^181^194^if  ( thisValue == null || thisValue.getType (  )  != Token.THIS )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return false;^185^186^187^^^181^194^if  ( thisValue == null || thisValue.getType (  )  != Token.THIS )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^185^186^187^^^181^194^if  ( thisValue == null || thisValue.getType (  )  != Token.THIS )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^return true;^186^^^^^181^194^return false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node thisValue = fnNode.getFirstChild (  ) .getNext (  ) ;^184^^^^^181^194^Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node thisValue = callNode.getFirstChild (  )  .getType (  )  ;^184^^^^^181^194^Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node thisValue = callNode.newString (  ) .getNext (  ) ;^184^^^^^181^194^Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node thisValue = fnNode.newString (  ) .getNext (  ) ;^184^^^^^181^194^Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node returnNode = block.getFirstChild (  ) ;Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;^184^^^^^181^194^Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^String fnRecursionName = fnNode.getFirstChild (  ) .getString (  ) ;Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;^184^^^^^181^194^Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;^184^^^^^181^194^Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node parent = callNode.getParent (  ) ;Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;^184^^^^^181^194^Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node thisValue = callNode .getLastChild (  )  .getNext (  ) ;^184^^^^^181^194^Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node thisValue = thisValue.getFirstChild (  ) .getNext (  ) ;^184^^^^^181^194^Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^184^^^^^181^194^Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( thisValue == null || thisValue .getString (  )   != Token.THIS )  {^185^^^^^181^194^if  ( thisValue == null || thisValue.getType (  )  != Token.THIS )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.isFunctionObjectCall ( thisValue )  )  {^183^^^^^181^194^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.isFunctionObjectApply ( thisValue )  )  {^183^^^^^181^194^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunction ( parent )  )  {     break; }^183^^^^^181^194^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( containsFunctionDeclaration ( block )  )  {     return false; }^183^^^^^181^194^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isLoopStructure ( parent )  )  {     return true; }^183^^^^^181^194^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunctionObjectApply ( callNode )  )  {     return false; }^183^^^^^181^194^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node thisValue = thisValue.getFirstChild (  )  .getType (  )  ;^184^^^^^181^194^Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( NodeUtil .isFunctionObjectCall ( fnNode )   )  {^188^^^^^181^194^} else if  ( NodeUtil.isFunctionObjectApply ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( thisValue == true || thisValue.getType (  )  != Token.THIS )  {^185^^^^^181^194^if  ( thisValue == null || thisValue.getType (  )  != Token.THIS )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( thisValue == this || thisValue.getType (  )  != Token.THIS )  {^185^^^^^181^194^if  ( thisValue == null || thisValue.getType (  )  != Token.THIS )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( thisValue.getFirstChild (  ) .getType (  )  != Token.NAME )  {^182^^^^^181^194^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( thisValue .getLastChild (  )  .getType (  )  != Token.NAME )  {^182^^^^^181^194^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunctionObjectApply ( fnNode )   )  {^183^^^^^181^194^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node thisValue = thisValue .getLastChild (  )  .getNext (  ) ;^184^^^^^181^194^Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^return false;^193^^^^^181^194^return true;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isSupportedCallType [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions.checkArgument ( compiler.isNormalized (  )  ) ;^202^^^^^199^209^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^202^^^^^199^209^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions.checkState ( compiler.getModuleGraph (  )  ) ;^202^^^^^199^209^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkState ( compiler .getCodingConvention (  )   ) ;^202^^^^^199^209^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^202^^^^^199^209^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;Preconditions.checkState ( compiler.isNormalized (  )  ) ;^202^^^^^199^209^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;Preconditions.checkState ( compiler.isNormalized (  )  ) ;^202^^^^^199^209^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;Preconditions.checkState ( compiler.isNormalized (  )  ) ;^202^^^^^199^209^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;Preconditions.checkState ( compiler.isNormalized (  )  ) ;^202^^^^^199^209^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;Preconditions.checkState ( compiler.isNormalized (  )  ) ;^202^^^^^199^209^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent.getFirstChild (  )  == null ) ;Preconditions.checkState ( compiler.isNormalized (  )  ) ;^202^^^^^199^209^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( compiler ) ;Preconditions.checkState ( compiler.isNormalized (  )  ) ;^202^^^^^199^209^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;Preconditions.checkState ( compiler.isNormalized (  )  ) ;^202^^^^^199^209^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;Preconditions.checkState ( compiler.isNormalized (  )  ) ;^202^^^^^199^209^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( mode <= InliningMode.DIRECT )  {^204^^^^^199^209^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( DIRECT == InliningMode.DIRECT )  {^204^^^^^199^209^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( mode == InliningMode.BLOCK )  {^204^^^^^199^209^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( BLOCK == InliningMode.DIRECT )  {^204^^^^^199^209^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P9_Replace_Statement]^if  ( ref.mode == InliningMode.BLOCK )  {^204^^^^^199^209^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return inlineReturnValue(callNode, fnNode);^204^205^206^207^208^199^209^if  ( mode == InliningMode.DIRECT )  { return inlineReturnValue ( callNode, fnNode ) ; } else { return inlineFunction ( callNode, fnNode, fnName ) ; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^204^205^206^207^208^199^209^if  ( mode == InliningMode.DIRECT )  { return inlineReturnValue ( callNode, fnNode ) ; } else { return inlineFunction ( callNode, fnNode, fnName ) ; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( mode ==  ( DIRECT )  )  {     return canInlineReferenceDirectly ( callNode, fnNode ) ; }else {     return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ; }^204^^^^^199^209^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  (  ( ref.mode )  ==  ( BLOCK )  )  {     referencesUsingBlockInlining++; }^204^^^^^199^209^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return inlineFunction ( callNode, thisValue, fnName ) ;^207^^^^^199^209^return inlineFunction ( callNode, fnNode, fnName ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return inlineFunction (  fnNode, fnName ) ;^207^^^^^199^209^return inlineFunction ( callNode, fnNode, fnName ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return inlineFunction ( callNode,  fnName ) ;^207^^^^^199^209^return inlineFunction ( callNode, fnNode, fnName ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return inlineFunction ( callNode, fnNode ) ;^207^^^^^199^209^return inlineFunction ( callNode, fnNode, fnName ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return inlineFunction ( fnNode, callNode, fnName ) ;^207^^^^^199^209^return inlineFunction ( callNode, fnNode, fnName ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return inlineFunction ( fnName, fnNode, callNode ) ;^207^^^^^199^209^return inlineFunction ( callNode, fnNode, fnName ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^return inlineCostDelta ( callNode, fnNode, fnName ) ;^207^^^^^199^209^return inlineFunction ( callNode, fnNode, fnName ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return inlineFunction ( thisValue, fnNode, fnName ) ;^207^^^^^199^209^return inlineFunction ( callNode, fnNode, fnName ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return inlineFunction ( callNode, fnName, fnNode ) ;^207^^^^^199^209^return inlineFunction ( callNode, fnNode, fnName ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^207^^^^^199^209^return inlineFunction ( callNode, fnNode, fnName ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return inlineReturnValue ( thisValue, fnNode ) ;^205^^^^^199^209^return inlineReturnValue ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return inlineReturnValue ( callNode, thisValue ) ;^205^^^^^199^209^return inlineReturnValue ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return inlineReturnValue (  fnNode ) ;^205^^^^^199^209^return inlineReturnValue ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return inlineReturnValue ( callNode ) ;^205^^^^^199^209^return inlineReturnValue ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return inlineReturnValue ( fnNode, callNode ) ;^205^^^^^199^209^return inlineReturnValue ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^return canInlineReferenceDirectly ( callNode, fnNode ) ;^205^^^^^199^209^return inlineReturnValue ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^205^^^^^199^209^return inlineReturnValue ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^return inlineCostDelta ( thisValue, fnNode, fnName ) ;^207^^^^^199^209^return inlineFunction ( callNode, fnNode, fnName ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^return inlineCostDelta ( callNode, thisValue, fnName ) ;^207^^^^^199^209^return inlineFunction ( callNode, fnNode, fnName ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node block = thisValue.getLastChild (  ) ;^217^^^^^216^246^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node block = fnNode.newString (  ) ;^217^^^^^216^246^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node block = returnNode.newString (  ) ;^217^^^^^216^246^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node returnNode = block.getFirstChild (  ) ;Node block = fnNode.getLastChild (  ) ;^217^^^^^216^246^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node fnCallerBody = fnCaller.getLastChild (  ) ;Node block = fnNode.getLastChild (  ) ;^217^^^^^216^246^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;Node block = fnNode.getLastChild (  ) ;^217^^^^^216^246^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node parent = callNode.getParent (  ) ;Node block = fnNode.getLastChild (  ) ;^217^^^^^216^246^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node block = NodeUtil.getFunctionBody ( fnNode ) ;Node block = fnNode.getLastChild (  ) ;^217^^^^^216^246^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node block = newExpression.getLastChild (  ) ;^217^^^^^216^246^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node block = safeReturnNode.getLastChild (  ) ;^217^^^^^216^246^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^217^^^^^216^246^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node callParentNode = thisValue.getParent (  ) ;^218^^^^^216^246^Node callParentNode = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node callParentNode = callNode.newString (  ) ;^218^^^^^216^246^Node callParentNode = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node grandParent = parent.getParent (  ) ;Node callParentNode = callNode.getParent (  ) ;^218^^^^^216^246^Node callParentNode = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node injectionPointParent = injectionPoint.getParent (  ) ;Node callParentNode = callNode.getParent (  ) ;^218^^^^^216^246^Node callParentNode = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node safeReturnNode = returnNode.cloneTree (  ) ;Node callParentNode = callNode.getParent (  ) ;^218^^^^^216^246^Node callParentNode = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node greatGrandParent = grandParent.getParent (  ) ;Node callParentNode = callNode.getParent (  ) ;^218^^^^^216^246^Node callParentNode = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node returnNode = block.getFirstChild (  ) ;Node callParentNode = callNode.getParent (  ) ;^218^^^^^216^246^Node callParentNode = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node fnCallerBody = fnCaller.getLastChild (  ) ;Node callParentNode = callNode.getParent (  ) ;^218^^^^^216^246^Node callParentNode = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node parent = callNode.getParent (  ) ;Node callParentNode = callNode.getParent (  ) ;^218^^^^^216^246^Node callParentNode = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node callParentNode = newExpression.newString (  ) ;^218^^^^^216^246^Node callParentNode = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^218^^^^^216^246^Node callParentNode = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( thisValue, callNode, this.safeNameIdSupplier ) ;^225^226^227^^^216^246^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, safeReturnNode, this.safeNameIdSupplier ) ;^225^226^227^^^216^246^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, null ) ;^225^226^227^^^216^246^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap (  callNode, this.safeNameIdSupplier ) ;^225^226^227^^^216^246^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode,  this.safeNameIdSupplier ) ;^225^226^227^^^216^246^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode ) ;^225^226^227^^^216^246^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( callNode, fnNode, this.safeNameIdSupplier ) ;^225^226^227^^^216^246^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, this.safeNameIdSupplier, callNode ) ;^225^226^227^^^216^246^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( this.safeNameIdSupplier, callNode, fnNode ) ;^225^226^227^^^216^246^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( safeReturnNode, callNode, this.safeNameIdSupplier ) ;^225^226^227^^^216^246^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( thisValue, callNode, this.safeNameIdSupplier ) ;^226^227^^^^216^246^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap (  callNode, this.safeNameIdSupplier ) ;^226^227^^^^216^246^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode,  this.safeNameIdSupplier ) ;^226^227^^^^216^246^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode ) ;^226^227^^^^216^246^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( callNode, fnNode, this.safeNameIdSupplier ) ;^226^227^^^^216^246^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, this.safeNameIdSupplier, callNode ) ;^226^227^^^^216^246^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^226^227^^^^216^246^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( safeReturnNode == inlineResult )  {^230^^^^^216^246^if  ( !block.hasChildren (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( !block.newString (  )  )  {^230^^^^^216^246^if  ( !block.hasChildren (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( !block .addChildAfter ( block , safeReturnNode )   )  {^230^^^^^216^246^if  ( !block.hasChildren (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^newExpression = safeReturnNode.newString (  ) ;^241^^^^^230^242^newExpression = safeReturnNode.removeFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^newExpression = safeReturnNode .getFirstChild (  )  ;^241^^^^^230^242^newExpression = safeReturnNode.removeFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^newExpression =  null.removeFirstChild (  ) ;^241^^^^^230^242^newExpression = safeReturnNode.removeFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^newExpression = NodeUtil.newUndefinedNode (  ) ;newExpression = safeReturnNode.removeFirstChild (  ) ;^241^^^^^230^242^newExpression = safeReturnNode.removeFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node returnNode = safeReturnNode.getFirstChild (  ) ;^233^^^^^230^242^Node returnNode = block.getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node returnNode = block.newString (  ) ;^233^^^^^230^242^Node returnNode = block.getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node returnNode = block .getLastChild (  )  ;^233^^^^^230^242^Node returnNode = block.getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node safeReturnNode = thisValue.cloneTree (  ) ;^237^^^^^230^242^Node safeReturnNode = returnNode.cloneTree (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node safeReturnNode = returnNode.newString (  ) ;^237^^^^^230^242^Node safeReturnNode = returnNode.cloneTree (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node safeReturnNode = returnNode .addChildBefore ( thisValue , callParentNode )  ;^237^^^^^230^242^Node safeReturnNode = returnNode.cloneTree (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node inlineResult = FunctionArgumentInjector.inject ( thisValue, null, argMap ) ;^238^239^^^^230^242^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node inlineResult = FunctionArgumentInjector.inject (  null, argMap ) ;^238^239^^^^230^242^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null ) ;^238^239^^^^230^242^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node inlineResult = FunctionArgumentInjector.inject ( argMap, null, safeReturnNode ) ;^238^239^^^^230^242^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node inlineResult = FunctionArgumentInjector.maybeAddTempsForCallArguments ( safeReturnNode, null, argMap ) ;^238^239^^^^230^242^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node inlineResult = FunctionArgumentInjector.maybeAddTempsForCallArguments ( thisValue, null, argMap ) ;^238^239^^^^230^242^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node returnNode = thisValue.getFirstChild (  ) ;^233^^^^^230^242^Node returnNode = block.getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node returnNode = newExpression.getFirstChild (  ) ;^233^^^^^230^242^Node returnNode = block.getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^233^^^^^230^242^Node returnNode = block.getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkArgument ( returnNode.getType (  )  > Token.RETURN ) ;^234^^^^^230^242^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkArgument ( safeReturnNode.getType (  )  == Token.RETURN ) ;^234^^^^^230^242^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkArgument ( returnNode.getType (  )  == Token.null ) ;^234^^^^^230^242^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^234^^^^^230^242^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions.checkArgument ( returnNode.newString (  )  == Token.RETURN ) ;^234^^^^^230^242^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkArgument ( newExpression.getType (  )  == Token.RETURN ) ;^234^^^^^230^242^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^234^^^^^230^242^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions.checkArgument ( returnNode .getString (  )   == Token.RETURN ) ;^234^^^^^230^242^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkArgument ( inlineResult.getType (  )  == Token.RETURN ) ;^234^^^^^230^242^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^237^^^^^230^242^Node safeReturnNode = returnNode.cloneTree (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node inlineResult = FunctionArgumentInjector.inject ( newExpression, null, argMap ) ;^238^239^^^^230^242^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node inlineResult = FunctionArgumentInjector.maybeAddTempsForCallArguments ( safeReturnNode, null, null ) ;^238^239^^^^230^242^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^238^239^^^^230^242^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkArgument ( safeReturnNode != inlineResult ) ;^240^^^^^230^242^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkArgument ( returnNode == inlineResult ) ;^240^^^^^230^242^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkArgument ( safeReturnNode == newExpression ) ;^240^^^^^230^242^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkArgument ( inlineResult == safeReturnNode ) ;^240^^^^^230^242^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions .checkArgument (  )  ;^240^^^^^230^242^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkArgument ( newExpression == inlineResult ) ;^240^^^^^230^242^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^240^241^^^^230^242^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ; newExpression = safeReturnNode.removeFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^240^^^^^230^242^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^240^^^^^230^242^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^240^^^^^230^242^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^240^^^^^230^242^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( safeNameIdSupplier ) ;Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^240^^^^^230^242^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPoint ) ;Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^240^^^^^230^242^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^newExpression = newExpression.removeFirstChild (  ) ;^241^^^^^230^242^newExpression = safeReturnNode.removeFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^newExpression = newExpression.newString (  ) ;^241^^^^^230^242^newExpression = safeReturnNode.removeFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^241^^^^^230^242^newExpression = safeReturnNode.removeFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^newExpression = NodeUtil.isConstantName (  ) ;^231^^^^^216^246^newExpression = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^newExpression  =  newExpression ;^231^^^^^216^246^newExpression = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^newExpression = safeReturnNode.removeFirstChild (  ) ;newExpression = NodeUtil.newUndefinedNode (  ) ;^231^^^^^216^246^newExpression = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^231^^^^^216^246^newExpression = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunction ( parent )  )  {     break; }^231^^^^^216^246^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isLoopStructure ( parent )  )  {     return true; }^231^^^^^216^246^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^newExpression = newExpression.removeFirstChild (  ) ;^241^^^^^216^246^newExpression = safeReturnNode.removeFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^newExpression = safeReturnNode.newString (  ) ;^241^^^^^216^246^newExpression = safeReturnNode.removeFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^newExpression =  inlineResult.removeFirstChild (  ) ;^241^^^^^216^246^newExpression = safeReturnNode.removeFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^newExpression = NodeUtil.newUndefinedNode (  ) ;newExpression = safeReturnNode.removeFirstChild (  ) ;^241^^^^^216^246^newExpression = safeReturnNode.removeFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node returnNode = newExpression.getFirstChild (  ) ;^233^^^^^216^246^Node returnNode = block.getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node returnNode = block.newString (  ) ;^233^^^^^216^246^Node returnNode = block.getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node returnNode = thisValue.newString (  ) ;^233^^^^^216^246^Node returnNode = block.getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node safeReturnNode = thisValue.cloneTree (  ) ;^237^^^^^216^246^Node safeReturnNode = returnNode.cloneTree (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node safeReturnNode = returnNode.newString (  ) ;^237^^^^^216^246^Node safeReturnNode = returnNode.cloneTree (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node safeReturnNode = inlineResult.cloneTree (  ) ;^237^^^^^216^246^Node safeReturnNode = returnNode.cloneTree (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node inlineResult = FunctionArgumentInjector.inject ( newExpression, null, argMap ) ;^238^239^^^^216^246^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node inlineResult = FunctionArgumentInjector.inject (  null, argMap ) ;^238^239^^^^216^246^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null ) ;^238^239^^^^216^246^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node inlineResult = FunctionArgumentInjector.inject ( argMap, null, safeReturnNode ) ;^238^239^^^^216^246^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node inlineResult = FunctionArgumentInjector.maybeAddTempsForCallArguments ( safeReturnNode, null, argMap ) ;^238^239^^^^216^246^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node inlineResult = FunctionArgumentInjector.inject ( thisValue, null, argMap ) ;^238^239^^^^216^246^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( !block .addChildAfter ( inlineResult , safeReturnNode )   )  {^230^^^^^216^246^if  ( !block.hasChildren (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node returnNode = thisValue.getFirstChild (  ) ;^233^^^^^216^246^Node returnNode = block.getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node returnNode = block .getLastChild (  )  ;^233^^^^^216^246^Node returnNode = block.getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^233^234^^^^216^246^Node returnNode = block.getFirstChild (  ) ; Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkArgument ( returnNode.getType (  )  <= Token.RETURN ) ;^234^^^^^216^246^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkArgument ( safeReturnNode.getType (  )  == Token.RETURN ) ;^234^^^^^216^246^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkArgument ( returnNode.getType (  )  == Token.2 ) ;^234^^^^^216^246^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions.checkArgument ( returnNode.newString (  )  == Token.RETURN ) ;^234^^^^^216^246^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions.checkArgument ( returnNode .getString (  )   == Token.RETURN ) ;^234^^^^^216^246^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions .checkState (  )  ;^234^^^^^216^246^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^234^^^^^216^246^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkArgument ( inlineResult.getType (  )  == Token.RETURN ) ;^234^^^^^216^246^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node safeReturnNode = returnNode .addChildBefore ( block , fnNode )  ;^237^^^^^216^246^Node safeReturnNode = returnNode.cloneTree (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^237^^^^^216^246^Node safeReturnNode = returnNode.cloneTree (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node inlineResult = FunctionArgumentInjector.inject ( returnNode, null, argMap ) ;^238^239^^^^216^246^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node inlineResult = FunctionArgumentInjector.inject ( inlineResult, null, argMap ) ;^238^239^^^^216^246^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^238^239^^^^216^246^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkArgument ( safeReturnNode != inlineResult ) ;^240^^^^^216^246^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkArgument ( safeReturnNode == newExpression ) ;^240^^^^^216^246^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkArgument ( inlineResult == safeReturnNode ) ;^240^^^^^216^246^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions .checkArgument (  )  ;^240^^^^^216^246^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkArgument ( thisValue == inlineResult ) ;^240^^^^^216^246^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^240^241^^^^216^246^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ; newExpression = safeReturnNode.removeFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^240^^^^^216^246^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^240^^^^^216^246^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^240^^^^^216^246^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^240^^^^^216^246^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( safeNameIdSupplier ) ;Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^240^^^^^216^246^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPoint ) ;Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^240^^^^^216^246^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^newExpression = inlineResult.newString (  ) ;^241^^^^^216^246^newExpression = safeReturnNode.removeFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^241^^^^^216^246^newExpression = safeReturnNode.removeFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^callParentNode.replaceChild ( thisValue, newExpression ) ;^244^^^^^216^246^callParentNode.replaceChild ( callNode, newExpression ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^callParentNode.replaceChild ( callNode, thisValue ) ;^244^^^^^216^246^callParentNode.replaceChild ( callNode, newExpression ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^callParentNode.replaceChild (  newExpression ) ;^244^^^^^216^246^callParentNode.replaceChild ( callNode, newExpression ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^callParentNode.replaceChild ( callNode ) ;^244^^^^^216^246^callParentNode.replaceChild ( callNode, newExpression ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^callParentNode.replaceChild ( newExpression, callNode ) ;^244^^^^^216^246^callParentNode.replaceChild ( callNode, newExpression ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^244^245^^^^216^246^callParentNode.replaceChild ( callNode, newExpression ) ; return newExpression;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^grandParent.replaceChild ( parent, newBlock ) ;callParentNode.replaceChild ( callNode, newExpression ) ;^244^^^^^216^246^callParentNode.replaceChild ( callNode, newExpression ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^return thisValue;^245^^^^^216^246^return newExpression;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^return safeReturnNode;^245^^^^^216^246^return newExpression;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node parent = thisValue.getParent (  ) ;^314^^^^^299^329^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node parent = callNode.newString (  ) ;^314^^^^^299^329^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node parent = returnNode.getParent (  ) ;^314^^^^^299^329^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node grandParent = parent.getParent (  ) ;Node parent = callNode.getParent (  ) ;^314^^^^^299^329^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^int numArgs = argsNode.getChildCount (  ) ;Node parent = callNode.getParent (  ) ;^314^^^^^299^329^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node injectionPointParent = injectionPoint.getParent (  ) ;Node parent = callNode.getParent (  ) ;^314^^^^^299^329^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node safeReturnNode = returnNode.cloneTree (  ) ;Node parent = callNode.getParent (  ) ;^314^^^^^299^329^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node greatGrandParent = grandParent.getParent (  ) ;Node parent = callNode.getParent (  ) ;^314^^^^^299^329^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node block = fnNode.getLastChild (  ) ;Node parent = callNode.getParent (  ) ;^314^^^^^299^329^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;Node parent = callNode.getParent (  ) ;^314^^^^^299^329^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;Node parent = callNode.getParent (  ) ;^314^^^^^299^329^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node callParentNode = callNode.getParent (  ) ;Node parent = callNode.getParent (  ) ;^314^^^^^299^329^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node parent = parent.getParent (  ) ;^314^^^^^299^329^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node parent = parent.newString (  ) ;^314^^^^^299^329^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^314^^^^^299^329^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^cArg = cArg.getNext (  ) ;Node parent = callNode.getParent (  ) ;^314^^^^^299^329^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node grandParent = thisValue.getParent (  ) ;^315^^^^^300^330^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node grandParent = parent.newString (  ) ;^315^^^^^300^330^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node grandParent = parent .getString (  )  ;^315^^^^^300^330^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node grandParent = safeReturnNode.getParent (  ) ;^315^^^^^300^330^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node fnCaller = t.getScopeRoot (  ) ;Node grandParent = parent.getParent (  ) ;^315^^^^^300^330^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node injectionPointParent = injectionPoint.getParent (  ) ;Node grandParent = parent.getParent (  ) ;^315^^^^^300^330^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node greatGrandParent = grandParent.getParent (  ) ;Node grandParent = parent.getParent (  ) ;^315^^^^^300^330^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node parent = callNode.getParent (  ) ;Node grandParent = parent.getParent (  ) ;^315^^^^^300^330^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node callParentNode = callNode.getParent (  ) ;Node grandParent = parent.getParent (  ) ;^315^^^^^300^330^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^315^^^^^300^330^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^resultName = parent.getString (  ) ;Node grandParent = parent.getParent (  ) ;^315^^^^^300^330^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.isExprCall ( thisValue )  )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( isExprAssign(grandParent) && isLhs(callNode, parent))) && getType() == NAME) )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( isExprAssign(grandParent && isLhs(callNode, parent))) )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( parent.getFirstChild (  ) .getType (  )  == NAME )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( ((parent.getType() == NAME) && isConstantName(parent))) && (grandParent.getType() == VAR) && grandParent.hasOneChild() )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( ((parent.getType() == NAME) && isConstantName(parent)) && grandParent.getType() == VAR) )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( (parent.getType() == NAME && isConstantName(parent))) )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( parent.getType (  )  == NAME )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( grandParent.getType (  )  == VAR )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( expressionRoot != null )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( type == MOVABLE )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( type == DECOMPOSABLE )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( type == UNDECOMPOSABLE )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil.isExprAssign ( parent )  )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.isExprAssign ( safeReturnNode )  )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P9_Replace_Statement]^if  ( NodeUtil.isLoopStructure ( parent )  )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( parent )  )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^} else if  ( NodeUtil.isExprAssign ( grandParent ) || !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  <= Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  != Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P4_Replace_Constructor]^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs (  parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P4_Replace_Constructor]^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( NodeUtil.isExprAssign ( parent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( safeReturnNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, newExpression ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( NodeUtil.isExprAssign ( callNode ) && !NodeUtil.isLhs ( grandParent, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( NodeUtil.isExprAssign ( parent ) && !NodeUtil.isLhs ( callNode, grandParent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( NodeUtil.isExprAssign ( grandParent ) ) {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  (  !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( isExprAssign(grandParent) && isLhs(callNode, parent))) && getType() == NAME) )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( isExprAssign(grandParent && isLhs(callNode, parent))) )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( parent.getFirstChild (  ) .getType (  )  == NAME )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( ((parent.getType() == NAME) && isConstantName(parent))) && (grandParent.getType() == VAR) && grandParent.hasOneChild() )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( ((parent.getType() == NAME) && isConstantName(parent)) && grandParent.getType() == VAR) )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( (parent.getType() == NAME && isConstantName(parent))) )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( parent.getType (  )  == NAME )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( grandParent.getType (  )  == VAR )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( expressionRoot != null )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( type == MOVABLE )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( type == DECOMPOSABLE )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( type == UNDECOMPOSABLE )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isExpressionNode ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isNameReferenced ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.newString (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent .getLastChild (  )  .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .newString (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  )  .getString (  )   == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isLoopStructure ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^}  if  ( NodeUtil.isExprAssign ( thisValue ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  == Token.NAME || !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  != Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  <= Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  >= Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( thisValue.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && parent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( parent.getType (  )  == Token.NAME ) {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  (  !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( ((parent.getType() == NAME) && isConstantName(parent)) && grandParent.getType() == VAR) )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( (parent.getType() == NAME && isConstantName(parent))) )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( parent.getType (  )  == NAME )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( grandParent.getType (  )  == VAR )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( expressionRoot != null )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( type == MOVABLE )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( type == DECOMPOSABLE )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( type == UNDECOMPOSABLE )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( parent.newString (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( parent .getString (  )   == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isLoopStructure ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.newString (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent .removeChild (  )   )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( expressionRoot == null )  {^337^^^^^327^350^if  ( expressionRoot != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( parent != null )  {^337^^^^^327^350^if  ( expressionRoot != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( type == MOVABLE )  {^337^^^^^327^350^if  ( expressionRoot != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( type == DECOMPOSABLE )  {^337^^^^^327^350^if  ( expressionRoot != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( type == UNDECOMPOSABLE )  {^337^^^^^327^350^if  ( expressionRoot != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( safeReturnNode != true )  {^337^^^^^327^350^if  ( expressionRoot != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( type >= DecompositionType.MOVABLE )  {^342^^^^^327^350^if  ( type == DecompositionType.MOVABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( type != DecompositionType.MOVABLE )  {^342^^^^^327^350^if  ( type == DecompositionType.MOVABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( type == DECOMPOSABLE )  {^342^^^^^327^350^if  ( type == DecompositionType.MOVABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( type == UNDECOMPOSABLE )  {^342^^^^^327^350^if  ( type == DecompositionType.MOVABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^} else if  ( type != DecompositionType.DECOMPOSABLE )  {^344^^^^^327^350^} else if  ( type == DecompositionType.DECOMPOSABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( type == UNDECOMPOSABLE )  {^344^^^^^327^350^} else if  ( type == DecompositionType.DECOMPOSABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else {^344^^^^^327^350^} else if  ( type == DecompositionType.DECOMPOSABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION;^344^345^346^347^348^327^350^} else if  ( type == DecompositionType.DECOMPOSABLE )  { return CallSiteType.DECOMPOSABLE_EXPRESSION; } else { Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^344^345^346^347^348^327^350^} else if  ( type == DecompositionType.DECOMPOSABLE )  { return CallSiteType.DECOMPOSABLE_EXPRESSION; } else { Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( callSiteType ==  ( DECOMPOSABLE_EXPRESSION )  )  {     return AFTER_DECOMPOSITION; }else {     return YES; }^344^^^^^327^350^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( type ==  ( MOVABLE )  )  {     return EXPRESSION; }else     if  ( type ==  ( DECOMPOSABLE )  )  {         return DECOMPOSABLE_EXPRESSION;     }else {         checkState (  ( type ==  ( UNDECOMPOSABLE )  )  ) ;     }^344^^^^^327^350^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkState ( type >= DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^327^350^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^347^^^^^327^350^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^327^350^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^327^350^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( compiler.isNormalized (  )  ) ;Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^327^350^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^327^350^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^327^350^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent.getFirstChild (  )  == null ) ;Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^327^350^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P12_Insert_Condition]^if  ( callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )   { return CallSiteType.DECOMPOSABLE_EXPRESSION; }^345^^^^^327^350^return CallSiteType.DECOMPOSABLE_EXPRESSION;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkState ( type <= DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^327^350^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( compiler )  ;^347^^^^^327^350^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^} else if  ( type <= DecompositionType.DECOMPOSABLE )  {^344^^^^^327^350^} else if  ( type == DecompositionType.DECOMPOSABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer (  safeNameIdSupplier, knownConstants ) ;^338^339^^^^327^350^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler,  knownConstants ) ;^338^339^^^^327^350^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier ) ;^338^339^^^^327^350^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( knownConstants, safeNameIdSupplier, compiler ) ;^338^339^^^^327^350^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, knownConstants, safeNameIdSupplier ) ;^338^339^^^^327^350^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^DecompositionType type = callNode.canExposeExpression ( decomposer ) ;^340^341^^^^327^350^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^DecompositionType type = decomposer.canExposeExpression ( returnNode ) ;^340^341^^^^327^350^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^DecompositionType type = decomposer.canExposeExpression ( thisValue ) ;^340^341^^^^327^350^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^340^341^^^^327^350^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^340^341^^^^327^350^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkState ( type > DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^327^350^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^} else if  ( type < DecompositionType.DECOMPOSABLE )  {^344^^^^^327^350^} else if  ( type == DecompositionType.DECOMPOSABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^} else if  ( type >= DecompositionType.DECOMPOSABLE )  {^344^^^^^327^350^} else if  ( type == DecompositionType.DECOMPOSABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkState ( type != DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^327^350^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( safeNameIdSupplier, compiler, knownConstants ) ;^338^339^^^^327^350^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( returnNode ) ;^336^^^^^327^350^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node expressionRoot = ExpressionDecomposer.findInjectionPoint ( callNode ) ;^336^^^^^327^350^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node expressionRoot = ExpressionDecomposer.findInjectionPoint ( returnNode ) ;^336^^^^^327^350^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node injectionPoint = ExpressionDecomposer.findInjectionPoint ( callNode ) ;Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^336^^^^^327^350^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^336^^^^^327^350^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^DecompositionType type = decomposer .findExpressionRoot ( newExpression )  ;^340^341^^^^327^350^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^DecompositionType type = decomposer .findExpressionRoot ( safeReturnNode )  ;^340^341^^^^327^350^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( newExpression ) ;^336^^^^^327^350^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^336^^^^^327^350^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^DecompositionType type = decomposer.canExposeExpression ( newExpression ) ;^340^341^^^^327^350^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( expressionRoot == null )  {^337^^^^^322^352^if  ( expressionRoot != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( newExpression != null )  {^337^^^^^322^352^if  ( expressionRoot != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( type == MOVABLE )  {^337^^^^^322^352^if  ( expressionRoot != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( type == DECOMPOSABLE )  {^337^^^^^322^352^if  ( expressionRoot != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( type == UNDECOMPOSABLE )  {^337^^^^^322^352^if  ( expressionRoot != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( expressionRoot != this )  {^337^^^^^322^352^if  ( expressionRoot != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( type != DecompositionType.MOVABLE )  {^342^^^^^327^357^if  ( type == DecompositionType.MOVABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( type == DECOMPOSABLE )  {^342^^^^^327^357^if  ( type == DecompositionType.MOVABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( type == UNDECOMPOSABLE )  {^342^^^^^327^357^if  ( type == DecompositionType.MOVABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^} else if  ( type >= DecompositionType.DECOMPOSABLE )  {^344^^^^^329^359^} else if  ( type == DecompositionType.DECOMPOSABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^} else if  ( type != DecompositionType.DECOMPOSABLE )  {^344^^^^^329^359^} else if  ( type == DecompositionType.DECOMPOSABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( type == UNDECOMPOSABLE )  {^344^^^^^329^359^} else if  ( type == DecompositionType.DECOMPOSABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else {^344^^^^^329^359^} else if  ( type == DecompositionType.DECOMPOSABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION;^344^345^346^347^348^329^359^} else if  ( type == DecompositionType.DECOMPOSABLE )  { return CallSiteType.DECOMPOSABLE_EXPRESSION; } else { Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^344^345^346^347^348^329^359^} else if  ( type == DecompositionType.DECOMPOSABLE )  { return CallSiteType.DECOMPOSABLE_EXPRESSION; } else { Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( callSiteType ==  ( DECOMPOSABLE_EXPRESSION )  )  {     return AFTER_DECOMPOSITION; }else {     return YES; }^344^^^^^329^359^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( type ==  ( MOVABLE )  )  {     return EXPRESSION; }else     if  ( type ==  ( DECOMPOSABLE )  )  {         return DECOMPOSABLE_EXPRESSION;     }else {         checkState (  ( type ==  ( UNDECOMPOSABLE )  )  ) ;     }^344^^^^^329^359^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkState ( type <= DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^344^348^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^347^^^^^344^348^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^344^348^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^344^348^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( compiler.isNormalized (  )  ) ;Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^344^348^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^344^348^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^344^348^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent.getFirstChild (  )  == null ) ;Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^344^348^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P12_Insert_Condition]^if  ( callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )   { return CallSiteType.DECOMPOSABLE_EXPRESSION; }^345^^^^^330^360^return CallSiteType.DECOMPOSABLE_EXPRESSION;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkState ( type >= DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^332^362^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( compiler )  ;^347^^^^^332^362^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^347^^^^^332^362^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^332^362^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^332^362^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( compiler.isNormalized (  )  ) ;Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^332^362^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^332^362^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^332^362^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent.getFirstChild (  )  == null ) ;Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^332^362^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkState ( type < DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^344^348^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( compiler )  ;^347^^^^^344^348^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer (  safeNameIdSupplier, knownConstants ) ;^338^339^^^^323^353^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler,  knownConstants ) ;^338^339^^^^323^353^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier ) ;^338^339^^^^323^353^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( knownConstants, safeNameIdSupplier, compiler ) ;^338^339^^^^323^353^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, knownConstants, safeNameIdSupplier ) ;^338^339^^^^323^353^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( safeNameIdSupplier, compiler, knownConstants ) ;^338^339^^^^323^353^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^DecompositionType type = decomposer.canExposeExpression ( thisValue ) ;^340^341^^^^325^355^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^DecompositionType type = callNode.canExposeExpression ( decomposer ) ;^340^341^^^^325^355^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^DecompositionType type = decomposer .findExpressionRoot ( returnNode )  ;^340^341^^^^325^355^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^DecompositionType type = decomposer .findExpressionRoot ( callNode )  ;^340^341^^^^325^355^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^340^341^^^^325^355^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^340^341^^^^325^355^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkState ( type != DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^332^362^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( type <= DecompositionType.MOVABLE )  {^342^^^^^327^357^if  ( type == DecompositionType.MOVABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkState ( type >= DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^344^348^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^} else if  ( type < DecompositionType.DECOMPOSABLE )  {^344^^^^^329^359^} else if  ( type == DecompositionType.DECOMPOSABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^} else if  ( type <= DecompositionType.DECOMPOSABLE )  {^344^^^^^329^359^} else if  ( type == DecompositionType.DECOMPOSABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkState ( type != DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^344^348^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( parent ) ;^336^^^^^321^351^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node expressionRoot = ExpressionDecomposer.findInjectionPoint ( callNode ) ;^336^^^^^321^351^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node expressionRoot = ExpressionDecomposer .findInjectionPoint ( parent )  ;^336^^^^^321^351^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node injectionPoint = ExpressionDecomposer.findInjectionPoint ( callNode ) ;Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^336^^^^^321^351^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^336^^^^^321^351^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^DecompositionType type = decomposer.canExposeExpression ( newExpression ) ;^340^341^^^^325^355^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^} else if  ( thisValue.newString (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& !NodeUtil.isConstantName ( inlineResult ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^328^329^330^^^313^343^&& !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& !NodeUtil.isLoopStructure ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^328^329^330^^^313^343^&& !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& !NodeUtil.isLoopStructure ( safeReturnNode ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^328^329^330^^^313^343^&& !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunction ( parent )  )  {     break; }^328^^^^^313^343^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isNameReferenced ( block, fnName )  )  {     return false; }^328^^^^^313^343^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( containsFunctionDeclaration ( block )  )  {     return false; }^328^^^^^313^343^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isLoopStructure ( parent )  )  {     return true; }^328^^^^^313^343^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunctionObjectApply ( callNode )  )  {     return false; }^328^^^^^313^343^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& parent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^329^330^^^^314^344^&& grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& grandParent.newString (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^329^330^^^^314^344^&& grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& grandParent .getString (  )   == Token.VAR && grandParent.hasOneChild (  )  )  {^329^330^^^^314^344^&& grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& newExpression.hasOneChild (  )  )  {^330^^^^^315^345^&& grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& grandParent.newString (  )  )  {^330^^^^^315^345^&& grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& parent.hasOneChild (  )  )  {^330^^^^^315^345^&& grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( returnNode ) ;^336^^^^^321^351^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^336^^^^^321^351^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^DecompositionType type = decomposer.canExposeExpression ( returnNode ) ;^340^341^^^^325^355^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^DecompositionType type = decomposer.canExposeExpression ( safeReturnNode ) ;^340^341^^^^325^355^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( newExpression.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && thisValue.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil .isLoopStructure ( callNode )  && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^}  if  ( safeReturnNode.getType (  )  == Token.NAME ) {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( expressionRoot != false )  {^337^^^^^327^350^if  ( expressionRoot != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( type <= DecompositionType.MOVABLE )  {^342^^^^^327^350^if  ( type == DecompositionType.MOVABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( type == DecompositionType.this )  {^344^^^^^327^350^} else if  ( type == DecompositionType.DECOMPOSABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^}  if  ( type == DecompositionType.DECOMPOSABLE )  {^344^^^^^327^350^} else if  ( type == DecompositionType.DECOMPOSABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^} else if  ( type > DecompositionType.DECOMPOSABLE )  {^344^^^^^327^350^} else if  ( type == DecompositionType.DECOMPOSABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkState ( type == DecompositionType.3 ) ;^347^^^^^327^350^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^DecompositionType type = decomposer.canExposeExpression ( parent ) ;^340^341^^^^327^350^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkState ( type == DecompositionType.null ) ;^347^^^^^327^350^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( type < DecompositionType.MOVABLE )  {^342^^^^^327^350^if  ( type == DecompositionType.MOVABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, 0, knownConstants ) ;^338^339^^^^327^350^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( thisValue ) ;^336^^^^^327^350^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( parent ) ;^336^^^^^327^350^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^DecompositionType type = decomposer .findExpressionRoot ( expressionRoot )  ;^340^341^^^^327^350^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( thisValue != null )  {^337^^^^^322^352^if  ( expressionRoot != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( expressionRoot != true )  {^337^^^^^322^352^if  ( expressionRoot != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( type == DecompositionType.null )  {^344^^^^^329^359^} else if  ( type == DecompositionType.DECOMPOSABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^DecompositionType type = decomposer.canExposeExpression ( parent ) ;^340^341^^^^325^355^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^DecompositionType type = decomposer .findExpressionRoot ( safeReturnNode )  ;^340^341^^^^325^355^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( type > DecompositionType.MOVABLE )  {^342^^^^^327^357^if  ( type == DecompositionType.MOVABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, 0 ) ;^338^339^^^^323^353^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node expressionRoot = ExpressionDecomposer .findInjectionPoint ( fnNode )  ;^336^^^^^321^351^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^DecompositionType type = decomposer .findExpressionRoot ( grandParent )  ;^340^341^^^^325^355^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( NodeUtil.isExprAssign ( returnNode ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^} else if  ( NodeUtil.isExprAssign ( thisValue ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunction ( parent )  )  {     break; }^321^^^^^306^336^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isNameReferenced ( block, "arguments" )  )  {     return false; }^321^^^^^306^336^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isLoopStructure ( parent )  )  {     return true; }^321^^^^^306^336^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& !NodeUtil.isLhs ( safeReturnNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^322^323^324^^^307^337^&& !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& !NodeUtil.isLhs ( callNode, newExpression ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^322^323^324^^^307^337^&& !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& !NodeUtil.isLhs (  parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^322^323^324^^^307^337^&& !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& !NodeUtil.isLhs ( callNode ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^322^323^324^^^307^337^&& !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& !NodeUtil.isLhs ( parent, callNode ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^322^323^324^^^307^337^&& !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& !NodeUtil.isNameReferenced ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^322^323^324^^^307^337^&& !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& !NodeUtil .isLoopStructure ( fnNode )  && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^322^323^324^^^307^337^&& !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& !NodeUtil.isNameReferenced ( callNode, newExpression ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^322^323^324^^^307^337^&& !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunction ( parent )  )  {     break; }^322^^^^^307^337^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isNameReferenced ( block, fnName )  )  {     return false; }^322^^^^^307^337^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isNameReferenced ( block, "arguments" )  )  {     return false; }^322^^^^^307^337^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isLoopStructure ( parent )  )  {     return true; }^322^^^^^307^337^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunctionObjectApply ( callNode )  )  {     return false; }^322^^^^^307^337^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& newExpression.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^323^324^^^^308^338^&& parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& parent.newString (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^323^324^^^^308^338^&& parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& parent .getLastChild (  )  .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent^323^324^^^^308^338^&& parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& inlineResult.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^323^324^^^^308^338^&& parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& newExpression.newString (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^323^324^^^^308^338^&& parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& !NodeUtil.isConstantName ( newExpression.getFirstChild (  )  )  )  {^324^^^^^309^339^&& !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& !NodeUtil.isConstantName ( parent.newString (  )  )  )  {^324^^^^^309^339^&& !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& !NodeUtil.isConstantName ( parent .getLastChild (  )   )  )  {^324^^^^^309^339^&& !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^324^325^326^^^309^339^&& !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {  return CallSiteType.SIMPLE_ASSIGNMENT;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& !NodeUtil.isConstantName ( inlineResult.getFirstChild (  )  )  )  {^324^^^^^309^339^&& !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( returnNode.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^} else if  ( inlineResult.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& !NodeUtil .isLoopStructure ( callNode )  && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^328^329^330^^^313^343^&& !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& !NodeUtil.isLoopStructure ( inlineResult ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^328^329^330^^^313^343^&& !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& thisValue.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^329^330^^^^314^344^&& grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& thisValue.hasOneChild (  )  )  {^330^^^^^315^345^&& grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& grandParent .removeChild (  )   )  {^330^^^^^315^345^&& grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( newExpression ) ;^336^^^^^321^351^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkState ( type == DecompositionType.null ) ;^347^^^^^332^362^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  >= Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, thisValue ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( parent, callNode ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( NodeUtil .isExpressionNode ( expressionRoot )  && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil .isLoopStructure ( grandParent )   )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^} else if  (  !NodeUtil.isLhs ( thisValue, parent ) && parent.getFirstChild (  )  .getString (  )   == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( grandParent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && parent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil .isLoopStructure ( safeReturnNode )  && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( expressionRoot != true )  {^337^^^^^327^350^if  ( expressionRoot != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkState ( type == DecompositionType.this ) ;^347^^^^^327^350^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, 4 ) ;^338^339^^^^327^350^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkState ( type == DecompositionType.0 ) ;^347^^^^^327^350^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, 1, knownConstants ) ;^338^339^^^^327^350^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( safeReturnNode ) ;^336^^^^^327^350^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^DecompositionType type = decomposer.canExposeExpression ( safeReturnNode ) ;^340^341^^^^327^350^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( parent != null )  {^337^^^^^322^352^if  ( expressionRoot != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^}  if  ( type == DecompositionType.DECOMPOSABLE )  {^344^^^^^329^359^} else if  ( type == DecompositionType.DECOMPOSABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkState ( type == DecompositionType.null ) ;^347^^^^^344^348^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkState ( type == DecompositionType.1 ) ;^347^^^^^344^348^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, null ) ;^338^339^^^^323^353^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkState ( type == DecompositionType.this ) ;^347^^^^^332^362^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^}  if  ( type == DecompositionType.null )  {^344^^^^^329^359^} else if  ( type == DecompositionType.DECOMPOSABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^DecompositionType type = decomposer .findExpressionRoot ( parent )  ;^340^341^^^^325^355^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^} else if  ( safeReturnNode.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& !NodeUtil.isConstantName ( safeReturnNode ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^328^329^330^^^313^343^&& !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& returnNode.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^329^330^^^^314^344^&& grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& safeReturnNode.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^329^330^^^^314^344^&& grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& returnNode.hasOneChild (  )  )  {^330^^^^^315^345^&& grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( thisValue ) ;^336^^^^^321^351^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node expressionRoot = ExpressionDecomposer .findInjectionPoint ( inlineResult )  ;^336^^^^^321^351^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkState ( type == DecompositionType.3 ) ;^347^^^^^332^362^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil .isLoopStructure ( grandParent )  && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( thisValue != null )  {^337^^^^^327^350^if  ( expressionRoot != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( type == DecompositionType.1 )  {^342^^^^^327^350^if  ( type == DecompositionType.MOVABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, 4, knownConstants ) ;^338^339^^^^327^350^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( type == DecompositionType.null )  {^342^^^^^327^350^if  ( type == DecompositionType.MOVABLE )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, 3, knownConstants ) ;^338^339^^^^327^350^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^DecompositionType type = decomposer .findExpressionRoot ( parent )  ;^340^341^^^^327^350^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkState ( type == DecompositionType.2 ) ;^347^^^^^344^348^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkState ( type <= DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^332^362^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, 4, knownConstants ) ;^338^339^^^^323^353^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^DecompositionType type = decomposer .findExpressionRoot ( expressionRoot )  ;^340^341^^^^325^355^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkState ( type < DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^332^362^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkState ( type > DecompositionType.UNDECOMPOSABLE ) ;^347^^^^^344^348^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^DecompositionType type = decomposer .findExpressionRoot ( fnNode )  ;^340^341^^^^325^355^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.isExprCall ( returnNode )  )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil .isExprAssign ( inlineResult )   )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.isExprCall ( safeReturnNode )  )  {^318^^^^^303^333^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunction ( parent )  )  {     break; }^318^^^^^303^333^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isLoopStructure ( parent )  )  {     return true; }^318^^^^^303^333^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunctionObjectApply ( callNode )  )  {     return false; }^318^^^^^303^333^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( NodeUtil.isExprAssign ( newExpression ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& !NodeUtil.isLhs ( thisValue, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^322^323^324^^^307^337^&& !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& !NodeUtil.isLhs ( callNode, safeReturnNode ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^322^323^324^^^307^337^&& !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& !NodeUtil .isLoopStructure ( thisValue )  && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^322^323^324^^^307^337^&& !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& !NodeUtil.isLhs ( newExpression, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^322^323^324^^^307^337^&& !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& thisValue.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^323^324^^^^308^338^&& parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& !NodeUtil.isConstantName ( thisValue.getFirstChild (  )  )  )  {^324^^^^^309^339^&& !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& !NodeUtil.isConstantName ( returnNode.newString (  )  )  )  {^324^^^^^309^339^&& !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& !NodeUtil.isConstantName ( newExpression ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^328^329^330^^^313^343^&& !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& parent.newString (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^329^330^^^^314^344^&& grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node expressionRoot = ExpressionDecomposer.findInjectionPoint ( thisValue ) ;^336^^^^^321^351^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P12_Insert_Condition]^if  ( callSiteType == CallSiteType.UNSUPPORTED )  { return CallSiteType.UNSUPPORTED; }^352^^^^^337^367^return CallSiteType.UNSUPPORTED;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node parent = thisValue.getParent (  ) ;^362^^^^^347^377^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^Node parent = callNode.newString (  ) ;^362^^^^^347^377^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^Node parent = callNode .getString (  )  ;^362^^^^^347^377^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^Node parent = inlineResult.newString (  ) ;^362^^^^^347^377^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node grandParent = parent.getParent (  ) ;Node parent = callNode.getParent (  ) ;^362^^^^^347^377^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^int numArgs = argsNode.getChildCount (  ) ;Node parent = callNode.getParent (  ) ;^362^^^^^347^377^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node injectionPointParent = injectionPoint.getParent (  ) ;Node parent = callNode.getParent (  ) ;^362^^^^^347^377^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node safeReturnNode = returnNode.cloneTree (  ) ;Node parent = callNode.getParent (  ) ;^362^^^^^347^377^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node greatGrandParent = grandParent.getParent (  ) ;Node parent = callNode.getParent (  ) ;^362^^^^^347^377^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node block = fnNode.getLastChild (  ) ;Node parent = callNode.getParent (  ) ;^362^^^^^347^377^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;Node parent = callNode.getParent (  ) ;^362^^^^^347^377^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;Node parent = callNode.getParent (  ) ;^362^^^^^347^377^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node callParentNode = callNode.getParent (  ) ;Node parent = callNode.getParent (  ) ;^362^^^^^347^377^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node parent = newExpression.getParent (  ) ;^362^^^^^347^377^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^362^363^^^^347^377^Node parent = callNode.getParent (  ) ; Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^cArg = cArg.getNext (  ) ;Node parent = callNode.getParent (  ) ;^362^^^^^347^377^Node parent = callNode.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node grandParent = thisValue.getParent (  ) ;^363^^^^^348^378^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^Node grandParent = parent.newString (  ) ;^363^^^^^348^378^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^Node grandParent = newBlock.getParent (  ) ;^363^^^^^348^378^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node fnCaller = t.getScopeRoot (  ) ;Node grandParent = parent.getParent (  ) ;^363^^^^^348^378^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node injectionPointParent = injectionPoint.getParent (  ) ;Node grandParent = parent.getParent (  ) ;^363^^^^^348^378^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node greatGrandParent = grandParent.getParent (  ) ;Node grandParent = parent.getParent (  ) ;^363^^^^^348^378^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node parent = callNode.getParent (  ) ;Node grandParent = parent.getParent (  ) ;^363^^^^^348^378^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node callParentNode = callNode.getParent (  ) ;Node grandParent = parent.getParent (  ) ;^363^^^^^348^378^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^Node grandParent = injectionPointParent.getParent (  ) ;^363^^^^^348^378^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^363^^^^^348^378^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^resultName = parent.getString (  ) ;Node grandParent = parent.getParent (  ) ;^363^^^^^348^378^Node grandParent = parent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^CallSiteType callSiteType = classifyCallSite ( parent ) ;^367^^^^^352^382^CallSiteType callSiteType = classifyCallSite ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^CallSiteType callSiteType = isSupportedCallType ( callNode ) ;^367^^^^^352^382^CallSiteType callSiteType = classifyCallSite ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^CallSiteType callSiteType = classifyCallSite ( returnNode ) ;^367^^^^^352^382^CallSiteType callSiteType = classifyCallSite ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^CallSiteType callSiteType = classifyCallSite ( safeReturnNode ) ;^367^^^^^352^382^CallSiteType callSiteType = classifyCallSite ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^CallSiteType callSiteType = classifyCallSite ( thisValue ) ;^367^^^^^352^382^CallSiteType callSiteType = classifyCallSite ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P2_Replace_Operator]^Preconditions.checkArgument ( callSiteType == CallSiteType.UNSUPPORTED ) ;^368^^^^^353^383^Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Preconditions.checkArgument ( VAR_DECL_SIMPLE_ASSIGNMENT != CallSiteType.UNSUPPORTED ) ;^368^^^^^353^383^Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Preconditions.checkArgument ( callSiteType != CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT ) ;^368^^^^^353^383^Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^Preconditions.checkState ( callSiteType != CallSiteType.UNSUPPORTED ) ;^368^^^^^353^383^Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^368^^^^^353^383^Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^368^^^^^353^383^Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;^368^^^^^353^383^Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;^368^^^^^353^383^Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;^368^^^^^353^383^Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;^368^^^^^353^383^Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P12_Insert_Condition]^if  ( callSiteType == CallSiteType.UNSUPPORTED )  { Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ; }^368^^^^^353^383^Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P1_Replace_Type]^char resultName = null;^373^^^^^358^388^String resultName = null;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P3_Replace_Literal]^boolean needsDefaultReturnResult = false;^374^^^^^359^389^boolean needsDefaultReturnResult = true;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P1_Replace_Type]^resultName = parent.getFirstChild (  ) .getchar (  ) ;^377^^^^^362^392^resultName = parent.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^resultName = injectionPointParent.getFirstChild (  ) .getString (  ) ;^377^^^^^362^392^resultName = parent.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^resultName = parent.newString (  ) .getString (  ) ;^377^^^^^362^392^resultName = parent.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^resultName = parent .getLastChild (  )  .getString (  ) ;^377^^^^^362^392^resultName = parent.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^resultName =  thisValue.getFirstChild (  ) .getString (  ) ;^377^^^^^362^392^resultName = parent.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^resultName = parent.getString (  ) ;resultName = parent.getFirstChild (  ) .getString (  ) ;^377^^^^^362^392^resultName = parent.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P1_Replace_Type]^resultName = parent.getchar (  ) ;^381^^^^^366^396^resultName = parent.getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^resultName = newExpression.getString (  ) ;^381^^^^^366^396^resultName = parent.getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^resultName = parent.newString (  ) ;^381^^^^^366^396^resultName = parent.getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^resultName =  thisValue.getString (  ) ;^381^^^^^366^396^resultName = parent.getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^resultName = getUniqueResultName (  ) ;resultName = parent.getString (  ) ;^381^^^^^366^396^resultName = parent.getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^resultName = parent.getFirstChild (  ) .getString (  ) ;resultName = parent.getString (  ) ;^381^^^^^366^396^resultName = parent.getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^resultName = true;^385^^^^^370^400^resultName = null;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P3_Replace_Literal]^needsDefaultReturnResult = true;^386^^^^^371^401^needsDefaultReturnResult = false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^resultName  =  resultName ;^390^^^^^375^405^resultName = getUniqueResultName (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^resultName = parent.getString (  ) ;resultName = getUniqueResultName (  ) ;^390^^^^^375^405^resultName = getUniqueResultName (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P3_Replace_Literal]^needsDefaultReturnResult = true;^391^^^^^376^406^needsDefaultReturnResult = false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P3_Replace_Literal]^throw new IllegalStateException ( "eecomposable expressions must decomposed before inlining." ) ;^396^397^^^^381^411^throw new IllegalStateException ( "Decomposable expressions must decomposed before inlining." ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P3_Replace_Literal]^throw new IllegalStateException ( "Decomposable expressions must decomposed before inlining.Decomposable expr" ) ;^396^397^^^^381^411^throw new IllegalStateException ( "Decomposable expressions must decomposed before inlining." ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^resultName = inlineResult.getFirstChild (  ) .getString (  ) ;^377^^^^^362^392^resultName = parent.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^resultName = parent.getFirstChild (  )  .getFirstChild (  )  ;^377^^^^^362^392^resultName = parent.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^resultName = injectionPointParent.newString (  ) .getString (  ) ;^377^^^^^362^392^resultName = parent.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^377^^^^^362^392^resultName = parent.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent.getFirstChild (  )  == null ) ;resultName = parent.getFirstChild (  ) .getString (  ) ;^377^^^^^362^392^resultName = parent.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;resultName = parent.getFirstChild (  ) .getString (  ) ;^377^^^^^362^392^resultName = parent.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^String fnRecursionName = fnNode.getFirstChild (  ) .getString (  ) ;resultName = parent.getFirstChild (  ) .getString (  ) ;^377^^^^^362^392^resultName = parent.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;resultName = parent.getFirstChild (  ) .getString (  ) ;^377^^^^^362^392^resultName = parent.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^resultName = newBlock.getFirstChild (  ) .getString (  ) ;^377^^^^^362^392^resultName = parent.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^resultName = injectionPointParent .getLastChild (  )  .getString (  ) ;^377^^^^^362^392^resultName = parent.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^resultName = injectionPointParent .getFirstChild (  )  ;^381^^^^^366^396^resultName = parent.getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^381^^^^^366^396^resultName = parent.getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node grandParent = parent.getParent (  ) ;resultName = parent.getString (  ) ;^381^^^^^366^396^resultName = parent.getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node greatGrandParent = grandParent.getParent (  ) ;resultName = parent.getString (  ) ;^381^^^^^366^396^resultName = parent.getString (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^390^^^^^375^405^resultName = getUniqueResultName (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^boolean isCallInLoop = isCallWithinLoop ( safeReturnNode ) ;^403^^^^^388^418^boolean isCallInLoop = isCallWithinLoop ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^boolean isCallInLoop = isSupportedCallType ( callNode ) ;^403^^^^^388^418^boolean isCallInLoop = isCallWithinLoop ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^boolean isCallInLoop = isCallWithinLoop ( newBlock ) ;^403^^^^^388^418^boolean isCallInLoop = isCallWithinLoop ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^boolean isCallInLoop = isSupportedCallType ( newExpression ) ;^403^^^^^388^418^boolean isCallInLoop = isCallWithinLoop ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^403^^^^^388^418^boolean isCallInLoop = isCallWithinLoop ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^FunctionToBlockMutator mutator = new FunctionToBlockMutator (  this.safeNameIdSupplier ) ;^405^406^^^^390^420^FunctionToBlockMutator mutator = new FunctionToBlockMutator ( compiler, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^FunctionToBlockMutator mutator = new FunctionToBlockMutator ( compiler ) ;^405^406^^^^390^420^FunctionToBlockMutator mutator = new FunctionToBlockMutator ( compiler, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^FunctionToBlockMutator mutator = new FunctionToBlockMutator ( this.safeNameIdSupplier, compiler ) ;^405^406^^^^390^420^FunctionToBlockMutator mutator = new FunctionToBlockMutator ( compiler, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^FunctionToBlockMutator mutator = new FunctionToBlockMutator ( compiler, 4 ) ;^405^406^^^^390^420^FunctionToBlockMutator mutator = new FunctionToBlockMutator ( compiler, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^FunctionToBlockMutator mutator = new FunctionToBlockMutator ( compiler, null ) ;^405^406^^^^390^420^FunctionToBlockMutator mutator = new FunctionToBlockMutator ( compiler, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = mutator.mutate ( resultName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = mutator.mutate ( fnName, parent, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = mutator.mutate ( fnName, fnNode, inlineResult, resultName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, fnName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, referencesThis, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, referencesThis ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = mutator.mutate (  fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = mutator.mutate ( fnName,  callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = mutator.mutate ( fnName, fnNode,  resultName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = mutator.mutate ( fnName, fnNode, callNode,  needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName,  isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = isCallInLoop.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, mutator ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = mutator.mutate ( resultName, fnNode, callNode, fnName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = mutator.mutate ( fnName, callNode, fnNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = mutator.mutate ( fnName, fnNode, resultName, callNode, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, isCallInLoop, needsDefaultReturnResult ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = mutator.mutate ( fnName, thisValue, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = mutator.mutate ( fnName, fnNode, thisValue, resultName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = callNode.mutate ( fnName, fnNode, mutator, resultName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlock = fnNode.mutate ( fnName, mutator, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node greatGrandParent = safeReturnNode.getParent (  ) ;^415^^^^^400^430^Node greatGrandParent = grandParent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^Node greatGrandParent = grandParent.newString (  ) ;^415^^^^^400^430^Node greatGrandParent = grandParent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^Node greatGrandParent = grandParent .getString (  )  ;^415^^^^^400^430^Node greatGrandParent = grandParent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^Node greatGrandParent = thisValue.getParent (  ) ;^415^^^^^400^430^Node greatGrandParent = grandParent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node grandParent = parent.getParent (  ) ;Node greatGrandParent = grandParent.getParent (  ) ;^415^^^^^400^430^Node greatGrandParent = grandParent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node injectionPointParent = injectionPoint.getParent (  ) ;Node greatGrandParent = grandParent.getParent (  ) ;^415^^^^^400^430^Node greatGrandParent = grandParent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node parent = callNode.getParent (  ) ;Node greatGrandParent = grandParent.getParent (  ) ;^415^^^^^400^430^Node greatGrandParent = grandParent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node callParentNode = callNode.getParent (  ) ;Node greatGrandParent = grandParent.getParent (  ) ;^415^^^^^400^430^Node greatGrandParent = grandParent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node greatGrandParent = newExpression.getParent (  ) ;^415^^^^^400^430^Node greatGrandParent = grandParent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^415^^^^^400^430^Node greatGrandParent = grandParent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^resultName = parent.getString (  ) ;Node greatGrandParent = grandParent.getParent (  ) ;^415^^^^^400^430^Node greatGrandParent = grandParent.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node injectionPoint = ExpressionDecomposer.findInjectionPoint ( thisValue ) ;^443^^^^^428^458^Node injectionPoint = ExpressionDecomposer.findInjectionPoint ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^Node injectionPoint = ExpressionDecomposer.findExpressionRoot ( callNode ) ;^443^^^^^428^458^Node injectionPoint = ExpressionDecomposer.findInjectionPoint ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^Node injectionPoint = ExpressionDecomposer.findInjectionPoint ( returnNode ) ;^443^^^^^428^458^Node injectionPoint = ExpressionDecomposer.findInjectionPoint ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node injectionPointParent = injectionPoint.getParent (  ) ;Node injectionPoint = ExpressionDecomposer.findInjectionPoint ( callNode ) ;^443^^^^^428^458^Node injectionPoint = ExpressionDecomposer.findInjectionPoint ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node expressionRoot = ExpressionDecomposer.findExpressionRoot ( callNode ) ;Node injectionPoint = ExpressionDecomposer.findInjectionPoint ( callNode ) ;^443^^^^^428^458^Node injectionPoint = ExpressionDecomposer.findInjectionPoint ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newExpressionParent = injectionPoint.getParent (  ) ;^445^^^^^430^460^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^Node injectionPointParent = injectionPoint.newString (  ) ;^445^^^^^430^460^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node injectionPoint = ExpressionDecomposer.findInjectionPoint ( callNode ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^445^^^^^430^460^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node grandParent = parent.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^445^^^^^430^460^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node greatGrandParent = grandParent.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^445^^^^^430^460^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node parent = callNode.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^445^^^^^430^460^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node callParentNode = callNode.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^445^^^^^430^460^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^parent.removeChild ( injectionPointParent.getFirstChild (  )  ) ;^419^^^^^404^434^parent.removeChild ( parent.getFirstChild (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^parent.replaceChild ( parent.getFirstChild (  )  ) ;^419^^^^^404^434^parent.removeChild ( parent.getFirstChild (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^parent.removeChild ( parent.newString (  )  ) ;^419^^^^^404^434^parent.removeChild ( parent.getFirstChild (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^parent.removeChild ( inlineResult.getFirstChild (  )  ) ;^419^^^^^404^434^parent.removeChild ( parent.getFirstChild (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^419^^^^^404^434^parent.removeChild ( parent.getFirstChild (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^parent.removeChild ( thisValue.getFirstChild (  )  ) ;^419^^^^^404^434^parent.removeChild ( parent.getFirstChild (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^parent.removeChild ( parent .getLastChild (  )   ) ;^419^^^^^404^434^parent.removeChild ( parent.getFirstChild (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P2_Replace_Operator]^Preconditions.checkState ( parent.getFirstChild (  )  != null ) ;^420^^^^^405^435^Preconditions.checkState ( parent.getFirstChild (  )  == null ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Preconditions.checkState ( newBlock.getFirstChild (  )  == null ) ;^420^^^^^405^435^Preconditions.checkState ( parent.getFirstChild (  )  == null ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^Preconditions.checkState ( parent.newString (  )  == null ) ;^420^^^^^405^435^Preconditions.checkState ( parent.getFirstChild (  )  == null ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^Preconditions.checkState ( parent .getLastChild (  )   == null ) ;^420^^^^^405^435^Preconditions.checkState ( parent.getFirstChild (  )  == null ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^Preconditions.checkState ( injectionPointParent.newString (  )  == null ) ;^420^^^^^405^435^Preconditions.checkState ( parent.getFirstChild (  )  == null ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^420^^^^^405^435^Preconditions.checkState ( parent.getFirstChild (  )  == null ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Preconditions.checkState ( injectionPointParent.getFirstChild (  )  == null ) ;^420^^^^^405^435^Preconditions.checkState ( parent.getFirstChild (  )  == null ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^greatGrandParent.addChildAfter ( returnNode, grandParent ) ;^422^^^^^407^437^greatGrandParent.addChildAfter ( newBlock, grandParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^greatGrandParent.addChildAfter ( newBlock, newBlock ) ;^422^^^^^407^437^greatGrandParent.addChildAfter ( newBlock, grandParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^greatGrandParent.addChildAfter (  grandParent ) ;^422^^^^^407^437^greatGrandParent.addChildAfter ( newBlock, grandParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^greatGrandParent.addChildAfter ( newBlock ) ;^422^^^^^407^437^greatGrandParent.addChildAfter ( newBlock, grandParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^greatGrandParent.addChildAfter ( grandParent, newBlock ) ;^422^^^^^407^437^greatGrandParent.addChildAfter ( newBlock, grandParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^greatGrandParent .addChildBefore ( grandParent , newBlock )  ;^422^^^^^407^437^greatGrandParent.addChildAfter ( newBlock, grandParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^422^423^^^^407^437^greatGrandParent.addChildAfter ( newBlock, grandParent ) ; break;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^injectionPointParent.addChildBefore ( newBlock, injectionPoint ) ;greatGrandParent.addChildAfter ( newBlock, grandParent ) ;^422^^^^^407^437^greatGrandParent.addChildAfter ( newBlock, grandParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isExpressionNode ( newBlock )  ) ;^428^^^^^413^443^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil.isExprAssign ( grandParent )  ) ;^428^^^^^413^443^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^428^^^^^413^443^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^428^^^^^413^443^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^428^^^^^413^443^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( compiler.isNormalized (  )  ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^428^^^^^413^443^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^428^^^^^413^443^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^428^^^^^413^443^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^428^^^^^413^443^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^428^^^^^413^443^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent.getFirstChild (  )  == null ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^428^^^^^413^443^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^428^^^^^413^443^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^428^^^^^413^443^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isExprAssign ( newExpression )   ) ;^428^^^^^413^443^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^greatGrandParent.replaceChild ( grandParent, inlineResult ) ;^429^^^^^414^444^greatGrandParent.replaceChild ( grandParent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^greatGrandParent.replaceChild (  newBlock ) ;^429^^^^^414^444^greatGrandParent.replaceChild ( grandParent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^greatGrandParent.replaceChild ( grandParent ) ;^429^^^^^414^444^greatGrandParent.replaceChild ( grandParent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^greatGrandParent.replaceChild ( newBlock, grandParent ) ;^429^^^^^414^444^greatGrandParent.replaceChild ( grandParent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^greatGrandParent.replaceChild ( newBlock, newBlock ) ;^429^^^^^414^444^greatGrandParent.replaceChild ( grandParent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^429^^^^^414^444^greatGrandParent.replaceChild ( grandParent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^grandParent.replaceChild ( parent, newBlock ) ;greatGrandParent.replaceChild ( grandParent, newBlock ) ;^429^^^^^414^444^greatGrandParent.replaceChild ( grandParent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isExpressionNode ( injectionPointParent )  ) ;^434^^^^^419^449^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil.isExprAssign ( parent )  ) ;^434^^^^^419^449^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil .isExprAssign ( newExpression )   ) ;^434^^^^^419^449^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^434^^^^^419^449^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^434^^^^^419^449^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^434^^^^^419^449^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( compiler.isNormalized (  )  ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^434^^^^^419^449^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^434^^^^^419^449^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^434^^^^^419^449^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^434^^^^^419^449^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent.getFirstChild (  )  == null ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^434^^^^^419^449^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^434^^^^^419^449^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^434^^^^^419^449^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isExpressionNode ( inlineResult )  ) ;^434^^^^^419^449^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isExprAssign ( safeReturnNode )  ) ;^434^^^^^419^449^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^434^435^^^^419^449^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ; grandParent.replaceChild ( parent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^grandParent.replaceChild ( returnNode, newBlock ) ;^435^^^^^420^450^grandParent.replaceChild ( parent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^grandParent.replaceChild ( parent, parent ) ;^435^^^^^420^450^grandParent.replaceChild ( parent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^grandParent.replaceChild (  newBlock ) ;^435^^^^^420^450^grandParent.replaceChild ( parent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^grandParent.replaceChild ( parent ) ;^435^^^^^420^450^grandParent.replaceChild ( parent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^grandParent.replaceChild ( newBlock, parent ) ;^435^^^^^420^450^grandParent.replaceChild ( parent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^grandParent.replaceChild ( injectionPointParent, newBlock ) ;^435^^^^^420^450^grandParent.replaceChild ( parent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^435^436^^^^420^450^grandParent.replaceChild ( parent, newBlock ) ; break;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^callParentNode.replaceChild ( callNode, newExpression ) ;grandParent.replaceChild ( parent, newBlock ) ;^435^^^^^420^450^grandParent.replaceChild ( parent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^greatGrandParent.replaceChild ( grandParent, newBlock ) ;grandParent.replaceChild ( parent, newBlock ) ;^435^^^^^420^450^grandParent.replaceChild ( parent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node injectionPoint = ExpressionDecomposer.findInjectionPoint ( newExpression ) ;^443^^^^^428^458^Node injectionPoint = ExpressionDecomposer.findInjectionPoint ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^Node injectionPoint = ExpressionDecomposer.findInjectionPoint ( newBlock ) ;^443^^^^^428^458^Node injectionPoint = ExpressionDecomposer.findInjectionPoint ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^443^^^^^428^458^Node injectionPoint = ExpressionDecomposer.findInjectionPoint ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Preconditions.checkNotNull ( newExpression ) ;^444^^^^^429^459^Preconditions.checkNotNull ( injectionPoint ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^Preconditions.checkNotNull ( newBlock ) ;^444^^^^^429^459^Preconditions.checkNotNull ( injectionPoint ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^444^445^^^^429^459^Preconditions.checkNotNull ( injectionPoint ) ; Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;Preconditions.checkNotNull ( injectionPoint ) ;^444^^^^^429^459^Preconditions.checkNotNull ( injectionPoint ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Preconditions.checkNotNull ( injectionPoint ) ;^444^^^^^429^459^Preconditions.checkNotNull ( injectionPoint ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;Preconditions.checkNotNull ( injectionPoint ) ;^444^^^^^429^459^Preconditions.checkNotNull ( injectionPoint ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( compiler ) ;Preconditions.checkNotNull ( injectionPoint ) ;^444^^^^^429^459^Preconditions.checkNotNull ( injectionPoint ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( safeNameIdSupplier ) ;Preconditions.checkNotNull ( injectionPoint ) ;^444^^^^^429^459^Preconditions.checkNotNull ( injectionPoint ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( cArg ) ;Preconditions.checkNotNull ( injectionPoint ) ;^444^^^^^429^459^Preconditions.checkNotNull ( injectionPoint ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Node newBlockParent = injectionPoint.getParent (  ) ;^445^^^^^430^460^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^Node inlineResultParent = injectionPoint.getParent (  ) ;^445^^^^^430^460^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^445^446^^^^430^460^Node injectionPointParent = injectionPoint.getParent (  ) ; Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^445^^^^^430^460^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^NodeUtil.isStatementBlock ( injectionPointParent )  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^445^^^^^430^460^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Preconditions.checkNotNull ( newExpression ) ;^446^^^^^431^461^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^446^^^^^431^461^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^Preconditions.checkNotNull ( returnNode ) ;^446^^^^^431^461^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^446^^^^^431^461^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^446^^^^^431^461^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^446^^^^^431^461^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^NodeUtil.isStatementBlock ( injectionPointParent )  ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^446^^^^^431^461^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^446^^^^^431^461^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node injectionPointParent = injectionPoint.getParent (  ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^446^^^^^431^461^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^446^^^^^431^461^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( compiler ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^446^^^^^431^461^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( safeNameIdSupplier ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^446^^^^^431^461^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( cArg ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^446^^^^^431^461^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPoint ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^446^^^^^431^461^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isStatementBlock ( thisValue )  ) ;^447^448^^^^432^462^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil.isExprCall ( injectionPointParent )  ) ;^447^448^^^^432^462^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isStatementBlock ( returnNode )  ) ;^447^448^^^^432^462^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^447^448^^^^432^462^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^447^448^^^^432^462^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^447^448^^^^432^462^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( compiler.isNormalized (  )  ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^447^448^^^^432^462^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^447^448^^^^432^462^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^NodeUtil.isStatementBlock ( injectionPointParent )  ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^447^448^^^^432^462^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^447^448^^^^432^462^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^447^448^^^^432^462^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPoint ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^447^448^^^^432^462^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^NodeUtil.isStatementBlock ( inlineResult )  ) ;^448^^^^^433^463^NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^NodeUtil.isExprCall ( injectionPointParent )  ) ;^448^^^^^433^463^NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^NodeUtil .isNameReferenced ( safeReturnNode , fnName )   ) ;^448^^^^^433^463^NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^448^^^^^433^463^NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^448^^^^^433^463^NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^448^^^^^433^463^NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^Node injectionPointParent = injectionPoint.getParent (  ) ;NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^448^^^^^433^463^NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^newBlock.addChildrenToFront ( NodeUtil.newVarNode ( fnName, null )  ) ;^451^^^^^436^466^newBlock.addChildrenToFront ( NodeUtil.newVarNode ( resultName, null )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^newBlock.addChildrenToFront ( NodeUtil.newVarNode (  null )  ) ;^451^^^^^436^466^newBlock.addChildrenToFront ( NodeUtil.newVarNode ( resultName, null )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^newBlock.addChildrenToFront ( NodeUtil.isNameReferenced ( resultName, null )  ) ;^451^^^^^436^466^newBlock.addChildrenToFront ( NodeUtil.newVarNode ( resultName, null )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^newBlock.addChildrenToFront ( NodeUtil .newUndefinedNode (  )   ) ;^451^^^^^436^466^newBlock.addChildrenToFront ( NodeUtil.newVarNode ( resultName, null )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^451^^^^^436^466^newBlock.addChildrenToFront ( NodeUtil.newVarNode ( resultName, null )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^injectionPointParent.addChildBefore ( inlineResult, injectionPoint ) ;^454^^^^^439^469^injectionPointParent.addChildBefore ( newBlock, injectionPoint ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^injectionPointParent.addChildBefore ( newBlock, thisValue ) ;^454^^^^^439^469^injectionPointParent.addChildBefore ( newBlock, injectionPoint ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^injectionPointParent.addChildBefore (  injectionPoint ) ;^454^^^^^439^469^injectionPointParent.addChildBefore ( newBlock, injectionPoint ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^injectionPointParent.addChildBefore ( newBlock ) ;^454^^^^^439^469^injectionPointParent.addChildBefore ( newBlock, injectionPoint ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^injectionPointParent.addChildBefore ( thisValue, injectionPoint ) ;^454^^^^^439^469^injectionPointParent.addChildBefore ( newBlock, injectionPoint ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P11_Insert_Donor_Statement]^greatGrandParent.addChildAfter ( newBlock, grandParent ) ;injectionPointParent.addChildBefore ( newBlock, injectionPoint ) ;^454^^^^^439^469^injectionPointParent.addChildBefore ( newBlock, injectionPoint ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^parent.replaceChild ( newBlock, Node.newString ( Token.NAME, resultName )  ) ;^457^^^^^442^472^parent.replaceChild ( callNode, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^parent.replaceChild ( callNode, Node.newString ( Token.NAME, fnName )  ) ;^457^^^^^442^472^parent.replaceChild ( callNode, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^parent.replaceChild (  Node.newString ( Token.NAME, resultName )  ) ;^457^^^^^442^472^parent.replaceChild ( callNode, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^parent.replaceChild ( callNode, Node.newString ( Token.NAME )  ) ;^457^^^^^442^472^parent.replaceChild ( callNode, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^parent.replaceChild ( resultName, Node.newString ( Token.NAME, callNode )  ) ;^457^^^^^442^472^parent.replaceChild ( callNode, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^parent.replaceChild ( callNode, Node.replaceChild ( Token.NAME, resultName )  ) ;^457^^^^^442^472^parent.replaceChild ( callNode, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^parent.replaceChild ( inlineResult, Node.newString ( Token.NAME, resultName )  ) ;^457^^^^^442^472^parent.replaceChild ( callNode, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P14_Delete_Statement]^^457^458^^^^442^472^parent.replaceChild ( callNode, Node.newString ( Token.NAME, resultName )  ) ; break;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P7_Replace_Invocation]^parent.replaceChild ( callNode, Node .getString (  )   ) ;^457^^^^^442^472^parent.replaceChild ( callNode, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^parent.replaceChild ( callNode, Node.replaceChild ( Token.NAME, fnName )  ) ;^457^^^^^442^472^parent.replaceChild ( callNode, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^return newExpression;^464^^^^^449^479^return newBlock;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P8_Replace_Mix]^return inlineResult;^464^^^^^449^479^return newBlock;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[P5_Replace_Variable]^if  ( NodeUtil.isLoopStructure ( inlineResult )  )  {^473^^^^^471^482^if  ( NodeUtil.isLoopStructure ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil.isConstantName ( parent )  )  {^473^^^^^471^482^if  ( NodeUtil.isLoopStructure ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.isConstantName ( inlineResult )  )  {^473^^^^^471^482^if  ( NodeUtil.isLoopStructure ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P9_Replace_Statement]^if  ( NodeUtil.isExprCall ( parent )  )  {^473^^^^^471^482^if  ( NodeUtil.isLoopStructure ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( parent )  )  {^473^^^^^471^482^if  ( NodeUtil.isLoopStructure ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return true;^473^474^475^^^471^482^if  ( NodeUtil.isLoopStructure ( parent )  )  { return true; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^473^474^475^^^471^482^if  ( NodeUtil.isLoopStructure ( parent )  )  { return true; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunction ( parent )  )  {     break; }^473^^^^^471^482^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isNameReferenced ( block, fnName )  )  {     return false; }^473^^^^^471^482^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( containsFunctionDeclaration ( block )  )  {     return false; }^473^^^^^471^482^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isNameReferenced ( block, "arguments" )  )  {     return false; }^473^^^^^471^482^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunctionObjectApply ( callNode )  )  {     return false; }^473^^^^^471^482^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^return false;^474^^^^^471^482^return true;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.isFunction ( newExpression )  )  {^477^^^^^471^482^if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil.getFunctionBody ( parent )  )  {^477^^^^^471^482^if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil .getFunctionBody ( expressionRoot )   )  {^477^^^^^471^482^if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P9_Replace_Statement]^if  ( NodeUtil.isLoopStructure ( parent )  )  {^477^^^^^471^482^if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P9_Replace_Statement]^if  ( NodeUtil.isExprCall ( parent )  )  {^477^^^^^471^482^if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P9_Replace_Statement]^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^477^^^^^471^482^if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^break;^477^478^479^^^471^482^if  ( NodeUtil.isFunction ( parent )  )  { break; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^477^478^479^^^471^482^if  ( NodeUtil.isFunction ( parent )  )  { break; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isNameReferenced ( block, fnName )  )  {     return false; }^477^^^^^471^482^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( containsFunctionDeclaration ( block )  )  {     return false; }^477^^^^^471^482^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isNameReferenced ( block, "arguments" )  )  {     return false; }^477^^^^^471^482^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isLoopStructure ( parent )  )  {     return true; }^477^^^^^471^482^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunctionObjectApply ( callNode )  )  {     return false; }^477^^^^^471^482^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^for  ( Node parent : parent.getAncestors (  )  )  {^472^^^^^471^482^for  ( Node parent : callNode.getAncestors (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^for  ( Node parent : callNode.newString (  )  )  {^472^^^^^471^482^for  ( Node parent : callNode.getAncestors (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^for  ( Node parent : callNode .getNext (  )   )  {^472^^^^^471^482^for  ( Node parent : callNode.getAncestors (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^472^473^474^475^^471^482^for  ( Node parent : callNode.getAncestors (  )  )  { if  ( NodeUtil.isLoopStructure ( parent )  )  { return true; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.isLoopStructure ( newExpression )  )  {^473^^^^^471^482^if  ( NodeUtil.isLoopStructure ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil .isConstantName (  )   )  {^473^^^^^471^482^if  ( NodeUtil.isLoopStructure ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.isLoopStructure ( newBlock )  )  {^473^^^^^471^482^if  ( NodeUtil.isLoopStructure ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isLoopStructure ( parent )  )  {     return true; }^473^^^^^471^482^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.isFunction ( injectionPointParent )  )  {^477^^^^^471^482^if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunction ( parent )  )  {     break; }^477^^^^^471^482^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^return true;^481^^^^^471^482^return false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isCallWithinLoop [RETURN_TYPE] boolean   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node block = NodeUtil.getFunctionBody ( returnNode ) ;^491^^^^^489^507^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node block = NodeUtil.isFunction ( fnNode ) ;^491^^^^^489^507^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node block = NodeUtil.getFunctionBody ( newExpression ) ;^491^^^^^489^507^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node argsNode = NodeUtil.getFnParameters ( fnNode ) ;Node block = NodeUtil.getFunctionBody ( fnNode ) ;^491^^^^^489^507^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node block = fnNode.getLastChild (  ) ;Node block = NodeUtil.getFunctionBody ( fnNode ) ;^491^^^^^489^507^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node block = NodeUtil.getFunctionBody ( newBlock ) ;^491^^^^^489^507^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node block = NodeUtil .isFunction ( newExpression )  ;^491^^^^^489^507^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^491^^^^^489^507^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( block.getFirstChild (  ) .getType (  )  == RETURN )  {^495^^^^^489^507^if  ( !block.hasChildren (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( block.getFirstChild (  ) .getFirstChild (  )  != null )  {^495^^^^^489^507^if  ( !block.hasChildren (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( !block.newString (  )  )  {^495^^^^^489^507^if  ( !block.hasChildren (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( inlineResult.hasOneChild (  )  )  {^498^^^^^489^507^} else if  ( block.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( block.getFirstChild (  ) .getType (  )  == RETURN )  {^498^^^^^489^507^} else if  ( block.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else if  ( block.getFirstChild (  ) .getFirstChild (  )  != null )  {^498^^^^^489^507^} else if  ( block.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^} else {^498^^^^^489^507^} else if  ( block.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( block.newString (  )  )  {^498^^^^^489^507^} else if  ( block.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^} else if  ( block .removeChild (  )   )  {^498^^^^^489^507^} else if  ( block.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^}  if  ( inlineResult.hasOneChild (  )  )  {^498^^^^^489^507^} else if  ( block.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^if (((block.getFirstChild().getType()) == (com.google.javascript.rhino.Token.RETURN)) && ((block.getFirstChild().getFirstChild()) != null)) {    return true;};^498^499^500^501^502^489^507^} else if  ( block.hasOneChild (  )  )  {  if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  { return true; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^498^499^500^501^502^489^507^} else if  ( block.hasOneChild (  )  )  {  if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  { return true; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN || block.getFirstChild (  ) .getFirstChild (  )  != null )  {^500^501^^^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( block.getFirstChild (  ) .getType (  )  != Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^500^501^^^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  == null )  {^500^501^^^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( newExpression.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^500^501^^^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN ) {^500^501^^^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  (  block.getFirstChild (  ) .getFirstChild (  )  != null )  {^500^501^^^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( block.getFirstChild (  ) .getType (  )  == RETURN )  {^500^501^^^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( block.newString (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^500^501^^^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( block .getLastChild (  )  .getType (  )  == Token.RETURN && block^500^501^^^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  (  block.getFirstChild (  ) .getFirstChild (  )  != true )  {^500^501^^^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return true;^500^501^502^503^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  { return true; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^500^501^502^503^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  { return true; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( block.hasOneChild (  )  )  {     if  (  (  ( block.getFirstChild (  ) .getType (  )  )  ==  ( RETURN )  )  &&  (  ( block.getFirstChild (  ) .getFirstChild (  )  )  != null )  )  {         return true;     } }^500^^^^^489^507^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( block.hasChildren (  )  )  )  {     return true; }else     if  ( block.hasOneChild (  )  )  {         if  (  (  ( block.getFirstChild (  ) .getType (  )  )  ==  ( RETURN )  )  &&  (  ( block.getFirstChild (  ) .getFirstChild (  )  )  != null )  )  {             return true;         }     }^500^^^^^489^507^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^return false;^502^^^^^489^507^return true;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( safeReturnNode.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^500^501^^^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( block.getFirstChild (  )  .getString (  )   == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^500^501^^^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( newBlock.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^500^501^^^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( inlineResult.newString (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^500^501^^^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& newExpression.getFirstChild (  ) .getFirstChild (  )  != null )  {^501^^^^^489^507^&& block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& block.newString (  ) .getFirstChild (  )  != null )  {^501^^^^^489^507^&& block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& returnNode.getFirstChild (  ) .getFirstChild (  )  != null )  {^501^^^^^489^507^&& block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^501^502^^^^489^507^&& block.getFirstChild (  ) .getFirstChild (  )  != null )  { return true;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& thisValue.getFirstChild (  ) .getFirstChild (  )  != null )  {^501^^^^^489^507^&& block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& block .getLastChild (  )^501^^^^^489^507^&& block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& inlineResult.getFirstChild (  ) .getFirstChild (  )  != null )  {^501^^^^^489^507^&& block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( thisValue.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^500^501^^^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != false )  {^500^501^^^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( inlineResult.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^500^501^^^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& parent.getFirstChild (  ) .getFirstChild (  )  != null )  {^501^^^^^489^507^&& block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& inlineResult.newString (  ) .getFirstChild (  )  != null )  {^501^^^^^489^507^&& block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& newBlock.getFirstChild (  ) .getFirstChild (  )  != null )  {^501^^^^^489^507^&& block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^return false;^497^^^^^489^507^return true;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^} else if  ( newBlock.hasOneChild (  )  )  {^498^^^^^489^507^} else if  ( block.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != true )  {^500^501^^^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( newBlock.newString (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^500^501^^^^489^507^if  ( block.getFirstChild (  ) .getType (  )  == Token.RETURN && block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& parent.newString (  ) .getFirstChild (  )  != null )  {^501^^^^^489^507^&& block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^} else if  ( thisValue.newString (  )  )  {^498^^^^^489^507^} else if  ( block.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& thisValue.newString (  ) .getFirstChild (  )  != null )  {^501^^^^^489^507^&& block.getFirstChild (  ) .getFirstChild (  )  != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^return true;^506^^^^^489^507^return false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] isDirectCallNodeReplacementPossible [RETURN_TYPE] boolean   Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^CallSiteType callSiteType = classifyCallSite ( safeReturnNode ) ;^528^^^^^526^548^CallSiteType callSiteType = classifyCallSite ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^CallSiteType callSiteType = isSupportedCallType ( callNode ) ;^528^^^^^526^548^CallSiteType callSiteType = classifyCallSite ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^CallSiteType callSiteType = classifyCallSite ( thisValue ) ;^528^^^^^526^548^CallSiteType callSiteType = classifyCallSite ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^CallSiteType callSiteType = classifyCallSite ( inlineResult ) ;^528^^^^^526^548^CallSiteType callSiteType = classifyCallSite ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^528^529^530^531^^526^548^CallSiteType callSiteType = classifyCallSite ( callNode ) ; if  ( callSiteType == CallSiteType.UNSUPPORTED )  { return CanInlineResult.NO; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( callSiteType >= CallSiteType.UNSUPPORTED )  {^529^^^^^526^548^if  ( callSiteType == CallSiteType.UNSUPPORTED )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( VAR_DECL_SIMPLE_ASSIGNMENT == CallSiteType.UNSUPPORTED )  {^529^^^^^526^548^if  ( callSiteType == CallSiteType.UNSUPPORTED )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( callSiteType == CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT )  {^529^^^^^526^548^if  ( callSiteType == CallSiteType.UNSUPPORTED )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( callSiteType == CallSiteType.SIMPLE_CALL )  {^529^^^^^526^548^if  ( callSiteType == CallSiteType.UNSUPPORTED )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P9_Replace_Statement]^if  ( callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )   {^529^^^^^526^548^if  ( callSiteType == CallSiteType.UNSUPPORTED )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;^529^530^531^^^526^548^if  ( callSiteType == CallSiteType.UNSUPPORTED )  { return CanInlineResult.NO; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^529^530^531^^^526^548^if  ( callSiteType == CallSiteType.UNSUPPORTED )  { return CanInlineResult.NO; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( numArgs > 0 )  {     callCost +=  ( numArgs *  ( NAME_COST_ESTIMATE )  )  +  (  ( numArgs - 1 )  *  ( COMMA_COST )  ) ; }^529^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  )  {     return NO; }^529^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( callSiteType ==  ( DECOMPOSABLE_EXPRESSION )  )  {     return AFTER_DECOMPOSITION; }else {     return YES; }^529^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  (  ( mayEffectMutableState ( cArg )  )  &&  (  ( getNameReferenceCount ( block, fnParam.getString (  )  )  )  > 1 )  )  {     return NO; }^529^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  (  ( ! ( allowDecomposition )  )  &&  ( callSiteType ==  ( DECOMPOSABLE_EXPRESSION )  )  )  {     return NO; }^529^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  (  ( ref.mode )  ==  ( BLOCK )  )  {     referencesUsingBlockInlining++; }^529^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( cArg != null )  {     if  ( mayHaveSideEffects ( cArg )  )  {         return NO;     }     cArg = cArg.getNext (  ) ; }^529^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isDirectCallNodeReplacementPossible ( fnNode )  )  )  {     return NO; }^529^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isSupportedCallType ( callNode )  )  )  {     return NO; }^529^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( mayHaveSideEffects ( cArg )  )  {     return NO; }^529^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( referencesThis &&  ( ! ( isFunctionObjectCall ( callNode )  )  )  )  {     return NO; }^529^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isDirectCallNodeReplacementPossible ( fnNode )  )  )  {     return NO; }^530^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isSupportedCallType ( callNode )  )  )  {     return NO; }^530^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( !allowDecomposition || callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )  {^533^534^^^^526^548^if  ( !allowDecomposition && callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( !allowDecomposition && callSiteType != CallSiteType.DECOMPOSABLE_EXPRESSION )  {^533^534^^^^526^548^if  ( !allowDecomposition && callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( !allowDecomposition && VAR_DECL_SIMPLE_ASSIGNMENT == CallSiteType.DECOMPOSABLE_EXPRESSION )  {^533^534^^^^526^548^if  ( !allowDecomposition && callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( !referencesThis && callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )  {^533^534^^^^526^548^if  ( !allowDecomposition && callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( !allowDecomposition && callSiteType == CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT )  {^533^534^^^^526^548^if  ( !allowDecomposition && callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( !allowDecomposition ) {^533^534^^^^526^548^if  ( !allowDecomposition && callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  (  callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )  {^533^534^^^^526^548^if  ( !allowDecomposition && callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( callSiteType == DECOMPOSABLE_EXPRESSION )  {^533^534^^^^526^548^if  ( !allowDecomposition && callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;^533^534^535^536^^526^548^if  ( !allowDecomposition && callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )  { return CanInlineResult.NO; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^533^534^535^536^^526^548^if  ( !allowDecomposition && callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )  { return CanInlineResult.NO; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( !callMeetsBlockInliningRequirements ( t, thisValue, fnNode, namesToAlias )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( !callMeetsBlockInliningRequirements ( t, callNode, thisValue, namesToAlias )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( !callMeetsBlockInliningRequirements (  callNode, fnNode, namesToAlias )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( !callMeetsBlockInliningRequirements ( t,  fnNode, namesToAlias )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( !callMeetsBlockInliningRequirements ( t, callNode,  namesToAlias )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( !callMeetsBlockInliningRequirements ( t, fnNode, callNode, namesToAlias )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( !callMeetsBlockInliningRequirements ( namesToAlias, callNode, fnNode, t )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( !canInlineReferenceAsStatementBlock ( t, callNode, fnNode, namesToAlias )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( !callMeetsBlockInliningRequirements ( t, callNode, parent, namesToAlias )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;^538^539^540^541^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  { return CanInlineResult.NO; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^538^539^540^541^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  { return CanInlineResult.NO; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  (  ( ! ( allowDecomposition )  )  &&  ( callSiteType ==  ( DECOMPOSABLE_EXPRESSION )  )  )  {     return NO; }^538^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( callSiteType ==  ( UNSUPPORTED )  )  {     return NO; }^538^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isDirectCallNodeReplacementPossible ( fnNode )  )  )  {     return NO; }^538^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isSupportedCallType ( callNode )  )  )  {     return NO; }^538^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( mayHaveSideEffects ( cArg )  )  {     return NO; }^538^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( referencesThis &&  ( ! ( isFunctionObjectCall ( callNode )  )  )  )  {     return NO; }^538^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( !callMeetsBlockInliningRequirements ( t, parent, fnNode, namesToAlias )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( !callMeetsBlockInliningRequirements ( t, callNode, newExpression, namesToAlias )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( !callMeetsBlockInliningRequirements ( callNode, t, fnNode, namesToAlias )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( !callMeetsBlockInliningRequirements ( t, callNode, namesToAlias, fnNode )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( callSiteType < CallSiteType.DECOMPOSABLE_EXPRESSION )   {^543^^^^^526^548^if  ( callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )   {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( UNSUPPORTED == CallSiteType.DECOMPOSABLE_EXPRESSION )   {^543^^^^^526^548^if  ( callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )   {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( callSiteType == CallSiteType.UNSUPPORTED )   {^543^^^^^526^548^if  ( callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )   {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( VAR_DECL_SIMPLE_ASSIGNMENT == CallSiteType.DECOMPOSABLE_EXPRESSION )   {^543^^^^^526^548^if  ( callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )   {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P9_Replace_Statement]^if  ( !allowDecomposition && callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )  {^543^^^^^526^548^if  ( callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )   {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.AFTER_DECOMPOSITION;^543^544^545^546^547^526^548^if  ( callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )   { return CanInlineResult.AFTER_DECOMPOSITION; } else { return CanInlineResult.YES; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^543^544^545^546^547^526^548^if  ( callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION )   { return CanInlineResult.AFTER_DECOMPOSITION; } else { return CanInlineResult.YES; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  (  ( mayEffectMutableState ( cArg )  )  &&  (  ( getNameReferenceCount ( block, fnParam.getString (  )  )  )  > 1 )  )  {     return NO; }^543^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  (  ( ! ( allowDecomposition )  )  &&  ( callSiteType ==  ( DECOMPOSABLE_EXPRESSION )  )  )  {     return NO; }^543^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( callSiteType ==  ( UNSUPPORTED )  )  {     return NO; }^543^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( cArg != null )  {     if  (  ( mayEffectMutableState ( cArg )  )  &&  (  ( getNameReferenceCount ( block, fnParam.getString (  )  )  )  > 1 )  )  {         return NO;     } }^543^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( type ==  ( DECOMPOSABLE )  )  {     return DECOMPOSABLE_EXPRESSION; }else {     checkState (  ( type ==  ( UNDECOMPOSABLE )  )  ) ; }^543^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isDirectCallNodeReplacementPossible ( fnNode )  )  )  {     return NO; }^546^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isSupportedCallType ( callNode )  )  )  {     return NO; }^546^^^^^526^548^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^boolean fnContainsVars = NodeUtil.isNodeTypeReferenced ( NodeUtil.getFunctionBody ( injectionPointParent ) , Token.VAR ) ;^567^568^^^^552^582^boolean fnContainsVars = NodeUtil.isNodeTypeReferenced ( NodeUtil.getFunctionBody ( fnNode ) , Token.VAR ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^boolean fnContainsVars = NodeUtil.getNodeTypeReferenceCount ( NodeUtil.getFunctionBody ( fnNode ) , Token.VAR ) ;^567^568^^^^552^582^boolean fnContainsVars = NodeUtil.isNodeTypeReferenced ( NodeUtil.getFunctionBody ( fnNode ) , Token.VAR ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^boolean fnContainsVars = NodeUtil.isNodeTypeReferenced ( NodeUtil.isFunction ( fnNode ) , Token.VAR ) ;^567^568^^^^552^582^boolean fnContainsVars = NodeUtil.isNodeTypeReferenced ( NodeUtil.getFunctionBody ( fnNode ) , Token.VAR ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^boolean fnContainsVars = NodeUtil.isNodeTypeReferenced ( NodeUtil.getFunctionBody ( inlineResult ) , Token.VAR ) ;^567^568^^^^552^582^boolean fnContainsVars = NodeUtil.isNodeTypeReferenced ( NodeUtil.getFunctionBody ( fnNode ) , Token.VAR ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^boolean fnContainsVars = NodeUtil.isNodeTypeReferenced ( NodeUtil .isFunction ( fnCallerBody )  , Token.VAR ) ;^567^568^^^^552^582^boolean fnContainsVars = NodeUtil.isNodeTypeReferenced ( NodeUtil.getFunctionBody ( fnNode ) , Token.VAR ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^boolean fnContainsVars = NodeUtil.isNodeTypeReferenced ( NodeUtil.isFunction ( returnNode ) , Token.VAR ) ;^567^568^^^^552^582^boolean fnContainsVars = NodeUtil.isNodeTypeReferenced ( NodeUtil.getFunctionBody ( fnNode ) , Token.VAR ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^567^568^^^^552^582^boolean fnContainsVars = NodeUtil.isNodeTypeReferenced ( NodeUtil.getFunctionBody ( fnNode ) , Token.VAR ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^NodeUtil.getFunctionBody ( newExpression ) , Token.VAR ) ;^568^^^^^553^583^NodeUtil.getFunctionBody ( fnNode ) , Token.VAR ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^NodeUtil.isFunction ( fnNode ) , Token.VAR ) ;^568^^^^^553^583^NodeUtil.getFunctionBody ( fnNode ) , Token.VAR ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^NodeUtil .isFunction ( block )  , Token.VAR ) ;^568^^^^^553^583^NodeUtil.getFunctionBody ( fnNode ) , Token.VAR ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^NodeUtil .isFunction ( grandParent )  , Token.VAR ) ;^568^^^^^553^583^NodeUtil.getFunctionBody ( fnNode ) , Token.VAR ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^568^^^^^553^583^NodeUtil.getFunctionBody ( fnNode ) , Token.VAR ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^boolean callerContainsFunction = true;^569^^^^^554^584^boolean callerContainsFunction = false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P12_Insert_Condition]^if  ( callerContainsFunction )  { boolean callerContainsFunction = false; }^569^^^^^554^584^boolean callerContainsFunction = false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( !t .getScopeRoot (  )   )  {^570^^^^^555^585^if  ( !t.inGlobalScope (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^callerContainsFunction = NodeUtil.containsFunctionDeclaration ( thisValue ) ;^574^575^^^^559^589^callerContainsFunction = NodeUtil.containsFunctionDeclaration ( fnCallerBody ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^callerContainsFunction = NodeUtil.isFunctionObjectCall ( fnCallerBody ) ;^574^575^^^^559^589^callerContainsFunction = NodeUtil.containsFunctionDeclaration ( fnCallerBody ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^callerContainsFunction =  NodeUtil.containsFunctionDeclaration ( returnNode ) ;^574^575^^^^559^589^callerContainsFunction = NodeUtil.containsFunctionDeclaration ( fnCallerBody ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node fnCaller = t .inGlobalScope (  )  ;^571^^^^^556^586^Node fnCaller = t.getScopeRoot (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node grandParent = parent.getParent (  ) ;Node fnCaller = t.getScopeRoot (  ) ;^571^^^^^556^586^Node fnCaller = t.getScopeRoot (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node fnCallerBody = fnCaller.getLastChild (  ) ;Node fnCaller = t.getScopeRoot (  ) ;^571^^^^^556^586^Node fnCaller = t.getScopeRoot (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node inlineResultBody = fnCaller.getLastChild (  ) ;^572^^^^^557^587^Node fnCallerBody = fnCaller.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node fnCallerBody = fnCaller.newString (  ) ;^572^^^^^557^587^Node fnCallerBody = fnCaller.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node thisValueBody = fnCaller.getLastChild (  ) ;^572^^^^^557^587^Node fnCallerBody = fnCaller.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node fnCaller = t.getScopeRoot (  ) ;Node fnCallerBody = fnCaller.getLastChild (  ) ;^572^^^^^557^587^Node fnCallerBody = fnCaller.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node block = fnNode.getLastChild (  ) ;Node fnCallerBody = fnCaller.getLastChild (  ) ;^572^^^^^557^587^Node fnCallerBody = fnCaller.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node returnNode = block.getFirstChild (  ) ;Node fnCallerBody = fnCaller.getLastChild (  ) ;^572^^^^^557^587^Node fnCallerBody = fnCaller.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node callParentNode = callNode.getParent (  ) ;Node fnCallerBody = fnCaller.getLastChild (  ) ;^572^^^^^557^587^Node fnCallerBody = fnCaller.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^571^572^^^^556^586^Node fnCaller = t.getScopeRoot (  ) ; Node fnCallerBody = fnCaller.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node injectionPointParentBody = fnCaller.getLastChild (  ) ;^572^^^^^557^587^Node fnCallerBody = fnCaller.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node returnNodeBody = fnCaller.getLastChild (  ) ;^572^^^^^557^587^Node fnCallerBody = fnCaller.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^572^^^^^557^587^Node fnCallerBody = fnCaller.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^callerContainsFunction = NodeUtil.containsFunctionDeclaration ( newBlock ) ;^574^575^^^^559^589^callerContainsFunction = NodeUtil.containsFunctionDeclaration ( fnCallerBody ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^callerContainsFunction = NodeUtil .isFunctionObjectCall ( grandParent )  ;^574^575^^^^559^589^callerContainsFunction = NodeUtil.containsFunctionDeclaration ( fnCallerBody ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^callerContainsFunction = NodeUtil.containsFunctionDeclaration ( injectionPointParent ) ;^574^575^^^^559^589^callerContainsFunction = NodeUtil.containsFunctionDeclaration ( fnCallerBody ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^574^575^^^^559^589^callerContainsFunction = NodeUtil.containsFunctionDeclaration ( fnCallerBody ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^callerContainsFunction = NodeUtil.containsFunctionDeclaration ( inlineResult ) ;^574^575^^^^559^589^callerContainsFunction = NodeUtil.containsFunctionDeclaration ( fnCallerBody ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node newBlockBody = fnCaller.getLastChild (  ) ;^572^^^^^557^587^Node fnCallerBody = fnCaller.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^571^^^^^556^586^Node fnCaller = t.getScopeRoot (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node fnCallerBody = fnCaller .getFirstChild (  )  ;^572^^^^^557^587^Node fnCallerBody = fnCaller.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node returnNodeBody = fnCaller .getFirstChild (  )  ;^572^^^^^557^587^Node fnCallerBody = fnCaller.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^callerContainsFunction = NodeUtil.containsFunctionDeclaration ( safeReturnNode ) ;^574^575^^^^559^589^callerContainsFunction = NodeUtil.containsFunctionDeclaration ( fnCallerBody ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^callerContainsFunction = NodeUtil .isFunctionObjectCall ( injectionPointParent )  ;^574^575^^^^559^589^callerContainsFunction = NodeUtil.containsFunctionDeclaration ( fnCallerBody ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( fnContainsVars || callerContainsFunction )  {^578^^^^^563^593^if  ( fnContainsVars && callerContainsFunction )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( referencesThis && callerContainsFunction )  {^578^^^^^563^593^if  ( fnContainsVars && callerContainsFunction )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( fnContainsVars && needsDefaultReturnResult )  {^578^^^^^563^593^if  ( fnContainsVars && callerContainsFunction )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( callerContainsFunction && fnContainsVars )  {^578^^^^^563^593^if  ( fnContainsVars && callerContainsFunction )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( fnContainsVars ) {^578^^^^^563^593^if  ( fnContainsVars && callerContainsFunction )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  (  callerContainsFunction )  {^578^^^^^563^593^if  ( fnContainsVars && callerContainsFunction )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( fnContainsVars && referencesThis )  {^578^^^^^563^593^if  ( fnContainsVars && callerContainsFunction )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return false;^578^579^580^^^563^593^if  ( fnContainsVars && callerContainsFunction )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^578^579^580^^^563^593^if  ( fnContainsVars && callerContainsFunction )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  (  ( blockInlines > 0 )  &&  ( costDeltaBlock > 0 )  )  {     return false; }^578^^^^^563^593^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^return true;^579^^^^^564^594^return false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( referencesThis )  {^584^^^^^569^599^if  ( callerContainsFunction )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( isCallInLoop )  {^589^^^^^574^604^if  ( hasArgs )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P9_Replace_Statement]^if  ( numArgs > 0 )  {^589^^^^^574^604^if  ( hasArgs )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( allNamesToAlias.isEmpty (  )  )  {^594^^^^^579^609^if  ( !allNamesToAlias.isEmpty (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return false;^594^595^596^^^579^609^if  ( !allNamesToAlias.isEmpty (  )  )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^594^595^596^^^579^609^if  ( !allNamesToAlias.isEmpty (  )  )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^return true;^595^^^^^580^610^return false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^591^^^^^576^606^Set<String> allNamesToAlias = Sets.newHashSet ( namesToAlias ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newBlock, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, 2, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments (  args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode,  allNamesToAlias, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args,  compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( allNamesToAlias, args, fnNode, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( args, fnNode, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, allNamesToAlias, args, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, compiler, allNamesToAlias.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^FunctionArgumentInjector.inject ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^FunctionArgumentInjector .getFunctionCallParameterMap ( parent , grandParent , null )  ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getModuleGraph (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^FunctionArgumentInjector.inject ( inlineResult, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^fnNode, args, allNamesToAlias, compiler.getModuleGraph (  )  ) ;^593^^^^^578^608^fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^593^^^^^578^608^fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^593^^^^^578^608^fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( injectionPointParent, callNode, this.safeNameIdSupplier ) ;^585^586^587^^^570^600^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, inlineResult, this.safeNameIdSupplier ) ;^585^586^587^^^570^600^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap (  callNode, this.safeNameIdSupplier ) ;^585^586^587^^^570^600^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode,  this.safeNameIdSupplier ) ;^585^586^587^^^570^600^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode ) ;^585^586^587^^^570^600^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( callNode, fnNode, this.safeNameIdSupplier ) ;^585^586^587^^^570^600^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( this.safeNameIdSupplier, callNode, fnNode ) ;^585^586^587^^^570^600^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( inlineResult, callNode, this.safeNameIdSupplier ) ;^585^586^587^^^570^600^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( newExpression, callNode, this.safeNameIdSupplier ) ;^586^587^^^^571^601^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, newBlock, this.safeNameIdSupplier ) ;^586^587^^^^571^601^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap (  callNode, this.safeNameIdSupplier ) ;^586^587^^^^571^601^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode,  this.safeNameIdSupplier ) ;^586^587^^^^571^601^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode ) ;^586^587^^^^571^601^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( callNode, fnNode, this.safeNameIdSupplier ) ;^586^587^^^^571^601^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, this.safeNameIdSupplier, callNode ) ;^586^587^^^^571^601^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( this.safeNameIdSupplier, callNode, fnNode ) ;^586^587^^^^571^601^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^FunctionArgumentInjector.getFunctionCallParameterMap ( injectionPointParent, callNode, this.safeNameIdSupplier ) ;^586^587^^^^571^601^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^586^587^^^^571^601^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^588^^^^^573^603^boolean hasArgs = !args.isEmpty (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, 1, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, compiler, allNamesToAlias, args.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( compiler, args, allNamesToAlias, fnNode.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, 0, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( referencesThis )  {^589^^^^^574^604^if  ( hasArgs )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Set<String> allNamesToAlias = Sets.newHashSet ( 2 ) ;^591^^^^^576^606^Set<String> allNamesToAlias = Sets.newHashSet ( namesToAlias ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( returnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( parent, callNode, this.safeNameIdSupplier ) ;^585^586^587^^^570^600^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, newExpression, this.safeNameIdSupplier ) ;^585^586^587^^^570^600^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, this.safeNameIdSupplier, callNode ) ;^585^586^587^^^570^600^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, safeReturnNode, this.safeNameIdSupplier ) ;^585^586^587^^^570^600^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Set<String> allNamesToAlias = Sets.newHashSet ( 0 ) ;^591^^^^^576^606^Set<String> allNamesToAlias = Sets.newHashSet ( namesToAlias ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( newBlock, callNode, this.safeNameIdSupplier ) ;^586^587^^^^571^601^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, parent, this.safeNameIdSupplier ) ;^586^587^^^^571^601^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^FunctionArgumentInjector.getFunctionCallParameterMap ( inlineResult, callNode, this.safeNameIdSupplier ) ;^586^587^^^^571^601^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( thisValue, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( safeReturnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^return false;^600^^^^^585^615^return true;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( !isDirectCallNodeReplacementPossible ( injectionPoint )  )  {^617^^^^^602^632^if  ( !isDirectCallNodeReplacementPossible ( fnNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( !isCallWithinLoop ( fnNode )  )  {^617^^^^^602^632^if  ( !isDirectCallNodeReplacementPossible ( fnNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( !isCallWithinLoop ( injectionPoint )  )  {^617^^^^^602^632^if  ( !isDirectCallNodeReplacementPossible ( fnNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;^617^618^619^^^602^632^if  ( !isDirectCallNodeReplacementPossible ( fnNode )  )  { return CanInlineResult.NO; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^617^618^619^^^602^632^if  ( !isDirectCallNodeReplacementPossible ( fnNode )  )  { return CanInlineResult.NO; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  )  {     return NO; }^617^^^^^602^632^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  (  ( ! ( allowDecomposition )  )  &&  ( callSiteType ==  ( DECOMPOSABLE_EXPRESSION )  )  )  {     return NO; }^617^^^^^602^632^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( callSiteType ==  ( UNSUPPORTED )  )  {     return NO; }^617^^^^^602^632^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isSupportedCallType ( callNode )  )  )  {     return NO; }^617^^^^^602^632^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( mayHaveSideEffects ( cArg )  )  {     return NO; }^617^^^^^602^632^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( referencesThis &&  ( ! ( isFunctionObjectCall ( callNode )  )  )  )  {     return NO; }^617^^^^^602^632^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isDirectCallNodeReplacementPossible ( fnNode )  )  )  {     return NO; }^618^^^^^603^633^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isSupportedCallType ( callNode )  )  )  {     return NO; }^618^^^^^603^633^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( !isCallWithinLoop ( inlineResult )  )  {^617^^^^^602^632^if  ( !isDirectCallNodeReplacementPossible ( fnNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node block = newBlock.getLastChild (  ) ;^621^^^^^606^636^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node block = fnNode.newString (  ) ;^621^^^^^606^636^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node block = fnNode .getFirstChild (  )  ;^621^^^^^606^636^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node block = newBlock.newString (  ) ;^621^^^^^606^636^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node returnNode = block.getFirstChild (  ) ;Node block = fnNode.getLastChild (  ) ;^621^^^^^606^636^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node fnCallerBody = fnCaller.getLastChild (  ) ;Node block = fnNode.getLastChild (  ) ;^621^^^^^606^636^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;Node block = fnNode.getLastChild (  ) ;^621^^^^^606^636^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node parent = callNode.getParent (  ) ;Node block = fnNode.getLastChild (  ) ;^621^^^^^606^636^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node block = NodeUtil.getFunctionBody ( fnNode ) ;Node block = fnNode.getLastChild (  ) ;^621^^^^^606^636^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node block = injectionPointParent.getLastChild (  ) ;^621^^^^^606^636^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^621^^^^^606^636^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node cArg = inlineResult.getFirstChild (  ) .getNext (  ) ;^624^^^^^609^639^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node cArg = callNode.newString (  ) .getNext (  ) ;^624^^^^^609^639^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node cArg = callNode .getLastChild (  )  .getNext (  ) ;^624^^^^^609^639^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node cArg = returnNode.getFirstChild (  ) .getNext (  ) ;^624^^^^^609^639^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node block = fnNode.getLastChild (  ) ;Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^624^^^^^609^639^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^624^^^^^609^639^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^String fnRecursionName = fnNode.getFirstChild (  ) .getString (  ) ;Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^624^^^^^609^639^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node parent = callNode.getParent (  ) ;Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^624^^^^^609^639^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P12_Insert_Condition]^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  { Node cArg = callNode.getFirstChild (  ) .getNext (  ) ; }^624^^^^^609^639^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node cArg = parent.getFirstChild (  ) .getNext (  ) ;^624^^^^^609^639^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node cArg = callNode.getFirstChild (  )  .getType (  )  ;^624^^^^^609^639^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^624^^^^^609^639^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^resultName = parent.getFirstChild (  ) .getString (  ) ;Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^624^^^^^609^639^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node cArg = injectionPointParent.newString (  ) .getNext (  ) ;^624^^^^^609^639^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( callNode.getFirstChild (  ) .getType (  )  == Token.NAME )  {^629^^^^^614^644^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( inlineResult.getFirstChild (  ) .getType (  )  != Token.NAME )  {^629^^^^^614^644^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( cArg.getType (  )  == THIS )  {^629^^^^^614^644^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( callNode.newString (  ) .getType (  )  != Token.NAME )  {^629^^^^^614^644^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( callNode.getFirstChild (  ) .newString (  )  != Token.NAME )  {^629^^^^^614^644^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil.isFunctionObjectApply ( callNode )  )  {^630^^^^^615^645^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.isFunctionObjectApply ( injectionPoint )  )  {^630^^^^^615^645^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  (  ( callNode.getFirstChild (  ) .getType (  )  )  !=  ( NAME )  )  {     if  ( isFunctionObjectCall ( callNode )  )  {         checkNotNull ( cArg ) ;         checkState (  (  ( cArg.getType (  )  )  ==  ( THIS )  )  ) ;         cArg = cArg.getNext (  ) ;     }else {         checkState (  ( ! ( isFunctionObjectApply ( callNode )  )  )  ) ;     } }^630^^^^^615^645^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunctionObjectCall ( callNode )  )  {     Node thisValue = callNode.getFirstChild (  ) .getNext (  ) ;     if  (  ( thisValue == null )  ||  (  ( thisValue.getType (  )  )  !=  ( THIS )  )  )  {         return false;     } }else     if  ( isFunctionObjectApply ( callNode )  )  {         return false;     }^630^^^^^615^645^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( injectionPoint )  ) ;^637^^^^^630^638^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( compiler )  ;^637^^^^^630^638^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions.checkState ( !NodeUtil.isFunctionObjectCall ( callNode )  ) ;^637^^^^^630^638^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^637^^^^^630^638^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( parent )  ) ;^637^^^^^630^638^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( newExpression )  ) ;^637^^^^^630^638^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^cArg = injectionPointParent.getNext (  ) ;^634^^^^^619^649^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^cArg = cArg.newString (  ) ;^634^^^^^619^649^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^cArg = cArg .getType (  )  ;^634^^^^^619^649^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^cArg =  newBlock.getNext (  ) ;^634^^^^^619^649^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^fnParam = fnParam.getNext (  ) ;cArg = cArg.getNext (  ) ;^634^^^^^619^649^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions .checkState (  )  ;^632^^^^^617^647^Preconditions.checkNotNull ( cArg ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^632^633^^^^617^647^Preconditions.checkNotNull ( cArg ) ; Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Preconditions.checkNotNull ( cArg ) ;^632^^^^^617^647^Preconditions.checkNotNull ( cArg ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( compiler ) ;Preconditions.checkNotNull ( cArg ) ;^632^^^^^617^647^Preconditions.checkNotNull ( cArg ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( safeNameIdSupplier ) ;Preconditions.checkNotNull ( cArg ) ;^632^^^^^617^647^Preconditions.checkNotNull ( cArg ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPoint ) ;Preconditions.checkNotNull ( cArg ) ;^632^^^^^617^647^Preconditions.checkNotNull ( cArg ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkState ( cArg.getType (  )  > Token.THIS ) ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkState ( inlineResult.getType (  )  == Token.THIS ) ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkState ( cArg.getType (  )  == Token.0 ) ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( compiler )  ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions.checkState ( cArg.newString (  )  == Token.THIS ) ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkState ( thisValue.getType (  )  == Token.THIS ) ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^633^634^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ; cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( callSiteType != CallSiteType.UNSUPPORTED ) ;Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( compiler.isNormalized (  )  ) ;Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( returnNode.getType (  )  == Token.RETURN ) ;Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent.getFirstChild (  )  == null ) ;Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkState ( injectionPoint.getType (  )  == Token.THIS ) ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkState ( thisValue.newString (  )  == Token.THIS ) ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^cArg = inlineResult.getNext (  ) ;^634^^^^^619^649^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^634^^^^^619^649^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node parent = callNode.getParent (  ) ;cArg = cArg.getNext (  ) ;^634^^^^^619^649^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^cArg =  injectionPoint.getNext (  ) ;^634^^^^^619^649^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.isFunctionObjectCall ( inlineResult )  )  {^630^^^^^615^645^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunction ( parent )  )  {     break; }^630^^^^^615^645^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( containsFunctionDeclaration ( block )  )  {     return false; }^630^^^^^615^645^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isLoopStructure ( parent )  )  {     return true; }^630^^^^^615^645^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunctionObjectApply ( callNode )  )  {     return false; }^630^^^^^615^645^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkNotNull ( newExpression ) ;^632^^^^^617^647^Preconditions.checkNotNull ( cArg ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkNotNull ( parent ) ;^632^^^^^617^647^Preconditions.checkNotNull ( cArg ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^632^^^^^617^647^Preconditions.checkNotNull ( cArg ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkState ( cArg.getType (  )  >= Token.THIS ) ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkState ( injectionPointParent.getType (  )  == Token.THIS ) ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( injectionPointParent )  ) ;^637^^^^^622^652^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions.checkState ( !NodeUtil.isFunctionObjectCall ( callNode )  ) ;^637^^^^^622^652^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions.checkState ( !NodeUtil .isFunctionObjectCall ( newBlock )   ) ;^637^^^^^622^652^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions .checkNotNull ( compiler )  ;^637^^^^^622^652^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^637^^^^^622^652^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( inlineResult )  ) ;^637^^^^^622^652^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.isFunctionObjectCall ( thisValue )  )  {^630^^^^^615^645^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( inlineResult )  ) ;^637^^^^^630^638^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkState ( !NodeUtil.isFunctionObjectCall ( returnNode )  ) ;^637^^^^^630^638^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions.checkState ( !NodeUtil .isFunctionObjectCall ( inlineResult )   ) ;^637^^^^^630^638^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( injectionPointParent )  ) ;^637^^^^^630^638^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkNotNull ( inlineResult ) ;^632^^^^^617^647^Preconditions.checkNotNull ( cArg ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkNotNull ( injectionPoint ) ;^632^^^^^617^647^Preconditions.checkNotNull ( cArg ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkState ( cArg.getType (  )  != Token.THIS ) ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions.checkState ( cArg .getString (  )   == Token.THIS ) ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkState ( newBlock.getType (  )  == Token.THIS ) ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^cArg = safeReturnNode.getNext (  ) ;^634^^^^^619^649^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^cArg =  null.getNext (  ) ;^634^^^^^619^649^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( newBlock.getFirstChild (  ) .getType (  )  != Token.NAME )  {^629^^^^^614^644^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( injectionPoint.getFirstChild (  ) .getType (  )  != Token.NAME )  {^629^^^^^614^644^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( injectionPoint.newString (  ) .getType (  )  != Token.NAME )  {^629^^^^^614^644^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.isFunctionObjectCall ( injectionPoint )  )  {^630^^^^^615^645^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunctionObjectApply ( newExpression )   )  {^630^^^^^615^645^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkNotNull ( injectionPointParent ) ;^632^^^^^617^647^Preconditions.checkNotNull ( cArg ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^Preconditions.checkState ( cArg.getType (  )  <= Token.THIS ) ;^633^^^^^618^648^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^cArg = thisValue.getNext (  ) ;^634^^^^^619^649^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( injectionPoint )  ) ;^637^^^^^622^652^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( safeReturnNode )  ) ;^637^^^^^622^652^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Preconditions.checkState ( !NodeUtil .isFunctionObjectCall ( safeReturnNode )   ) ;^637^^^^^622^652^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node fnParam = NodeUtil.getFnParameters ( injectionPointParent ) .getFirstChild (  ) ;^642^^^^^627^657^Node fnParam = NodeUtil.getFnParameters ( fnNode ) .getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node fnParam = NodeUtil.getFunctionBody ( fnNode ) .getFirstChild (  ) ;^642^^^^^627^657^Node fnParam = NodeUtil.getFnParameters ( fnNode ) .getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node fnParam = NodeUtil .getNameReferenceCount ( callParentNode )  .getFirstChild (  ) ;^642^^^^^627^657^Node fnParam = NodeUtil.getFnParameters ( fnNode ) .getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node fnParam = NodeUtil.getFunctionBody ( newBlock ) .getFirstChild (  ) ;^642^^^^^627^657^Node fnParam = NodeUtil.getFnParameters ( fnNode ) .getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node argsNode = NodeUtil.getFnParameters ( fnNode ) ;Node fnParam = NodeUtil.getFnParameters ( fnNode ) .getFirstChild (  ) ;^642^^^^^627^657^Node fnParam = NodeUtil.getFnParameters ( fnNode ) .getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^int paramCount = NodeUtil.getFnParameters ( fnNode ) .getChildCount (  ) ;Node fnParam = NodeUtil.getFnParameters ( fnNode ) .getFirstChild (  ) ;^642^^^^^627^657^Node fnParam = NodeUtil.getFnParameters ( fnNode ) .getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node fnParam = NodeUtil.getFnParameters ( newExpression ) .getFirstChild (  ) ;^642^^^^^627^657^Node fnParam = NodeUtil.getFnParameters ( fnNode ) .getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^Node fnParam = NodeUtil.getFnParameters ( fnNode )  .getLastChild (  )  ;^642^^^^^627^657^Node fnParam = NodeUtil.getFnParameters ( fnNode ) .getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^642^^^^^627^657^Node fnParam = NodeUtil.getFnParameters ( fnNode ) .getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^Node fnParam = NodeUtil.getFnParameters ( injectionPoint ) .getFirstChild (  ) ;^642^^^^^627^657^Node fnParam = NodeUtil.getFnParameters ( fnNode ) .getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^Node fnParam = NodeUtil.getFnParameters ( newBlock ) .getFirstChild (  ) ;^642^^^^^627^657^Node fnParam = NodeUtil.getFnParameters ( fnNode ) .getFirstChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^while  ( cArg != null && fnParam != null )  {^643^^^^^628^658^while  ( cArg != null || fnParam != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^while  ( cArg == null || fnParam != null )  {^643^^^^^628^658^while  ( cArg != null || fnParam != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^while  ( cArg != null || fnParam == null )  {^643^^^^^628^658^while  ( cArg != null || fnParam != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^while  ( newExpression != null || fnParam != null )  {^643^^^^^628^658^while  ( cArg != null || fnParam != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^while  ( cArg != null || injectionPointParent != null )  {^643^^^^^628^658^while  ( cArg != null || fnParam != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^while  ( fnParam != null || cArg != null )  {^643^^^^^628^658^while  ( cArg != null || fnParam != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^while  ( parent != null || fnParam != null )  {^643^^^^^628^658^while  ( cArg != null || fnParam != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( fnParam == null )  {^645^^^^^630^660^if  ( fnParam != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( inlineResult != null )  {^645^^^^^630^660^if  ( fnParam != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( cArg != null )  {^645^^^^^630^660^if  ( fnParam != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( mayEffectMutableState(cArg) && getNameReferenceCount(block, fnParam.getString())) > 1 )  {^645^^^^^630^660^if  ( fnParam != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^645^^^^^630^660^if  ( fnParam != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( fnParam != true )  {^645^^^^^630^660^if  ( fnParam != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( cArg == null )  {^646^^^^^631^661^if  ( cArg != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( injectionPointParent != null )  {^646^^^^^631^661^if  ( cArg != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( mayEffectMutableState(cArg) && getNameReferenceCount(block, fnParam.getString())) > 1 )  {^646^^^^^631^661^if  ( cArg != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^646^^^^^631^661^if  ( cArg != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( newBlock != false )  {^646^^^^^631^661^if  ( cArg != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P9_Replace_Statement]^if  ( fnParam != null )  {^646^^^^^631^661^if  ( cArg != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( NodeUtil.mayEffectMutableState ( cArg ) || NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  >= 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > NAME_COST_ESTIMATE )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( newBlock ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( newBlock, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, injectionPointParent.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount (  fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( block ) && NodeUtil.getNameReferenceCount ( cArg, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( fnParam, block.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( NodeUtil.mayEffectMutableState ( cArg ) ) {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  (  NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P6_Replace_Expression]^if  ( getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil.isFunctionObjectCall ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.isNameReferenced ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.newString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.mayEffectMutableState ( newBlock ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 2 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;^650^651^652^653^654^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  { return CanInlineResult.NO; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^650^651^652^653^654^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  { return CanInlineResult.NO; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( injectionPoint ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.isFunctionObjectCall ( inlineResult ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunction ( parent )  )  {     break; }^650^^^^^635^665^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isLoopStructure ( parent )  )  {     return true; }^650^^^^^635^665^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunctionObjectApply ( callNode )  )  {     return false; }^650^^^^^635^665^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& NodeUtil.getNameReferenceCount ( newBlock, fnParam.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& NodeUtil.getNameReferenceCount ( block, injectionPointParent.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& NodeUtil.getNameReferenceCount (  fnParam.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& NodeUtil.getNameReferenceCount ( block.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& NodeUtil.getNameReferenceCount ( fnParam, block.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& NodeUtil.isNameReferenced ( block, fnParam.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& NodeUtil.getNameReferenceCount ( block, fnParam.newString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& NodeUtil.getNameReferenceCount ( block, fnParam .getFirstChild (  )   )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& NodeUtil.getNameReferenceCount ( returnNode, fnParam.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^651^652^653^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  { return CanInlineResult.NO;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isNameReferenced ( block, fnName )  )  {     return false; }^651^^^^^636^666^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( containsFunctionDeclaration ( block )  )  {     return false; }^651^^^^^636^666^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isNameReferenced ( block, "arguments" )  )  {     return false; }^651^^^^^636^666^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^block, newBlock.getString (  )  )  > 1 )  {^652^^^^^637^667^block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^block, fnParam.newString (  )  )  > 1 )  {^652^^^^^637^667^block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^652^653^^^^637^667^block, fnParam.getString (  )  )  > 1 )  { return CanInlineResult.NO;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  == 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( newExpression ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( safeReturnNode, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, inlineResult.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( fnParam ) && NodeUtil.getNameReferenceCount ( block, cArg.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil .getNodeTypeReferenceCount ( fnParam )   > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam .getFirstChild (  )   )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  (  NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 3 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^fnParam = inlineResult.getNext (  ) ;^658^^^^^643^673^fnParam = fnParam.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^fnParam = fnParam.newString (  ) ;^658^^^^^643^673^fnParam = fnParam.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^fnParam =  injectionPoint.getNext (  ) ;^658^^^^^643^673^fnParam = fnParam.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^cArg = cArg.getNext (  ) ;fnParam = fnParam.getNext (  ) ;^658^^^^^643^673^fnParam = fnParam.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( inlineResult ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunctionObjectCall ( expressionRoot )  && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.mayEffectMutableState ( injectionPointParent ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& NodeUtil.getNameReferenceCount ( parent, fnParam.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& NodeUtil.getNameReferenceCount ( block, newBlock.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& NodeUtil.getNameReferenceCount ( block, thisValue.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^block, inlineResult.getString (  )  )  > 1 )  {^652^^^^^637^667^block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^658^^^^^643^673^fnParam = fnParam.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( cArg != false )  {^646^^^^^631^661^if  ( cArg != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  < 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 3 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, injectionPoint.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil .getNodeTypeReferenceCount ( grandParent )   > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 * 0 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.isFunctionObjectCall ( newBlock ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& NodeUtil.getNameReferenceCount ( block, inlineResult.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& NodeUtil.getNameReferenceCount ( injectionPointParent, fnParam.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > -3 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( parent ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunctionObjectCall ( grandParent )  && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  (  NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 4 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^if  ( cArg == null )  {^663^^^^^648^678^if  ( cArg != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( injectionPoint != null )  {^663^^^^^648^678^if  ( cArg != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( cArg != false )  {^663^^^^^648^678^if  ( cArg != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P9_Replace_Statement]^if  ( fnParam != null )  {^663^^^^^648^678^if  ( cArg != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(cArg)) {    return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;}; cArg = cArg.getNext();^663^664^665^666^^648^678^if  ( cArg != null )  { if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  { return CanInlineResult.NO; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^663^664^665^666^^648^678^if  ( cArg != null )  { if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  { return CanInlineResult.NO; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayHaveSideEffects ( safeReturnNode )  )  {^664^^^^^649^679^if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil.mayEffectMutableState ( cArg )  )  {^664^^^^^649^679^if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil .mayEffectMutableState ( safeReturnNode )   )  {^664^^^^^649^679^if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.mayHaveSideEffects ( injectionPoint )  )  {^664^^^^^649^679^if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;^664^665^666^^^649^679^if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  { return CanInlineResult.NO; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P16_Remove_Block]^^664^665^666^^^649^679^if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  { return CanInlineResult.NO; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  )  {     return NO; }^664^^^^^649^679^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  (  ( mayEffectMutableState ( cArg )  )  &&  (  ( getNameReferenceCount ( block, fnParam.getString (  )  )  )  > 1 )  )  {     return NO; }^664^^^^^649^679^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  (  ( ! ( allowDecomposition )  )  &&  ( callSiteType ==  ( DECOMPOSABLE_EXPRESSION )  )  )  {     return NO; }^664^^^^^649^679^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( callSiteType ==  ( UNSUPPORTED )  )  {     return NO; }^664^^^^^649^679^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( cArg != null )  {     if  ( mayHaveSideEffects ( cArg )  )  {         return NO;     }     cArg = cArg.getNext (  ) ; }^664^^^^^649^679^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isDirectCallNodeReplacementPossible ( fnNode )  )  )  {     return NO; }^664^^^^^649^679^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isSupportedCallType ( callNode )  )  )  {     return NO; }^664^^^^^649^679^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( referencesThis &&  ( ! ( isFunctionObjectCall ( callNode )  )  )  )  {     return NO; }^664^^^^^649^679^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isDirectCallNodeReplacementPossible ( fnNode )  )  )  {     return NO; }^665^^^^^650^680^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( ! ( isSupportedCallType ( callNode )  )  )  {     return NO; }^665^^^^^650^680^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^cArg = injectionPointParent.getNext (  ) ;^667^^^^^652^682^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^cArg = cArg.newString (  ) ;^667^^^^^652^682^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^cArg = cArg .getType (  )  ;^667^^^^^652^682^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^cArg =  injectionPoint.getNext (  ) ;^667^^^^^652^682^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^fnParam = fnParam.getNext (  ) ;cArg = cArg.getNext (  ) ;^667^^^^^652^682^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayHaveSideEffects ( parent )  )  {^664^^^^^649^679^if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil .mayEffectMutableState ( greatGrandParent )   )  {^664^^^^^649^679^if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil .mayEffectMutableState ( inlineResult )   )  {^664^^^^^649^679^if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P13_Insert_Block]^if  ( isFunction ( parent )  )  {     break; }^664^^^^^649^679^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^cArg = inlineResult.getNext (  ) ;^667^^^^^652^682^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^cArg = returnNode.getNext (  ) ;^667^^^^^652^682^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^667^^^^^652^682^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P11_Insert_Donor_Statement]^Node parent = callNode.getParent (  ) ;cArg = cArg.getNext (  ) ;^667^^^^^652^682^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayHaveSideEffects ( inlineResult )  )  {^664^^^^^649^679^if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil .mayEffectMutableState ( expressionRoot )   )  {^664^^^^^649^679^if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.mayHaveSideEffects ( injectionPointParent )  )  {^664^^^^^649^679^if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^fnParam =  null.getNext (  ) ;^658^^^^^643^673^fnParam = fnParam.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.mayEffectMutableState ( thisValue ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^block, injectionPointParent.getString (  )  )  > 1 )  {^652^^^^^637^667^block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^block, fnParam .getFirstChild (  )   )  > 1 )  {^652^^^^^637^667^block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^fnParam = newExpression.getNext (  ) ;^658^^^^^643^673^fnParam = fnParam.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.mayEffectMutableState ( injectionPoint )  )  {^664^^^^^649^679^if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( returnNode != null )  {^645^^^^^630^660^if  ( fnParam != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( fnParam != false )  {^645^^^^^630^660^if  ( fnParam != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( cArg != true )  {^646^^^^^631^661^if  ( cArg != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( returnNode ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil .getNodeTypeReferenceCount ( fnNode )   > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.isFunctionObjectCall ( injectionPoint ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& NodeUtil.getNameReferenceCount ( newExpression, fnParam.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& NodeUtil.getNameReferenceCount ( block, parent.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^&& NodeUtil .getNodeTypeReferenceCount ( grandParent )   > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^block, newExpression.newString (  )  )  > 1 )  {^652^^^^^637^667^block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > PAREN_COST )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( injectionPointParent, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, newExpression.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^fnParam =  newBlock.getNext (  ) ;^658^^^^^643^673^fnParam = fnParam.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& NodeUtil.getNameReferenceCount ( inlineResult, fnParam.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^&& NodeUtil.isNameReferenced ( newBlock, fnParam.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^block, injectionPoint.getString (  )  )  > 1 )  {^652^^^^^637^667^block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^fnParam = fnParam .getType (  )  ;^658^^^^^643^673^fnParam = fnParam.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( returnNode != null )  {^646^^^^^631^661^if  ( cArg != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 6 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( inlineResult, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  (  NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 0 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunctionObjectCall ( fnParam )  && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.mayEffectMutableState ( safeReturnNode ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > -4 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( thisValue, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, thisValue.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil .getNodeTypeReferenceCount ( injectionPoint )   > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  (  NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 2 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( injectionPointParent != null )  {^663^^^^^648^678^if  ( cArg != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^if  ( NodeUtil.mayHaveSideEffects ( newExpression )  )  {^664^^^^^649^679^if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^cArg = parent.getNext (  ) ;^667^^^^^652^682^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^cArg =  thisValue.getNext (  ) ;^667^^^^^652^682^cArg = cArg.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil .mayEffectMutableState ( newBlock )   )  {^664^^^^^649^679^if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^fnParam = injectionPointParent.getNext (  ) ;^658^^^^^643^673^fnParam = fnParam.getNext (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^&& NodeUtil.getNameReferenceCount ( thisValue, fnParam.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^block, inlineResult.newString (  )  )  > 1 )  {^652^^^^^637^667^block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P5_Replace_Variable]^if  ( NodeUtil.mayHaveSideEffects ( newBlock )  )  {^664^^^^^649^679^if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P7_Replace_Invocation]^if  ( NodeUtil .mayEffectMutableState ( fnParam )   )  {^664^^^^^649^679^if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P2_Replace_Operator]^return "JSCompiler_inline_result_" + safeNameIdSupplier.get (  >=  ) ;^678^^^^^677^679^return "JSCompiler_inline_result_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] getUniqueResultName [RETURN_TYPE] String   [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P3_Replace_Literal]^return "SCompiler_inline_result_" + safeNameIdSupplier.get (  ) ;^678^^^^^677^679^return "JSCompiler_inline_result_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] getUniqueResultName [RETURN_TYPE] String   [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P8_Replace_Mix]^return "JSCompiler_inline_result_"  |  safeNameIdSupplier.get (  ) ;^678^^^^^677^679^return "JSCompiler_inline_result_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] getUniqueResultName [RETURN_TYPE] String   [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P14_Delete_Statement]^^678^^^^^677^679^return "JSCompiler_inline_result_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] getUniqueResultName [RETURN_TYPE] String   [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[P1_Replace_Type]^short  referenceCount = refs.size (  ) ;^688^^^^^673^703^int referenceCount = refs.size (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P3_Replace_Literal]^int referenceCount = refs.size() + 3 ;^688^^^^^673^703^int referenceCount = refs.size (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P11_Insert_Donor_Statement]^int aliasCount = namesToAlias.size (  ) ;int referenceCount = refs.size (  ) ;^688^^^^^673^703^int referenceCount = refs.size (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P12_Insert_Condition]^if  ( referenceCount == 0 )  { int referenceCount = refs.size (  ) ; }^688^^^^^673^703^int referenceCount = refs.size (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P3_Replace_Literal]^int referenceCount = refs.size() + 9 ;^688^^^^^673^703^int referenceCount = refs.size (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P14_Delete_Statement]^^688^^^^^673^703^int referenceCount = refs.size (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P2_Replace_Operator]^if  ( referenceCount <= 0 )  {^689^^^^^674^704^if  ( referenceCount == 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P3_Replace_Literal]^if  ( referenceCount == 9 )  {^689^^^^^674^704^if  ( referenceCount == 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^if  ( referencesUsingBlockInlining == 0 )  {^689^^^^^674^704^if  ( referenceCount == 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P8_Replace_Mix]^if  ( referenceCount == 2 )  {^689^^^^^674^704^if  ( referenceCount == 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P9_Replace_Statement]^if  ( fnInstanceCount == 0 )  {^689^^^^^674^704^if  ( referenceCount == 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P9_Replace_Statement]^if  ( referencesThis )  {^689^^^^^674^704^if  ( referenceCount == 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P15_Unwrap_Block]^return true;^689^690^691^^^674^704^if  ( referenceCount == 0 )  { return true; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P16_Remove_Block]^^689^690^691^^^674^704^if  ( referenceCount == 0 )  { return true; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P3_Replace_Literal]^return false;^690^^^^^675^705^return true;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P1_Replace_Type]^short  referencesUsingBlockInlining = 0;^693^^^^^678^708^int referencesUsingBlockInlining = 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P3_Replace_Literal]^int referencesUsingBlockInlining = -9;^693^^^^^678^708^int referencesUsingBlockInlining = 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P2_Replace_Operator]^boolean checkModules = isRemovable || fnModule != null;^695^^^^^680^710^boolean checkModules = isRemovable && fnModule != null;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P2_Replace_Operator]^boolean checkModules = isRemovable && fnModule == null;^695^^^^^680^710^boolean checkModules = isRemovable && fnModule != null;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^boolean checkModules = referencesThis && fnModule != null;^695^^^^^680^710^boolean checkModules = isRemovable && fnModule != null;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^boolean checkModules = isRemovable && module != null;^695^^^^^680^710^boolean checkModules = isRemovable && fnModule != null;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^boolean checkModules = fnModule && isRemovable != null;^695^^^^^680^710^boolean checkModules = isRemovable && fnModule != null;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P7_Replace_Invocation]^JSModuleGraph moduleGraph = compiler.getCodingConvention (  ) ;^696^^^^^681^711^JSModuleGraph moduleGraph = compiler.getModuleGraph (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P14_Delete_Statement]^^696^^^^^681^711^JSModuleGraph moduleGraph = compiler.getModuleGraph (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P2_Replace_Operator]^if  ( ref.mode <= InliningMode.BLOCK )  {^699^^^^^684^714^if  ( ref.mode == InliningMode.BLOCK )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^if  ( mode == InliningMode.BLOCK )  {^699^^^^^684^714^if  ( ref.mode == InliningMode.BLOCK )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^if  ( ref.mode == InliningMode.mode )  {^699^^^^^684^714^if  ( ref.mode == InliningMode.BLOCK )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P9_Replace_Statement]^if  ( mode == InliningMode.DIRECT )  {^699^^^^^684^714^if  ( ref.mode == InliningMode.BLOCK )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P15_Unwrap_Block]^referencesUsingBlockInlining++;^699^700^701^^^684^714^if  ( ref.mode == InliningMode.BLOCK )  { referencesUsingBlockInlining++; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P16_Remove_Block]^^699^700^701^^^684^714^if  ( ref.mode == InliningMode.BLOCK )  { referencesUsingBlockInlining++; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P13_Insert_Block]^if  ( mode ==  ( DIRECT )  )  {     return inlineReturnValue ( callNode, fnNode ) ; }else {     return inlineFunction ( callNode, fnNode, fnName ) ; }^699^^^^^684^714^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P13_Insert_Block]^if  ( callSiteType ==  ( UNSUPPORTED )  )  {     return NO; }^699^^^^^684^714^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P2_Replace_Operator]^if  ( checkModules || ref.module != null )  {^704^^^^^689^719^if  ( checkModules && ref.module != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P2_Replace_Operator]^if  ( checkModules && ref.module == null )  {^704^^^^^689^719^if  ( checkModules && ref.module != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^if  ( isCallInLoop && ref.module != null )  {^704^^^^^689^719^if  ( checkModules && ref.module != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^if  ( checkModules && module != null )  {^704^^^^^689^719^if  ( checkModules && ref.module != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^if  ( ref && checkModules.module != null )  {^704^^^^^689^719^if  ( checkModules && ref.module != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P6_Replace_Expression]^if  ( checkModules ) {^704^^^^^689^719^if  ( checkModules && ref.module != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P6_Replace_Expression]^if  (  ref.module != null )  {^704^^^^^689^719^if  ( checkModules && ref.module != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P6_Replace_Expression]^if  ( ref.module != fnModule && module, fnModule)) )  {^704^^^^^689^719^if  ( checkModules && ref.module != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P6_Replace_Expression]^if  ( ref.module != fnModule )  {^704^^^^^689^719^if  ( checkModules && ref.module != null )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P13_Insert_Block]^if  (  (  ( ref.module )  != fnModule )  &&  ( ! ( moduleGraph.dependsOn ( ref.module, fnModule )  )  )  )  {     isRemovable = false;     checkModules = false; }^704^^^^^689^719^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P2_Replace_Operator]^if  ( ref.module != fnModule || !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^705^706^^^^690^720^if  ( ref.module != fnModule && !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P2_Replace_Operator]^if  ( ref.module == fnModule && !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^705^706^^^^690^720^if  ( ref.module != fnModule && !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^if  ( ref.module != module && !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^705^706^^^^690^720^if  ( ref.module != fnModule && !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^if  ( module != fnModule && !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^705^706^^^^690^720^if  ( ref.module != fnModule && !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^if  ( ref.module != fnModule && !moduleGraph.dependsOn ( ref.module )  )  {^705^706^^^^690^720^if  ( ref.module != fnModule && !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^if  ( ref.module != fnModule && !moduleGraph.dependsOn (  fnModule )  )  {^705^706^^^^690^720^if  ( ref.module != fnModule && !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^if  ( fnModule != ref.module && !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^705^706^^^^690^720^if  ( ref.module != fnModule && !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P6_Replace_Expression]^if  ( ref.module != fnModule ) {^705^706^^^^690^720^if  ( ref.module != fnModule && !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P6_Replace_Expression]^if  (  !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^705^706^^^^690^720^if  ( ref.module != fnModule && !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P13_Insert_Block]^if  ( checkModules &&  (  ( ref.module )  != null )  )  {     if  (  (  ( ref.module )  != fnModule )  &&  ( ! ( moduleGraph.dependsOn ( ref.module, fnModule )  )  )  )  {         isRemovable = false;         checkModules = false;     } }^705^^^^^690^720^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P3_Replace_Literal]^isRemovable = true;^709^^^^^705^711^isRemovable = false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P11_Insert_Donor_Statement]^checkModules = false;isRemovable = false;^709^^^^^705^711^isRemovable = false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P3_Replace_Literal]^checkModules = true;^710^^^^^705^711^checkModules = false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P11_Insert_Donor_Statement]^this.module = module;checkModules = false;^710^^^^^705^711^checkModules = false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P11_Insert_Donor_Statement]^isRemovable = false;checkModules = false;^710^^^^^705^711^checkModules = false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P3_Replace_Literal]^isRemovable = true;^709^^^^^694^724^isRemovable = false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P11_Insert_Donor_Statement]^checkModules = false;isRemovable = false;^709^^^^^694^724^isRemovable = false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P3_Replace_Literal]^checkModules = true;^710^^^^^695^725^checkModules = false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P11_Insert_Donor_Statement]^this.module = module;checkModules = false;^710^^^^^695^725^checkModules = false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P11_Insert_Donor_Statement]^isRemovable = false;checkModules = false;^710^^^^^695^725^checkModules = false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^!moduleGraph.dependsOn ( ref.module, module )  )  {^706^^^^^691^721^!moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^!moduleGraph.dependsOn ( module, fnModule )  )  {^706^^^^^691^721^!moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^!moduleGraph.dependsOn ( ref.module )  )  {^706^^^^^691^721^!moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^!moduleGraph.dependsOn (  fnModule )  )  {^706^^^^^691^721^!moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^!moduleGraph.dependsOn ( fnModule.module, ref )  )  {^706^^^^^691^721^!moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^!moduleGraph.dependsOn ( ref, fnModule )  )  {^706^^^^^691^721^!moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^!moduleGraph.dependsOn ( fnModule, ref.module )  )  {^706^^^^^691^721^!moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P1_Replace_Type]^long  referencesUsingDirectInlining = referenceCount - referencesUsingBlockInlining;^715^716^^^^700^730^int referencesUsingDirectInlining = referenceCount - referencesUsingBlockInlining;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P2_Replace_Operator]^int referencesUsingDirectInlining = referenceCount  >>  referencesUsingBlockInlining;^715^716^^^^700^730^int referencesUsingDirectInlining = referenceCount - referencesUsingBlockInlining;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int referencesUsingDirectInlining = costDeltaDirect - referencesUsingBlockInlining;^715^716^^^^700^730^int referencesUsingDirectInlining = referenceCount - referencesUsingBlockInlining;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int referencesUsingDirectInlining = referenceCount - referenceCount;^715^716^^^^700^730^int referencesUsingDirectInlining = referenceCount - referencesUsingBlockInlining;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int referencesUsingDirectInlining = referencesUsingBlockInlining - referenceCount;^715^716^^^^700^730^int referencesUsingDirectInlining = referenceCount - referencesUsingBlockInlining;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P8_Replace_Mix]^int referencesUsingDirectInlining = referencesUsingBlockInlining - referencesUsingBlockInlining;^715^716^^^^700^730^int referencesUsingDirectInlining = referenceCount - referencesUsingBlockInlining;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P2_Replace_Operator]^if  ( referenceCount == 1 || isRemovable && referencesUsingDirectInlining == 1 )  {^724^725^^^^709^739^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining == 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P2_Replace_Operator]^if  ( referenceCount > 1 && isRemovable && referencesUsingDirectInlining == 1 )  {^724^725^^^^709^739^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining == 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P2_Replace_Operator]^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining <= 1 )  {^724^725^^^^709^739^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining == 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P3_Replace_Literal]^if  ( referenceCount == referencesUsingBlockInlining && isRemovable && referencesUsingDirectInlining == referencesUsingBlockInlining )  {^724^725^^^^709^739^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining == 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P3_Replace_Literal]^if  ( referenceCount == NAME_COST_ESTIMATE && isRemovable && referencesUsingDirectInlining == NAME_COST_ESTIMATE )  {^724^725^^^^709^739^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining == 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^if  ( referencesUsingBlockInlining == 1 && isRemovable && referencesUsingDirectInlining == 1 )  {^724^725^^^^709^739^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining == 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^if  ( referenceCount == 1 && referencesThis && referencesUsingDirectInlining == 1 )  {^724^725^^^^709^739^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining == 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^if  ( referenceCount == 1 && isRemovable && overallCallCost == 1 )  {^724^725^^^^709^739^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining == 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^if  ( referencesUsingDirectInlining == 1 && isRemovable && referenceCount == 1 )  {^724^725^^^^709^739^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining == 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^if  ( referenceCount == 1 && referencesUsingDirectInlining && isRemovable == 1 )  {^724^725^^^^709^739^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining == 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P6_Replace_Expression]^if  ( referenceCount == 1 ) {^724^725^^^^709^739^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining == 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P6_Replace_Expression]^if  (  isRemovable && referencesUsingDirectInlining == 1 )  {^724^725^^^^709^739^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining == 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P6_Replace_Expression]^if  ( (referenceCount == 1 && isRemovable) )  {^724^725^^^^709^739^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining == 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P6_Replace_Expression]^if  ( referencesUsingDirectInlining == 1 )  {^724^725^^^^709^739^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining == 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P8_Replace_Mix]^if  (  isRemovable && referencesUsingDirectInlining == 4 )  {^724^725^^^^709^739^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining == 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P15_Unwrap_Block]^return true;^724^725^726^727^^709^739^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining == 1 )  { return true; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P16_Remove_Block]^^724^725^726^727^^709^739^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining == 1 )  { return true; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P3_Replace_Literal]^return false;^726^^^^^724^727^return true;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P3_Replace_Literal]^return false;^726^^^^^711^741^return true;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P1_Replace_Type]^long  callCost = estimateCallCost ( fnNode, referencesThis ) ;^729^^^^^714^744^int callCost = estimateCallCost ( fnNode, referencesThis ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int callCost = estimateCallCost ( parent, referencesThis ) ;^729^^^^^714^744^int callCost = estimateCallCost ( fnNode, referencesThis ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int callCost = estimateCallCost ( fnNode, isRemovable ) ;^729^^^^^714^744^int callCost = estimateCallCost ( fnNode, referencesThis ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int callCost = estimateCallCost (  referencesThis ) ;^729^^^^^714^744^int callCost = estimateCallCost ( fnNode, referencesThis ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int callCost = estimateCallCost ( fnNode ) ;^729^^^^^714^744^int callCost = estimateCallCost ( fnNode, referencesThis ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int callCost = estimateCallCost ( referencesThis, fnNode ) ;^729^^^^^714^744^int callCost = estimateCallCost ( fnNode, referencesThis ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P7_Replace_Invocation]^int callCost = inlineReturnValue ( fnNode, referencesThis ) ;^729^^^^^714^744^int callCost = estimateCallCost ( fnNode, referencesThis ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int callCost = estimateCallCost ( injectionPoint, referencesThis ) ;^729^^^^^714^744^int callCost = estimateCallCost ( fnNode, referencesThis ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int callCost = estimateCallCost ( fnNode, hasArgs ) ;^729^^^^^714^744^int callCost = estimateCallCost ( fnNode, referencesThis ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P8_Replace_Mix]^int callCost = estimateCallCost ( fnNode, isCallInLoop ) ;^729^^^^^714^744^int callCost = estimateCallCost ( fnNode, referencesThis ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P14_Delete_Statement]^^729^^^^^714^744^int callCost = estimateCallCost ( fnNode, referencesThis ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P1_Replace_Type]^short  overallCallCost = callCost * referenceCount;^730^^^^^715^745^int overallCallCost = callCost * referenceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P2_Replace_Operator]^int / overallCallCost = callCost * referenceCount;^730^^^^^715^745^int overallCallCost = callCost * referenceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int overallCallCost = referenceCount * referenceCount;^730^^^^^715^745^int overallCallCost = callCost * referenceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int overallCallCost = callCost * referencesUsingBlockInlining;^730^^^^^715^745^int overallCallCost = callCost * referenceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int overallCallCost = referenceCount * callCost;^730^^^^^715^745^int overallCallCost = callCost * referenceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P8_Replace_Mix]^int overallCallCost = referencesUsingBlockInlining * referenceCount;^730^^^^^715^745^int overallCallCost = callCost * referenceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P1_Replace_Type]^short  costDeltaDirect = inlineCostDelta ( fnNode, namesToAlias, InliningMode.DIRECT ) ;^732^733^^^^717^747^int costDeltaDirect = inlineCostDelta ( fnNode, namesToAlias, InliningMode.DIRECT ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int costDeltaDirect = inlineCostDelta ( fnNode, namesToAlias, InliningMode.mode ) ;^732^733^^^^717^747^int costDeltaDirect = inlineCostDelta ( fnNode, namesToAlias, InliningMode.DIRECT ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int costDeltaDirect = inlineCostDelta (  namesToAlias, InliningMode.DIRECT ) ;^732^733^^^^717^747^int costDeltaDirect = inlineCostDelta ( fnNode, namesToAlias, InliningMode.DIRECT ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int costDeltaDirect = inlineCostDelta ( fnNode,  InliningMode.DIRECT ) ;^732^733^^^^717^747^int costDeltaDirect = inlineCostDelta ( fnNode, namesToAlias, InliningMode.DIRECT ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int costDeltaDirect = inlineCostDelta ( namesToAlias, fnNode, InliningMode.DIRECT ) ;^732^733^^^^717^747^int costDeltaDirect = inlineCostDelta ( fnNode, namesToAlias, InliningMode.DIRECT ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P7_Replace_Invocation]^int costDeltaDirect = inlineReturnValue ( fnNode, namesToAlias, InliningMode.DIRECT ) ;^732^733^^^^717^747^int costDeltaDirect = inlineCostDelta ( fnNode, namesToAlias, InliningMode.DIRECT ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P8_Replace_Mix]^int costDeltaDirect = inlineCostDelta ( returnNode, namesToAlias, InliningMode.DIRECT ) ;^732^733^^^^717^747^int costDeltaDirect = inlineCostDelta ( fnNode, namesToAlias, InliningMode.DIRECT ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P11_Insert_Donor_Statement]^int costDeltaBlock = inlineCostDelta ( fnNode, namesToAlias, InliningMode.BLOCK ) ;int costDeltaDirect = inlineCostDelta ( fnNode, namesToAlias, InliningMode.DIRECT ) ;^732^733^^^^717^747^int costDeltaDirect = inlineCostDelta ( fnNode, namesToAlias, InliningMode.DIRECT ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int costDeltaDirect = inlineCostDelta ( newBlock, namesToAlias, InliningMode.DIRECT ) ;^732^733^^^^717^747^int costDeltaDirect = inlineCostDelta ( fnNode, namesToAlias, InliningMode.DIRECT ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P14_Delete_Statement]^^732^733^^^^717^747^int costDeltaDirect = inlineCostDelta ( fnNode, namesToAlias, InliningMode.DIRECT ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P1_Replace_Type]^short  costDeltaBlock = inlineCostDelta ( fnNode, namesToAlias, InliningMode.BLOCK ) ;^734^735^^^^719^749^int costDeltaBlock = inlineCostDelta ( fnNode, namesToAlias, InliningMode.BLOCK ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int costDeltaBlock = inlineCostDelta ( injectionPoint, namesToAlias, InliningMode.BLOCK ) ;^734^735^^^^719^749^int costDeltaBlock = inlineCostDelta ( fnNode, namesToAlias, InliningMode.BLOCK ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int costDeltaBlock = inlineCostDelta ( fnNode, namesToAlias, InliningMode.mode ) ;^734^735^^^^719^749^int costDeltaBlock = inlineCostDelta ( fnNode, namesToAlias, InliningMode.BLOCK ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int costDeltaBlock = inlineCostDelta (  namesToAlias, InliningMode.BLOCK ) ;^734^735^^^^719^749^int costDeltaBlock = inlineCostDelta ( fnNode, namesToAlias, InliningMode.BLOCK ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int costDeltaBlock = inlineCostDelta ( fnNode,  InliningMode.BLOCK ) ;^734^735^^^^719^749^int costDeltaBlock = inlineCostDelta ( fnNode, namesToAlias, InliningMode.BLOCK ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^int costDeltaBlock = inlineCostDelta ( namesToAlias, fnNode, InliningMode.BLOCK ) ;^734^735^^^^719^749^int costDeltaBlock = inlineCostDelta ( fnNode, namesToAlias, InliningMode.BLOCK ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P7_Replace_Invocation]^int costDeltaBlock = inlineReturnValue ( fnNode, namesToAlias, InliningMode.BLOCK ) ;^734^735^^^^719^749^int costDeltaBlock = inlineCostDelta ( fnNode, namesToAlias, InliningMode.BLOCK ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P8_Replace_Mix]^int costDeltaBlock = inlineReturnValue ( fnNode, namesToAlias, InliningMode.mode ) ;^734^735^^^^719^749^int costDeltaBlock = inlineCostDelta ( fnNode, namesToAlias, InliningMode.BLOCK ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P11_Insert_Donor_Statement]^int costDeltaDirect = inlineCostDelta ( fnNode, namesToAlias, InliningMode.DIRECT ) ;int costDeltaBlock = inlineCostDelta ( fnNode, namesToAlias, InliningMode.BLOCK ) ;^734^735^^^^719^749^int costDeltaBlock = inlineCostDelta ( fnNode, namesToAlias, InliningMode.BLOCK ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P8_Replace_Mix]^int costDeltaBlock = inlineReturnValue ( injectionPointParent, namesToAlias, InliningMode.BLOCK ) ;^734^735^^^^719^749^int costDeltaBlock = inlineCostDelta ( fnNode, namesToAlias, InliningMode.BLOCK ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P14_Delete_Statement]^^734^735^^^^719^749^int costDeltaBlock = inlineCostDelta ( fnNode, namesToAlias, InliningMode.BLOCK ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( parent, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, costDeltaDirect, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, overallCallCost, overallCallCost, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, overallCallCost, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, overallCallCost, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, referencesUsingDirectInlining, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isCallInLoop ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost (  overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode,  referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, overallCallCost,  costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining,  referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect,  costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining,  isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( costDeltaBlock, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, fnNode, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, referencesUsingBlockInlining, referencesUsingDirectInlining, costDeltaDirect, overallCallCost, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, referencesUsingDirectInlining, overallCallCost, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, referencesUsingBlockInlining, costDeltaDirect, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingBlockInlining, costDeltaDirect, referencesUsingDirectInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaBlock, referencesUsingBlockInlining, costDeltaDirect, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, isRemovable, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, overallCallCost ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P8_Replace_Mix]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, referencesUsingDirectInlining, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, referencesUsingDirectInlining, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingDirectInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, referenceCount, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, needsDefaultReturnResult ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( referencesUsingBlockInlining, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, fnNode, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, overallCallCost, costDeltaBlock, costDeltaDirect, referencesUsingBlockInlining, referencesUsingDirectInlining, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, overallCallCost, costDeltaDirect, referencesUsingDirectInlining, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P5_Replace_Variable]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, isRemovable, costDeltaBlock ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[P1_Replace_Type]^short  fnInstanceCount = directInlines + blockInlines -  ( removable ? 1 : 0 ) ;^757^^^^^750^774^int fnInstanceCount = directInlines + blockInlines -  ( removable ? 1 : 0 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^int fnInstanceCount = directInlines + blockInlines   instanceof    ( removable ? 1 : 0 ) ;^757^^^^^750^774^int fnInstanceCount = directInlines + blockInlines -  ( removable ? 1 : 0 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^int fnInstanceCount = directInlines  <  blockInlines -  ( removable ? 1 : 0 ) ;^757^^^^^750^774^int fnInstanceCount = directInlines + blockInlines -  ( removable ? 1 : 0 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P3_Replace_Literal]^int fnInstanceCount = directInlines + blockInlines -  ( removable ?  : 0 ) ;^757^^^^^750^774^int fnInstanceCount = directInlines + blockInlines -  ( removable ? 1 : 0 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P3_Replace_Literal]^int fnInstanceCount = directInlines + blockInlines -  ( removable ? 1 :  ) ;^757^^^^^750^774^int fnInstanceCount = directInlines + blockInlines -  ( removable ? 1 : 0 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int fnInstanceCount = threshold + blockInlines -  ( removable ? 1 : 0 ) ;^757^^^^^750^774^int fnInstanceCount = directInlines + blockInlines -  ( removable ? 1 : 0 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int fnInstanceCount = directInlines + overallCallCost -  ( removable ? 1 : 0 ) ;^757^^^^^750^774^int fnInstanceCount = directInlines + blockInlines -  ( removable ? 1 : 0 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int fnInstanceCount = directInlines + blockInlines -  ( isCallInLoop ? 1 : 0 ) ;^757^^^^^750^774^int fnInstanceCount = directInlines + blockInlines -  ( removable ? 1 : 0 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int fnInstanceCount = blockInlines + directInlines -  ( removable ? 1 : 0 ) ;^757^^^^^750^774^int fnInstanceCount = directInlines + blockInlines -  ( removable ? 1 : 0 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int fnInstanceCount = directInlines + removable -  ( blockInlines ? 1 : 0 ) ;^757^^^^^750^774^int fnInstanceCount = directInlines + blockInlines -  ( removable ? 1 : 0 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P6_Replace_Expression]^int fnInstanceCount  =  0 ) ;^757^^^^^750^774^int fnInstanceCount = directInlines + blockInlines -  ( removable ? 1 : 0 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P6_Replace_Expression]^int fnInstanceCount  =  1 ;^757^^^^^750^774^int fnInstanceCount = directInlines + blockInlines -  ( removable ? 1 : 0 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^if  ( fnInstanceCount >= 0 )  {^759^^^^^750^774^if  ( fnInstanceCount == 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P3_Replace_Literal]^if  ( fnInstanceCount == threshold )  {^759^^^^^750^774^if  ( fnInstanceCount == 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P3_Replace_Literal]^if  ( fnInstanceCount == directInlines )  {^759^^^^^750^774^if  ( fnInstanceCount == 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P3_Replace_Literal]^if  ( fnInstanceCount == referencesUsingDirectInlining )  {^759^^^^^750^774^if  ( fnInstanceCount == 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^if  ( threshold == 0 )  {^759^^^^^750^774^if  ( fnInstanceCount == 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P6_Replace_Expression]^if  ( blockInlines > 0 && costDeltaBlock > 0 )  {^759^^^^^750^774^if  ( fnInstanceCount == 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P6_Replace_Expression]^if  ( blockInlines > 0 )  {^759^^^^^750^774^if  ( fnInstanceCount == 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P6_Replace_Expression]^if  ( costDeltaBlock > 0 )  {^759^^^^^750^774^if  ( fnInstanceCount == 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P8_Replace_Mix]^if  ( fnInstanceCount == 1 )  {^759^^^^^750^774^if  ( fnInstanceCount == 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P9_Replace_Statement]^if  ( referenceCount == 0 )  {^759^^^^^750^774^if  ( fnInstanceCount == 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P13_Insert_Block]^if  (  ( blockInlines > 0 )  &&  ( costDeltaBlock > 0 )  )  {     return false; }^759^^^^^750^774^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^if  ( blockInlines > 0 || costDeltaBlock > 0 )  {^763^^^^^750^774^if  ( blockInlines > 0 && costDeltaBlock > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^if  ( blockInlines >= 0 && costDeltaBlock > 0 )  {^763^^^^^750^774^if  ( blockInlines > 0 && costDeltaBlock > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^if  ( blockInlines > 0 && costDeltaBlock == 0 )  {^763^^^^^750^774^if  ( blockInlines > 0 && costDeltaBlock > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P3_Replace_Literal]^if  ( blockInlines > 4 && costDeltaBlock > 4 )  {^763^^^^^750^774^if  ( blockInlines > 0 && costDeltaBlock > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P3_Replace_Literal]^if  ( blockInlines > directInlines && costDeltaBlock > directInlines )  {^763^^^^^750^774^if  ( blockInlines > 0 && costDeltaBlock > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^if  ( fnInstanceCount > 0 && costDeltaBlock > 0 )  {^763^^^^^750^774^if  ( blockInlines > 0 && costDeltaBlock > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^if  ( blockInlines > 0 && fnInstanceCount > 0 )  {^763^^^^^750^774^if  ( blockInlines > 0 && costDeltaBlock > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^if  ( costDeltaBlock > 0 && blockInlines > 0 )  {^763^^^^^750^774^if  ( blockInlines > 0 && costDeltaBlock > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P6_Replace_Expression]^if  ( blockInlines > 0 ) {^763^^^^^750^774^if  ( blockInlines > 0 && costDeltaBlock > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P6_Replace_Expression]^if  (  costDeltaBlock > 0 )  {^763^^^^^750^774^if  ( blockInlines > 0 && costDeltaBlock > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P8_Replace_Mix]^if  ( blockInlines > 0 >>> 4 && referenceCount > 0 >>> 4 )  {^763^^^^^750^774^if  ( blockInlines > 0 && costDeltaBlock > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P15_Unwrap_Block]^return false;^763^764^765^^^750^774^if  ( blockInlines > 0 && costDeltaBlock > 0 )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P16_Remove_Block]^^763^764^765^^^750^774^if  ( blockInlines > 0 && costDeltaBlock > 0 )  { return false; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P13_Insert_Block]^if  ( fnContainsVars && callerContainsFunction )  {     return false; }^763^^^^^750^774^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P13_Insert_Block]^if  ( fnInstanceCount == 0 )  {     if  (  ( blockInlines > 0 )  &&  ( costDeltaBlock > 0 )  )  {         return false;     }     return true; }^763^^^^^750^774^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P3_Replace_Literal]^return true;^764^^^^^750^774^return false;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P3_Replace_Literal]^return false;^766^^^^^750^774^return true;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^if  ( blockInlines < 0 && costDeltaBlock > 0 )  {^763^^^^^750^774^if  ( blockInlines > 0 && costDeltaBlock > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^if  ( blockInlines > 0 && costDeltaBlock >= 0 )  {^763^^^^^750^774^if  ( blockInlines > 0 && costDeltaBlock > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P3_Replace_Literal]^if  ( blockInlines > referencesUsingBlockInlining && costDeltaBlock > referencesUsingBlockInlining )  {^763^^^^^750^774^if  ( blockInlines > 0 && costDeltaBlock > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P3_Replace_Literal]^if  ( blockInlines > -9 && costDeltaBlock > -9 )  {^763^^^^^750^774^if  ( blockInlines > 0 && costDeltaBlock > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P8_Replace_Mix]^if  (  costDeltaBlock > 0 * 1 )  {^763^^^^^750^774^if  ( blockInlines > 0 && costDeltaBlock > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P1_Replace_Type]^long  costDelta =  ( directInlines * costDeltaDirect )  + ( blockInlines * costDeltaBlock ) ;^769^770^^^^750^774^int costDelta =  ( directInlines * costDeltaDirect )  + ( blockInlines * costDeltaBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^int costDelta =  <  ( directInlines * costDeltaDirect )  + ( blockInlines * costDeltaBlock ) ;^769^770^^^^750^774^int costDelta =  ( directInlines * costDeltaDirect )  + ( blockInlines * costDeltaBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^int costDelta =  ( directInlines + costDeltaDirect )  + ( blockInlines * costDeltaBlock ) ;^769^770^^^^750^774^int costDelta =  ( directInlines * costDeltaDirect )  + ( blockInlines * costDeltaBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^int costDelta =  ( directInlines * costDeltaDirect )  + ( blockInlines + costDeltaBlock ) ;^769^770^^^^750^774^int costDelta =  ( directInlines * costDeltaDirect )  + ( blockInlines * costDeltaBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int costDelta =  ( threshold * costDeltaDirect )  + ( blockInlines * costDeltaBlock ) ;^769^770^^^^750^774^int costDelta =  ( directInlines * costDeltaDirect )  + ( blockInlines * costDeltaBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int costDelta =  ( directInlines * referencesUsingDirectInlining )  + ( blockInlines * costDeltaBlock ) ;^769^770^^^^750^774^int costDelta =  ( directInlines * costDeltaDirect )  + ( blockInlines * costDeltaBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int costDelta =  ( directInlines * costDeltaDirect )  + ( referenceCount * costDeltaBlock ) ;^769^770^^^^750^774^int costDelta =  ( directInlines * costDeltaDirect )  + ( blockInlines * costDeltaBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int costDelta =  ( directInlines * costDeltaDirect )  + ( blockInlines * overallCallCost ) ;^769^770^^^^750^774^int costDelta =  ( directInlines * costDeltaDirect )  + ( blockInlines * costDeltaBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int costDelta =  ( blockInlines * costDeltaDirect )  + ( directInlines * costDeltaBlock ) ;^769^770^^^^750^774^int costDelta =  ( directInlines * costDeltaDirect )  + ( blockInlines * costDeltaBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int costDelta =  ( costDeltaDirect * directInlines )  + ( blockInlines * costDeltaBlock ) ;^769^770^^^^750^774^int costDelta =  ( directInlines * costDeltaDirect )  + ( blockInlines * costDeltaBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int costDelta =  ( directInlines * costDeltaDirect )  + ( costDeltaBlock * blockInlines ) ;^769^770^^^^750^774^int costDelta =  ( directInlines * costDeltaDirect )  + ( blockInlines * costDeltaBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P8_Replace_Mix]^int costDelta =  ( directInlines * costDeltaDirect )  + ( blockInlines * fnInstanceCount ) ;^769^770^^^^750^774^int costDelta =  ( directInlines * costDeltaDirect )  + ( blockInlines * costDeltaBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P1_Replace_Type]^long  threshold =  ( callCost - costDelta )  / fnInstanceCount;^771^^^^^750^774^int threshold =  ( callCost - costDelta )  / fnInstanceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^int threshold =  ( callCost - costDelta )  * fnInstanceCount;^771^^^^^750^774^int threshold =  ( callCost - costDelta )  / fnInstanceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^int threshold =  ( callCost  <  costDelta )  / fnInstanceCount;^771^^^^^750^774^int threshold =  ( callCost - costDelta )  / fnInstanceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int threshold =  ( referencesUsingBlockInlining - costDelta )  / fnInstanceCount;^771^^^^^750^774^int threshold =  ( callCost - costDelta )  / fnInstanceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int threshold =  ( callCost - directInlines )  / fnInstanceCount;^771^^^^^750^774^int threshold =  ( callCost - costDelta )  / fnInstanceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int threshold =  ( callCost - costDelta )  / referencesUsingBlockInlining;^771^^^^^750^774^int threshold =  ( callCost - costDelta )  / fnInstanceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int threshold =  ( fnInstanceCount - costDelta )  / callCost;^771^^^^^750^774^int threshold =  ( callCost - costDelta )  / fnInstanceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int threshold =  ( costDelta - callCost )  / fnInstanceCount;^771^^^^^750^774^int threshold =  ( callCost - costDelta )  / fnInstanceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int threshold =  ( callCost - fnInstanceCount )  / costDelta;^771^^^^^750^774^int threshold =  ( callCost - costDelta )  / fnInstanceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P8_Replace_Mix]^int threshold =  ( callCost - costDelta )  / overallCallCost;^771^^^^^750^774^int threshold =  ( callCost - costDelta )  / fnInstanceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^return InlineCostEstimator.getCost ( fnNode, threshold + 1 )  < threshold;^773^^^^^750^774^return InlineCostEstimator.getCost ( fnNode, threshold + 1 )  <= threshold;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^return InlineCostEstimator.getCost ( fnNode, threshold  &  1 )  <= threshold;^773^^^^^750^774^return InlineCostEstimator.getCost ( fnNode, threshold + 1 )  <= threshold;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P3_Replace_Literal]^return InlineCostEstimator.getCost ( fnNode, threshold + COMMA_COST )  <= threshold;^773^^^^^750^774^return InlineCostEstimator.getCost ( fnNode, threshold + 1 )  <= threshold;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^return InlineCostEstimator.getCost ( injectionPointParent, threshold + 1 )  <= threshold;^773^^^^^750^774^return InlineCostEstimator.getCost ( fnNode, threshold + 1 )  <= threshold;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^return InlineCostEstimator.getCost ( fnNode, costDeltaDirect + 1 )  <= threshold;^773^^^^^750^774^return InlineCostEstimator.getCost ( fnNode, threshold + 1 )  <= threshold;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^return InlineCostEstimator.getCost (  threshold + 1 )  <= threshold;^773^^^^^750^774^return InlineCostEstimator.getCost ( fnNode, threshold + 1 )  <= threshold;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^return InlineCostEstimator.getCost ( fnNode + 1 )  <= threshold;^773^^^^^750^774^return InlineCostEstimator.getCost ( fnNode, threshold + 1 )  <= threshold;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^return InlineCostEstimator.getCost ( threshold, fnNode + 1 )  <= threshold;^773^^^^^750^774^return InlineCostEstimator.getCost ( fnNode, threshold + 1 )  <= threshold;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P8_Replace_Mix]^return InlineCostEstimator.getCost ( fnNode, threshold + 1L )   ;^773^^^^^750^774^return InlineCostEstimator.getCost ( fnNode, threshold + 1 )  <= threshold;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^return InlineCostEstimator.getCost ( fnNode, threshold  <<  1 )  <= threshold;^773^^^^^750^774^return InlineCostEstimator.getCost ( fnNode, threshold + 1 )  <= threshold;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P3_Replace_Literal]^return InlineCostEstimator.getCost ( fnNode, threshold + costDeltaDirect )  <= threshold;^773^^^^^750^774^return InlineCostEstimator.getCost ( fnNode, threshold + 1 )  <= threshold;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^return InlineCostEstimator.getCost ( parent, threshold + 1 )  <= threshold;^773^^^^^750^774^return InlineCostEstimator.getCost ( fnNode, threshold + 1 )  <= threshold;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^return InlineCostEstimator.getCost ( fnNode, referencesUsingBlockInlining + 1 )  <= threshold;^773^^^^^750^774^return InlineCostEstimator.getCost ( fnNode, threshold + 1 )  <= threshold;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P14_Delete_Statement]^^773^^^^^750^774^return InlineCostEstimator.getCost ( fnNode, threshold + 1 )  <= threshold;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^Node argsNode = NodeUtil.getFnParameters ( injectionPointParent ) ;^782^^^^^781^799^Node argsNode = NodeUtil.getFnParameters ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P7_Replace_Invocation]^Node argsNode = NodeUtil.getFunctionBody ( fnNode ) ;^782^^^^^781^799^Node argsNode = NodeUtil.getFnParameters ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P11_Insert_Donor_Statement]^int paramCount = NodeUtil.getFnParameters ( fnNode ) .getChildCount (  ) ;Node argsNode = NodeUtil.getFnParameters ( fnNode ) ;^782^^^^^781^799^Node argsNode = NodeUtil.getFnParameters ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P11_Insert_Donor_Statement]^Node block = NodeUtil.getFunctionBody ( fnNode ) ;Node argsNode = NodeUtil.getFnParameters ( fnNode ) ;^782^^^^^781^799^Node argsNode = NodeUtil.getFnParameters ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P11_Insert_Donor_Statement]^Node fnParam = NodeUtil.getFnParameters ( fnNode ) .getFirstChild (  ) ;Node argsNode = NodeUtil.getFnParameters ( fnNode ) ;^782^^^^^781^799^Node argsNode = NodeUtil.getFnParameters ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^Node argsNode = NodeUtil.getFnParameters ( injectionPoint ) ;^782^^^^^781^799^Node argsNode = NodeUtil.getFnParameters ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P7_Replace_Invocation]^Node argsNode = NodeUtil .getNameReferenceCount ( injectionPoint )  ;^782^^^^^781^799^Node argsNode = NodeUtil.getFnParameters ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P8_Replace_Mix]^Node argsNode = NodeUtil.getFunctionBody ( injectionPoint ) ;^782^^^^^781^799^Node argsNode = NodeUtil.getFnParameters ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P14_Delete_Statement]^^782^^^^^781^799^Node argsNode = NodeUtil.getFnParameters ( fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P1_Replace_Type]^short  numArgs = argsNode.getChildCount (  ) ;^783^^^^^781^799^int numArgs = argsNode.getChildCount (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int numArgs = greatGrandParent.getChildCount (  ) ;^783^^^^^781^799^int numArgs = argsNode.getChildCount (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P7_Replace_Invocation]^int numArgs = argsNode.newString (  ) ;^783^^^^^781^799^int numArgs = argsNode.getChildCount (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P11_Insert_Donor_Statement]^Node parent = callNode.getParent (  ) ;int numArgs = argsNode.getChildCount (  ) ;^783^^^^^781^799^int numArgs = argsNode.getChildCount (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int numArgs = inlineResult.getChildCount (  ) ;^783^^^^^781^799^int numArgs = argsNode.getChildCount (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P8_Replace_Mix]^int numArgs = newExpression.getChildCount (  ) ;^783^^^^^781^799^int numArgs = argsNode.getChildCount (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P14_Delete_Statement]^^783^^^^^781^799^int numArgs = argsNode.getChildCount (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P1_Replace_Type]^short  callCost = NAME_COST_ESTIMATE + PAREN_COST;^785^^^^^781^799^int callCost = NAME_COST_ESTIMATE + PAREN_COST;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int callCost = threshold + PAREN_COST;^785^^^^^781^799^int callCost = NAME_COST_ESTIMATE + PAREN_COST;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int callCost = NAME_COST_ESTIMATE + threshold;^785^^^^^781^799^int callCost = NAME_COST_ESTIMATE + PAREN_COST;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^int callCost = PAREN_COST + NAME_COST_ESTIMATE;^785^^^^^781^799^int callCost = NAME_COST_ESTIMATE + PAREN_COST;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P8_Replace_Mix]^int callCost = NAME_COST_ESTIMATE + overallCallCost;^785^^^^^781^799^int callCost = NAME_COST_ESTIMATE + PAREN_COST;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^if  ( numArgs >= 0 )  {^786^^^^^781^799^if  ( numArgs > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P3_Replace_Literal]^if  ( numArgs > -7 )  {^786^^^^^781^799^if  ( numArgs > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^if  ( overallCallCost > 0 )  {^786^^^^^781^799^if  ( numArgs > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P6_Replace_Expression]^if  ( numArgs * NAME_COST_ESTIMATE + (numArgs - 1) * COMMA_COST )  {^786^^^^^781^799^if  ( numArgs > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P6_Replace_Expression]^if  ( numArgs * NAME_COST_ESTIMATE )  {^786^^^^^781^799^if  ( numArgs > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P6_Replace_Expression]^if  ( numArgs - 1 * COMMA_COST )  {^786^^^^^781^799^if  ( numArgs > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P6_Replace_Expression]^if  ( numArgs - 1 )  {^786^^^^^781^799^if  ( numArgs > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P8_Replace_Mix]^if  ( numArgs > 0 << 4 )  {^786^^^^^781^799^if  ( numArgs > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P9_Replace_Statement]^if  ( hasArgs )  {^786^^^^^781^799^if  ( numArgs > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P15_Unwrap_Block]^callCost += (numArgs * (com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE)) + ((numArgs - 1) * (com.google.javascript.jscomp.FunctionInjector.COMMA_COST));^786^787^788^^^781^799^if  ( numArgs > 0 )  { callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P16_Remove_Block]^^786^787^788^^^781^799^if  ( numArgs > 0 )  { callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P13_Insert_Block]^if  (  ( ! ( allowDecomposition )  )  &&  ( callSiteType ==  ( DECOMPOSABLE_EXPRESSION )  )  )  {     return NO; }^786^^^^^781^799^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P13_Insert_Block]^if  ( callSiteType ==  ( UNSUPPORTED )  )  {     return NO; }^786^^^^^781^799^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^callCost +=  &&  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^callCost +=  ( numArgs / NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^callCost + +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs  <  1 )  * COMMA_COST ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P3_Replace_Literal]^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - threshold )  * COMMA_COST ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^callCost +=  ( fnInstanceCount * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^callCost +=  ( numArgs * referencesUsingBlockInlining )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * referencesUsingDirectInlining ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^callCost +=  ( COMMA_COST * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * numArgs ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^callCost +=  ( numArgs * COMMA_COST )  +  (  ( numArgs - 1 )  * NAME_COST_ESTIMATE ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P8_Replace_Mix]^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1L )  * COMMA_COST ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P13_Insert_Block]^if  ( numArgs > 0 )  {     callCost +=  ( numArgs *  ( NAME_COST_ESTIMATE )  )  +  (  ( numArgs - 1 )  *  ( COMMA_COST )  ) ; }^787^^^^^781^799^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P13_Insert_Block]^if  (  ( ! ( allowDecomposition )  )  &&  ( callSiteType ==  ( DECOMPOSABLE_EXPRESSION )  )  )  {     return NO; }^787^^^^^781^799^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P13_Insert_Block]^if  ( callSiteType ==  ( UNSUPPORTED )  )  {     return NO; }^787^^^^^781^799^[Delete]^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^callCost +=  >>  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^callCost / +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P2_Replace_Operator]^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs  &  1 )  * COMMA_COST ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P3_Replace_Literal]^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs  )  * COMMA_COST ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^callCost +=  ( numArgs * fnInstanceCount )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * threshold ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^callCost +=  ( NAME_COST_ESTIMATE * numArgs )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P8_Replace_Mix]^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 4 )  * COMMA_COST ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^if  ( removable )  {^790^^^^^781^799^if  ( referencesThis )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P9_Replace_Statement]^if  ( referenceCount == 0 )  {^790^^^^^781^799^if  ( referencesThis )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P3_Replace_Literal]^callCost += 5 ;^795^^^^^781^799^callCost += 5 + 5;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P8_Replace_Mix]^callCost += 3 + 3;^795^^^^^781^799^callCost += 5 + 5;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P3_Replace_Literal]^callCost += costDeltaBlock + costDeltaBlock;^795^^^^^781^799^callCost += 5 + 5;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P8_Replace_Mix]^callCost += 5 >> 1 + 5 >> 1;^795^^^^^781^799^callCost += 5 + 5;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P5_Replace_Variable]^return fnInstanceCount;^798^^^^^781^799^return callCost;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[P1_Replace_Type]^short  paramCount = NodeUtil.getFnParameters ( fnNode ) .getChildCount (  ) ;^809^^^^^794^824^int paramCount = NodeUtil.getFnParameters ( fnNode ) .getChildCount (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int paramCount = NodeUtil.getFnParameters ( injectionPoint ) .getChildCount (  ) ;^809^^^^^794^824^int paramCount = NodeUtil.getFnParameters ( fnNode ) .getChildCount (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P7_Replace_Invocation]^int paramCount = NodeUtil.getFnParameters ( fnNode )  .hasChildren (  )  ;^809^^^^^794^824^int paramCount = NodeUtil.getFnParameters ( fnNode ) .getChildCount (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P7_Replace_Invocation]^int paramCount = NodeUtil.getFunctionBody ( fnNode ) .getChildCount (  ) ;^809^^^^^794^824^int paramCount = NodeUtil.getFnParameters ( fnNode ) .getChildCount (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^Node argsNode = NodeUtil.getFnParameters ( fnNode ) ;int paramCount = NodeUtil.getFnParameters ( fnNode ) .getChildCount (  ) ;^809^^^^^794^824^int paramCount = NodeUtil.getFnParameters ( fnNode ) .getChildCount (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^Node fnParam = NodeUtil.getFnParameters ( fnNode ) .getFirstChild (  ) ;int paramCount = NodeUtil.getFnParameters ( fnNode ) .getChildCount (  ) ;^809^^^^^794^824^int paramCount = NodeUtil.getFnParameters ( fnNode ) .getChildCount (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int paramCount = NodeUtil.getFnParameters ( greatGrandParent ) .getChildCount (  ) ;^809^^^^^794^824^int paramCount = NodeUtil.getFnParameters ( fnNode ) .getChildCount (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P14_Delete_Statement]^^809^810^^^^794^824^int paramCount = NodeUtil.getFnParameters ( fnNode ) .getChildCount (  ) ; int commaCount =  ( paramCount > 1 )  ? paramCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P14_Delete_Statement]^^809^^^^^794^824^int paramCount = NodeUtil.getFnParameters ( fnNode ) .getChildCount (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P1_Replace_Type]^short  commaCount =  ( paramCount > 1 )  ? paramCount - 1 : 0;^810^^^^^795^825^int commaCount =  ( paramCount > 1 )  ? paramCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^int commaCount =  ( paramCount >= 1 )  ? paramCount - 1 : 0;^810^^^^^795^825^int commaCount =  ( paramCount > 1 )  ? paramCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^int commaCount =  ( paramCount > 1 )  ? paramCount  >>  1 : 0;^810^^^^^795^825^int commaCount =  ( paramCount > 1 )  ? paramCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^int commaCount =  ( paramCount > 1 )  ? paramCount  : 0;^810^^^^^795^825^int commaCount =  ( paramCount > 1 )  ? paramCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^int commaCount =  ( paramCount > fnInstanceCount )  ? paramCount - fnInstanceCount : 0;^810^^^^^795^825^int commaCount =  ( paramCount > 1 )  ? paramCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^int commaCount =  ( paramCount > 1 )  ? paramCount - 1 : -7;^810^^^^^795^825^int commaCount =  ( paramCount > 1 )  ? paramCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int commaCount =  ( directInlines > 1 )  ? paramCount - 1 : 0;^810^^^^^795^825^int commaCount =  ( paramCount > 1 )  ? paramCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P6_Replace_Expression]^int commaCount  =  0;^810^^^^^795^825^int commaCount =  ( paramCount > 1 )  ? paramCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P6_Replace_Expression]^int commaCount  =  paramCount - 1 ;^810^^^^^795^825^int commaCount =  ( paramCount > 1 )  ? paramCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^int commaCount =  ( fnInstanceCount > 1 )  ? paramCount - 1 : 0;^810^^^^^795^825^int commaCount =  ( paramCount > 1 )  ? paramCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^int resultCount =  ( returnCount > 0 )  ? returnCount - 1 : 0;int commaCount =  ( paramCount > 1 )  ? paramCount - 1 : 0;^810^^^^^795^825^int commaCount =  ( paramCount > 1 )  ? paramCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P1_Replace_Type]^long  costDeltaFunctionOverhead = 15 + commaCount + ( paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^811^812^^^^796^826^int costDeltaFunctionOverhead = 15 + commaCount + ( paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^int costDeltaFunctionOverhead = 15  &  commaCount + ( paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^811^812^^^^796^826^int costDeltaFunctionOverhead = 15 + commaCount + ( paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^int costDeltaFunctionOverhead = 15 + commaCount + ( paramCount + InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^811^812^^^^796^826^int costDeltaFunctionOverhead = 15 + commaCount + ( paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^int costDeltaFunctionOverhead = 24 + commaCount + ( paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^811^812^^^^796^826^int costDeltaFunctionOverhead = 15 + commaCount + ( paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int costDeltaFunctionOverhead = 15 + numArgs + ( paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^811^812^^^^796^826^int costDeltaFunctionOverhead = 15 + commaCount + ( paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int costDeltaFunctionOverhead = 15 + commaCount + ( costDeltaDirect * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^811^812^^^^796^826^int costDeltaFunctionOverhead = 15 + commaCount + ( paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int costDeltaFunctionOverhead = 15 + paramCount + ( commaCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^811^812^^^^796^826^int costDeltaFunctionOverhead = 15 + commaCount + ( paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int costDeltaFunctionOverhead = 15 + commaCount + ( InlineCostEstimator.ESTIMATED_IDENTIFIER_COST * paramCount ) ;^811^812^^^^796^826^int costDeltaFunctionOverhead = 15 + commaCount + ( paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^int costDeltaFunctionOverhead = 15 + fnInstanceCount + ( paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^811^812^^^^796^826^int costDeltaFunctionOverhead = 15 + commaCount + ( paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^Node block = newBlock.getLastChild (  ) ;^814^^^^^799^829^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P7_Replace_Invocation]^Node block = fnNode.newString (  ) ;^814^^^^^799^829^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P7_Replace_Invocation]^Node block = fnNode .getFirstChild (  )  ;^814^^^^^799^829^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^Node block = injectionPoint.newString (  ) ;^814^^^^^799^829^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^Node returnNode = block.getFirstChild (  ) ;Node block = fnNode.getLastChild (  ) ;^814^^^^^799^829^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^Node fnCallerBody = fnCaller.getLastChild (  ) ;Node block = fnNode.getLastChild (  ) ;^814^^^^^799^829^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;Node block = fnNode.getLastChild (  ) ;^814^^^^^799^829^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^Node parent = callNode.getParent (  ) ;Node block = fnNode.getLastChild (  ) ;^814^^^^^799^829^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^Node block = NodeUtil.getFunctionBody ( fnNode ) ;Node block = fnNode.getLastChild (  ) ;^814^^^^^799^829^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^Node block = greatGrandParent.getLastChild (  ) ;^814^^^^^799^829^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^Node block = injectionPointParent.newString (  ) ;^814^^^^^799^829^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P14_Delete_Statement]^^814^^^^^799^829^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P7_Replace_Invocation]^if  ( !block.newString (  )  )  {^815^^^^^800^830^if  ( !block.hasChildren (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^if  ( !block .addChildAfter ( returnNode , returnNode )   )  {^815^^^^^800^830^if  ( !block.hasChildren (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P15_Unwrap_Block]^return -costDeltaFunctionOverhead;^815^816^817^818^^800^830^if  ( !block.hasChildren (  )  )  {  return -costDeltaFunctionOverhead; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P16_Remove_Block]^^815^816^817^818^^800^830^if  ( !block.hasChildren (  )  )  {  return -costDeltaFunctionOverhead; }^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^if  ( mode >= InliningMode.DIRECT )  {^820^^^^^805^835^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^if  ( DIRECT == InliningMode.DIRECT )  {^820^^^^^805^835^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^if  ( mode == InliningMode.mode )  {^820^^^^^805^835^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P6_Replace_Expression]^if  ( costDeltaFunctionOverhead + 7 )  {^820^^^^^805^835^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P6_Replace_Expression]^if  ( returnCount > 0 )  {^820^^^^^805^835^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P6_Replace_Expression]^if  ( returnCount - 1 )  {^820^^^^^805^835^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P6_Replace_Expression]^if  ( (baseOverhead + (returnCount * PER_RETURN_OVERHEAD)) + (resultCount * PER_RETURN_RESULT_OVERHEAD) + aliasCount * PER_ALIAS_OVERHEAD )  {^820^^^^^805^835^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P6_Replace_Expression]^if  ( baseOverhead +  ( returnCount * PER_RETURN_OVERHEAD )  + resultCount * PER_RETURN_RESULT_OVERHEAD )  {^820^^^^^805^835^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P6_Replace_Expression]^if  ( baseOverhead + returnCount * PER_RETURN_OVERHEAD )  {^820^^^^^805^835^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P6_Replace_Expression]^if  ( returnCount * PER_RETURN_OVERHEAD )  {^820^^^^^805^835^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P6_Replace_Expression]^if  ( resultCount * PER_RETURN_RESULT_OVERHEAD )  {^820^^^^^805^835^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P6_Replace_Expression]^if  ( aliasCount * PER_ALIAS_OVERHEAD )  {^820^^^^^805^835^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P6_Replace_Expression]^if  ( overhead - costDeltaFunctionOverhead )  {^820^^^^^805^835^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P9_Replace_Statement]^if  ( ref.mode == InliningMode.BLOCK )  {^820^^^^^805^835^if  ( mode == InliningMode.DIRECT )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^return  ( overhead  ^  costDeltaFunctionOverhead ) ;^853^^^^^838^868^return  ( overhead - costDeltaFunctionOverhead ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^return  ( overallCallCost - costDeltaFunctionOverhead ) ;^853^^^^^838^868^return  ( overhead - costDeltaFunctionOverhead ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^return  ( overhead - costDeltaDirect ) ;^853^^^^^838^868^return  ( overhead - costDeltaFunctionOverhead ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^return  ( costDeltaFunctionOverhead - overhead ) ;^853^^^^^838^868^return  ( overhead - costDeltaFunctionOverhead ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^return  ( directInlines - directInlines ) ;^853^^^^^838^868^return  ( overhead - costDeltaFunctionOverhead ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P1_Replace_Type]^short  aliasCount = namesToAlias.size (  ) ;^825^^^^^810^840^int aliasCount = namesToAlias.size (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^int aliasCount = namesToAlias.size() + 2 ;^825^^^^^810^840^int aliasCount = namesToAlias.size (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^int referenceCount = refs.size (  ) ;int aliasCount = namesToAlias.size (  ) ;^825^^^^^810^840^int aliasCount = namesToAlias.size (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P1_Replace_Type]^final  short  INLINE_BLOCK_OVERHEAD = 4;^836^^^^^821^851^final int INLINE_BLOCK_OVERHEAD = 4;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^final int INLINE_BLOCK_OVERHEAD = ;^836^^^^^821^851^final int INLINE_BLOCK_OVERHEAD = 4;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^final int PER_ALIAS_OVERHEAD = 3;final int INLINE_BLOCK_OVERHEAD = 4;^836^^^^^821^851^final int INLINE_BLOCK_OVERHEAD = 4;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^final int PER_RETURN_RESULT_OVERHEAD = 3;final int INLINE_BLOCK_OVERHEAD = 4;^836^^^^^821^851^final int INLINE_BLOCK_OVERHEAD = 4;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^final int PER_RETURN_OVERHEAD = 2;final int INLINE_BLOCK_OVERHEAD = 4;^836^^^^^821^851^final int INLINE_BLOCK_OVERHEAD = 4;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P1_Replace_Type]^final  long  PER_RETURN_OVERHEAD = 2;^837^^^^^822^852^final int PER_RETURN_OVERHEAD = 2;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^final int PER_RETURN_OVERHEAD = NAME_COST_ESTIMATE;^837^^^^^822^852^final int PER_RETURN_OVERHEAD = 2;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^final int PER_ALIAS_OVERHEAD = 3;final int PER_RETURN_OVERHEAD = 2;^837^^^^^822^852^final int PER_RETURN_OVERHEAD = 2;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^final int PER_RETURN_RESULT_OVERHEAD = 3;final int PER_RETURN_OVERHEAD = 2;^837^^^^^822^852^final int PER_RETURN_OVERHEAD = 2;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^final int INLINE_BLOCK_OVERHEAD = 4;final int PER_RETURN_OVERHEAD = 2;^837^^^^^822^852^final int PER_RETURN_OVERHEAD = 2;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P1_Replace_Type]^final  short  PER_RETURN_RESULT_OVERHEAD = 3;^838^^^^^823^853^final int PER_RETURN_RESULT_OVERHEAD = 3;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^final int PER_RETURN_RESULT_OVERHEAD = -3;^838^^^^^823^853^final int PER_RETURN_RESULT_OVERHEAD = 3;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^final int PER_ALIAS_OVERHEAD = 3;final int PER_RETURN_RESULT_OVERHEAD = 3;^838^^^^^823^853^final int PER_RETURN_RESULT_OVERHEAD = 3;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^final int PER_RETURN_OVERHEAD = 2;final int PER_RETURN_RESULT_OVERHEAD = 3;^838^^^^^823^853^final int PER_RETURN_RESULT_OVERHEAD = 3;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^final int INLINE_BLOCK_OVERHEAD = 4;final int PER_RETURN_RESULT_OVERHEAD = 3;^838^^^^^823^853^final int PER_RETURN_RESULT_OVERHEAD = 3;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P1_Replace_Type]^final  long  PER_ALIAS_OVERHEAD = 3;^839^^^^^824^854^final int PER_ALIAS_OVERHEAD = 3;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^final int PER_ALIAS_OVERHEAD = -4;^839^^^^^824^854^final int PER_ALIAS_OVERHEAD = 3;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^final int PER_RETURN_RESULT_OVERHEAD = 3;final int PER_ALIAS_OVERHEAD = 3;^839^^^^^824^854^final int PER_ALIAS_OVERHEAD = 3;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^final int PER_RETURN_OVERHEAD = 2;final int PER_ALIAS_OVERHEAD = 3;^839^^^^^824^854^final int PER_ALIAS_OVERHEAD = 3;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^final int INLINE_BLOCK_OVERHEAD = 4;final int PER_ALIAS_OVERHEAD = 3;^839^^^^^824^854^final int PER_ALIAS_OVERHEAD = 3;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P1_Replace_Type]^long  returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^844^^^^^829^859^int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int returnCount = NodeUtil.getNodeTypeReferenceCount ( injectionPoint, Token.RETURN ) ;^844^^^^^829^859^int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P7_Replace_Invocation]^int returnCount = NodeUtil.getNameReferenceCount ( block, Token.RETURN ) ;^844^^^^^829^859^int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^int returnCount = NodeUtil.getNameReferenceCount ( greatGrandParent, Token.RETURN ) ;^844^^^^^829^859^int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P1_Replace_Type]^short  resultCount =  ( returnCount > 0 )  ? returnCount - 1 : 0;^845^^^^^830^860^int resultCount =  ( returnCount > 0 )  ? returnCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^int resultCount =  ( returnCount >= 0 )  ? returnCount - 1 : 0;^845^^^^^830^860^int resultCount =  ( returnCount > 0 )  ? returnCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^int resultCount =  ( returnCount > 0 )  ? returnCount  &&  1 : 0;^845^^^^^830^860^int resultCount =  ( returnCount > 0 )  ? returnCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^int resultCount =  ( returnCount > PER_RETURN_OVERHEAD )  ? returnCount - 1 : PER_RETURN_OVERHEAD;^845^^^^^830^860^int resultCount =  ( returnCount > 0 )  ? returnCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^int resultCount =  ( returnCount > 0 )  ? returnCount  : 0;^845^^^^^830^860^int resultCount =  ( returnCount > 0 )  ? returnCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^int resultCount =  ( returnCount > INLINE_BLOCK_OVERHEAD )  ? returnCount - 1 : INLINE_BLOCK_OVERHEAD;^845^^^^^830^860^int resultCount =  ( returnCount > 0 )  ? returnCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int resultCount =  ( directInlines > 0 )  ? returnCount - 1 : 0;^845^^^^^830^860^int resultCount =  ( returnCount > 0 )  ? returnCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P6_Replace_Expression]^int resultCount  =  0;^845^^^^^830^860^int resultCount =  ( returnCount > 0 )  ? returnCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P6_Replace_Expression]^int resultCount  =  returnCount - 1 ;^845^^^^^830^860^int resultCount =  ( returnCount > 0 )  ? returnCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^int resultCount =  ( costDeltaDirect > 0 )  ? returnCount - 1 : 0;^845^^^^^830^860^int resultCount =  ( returnCount > 0 )  ? returnCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P1_Replace_Type]^short  baseOverhead =  ( returnCount > 0 )  ? INLINE_BLOCK_OVERHEAD : 0;^846^^^^^831^861^int baseOverhead =  ( returnCount > 0 )  ? INLINE_BLOCK_OVERHEAD : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^int baseOverhead =  ( returnCount >= 0 )  ? INLINE_BLOCK_OVERHEAD : 0;^846^^^^^831^861^int baseOverhead =  ( returnCount > 0 )  ? INLINE_BLOCK_OVERHEAD : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^int baseOverhead =  ( returnCount > threshold )  ? INLINE_BLOCK_OVERHEAD : threshold;^846^^^^^831^861^int baseOverhead =  ( returnCount > 0 )  ? INLINE_BLOCK_OVERHEAD : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int baseOverhead =  ( returnCount > 0 )  ? directInlines : 0;^846^^^^^831^861^int baseOverhead =  ( returnCount > 0 )  ? INLINE_BLOCK_OVERHEAD : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int baseOverhead =  ( INLINE_BLOCK_OVERHEAD > 0 )  ? returnCount : 0;^846^^^^^831^861^int baseOverhead =  ( returnCount > 0 )  ? INLINE_BLOCK_OVERHEAD : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P6_Replace_Expression]^int baseOverhead  =  0;^846^^^^^831^861^int baseOverhead =  ( returnCount > 0 )  ? INLINE_BLOCK_OVERHEAD : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P6_Replace_Expression]^int baseOverhead  =  INLINE_BLOCK_OVERHEAD ;^846^^^^^831^861^int baseOverhead =  ( returnCount > 0 )  ? INLINE_BLOCK_OVERHEAD : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^int baseOverhead =  ( directInlines > 0 )  ? INLINE_BLOCK_OVERHEAD : 0;^846^^^^^831^861^int baseOverhead =  ( returnCount > 0 )  ? INLINE_BLOCK_OVERHEAD : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P1_Replace_Type]^short  overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^int overhead = baseOverhead   instanceof   returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^int overhead = baseOverhead + returnCount / PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount / PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^int - overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int overhead = costDeltaFunctionOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int overhead = baseOverhead + numArgs * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int overhead = baseOverhead + returnCount * directInlines + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + fnInstanceCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * costDeltaFunctionOverhead + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + resultCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * costDeltaFunctionOverhead;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int overhead = aliasCount + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + baseOverhead * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int overhead = returnCount + baseOverhead * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int overhead = baseOverhead + returnCount * PER_RETURN_RESULT_OVERHEAD + resultCount * PER_RETURN_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int overhead = resultCount + returnCount * PER_RETURN_OVERHEAD + baseOverhead * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int overhead = baseOverhead + returnCount * PER_ALIAS_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_RETURN_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^int overhead = overallCallCost + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^int aliasCount = namesToAlias.size() + 1 ;^825^^^^^810^840^int aliasCount = namesToAlias.size (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P14_Delete_Statement]^^825^^^^^810^840^int aliasCount = namesToAlias.size (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int returnCount = NodeUtil.getNodeTypeReferenceCount ( greatGrandParent, Token.RETURN ) ;^844^^^^^829^859^int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P7_Replace_Invocation]^int returnCount = NodeUtil .getNameReferenceCount ( fnCallerBody )  ;^844^^^^^829^859^int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^int returnCount = NodeUtil.getNodeTypeReferenceCount ( newBlock, Token.RETURN ) ;^844^^^^^829^859^int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P14_Delete_Statement]^^844^845^^^^829^859^int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ; int resultCount =  ( returnCount > 0 )  ? returnCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^return - ( costDeltaFunctionOverhead  <=  7 ) ;^823^^^^^808^838^return - ( costDeltaFunctionOverhead + 7 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^return - ( costDeltaFunctionOverhead + PER_ALIAS_OVERHEAD ) ;^823^^^^^808^838^return - ( costDeltaFunctionOverhead + 7 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^return - ( fnInstanceCount + 7 ) ;^823^^^^^808^838^return - ( costDeltaFunctionOverhead + 7 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^return - ( costDeltaFunctionOverhead  &  7 ) ;^823^^^^^808^838^return - ( costDeltaFunctionOverhead + 7 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^return - ( costDeltaFunctionOverhead + costDeltaDirect ) ;^823^^^^^808^838^return - ( costDeltaFunctionOverhead + 7 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^return - (overallCallCost + 7 ) ;^823^^^^^808^838^return - ( costDeltaFunctionOverhead + 7 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^return  ( overhead  ||  costDeltaFunctionOverhead ) ;^853^^^^^838^868^return  ( overhead - costDeltaFunctionOverhead ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^return  ( costDeltaDirect - costDeltaFunctionOverhead ) ;^853^^^^^838^868^return  ( overhead - costDeltaFunctionOverhead ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^return  ( overhead - referenceCount ) ;^853^^^^^838^868^return  ( overhead - costDeltaFunctionOverhead ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^return  ( overhead -directInlines ) ;^853^^^^^838^868^return  ( overhead - costDeltaFunctionOverhead ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^int aliasCount = namesToAlias.size() + 5 ;^825^^^^^810^840^int aliasCount = namesToAlias.size (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^final int INLINE_BLOCK_OVERHEAD = fnInstanceCount;^836^^^^^821^851^final int INLINE_BLOCK_OVERHEAD = 4;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P1_Replace_Type]^final  short  PER_RETURN_OVERHEAD = 2;^837^^^^^822^852^final int PER_RETURN_OVERHEAD = 2;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^final int PER_RETURN_RESULT_OVERHEAD = 7;^838^^^^^823^853^final int PER_RETURN_RESULT_OVERHEAD = 3;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P1_Replace_Type]^final  short  PER_ALIAS_OVERHEAD = 3;^839^^^^^824^854^final int PER_ALIAS_OVERHEAD = 3;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^final int PER_ALIAS_OVERHEAD = PER_RETURN_RESULT_OVERHEAD;^839^^^^^824^854^final int PER_ALIAS_OVERHEAD = 3;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P1_Replace_Type]^short  returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^844^^^^^829^859^int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^int returnCount = NodeUtil.getNameReferenceCount ( injectionPoint, Token.RETURN ) ;^844^^^^^829^859^int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^int resultCount =  ( returnCount < 0 )  ? returnCount - 1 : 0;^845^^^^^830^860^int resultCount =  ( returnCount > 0 )  ? returnCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^int resultCount =  ( returnCount > 0 )  ? returnCount  <<  1 : 0;^845^^^^^830^860^int resultCount =  ( returnCount > 0 )  ? returnCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^int resultCount =  ( returnCount > numArgs )  ? returnCount - 1 : numArgs;^845^^^^^830^860^int resultCount =  ( returnCount > 0 )  ? returnCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^int resultCount =  ( returnCount > PER_RETURN_RESULT_OVERHEAD )  ? returnCount - 1 : PER_RETURN_RESULT_OVERHEAD;^845^^^^^830^860^int resultCount =  ( returnCount > 0 )  ? returnCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int resultCount =  ( fnInstanceCount > 0 )  ? returnCount - 1 : 0;^845^^^^^830^860^int resultCount =  ( returnCount > 0 )  ? returnCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^int resultCount =  ( overhead > 0 )  ? returnCount - 1 : 0;^845^^^^^830^860^int resultCount =  ( returnCount > 0 )  ? returnCount - 1 : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^int baseOverhead =  ( returnCount == 0 )  ? INLINE_BLOCK_OVERHEAD : 0;^846^^^^^831^861^int baseOverhead =  ( returnCount > 0 )  ? INLINE_BLOCK_OVERHEAD : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^int baseOverhead =  ( returnCount > -5 )  ? INLINE_BLOCK_OVERHEAD : -5;^846^^^^^831^861^int baseOverhead =  ( returnCount > 0 )  ? INLINE_BLOCK_OVERHEAD : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^int baseOverhead =  ( returnCount > PAREN_COST )  ? INLINE_BLOCK_OVERHEAD : PAREN_COST;^846^^^^^831^861^int baseOverhead =  ( returnCount > 0 )  ? INLINE_BLOCK_OVERHEAD : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^int baseOverhead =  ( returnCount > 0 )  ? numArgs : 0;^846^^^^^831^861^int baseOverhead =  ( returnCount > 0 )  ? INLINE_BLOCK_OVERHEAD : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P1_Replace_Type]^long  overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^int overhead = baseOverhead  >=  returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^int overhead = baseOverhead + returnCount + PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount - PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P2_Replace_Operator]^int + overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int overhead = directInlines + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int overhead = baseOverhead + costDeltaFunctionOverhead * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int overhead = baseOverhead + returnCount * costDeltaFunctionOverhead + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + costDeltaDirect * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int overhead = baseOverhead + returnCount * resultCount + PER_RETURN_OVERHEAD * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int overhead = baseOverhead + PER_RETURN_RESULT_OVERHEAD * PER_RETURN_OVERHEAD + resultCount * returnCount + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int overhead = baseOverhead + returnCount * aliasCount + resultCount * PER_RETURN_RESULT_OVERHEAD + PER_RETURN_OVERHEAD * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + costDeltaFunctionOverhead * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P3_Replace_Literal]^int aliasCount = namesToAlias.size() + 0 ;^825^^^^^810^840^int aliasCount = namesToAlias.size (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^int aliasCount = null.size (  ) ;^825^^^^^810^840^int aliasCount = namesToAlias.size (  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^int returnCount = NodeUtil.getNameReferenceCount ( newExpression, Token.RETURN ) ;^844^^^^^829^859^int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P5_Replace_Variable]^Preconditions.checkState ( 2.isEmpty (  )  ) ;^864^^^^^861^866^Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] setKnownConstants [RETURN_TYPE] void   String> knownConstants [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P7_Replace_Invocation]^Preconditions.checkState ( this.knownConstants.size (  )  ) ;^864^^^^^861^866^Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] setKnownConstants [RETURN_TYPE] void   String> knownConstants [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P14_Delete_Statement]^^864^865^^^^861^866^Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ; this.knownConstants = knownConstants;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] setKnownConstants [RETURN_TYPE] void   String> knownConstants [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( grandParent )  ) ;Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;^864^^^^^861^866^Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] setKnownConstants [RETURN_TYPE] void   String> knownConstants [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( compiler.isNormalized (  )  ) ;Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;^864^^^^^861^866^Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] setKnownConstants [RETURN_TYPE] void   String> knownConstants [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;^864^^^^^861^866^Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] setKnownConstants [RETURN_TYPE] void   String> knownConstants [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;^864^^^^^861^866^Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] setKnownConstants [RETURN_TYPE] void   String> knownConstants [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;^864^^^^^861^866^Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] setKnownConstants [RETURN_TYPE] void   String> knownConstants [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent.getFirstChild (  )  == null ) ;Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;^864^^^^^861^866^Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] setKnownConstants [RETURN_TYPE] void   String> knownConstants [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( type == DecompositionType.UNDECOMPOSABLE ) ;Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;^864^^^^^861^866^Preconditions.checkState ( this.knownConstants.isEmpty (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] setKnownConstants [RETURN_TYPE] void   String> knownConstants [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^this.knownConstants =  null;^865^^^^^861^866^this.knownConstants = knownConstants;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] setKnownConstants [RETURN_TYPE] void   String> knownConstants [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[P8_Replace_Mix]^JSModule module;^77^^^^^72^82^final JSModule module;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] FunctionInjector$InliningMode()   [VARIABLES] InliningMode  BLOCK  DIRECT  boolean  
[P8_Replace_Mix]^InliningMode mode;^78^^^^^73^83^final InliningMode mode;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] FunctionInjector$InliningMode()   [VARIABLES] InliningMode  BLOCK  DIRECT  boolean  
[P8_Replace_Mix]^this.callNode =  null;^81^^^^^80^84^this.callNode = callNode;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] FunctionInjector$InliningMode)   Node callNode JSModule module InliningMode mode [VARIABLES] JSModule  module  boolean  InliningMode  mode  Node  callNode  
[P11_Insert_Donor_Statement]^this.mode = mode;this.callNode = callNode;^81^^^^^80^84^this.callNode = callNode;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] FunctionInjector$InliningMode)   Node callNode JSModule module InliningMode mode [VARIABLES] JSModule  module  boolean  InliningMode  mode  Node  callNode  
[P8_Replace_Mix]^this.module =  null;^82^^^^^80^84^this.module = module;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] FunctionInjector$InliningMode)   Node callNode JSModule module InliningMode mode [VARIABLES] JSModule  module  boolean  InliningMode  mode  Node  callNode  
[P11_Insert_Donor_Statement]^this.mode = mode;this.module = module;^82^^^^^80^84^this.module = module;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] FunctionInjector$InliningMode)   Node callNode JSModule module InliningMode mode [VARIABLES] JSModule  module  boolean  InliningMode  mode  Node  callNode  
[P8_Replace_Mix]^this.mode =  null;^83^^^^^80^84^this.mode = mode;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] FunctionInjector$InliningMode)   Node callNode JSModule module InliningMode mode [VARIABLES] JSModule  module  boolean  InliningMode  mode  Node  callNode  
[P11_Insert_Donor_Statement]^this.module = module;this.mode = mode;^83^^^^^80^84^this.mode = mode;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] FunctionInjector$InliningMode)   Node callNode JSModule module InliningMode mode [VARIABLES] JSModule  module  boolean  InliningMode  mode  Node  callNode  
[P11_Insert_Donor_Statement]^this.callNode = callNode;this.mode = mode;^83^^^^^80^84^this.mode = mode;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] FunctionInjector$InliningMode)   Node callNode JSModule module InliningMode mode [VARIABLES] JSModule  module  boolean  InliningMode  mode  Node  callNode  
