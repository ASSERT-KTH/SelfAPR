[P3_Replace_Literal]^static final DiagnosticType MISSING_RETURN_STATEMENT = DiagnosticType.warning ( "ATEMSC_MISSING_RETURN_STATEMENT", "missing return statement" ) ;^38^39^40^41^^38^41^static final DiagnosticType MISSING_RETURN_STATEMENT = DiagnosticType.warning ( "JSC_MISSING_RETURN_STATEMENT", "missing return statement" ) ;^[CLASS] CheckMissingReturn 1 2   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType MISSING_RETURN_STATEMENT = DiagnosticType.warning ( "JSC_MISSING_RETURN_STATEMENT", "ngissing return statement" ) ;^38^39^40^41^^38^41^static final DiagnosticType MISSING_RETURN_STATEMENT = DiagnosticType.warning ( "JSC_MISSING_RETURN_STATEMENT", "missing return statement" ) ;^[CLASS] CheckMissingReturn 1 2   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType MISSING_RETURN_STATEMENT  = null ;^38^39^40^41^^38^41^static final DiagnosticType MISSING_RETURN_STATEMENT = DiagnosticType.warning ( "JSC_MISSING_RETURN_STATEMENT", "missing return statement" ) ;^[CLASS] CheckMissingReturn 1 2   [VARIABLES] 
[P8_Replace_Mix]^private  AbstractCompiler compiler;^43^^^^^38^48^private final AbstractCompiler compiler;^[CLASS] CheckMissingReturn 1 2   [VARIABLES] 
[P8_Replace_Mix]^private  CheckLevel level;^44^^^^^39^49^private final CheckLevel level;^[CLASS] CheckMissingReturn 1 2   [VARIABLES] 
[P8_Replace_Mix]^private static  Predicate<Node> IS_RETURN = new Predicate<Node> (  )  {^46^^^^^46^52^private static final Predicate<Node> IS_RETURN = new Predicate<Node> (  )  {^[CLASS] CheckMissingReturn 1 2   [VARIABLES] 
[P8_Replace_Mix]^GOES_THROUGH_TRUE_CONDITION_PREDICATE ;^56^57^^^^56^77^GOES_THROUGH_TRUE_CONDITION_PREDICATE = new Predicate<DiGraphEdge<Node, ControlFlowGraph.Branch>> (  )  {^[CLASS] CheckMissingReturn 1 2   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^84^^^^^83^86^this.compiler = compiler;^[CLASS] CheckMissingReturn 1 2  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P8_Replace_Mix]^this.level =  null;^85^^^^^83^86^this.level = level;^[CLASS] CheckMissingReturn 1 2  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P2_Replace_Operator]^return input != null || input.getType (  )  == Token.RETURN;^50^^^^^47^51^return input != null && input.getType (  )  == Token.RETURN;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  input  
[P2_Replace_Operator]^return input == null && input.getType (  )  == Token.RETURN;^50^^^^^47^51^return input != null && input.getType (  )  == Token.RETURN;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  input  
[P2_Replace_Operator]^return input != null && input.getType (  )  != Token.RETURN;^50^^^^^47^51^return input != null && input.getType (  )  == Token.RETURN;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  input  
[P8_Replace_Mix]^return input != null && input .getJSType (  )   == Token.RETURN;^50^^^^^47^51^return input != null && input.getType (  )  == Token.RETURN;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  input  
[P14_Delete_Statement]^^50^^^^^47^51^return input != null && input.getType (  )  == Token.RETURN;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  input  
[P7_Replace_Invocation]^Branch branch = input .getSource (  )  ;^60^^^^^58^76^Branch branch = input.getValue (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P14_Delete_Statement]^^60^^^^^58^76^Branch branch = input.getValue (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P2_Replace_Operator]^if  ( branch != Branch.ON_EX )  {^61^^^^^58^76^if  ( branch == Branch.ON_EX )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P6_Replace_Expression]^if  ( condition != null && isLiteralValue(condition) )  {^61^^^^^58^76^if  ( branch == Branch.ON_EX )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P6_Replace_Expression]^if  ( condition != null )  {^61^^^^^58^76^if  ( branch == Branch.ON_EX )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P6_Replace_Expression]^if  ( getBooleanValue(condition) == ON_TRUE == branch )  {^61^^^^^58^76^if  ( branch == Branch.ON_EX )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P6_Replace_Expression]^if  ( ON_TRUE == branch )  {^61^^^^^58^76^if  ( branch == Branch.ON_EX )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P13_Insert_Block]^if  ( branch.isConditional (  )  )  {     Node condition = getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;     if  (  ( condition != null )  &&  ( isLiteralValue ( condition )  )  )  {         return  ( getBooleanValue ( condition )  )  ==  (  ( ON_TRUE )  == branch ) ;     } }^61^^^^^58^76^[Delete]^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P6_Replace_Expression]^} else if  ( condition != null )  {^63^^^^^58^76^} else if  ( branch.isConditional (  )  )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P6_Replace_Expression]^} else if  ( getBooleanValue(condition) == ON_TRUE == branch )  {^63^^^^^58^76^} else if  ( branch.isConditional (  )  )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P6_Replace_Expression]^} else if  ( ON_TRUE == branch )  {^63^^^^^58^76^} else if  ( branch.isConditional (  )  )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P6_Replace_Expression]^} else {^63^^^^^58^76^} else if  ( branch.isConditional (  )  )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P2_Replace_Operator]^if  ( condition != null || NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P2_Replace_Operator]^if  ( condition == null && NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P6_Replace_Expression]^if  ( condition != null ) {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P6_Replace_Expression]^if  (  NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P6_Replace_Expression]^if  ( getBooleanValue(condition) == ON_TRUE == branch )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P6_Replace_Expression]^if  ( ON_TRUE == branch )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^if  ( condition != null && NodeUtil.getBooleanValue ( condition )   )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P8_Replace_Mix]^if  ( condition != this ) {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P15_Unwrap_Block]^return (com.google.javascript.jscomp.NodeUtil.getBooleanValue(condition)) == ((com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE) == branch);^70^71^72^73^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  { return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ; }^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P16_Remove_Block]^^70^71^72^73^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  { return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ; }^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P13_Insert_Block]^if  ( branch.isConditional (  )  )  {     Node condition = getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;     if  (  ( condition != null )  &&  ( isLiteralValue ( condition )  )  )  {         return  ( getBooleanValue ( condition )  )  ==  (  ( ON_TRUE )  == branch ) ;     } }^70^^^^^58^76^[Delete]^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P2_Replace_Operator]^return NodeUtil.getBooleanValue ( condition )  != ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P2_Replace_Operator]^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE != branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^return NodeUtil.getBooleanValue ( branch )  == ( Branch.ON_TRUE == condition ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^return NodeUtil.isLiteralValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P13_Insert_Block]^if  (  ( condition != null )  &&  ( isLiteralValue ( condition )  )  )  {     return  ( getBooleanValue ( condition )  )  ==  (  ( ON_TRUE )  == branch ) ; }^71^^^^^58^76^[Delete]^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P14_Delete_Statement]^^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P2_Replace_Operator]^return NodeUtil.getBooleanValue ( condition )  <= ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^Node condition = NodeUtil.getBooleanValue ( input.getSource (  ) .getValue (  )  ) ;^64^65^^^^58^76^Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^Node condition = NodeUtil .getBooleanValue ( condition )   ) ;^64^65^^^^58^76^Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^Node condition = NodeUtil.getConditionExpression ( input.getSource (  )  .getSource (  )   ) ;^64^65^^^^58^76^Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P14_Delete_Statement]^^64^65^^^^58^76^Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^input.getSource (  )  .getSource (  )   ) ;^65^^^^^58^76^input.getSource (  ) .getValue (  )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P14_Delete_Statement]^^65^^^^^58^76^input.getSource (  ) .getValue (  )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^input .getValue (  )  .getValue (  )  ) ;^65^^^^^58^76^input.getSource (  ) .getValue (  )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P8_Replace_Mix]^if  ( condition != true && NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P2_Replace_Operator]^return NodeUtil.getBooleanValue ( condition )  > ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P2_Replace_Operator]^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE < branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P8_Replace_Mix]^return NodeUtil.isLiteralValue ( condition )   &&  ( Branch.ON_TRUE  &&  branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P8_Replace_Mix]^Node condition = NodeUtil.getBooleanValue ( 0.getSource (  ) .getValue (  )  ) ;^64^65^^^^58^76^Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^Node condition = NodeUtil.getConditionExpression ( input .getValue (  )  .getValue (  )  ) ;^64^65^^^^58^76^Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P3_Replace_Literal]^return true;^62^^^^^58^76^return false;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P8_Replace_Mix]^}  if  ( branch.isConditional (  )  )  {^63^^^^^58^76^} else if  ( branch.isConditional (  )  )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P8_Replace_Mix]^Node condition = NodeUtil.getConditionExpression ( 0.getSource (  ) .getValue (  )  ) ;^64^65^^^^58^76^Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^Node condition = NodeUtil.getConditionExpression ( this.getSource (  ) .getValue (  )  ) ;^64^65^^^^58^76^Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P8_Replace_Mix]^if  ( condition != true && NodeUtil.getBooleanValue ( condition )   )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^return NodeUtil.getBooleanValue ( condition )  == ( Branch.0 == branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P2_Replace_Operator]^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE <= branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P3_Replace_Literal]^return false;^75^^^^^58^76^return true;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^if  ( !isEmptyFunction ( t.getScopeRoot (  )  )  )  {^90^^^^^89^109^if  ( !explicitReturnExpected ( t.getScopeRoot (  )  )  )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P15_Unwrap_Block]^return ;^90^91^92^^^89^109^if  ( !explicitReturnExpected ( t.getScopeRoot (  )  )  )  { return; }^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P16_Remove_Block]^^90^91^92^^^89^109^if  ( !explicitReturnExpected ( t.getScopeRoot (  )  )  )  { return; }^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P13_Insert_Block]^if  ( ! ( explicitReturnExpected ( t.getScopeRoot (  )  )  )  )  {     return ; }^90^^^^^89^109^[Delete]^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P8_Replace_Mix]^if  ( !explicitReturnExpected ( t .getControlFlowGraph (  )   )  )  {^90^^^^^89^109^if  ( !explicitReturnExpected ( t.getScopeRoot (  )  )  )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^if  ( enterScope ( t.getControlFlowGraph (  )  )  )  {^94^^^^^89^109^if  ( fastAllPathsReturnCheck ( t.getControlFlowGraph (  )  )  )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^if  ( fastAllPathsReturnCheck ( t .getScopeRoot (  )   )  )  {^94^^^^^89^109^if  ( fastAllPathsReturnCheck ( t.getControlFlowGraph (  )  )  )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P15_Unwrap_Block]^return ;^94^95^96^^^89^109^if  ( fastAllPathsReturnCheck ( t.getControlFlowGraph (  )  )  )  { return; }^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P16_Remove_Block]^^94^95^96^^^89^109^if  ( fastAllPathsReturnCheck ( t.getControlFlowGraph (  )  )  )  { return; }^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P13_Insert_Block]^if  ( isEmptyFunction ( scope )  )  {     return false; }^94^^^^^89^109^[Delete]^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P13_Insert_Block]^if  ( fastAllPathsReturnCheck ( t.getControlFlowGraph (  )  )  )  {     return ; }^94^^^^^89^109^[Delete]^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  ) .getControlFlowGraph (  ) .getEntry (  ) , t.getControlFlowGraph (  ) .getImplicitReturn (  ) ,^99^100^101^102^^89^109^new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  ) , t.getControlFlowGraph (  ) .getEntry (  ) , t.getControlFlowGraph (  ) .getImplicitReturn (  ) ,^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  ) , t.getControlFlowGraph (  )  .getNext (  )  , t.getControlFlowGraph (  ) .getImplicitReturn (  ) ,^99^100^101^102^^89^109^new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  ) , t.getControlFlowGraph (  ) .getEntry (  ) , t.getControlFlowGraph (  ) .getImplicitReturn (  ) ,^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  ) , t.getControlFlowGraph (  ) .getEntry (  ) , t.getControlFlowGraph (  )  .getNativeType (  )  ,^99^100^101^102^^89^109^new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  ) , t.getControlFlowGraph (  ) .getEntry (  ) , t.getControlFlowGraph (  ) .getImplicitReturn (  ) ,^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P8_Replace_Mix]^new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> ( t .getScopeRoot (  )  , t^99^100^101^102^^89^109^new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  ) , t.getControlFlowGraph (  ) .getEntry (  ) , t.getControlFlowGraph (  ) .getImplicitReturn (  ) ,^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> test = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  ) .getControlFlowGraph (  ) .getEntry (  ) ,^98^99^100^101^^89^109^CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> test = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  ) , t.getControlFlowGraph (  ) .getEntry (  ) ,^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> test = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> ( t .getScopeRoot (  )  , t^98^99^100^101^^89^109^CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> test = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  ) , t.getControlFlowGraph (  ) .getEntry (  ) ,^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^t .getScopeRoot (  )  , t^100^101^102^103^^89^109^t.getControlFlowGraph (  ) , t.getControlFlowGraph (  ) .getEntry (  ) , t.getControlFlowGraph (  ) .getImplicitReturn (  ) , IS_RETURN, GOES_THROUGH_TRUE_CONDITION_PREDICATE ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^t .getScopeRoot (  )  .getEntry (  ) , t^101^102^103^^^89^109^t.getControlFlowGraph (  ) .getEntry (  ) , t.getControlFlowGraph (  ) .getImplicitReturn (  ) , IS_RETURN, GOES_THROUGH_TRUE_CONDITION_PREDICATE ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P8_Replace_Mix]^t.getControlFlowGraph (  )  .getNext (  )  , t.getControlFlowGraph (  ) .getImplicitReturn (  ) , IS_RETURN, GOES_THROUGH_TRUE_CONDITION_PREDICATE ) ;^101^102^103^^^89^109^t.getControlFlowGraph (  ) .getEntry (  ) , t.getControlFlowGraph (  ) .getImplicitReturn (  ) , IS_RETURN, GOES_THROUGH_TRUE_CONDITION_PREDICATE ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P14_Delete_Statement]^^101^102^103^^^89^109^t.getControlFlowGraph (  ) .getEntry (  ) , t.getControlFlowGraph (  ) .getImplicitReturn (  ) , IS_RETURN, GOES_THROUGH_TRUE_CONDITION_PREDICATE ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P8_Replace_Mix]^t .getScopeRoot (  )  .getImplicitReturn (  ) , IS_RETURN, GOES_THROUGH_TRUE_CONDITION_PREDICATE ) ;^102^103^^^^89^109^t.getControlFlowGraph (  ) .getImplicitReturn (  ) , IS_RETURN, GOES_THROUGH_TRUE_CONDITION_PREDICATE ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P14_Delete_Statement]^^102^103^^^^89^109^t.getControlFlowGraph (  ) .getImplicitReturn (  ) , IS_RETURN, GOES_THROUGH_TRUE_CONDITION_PREDICATE ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P8_Replace_Mix]^if  ( test.allPathsSatisfyPredicate (  )  )  {^105^^^^^89^109^if  ( !test.allPathsSatisfyPredicate (  )  )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, t.getScopeRoot(), level, com.google.javascript.jscomp.CheckMissingReturn.MISSING_RETURN_STATEMENT));^105^106^107^108^^89^109^if  ( !test.allPathsSatisfyPredicate (  )  )  { compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ; }^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P16_Remove_Block]^^105^106^107^108^^89^109^if  ( !test.allPathsSatisfyPredicate (  )  )  { compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ; }^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^compiler.report ( JSError.make (  t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^106^107^^^^89^109^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) ,  MISSING_RETURN_STATEMENT )  ) ;^106^107^^^^89^109^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level )  ) ;^106^107^^^^89^109^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^compiler.report ( JSError.make ( level, t.getScopeRoot (  ) , t, MISSING_RETURN_STATEMENT )  ) ;^106^107^^^^89^109^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , MISSING_RETURN_STATEMENT, level )  ) ;^106^107^^^^89^109^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, t .getControlFlowGraph (  )  , level, MISSING_RETURN_STATEMENT )  ) ;^106^107^^^^89^109^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P14_Delete_Statement]^^106^107^^^^89^109^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P11_Insert_Donor_Statement]^JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^106^107^^^^89^109^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P13_Insert_Block]^if  ( ! ( test.allPathsSatisfyPredicate (  )  )  )  {     compiler.report ( make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ; }^106^^^^^89^109^[Delete]^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^JSError.make (  t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^107^^^^^89^109^JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^JSError.make ( t, t.getScopeRoot (  ) ,  MISSING_RETURN_STATEMENT )  ) ;^107^^^^^89^109^JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^JSError.make ( t, t.getScopeRoot (  ) , level )  ) ;^107^^^^^89^109^JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^JSError.make ( level, t.getScopeRoot (  ) , t, MISSING_RETURN_STATEMENT )  ) ;^107^^^^^89^109^JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^JSError.make ( t, t.getScopeRoot (  ) , MISSING_RETURN_STATEMENT, level )  ) ;^107^^^^^89^109^JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P8_Replace_Mix]^JSError.make ( t, t .getControlFlowGraph (  )  , level, MISSING_RETURN_STATEMENT )  ) ;^107^^^^^89^109^JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P14_Delete_Statement]^^107^^^^^89^109^JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^107^^^^^89^109^JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P8_Replace_Mix]^compiler .getTypeRegistry (  )   ) ;^106^107^^^^89^109^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^JSError.make ( MISSING_RETURN_STATEMENT, t.getScopeRoot (  ) , level, t )  ) ;^107^^^^^89^109^JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P2_Replace_Operator]^if  ( s.getSource (  ) .getValue (  ) .getType (  )  < Token.RETURN )  {^119^^^^^117^124^if  ( s.getSource (  ) .getValue (  ) .getType (  )  != Token.RETURN )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] fastAllPathsReturnCheck [RETURN_TYPE] boolean   Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  s  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  ControlFlowGraph  cfg  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^if  ( 2.getSource (  ) .getValue (  ) .getType (  )  != Token.RETURN )  {^119^^^^^117^124^if  ( s.getSource (  ) .getValue (  ) .getType (  )  != Token.RETURN )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] fastAllPathsReturnCheck [RETURN_TYPE] boolean   Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  s  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  ControlFlowGraph  cfg  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^if  ( s.getSource (  ) .getValue (  )  .getJSType (  )   != Token.RETURN )  {^119^^^^^117^124^if  ( s.getSource (  ) .getValue (  ) .getType (  )  != Token.RETURN )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] fastAllPathsReturnCheck [RETURN_TYPE] boolean   Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  s  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  ControlFlowGraph  cfg  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^if  ( s.getSource (  )  .getSource (  )  .getType (  )  != Token.RETURN )  {^119^^^^^117^124^if  ( s.getSource (  ) .getValue (  ) .getType (  )  != Token.RETURN )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] fastAllPathsReturnCheck [RETURN_TYPE] boolean   Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  s  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  ControlFlowGraph  cfg  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^if  ( s .getValue (  )  .getValue (  ) .getType (  )  != Token.RETURN )  {^119^^^^^117^124^if  ( s.getSource (  ) .getValue (  ) .getType (  )  != Token.RETURN )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] fastAllPathsReturnCheck [RETURN_TYPE] boolean   Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  s  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  ControlFlowGraph  cfg  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P15_Unwrap_Block]^return false;^119^120^121^^^117^124^if  ( s.getSource (  ) .getValue (  ) .getType (  )  != Token.RETURN )  { return false; }^[CLASS] CheckMissingReturn 1 2  [METHOD] fastAllPathsReturnCheck [RETURN_TYPE] boolean   Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  s  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  ControlFlowGraph  cfg  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P16_Remove_Block]^^119^120^121^^^117^124^if  ( s.getSource (  ) .getValue (  ) .getType (  )  != Token.RETURN )  { return false; }^[CLASS] CheckMissingReturn 1 2  [METHOD] fastAllPathsReturnCheck [RETURN_TYPE] boolean   Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  s  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  ControlFlowGraph  cfg  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P13_Insert_Block]^if  ( ! ( scopeType instanceof FunctionType )  )  {     return false; }^119^^^^^117^124^[Delete]^[CLASS] CheckMissingReturn 1 2  [METHOD] fastAllPathsReturnCheck [RETURN_TYPE] boolean   Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  s  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  ControlFlowGraph  cfg  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P3_Replace_Literal]^return true;^120^^^^^117^124^return false;^[CLASS] CheckMissingReturn 1 2  [METHOD] fastAllPathsReturnCheck [RETURN_TYPE] boolean   Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  s  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  ControlFlowGraph  cfg  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^for  ( DiGraphEdge<Node, Branch> s : cfg.getImplicitReturn (  )  .getNext (  )   )  {^118^^^^^117^124^for  ( DiGraphEdge<Node, Branch> s : cfg.getImplicitReturn (  ) .getInEdges (  )  )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] fastAllPathsReturnCheck [RETURN_TYPE] boolean   Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  s  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  ControlFlowGraph  cfg  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^for  ( DiGraphEdge<Node, Branch> s : cfg .getNativeType (  )  .getInEdges (  )  )  {^118^^^^^117^124^for  ( DiGraphEdge<Node, Branch> s : cfg.getImplicitReturn (  ) .getInEdges (  )  )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] fastAllPathsReturnCheck [RETURN_TYPE] boolean   Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  s  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  ControlFlowGraph  cfg  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P14_Delete_Statement]^^118^119^120^121^^117^124^for  ( DiGraphEdge<Node, Branch> s : cfg.getImplicitReturn (  ) .getInEdges (  )  )  { if  ( s.getSource (  ) .getValue (  ) .getType (  )  != Token.RETURN )  { return false; }^[CLASS] CheckMissingReturn 1 2  [METHOD] fastAllPathsReturnCheck [RETURN_TYPE] boolean   Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  s  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  ControlFlowGraph  cfg  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P3_Replace_Literal]^return false;^123^^^^^117^124^return true;^[CLASS] CheckMissingReturn 1 2  [METHOD] fastAllPathsReturnCheck [RETURN_TYPE] boolean   Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  s  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  ControlFlowGraph  cfg  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P3_Replace_Literal]^return false;^133^^^^^131^134^return true;^[CLASS] CheckMissingReturn 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  nodeTraversal  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  n  parent  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^JSType scopeType = scope .getType (  )  ;^145^^^^^144^162^JSType scopeType = scope.getJSType (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P14_Delete_Statement]^^145^^^^^144^162^JSType scopeType = scope.getJSType (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P2_Replace_Operator]^if  ( ! ( scopeType  &  FunctionType )  )  {^147^^^^^144^162^if  ( ! ( scopeType instanceof FunctionType )  )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^if  ( ! ( returnType instanceof FunctionType )  )  {^147^^^^^144^162^if  ( ! ( scopeType instanceof FunctionType )  )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P15_Unwrap_Block]^return false;^147^148^149^^^144^162^if  ( ! ( scopeType instanceof FunctionType )  )  { return false; }^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P16_Remove_Block]^^147^148^149^^^144^162^if  ( ! ( scopeType instanceof FunctionType )  )  { return false; }^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P13_Insert_Block]^if  (  ( s.getSource (  ) .getValue (  ) .getType (  )  )  !=  ( RETURN )  )  {     return false; }^147^^^^^144^162^[Delete]^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P3_Replace_Literal]^return true;^148^^^^^144^162^return false;^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^if  ( explicitReturnExpected ( scope )  )  {^151^^^^^144^162^if  ( isEmptyFunction ( scope )  )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P15_Unwrap_Block]^return false;^151^152^153^^^144^162^if  ( isEmptyFunction ( scope )  )  { return false; }^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P16_Remove_Block]^^151^152^153^^^144^162^if  ( isEmptyFunction ( scope )  )  { return false; }^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P13_Insert_Block]^if  ( fastAllPathsReturnCheck ( t.getControlFlowGraph (  )  )  )  {     return ; }^151^^^^^144^162^[Delete]^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P3_Replace_Literal]^return true;^152^^^^^144^162^return false;^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P13_Insert_Block]^if  ( isEmptyFunction ( scope )  )  {     return false; }^151^^^^^144^162^[Delete]^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^JSType returnType =  (  ( FunctionType )  scopeType )  .getNativeType (  )  ;^155^^^^^144^162^JSType returnType =  (  ( FunctionType )  scopeType ) .getReturnType (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P14_Delete_Statement]^^155^^^^^144^162^JSType returnType =  (  ( FunctionType )  scopeType ) .getReturnType (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P2_Replace_Operator]^if  ( returnType != null )  {^157^^^^^144^162^if  ( returnType == null )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^if  ( scopeType == null )  {^157^^^^^144^162^if  ( returnType == null )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P8_Replace_Mix]^if  ( returnType == false )  {^157^^^^^144^162^if  ( returnType == null )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P15_Unwrap_Block]^return false;^157^158^159^^^144^162^if  ( returnType == null )  { return false; }^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P16_Remove_Block]^^157^158^159^^^144^162^if  ( returnType == null )  { return false; }^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P3_Replace_Literal]^return true;^158^^^^^144^162^return false;^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^return !isVoidOrUnknown ( scopeType ) ;^161^^^^^144^162^return !isVoidOrUnknown ( returnType ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^return !isEmptyFunction ( returnType ) ;^161^^^^^144^162^return !isVoidOrUnknown ( returnType ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P8_Replace_Mix]^return !isEmptyFunction ( scopeType ) ;^161^^^^^144^162^return !isVoidOrUnknown ( returnType ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P14_Delete_Statement]^^161^^^^^144^162^return !isVoidOrUnknown ( returnType ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P2_Replace_Operator]^return function.getChildCount (  )  == 3 || !function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^170^171^^^^169^172^return function.getChildCount (  )  == 3 && !function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isEmptyFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  function  
[P2_Replace_Operator]^return function.getChildCount (  )  != 3 && !function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^170^171^^^^169^172^return function.getChildCount (  )  == 3 && !function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isEmptyFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  function  
[P3_Replace_Literal]^return function.getChildCount (  )  == 9 && !function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^170^171^^^^169^172^return function.getChildCount (  )  == 3 && !function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isEmptyFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  function  
[P7_Replace_Invocation]^return function .getFirstChild (  )   == 3 && !function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^170^171^^^^169^172^return function.getChildCount (  )  == 3 && !function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isEmptyFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  function  
[P7_Replace_Invocation]^return function.getChildCount (  )  == 3 && !function.getFirstChild (  ) .getNext (  ) .getNext (  )  .getImplicitReturn (  )  ;^170^171^^^^169^172^return function.getChildCount (  )  == 3 && !function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isEmptyFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  function  
[P7_Replace_Invocation]^return function.getChildCount (  )  == 3 && !function.getFirstChild (  )  .getEntry (  )^170^171^^^^169^172^return function.getChildCount (  )  == 3 && !function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isEmptyFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  function  
[P14_Delete_Statement]^^170^171^^^^169^172^return function.getChildCount (  )  == 3 && !function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isEmptyFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  function  
[P7_Replace_Invocation]^!function.getFirstChild (  ) .getNext (  ) .getNext (  )  .getImplicitReturn (  )  ;^171^^^^^169^172^!function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isEmptyFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  function  
[P7_Replace_Invocation]^!function .getJSType (  )  .getNext (  ) .getNext (  ) .hasChildren (  ) ;^171^^^^^169^172^!function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isEmptyFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  function  
[P8_Replace_Mix]^!function.getFirstChild (  )  .getEntry (  )^171^^^^^169^172^!function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isEmptyFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  function  
[P14_Delete_Statement]^^171^^^^^169^172^!function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isEmptyFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  function  
[P11_Insert_Donor_Statement]^return function.getChildCount (  )  == 3 && !function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;!function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^171^^^^^169^172^!function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isEmptyFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  function  
[P7_Replace_Invocation]^final JSType voidType = compiler.getTypeRegistry (  ) .getReturnType ( JSTypeNative.VOID_TYPE ) ;^179^180^^^^178^182^final JSType voidType = compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.VOID_TYPE ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isVoidOrUnknown [RETURN_TYPE] boolean   JSType returnType [VARIABLES] AbstractCompiler  compiler  JSType  returnType  voidType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^final JSType voidType = compiler.report (  ) .getNativeType ( JSTypeNative.VOID_TYPE ) ;^179^180^^^^178^182^final JSType voidType = compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.VOID_TYPE ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isVoidOrUnknown [RETURN_TYPE] boolean   JSType returnType [VARIABLES] AbstractCompiler  compiler  JSType  returnType  voidType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^compiler.getTypeRegistry (  ) .getReturnType ( JSTypeNative.VOID_TYPE ) ;^180^^^^^178^182^compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.VOID_TYPE ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isVoidOrUnknown [RETURN_TYPE] boolean   JSType returnType [VARIABLES] AbstractCompiler  compiler  JSType  returnType  voidType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^compiler.getTypeRegistry (  )  .getReturnType (  )  ;^180^^^^^178^182^compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.VOID_TYPE ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isVoidOrUnknown [RETURN_TYPE] boolean   JSType returnType [VARIABLES] AbstractCompiler  compiler  JSType  returnType  voidType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P7_Replace_Invocation]^compiler.report (  ) .getNativeType ( JSTypeNative.VOID_TYPE ) ;^180^^^^^178^182^compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.VOID_TYPE ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isVoidOrUnknown [RETURN_TYPE] boolean   JSType returnType [VARIABLES] AbstractCompiler  compiler  JSType  returnType  voidType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P14_Delete_Statement]^^180^^^^^178^182^compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.VOID_TYPE ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isVoidOrUnknown [RETURN_TYPE] boolean   JSType returnType [VARIABLES] AbstractCompiler  compiler  JSType  returnType  voidType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P14_Delete_Statement]^^180^181^^^^178^182^compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.VOID_TYPE ) ; return voidType.isSubtype ( returnType ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isVoidOrUnknown [RETURN_TYPE] boolean   JSType returnType [VARIABLES] AbstractCompiler  compiler  JSType  returnType  voidType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P5_Replace_Variable]^return returnType.isSubtype ( voidType ) ;^181^^^^^178^182^return voidType.isSubtype ( returnType ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isVoidOrUnknown [RETURN_TYPE] boolean   JSType returnType [VARIABLES] AbstractCompiler  compiler  JSType  returnType  voidType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P14_Delete_Statement]^^181^^^^^178^182^return voidType.isSubtype ( returnType ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isVoidOrUnknown [RETURN_TYPE] boolean   JSType returnType [VARIABLES] AbstractCompiler  compiler  JSType  returnType  voidType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[P2_Replace_Operator]^return input != null || input.getType (  )  == Token.RETURN;^50^^^^^47^51^return input != null && input.getType (  )  == Token.RETURN;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  Node  input  
[P2_Replace_Operator]^return input == null && input.getType (  )  == Token.RETURN;^50^^^^^47^51^return input != null && input.getType (  )  == Token.RETURN;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  Node  input  
[P2_Replace_Operator]^return input != null && input.getType (  )  != Token.RETURN;^50^^^^^47^51^return input != null && input.getType (  )  == Token.RETURN;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  Node  input  
[P8_Replace_Mix]^return input != true || input.getType (  )  ;^50^^^^^47^51^return input != null && input.getType (  )  == Token.RETURN;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  Node  input  
[P14_Delete_Statement]^^50^^^^^47^51^return input != null && input.getType (  )  == Token.RETURN;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  Node  input  
[P7_Replace_Invocation]^Branch branch = input .getSource (  )  ;^60^^^^^58^76^Branch branch = input.getValue (  ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P14_Delete_Statement]^^60^^^^^58^76^Branch branch = input.getValue (  ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P2_Replace_Operator]^if  ( branch < Branch.ON_EX )  {^61^^^^^58^76^if  ( branch == Branch.ON_EX )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P2_Replace_Operator]^if  ( branch <= Branch.ON_EX )  {^61^^^^^58^76^if  ( branch == Branch.ON_EX )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P6_Replace_Expression]^if  ( condition != null && isLiteralValue(condition) )  {^61^^^^^58^76^if  ( branch == Branch.ON_EX )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P6_Replace_Expression]^if  ( condition != null )  {^61^^^^^58^76^if  ( branch == Branch.ON_EX )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P6_Replace_Expression]^if  ( getBooleanValue(condition) == ON_TRUE == branch )  {^61^^^^^58^76^if  ( branch == Branch.ON_EX )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P6_Replace_Expression]^if  ( ON_TRUE == branch )  {^61^^^^^58^76^if  ( branch == Branch.ON_EX )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P13_Insert_Block]^if  ( branch.isConditional (  )  )  {     Node condition = getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;     if  (  ( condition != null )  &&  ( isLiteralValue ( condition )  )  )  {         return  ( getBooleanValue ( condition )  )  ==  (  ( ON_TRUE )  == branch ) ;     } }^61^^^^^58^76^[Delete]^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P6_Replace_Expression]^} else if  ( condition != null )  {^63^^^^^58^76^} else if  ( branch.isConditional (  )  )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P6_Replace_Expression]^} else if  ( getBooleanValue(condition) == ON_TRUE == branch )  {^63^^^^^58^76^} else if  ( branch.isConditional (  )  )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P6_Replace_Expression]^} else if  ( ON_TRUE == branch )  {^63^^^^^58^76^} else if  ( branch.isConditional (  )  )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P6_Replace_Expression]^} else {^63^^^^^58^76^} else if  ( branch.isConditional (  )  )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P8_Replace_Mix]^}  if  ( branch.isConditional (  )  )  {^63^^^^^58^76^} else if  ( branch.isConditional (  )  )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P2_Replace_Operator]^if  ( condition != null || NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P2_Replace_Operator]^if  ( condition == null && NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P6_Replace_Expression]^if  ( condition != null ) {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P6_Replace_Expression]^if  (  NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P6_Replace_Expression]^if  ( getBooleanValue(condition) == ON_TRUE == branch )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P6_Replace_Expression]^if  ( ON_TRUE == branch )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P7_Replace_Invocation]^if  ( condition != null && NodeUtil.getBooleanValue ( condition )   )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P8_Replace_Mix]^if  ( condition != false && NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P15_Unwrap_Block]^return (com.google.javascript.jscomp.NodeUtil.getBooleanValue(condition)) == ((com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE) == branch);^70^71^72^73^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  { return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ; }^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P16_Remove_Block]^^70^71^72^73^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  { return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ; }^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P13_Insert_Block]^if  ( branch.isConditional (  )  )  {     Node condition = getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;     if  (  ( condition != null )  &&  ( isLiteralValue ( condition )  )  )  {         return  ( getBooleanValue ( condition )  )  ==  (  ( ON_TRUE )  == branch ) ;     } }^70^^^^^58^76^[Delete]^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P2_Replace_Operator]^return NodeUtil.getBooleanValue ( condition )  != ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P2_Replace_Operator]^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE <= branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P5_Replace_Variable]^return NodeUtil.getBooleanValue ( branch )  == ( Branch.ON_TRUE == condition ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P7_Replace_Invocation]^return NodeUtil.isLiteralValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P13_Insert_Block]^if  (  ( condition != null )  &&  ( isLiteralValue ( condition )  )  )  {     return  ( getBooleanValue ( condition )  )  ==  (  ( ON_TRUE )  == branch ) ; }^71^^^^^58^76^[Delete]^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P14_Delete_Statement]^^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P2_Replace_Operator]^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE != branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P8_Replace_Mix]^return NodeUtil.isLiteralValue ( condition )  == ( Branch.null == branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P7_Replace_Invocation]^Node condition = NodeUtil.getBooleanValue ( input.getSource (  ) .getValue (  )  ) ;^64^65^^^^58^76^Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P7_Replace_Invocation]^Node condition = NodeUtil.getConditionExpression ( input.getSource (  )  .getSource (  )   ) ;^64^65^^^^58^76^Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P7_Replace_Invocation]^Node condition = NodeUtil .getBooleanValue ( condition )   ) ;^64^65^^^^58^76^Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P14_Delete_Statement]^^64^65^^^^58^76^Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P7_Replace_Invocation]^input.getSource (  )  .getSource (  )   ) ;^65^^^^^58^76^input.getSource (  ) .getValue (  )  ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P8_Replace_Mix]^input .getValue (  )  .getValue (  )  ) ;^65^^^^^58^76^input.getSource (  ) .getValue (  )  ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P14_Delete_Statement]^^65^^^^^58^76^input.getSource (  ) .getValue (  )  ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P2_Replace_Operator]^return NodeUtil.getBooleanValue ( condition )  >= ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P5_Replace_Variable]^Node condition = NodeUtil.getConditionExpression ( this.getSource (  ) .getValue (  )  ) ;^64^65^^^^58^76^Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P7_Replace_Invocation]^Node condition = NodeUtil.getConditionExpression ( input .getValue (  )  .getValue (  )  ) ;^64^65^^^^58^76^Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P3_Replace_Literal]^return true;^62^^^^^58^76^return false;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P8_Replace_Mix]^if  ( condition != true && NodeUtil.getBooleanValue ( condition )   )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P8_Replace_Mix]^Node condition = NodeUtil.getConditionExpression ( null.getSource (  ) .getValue (  )  ) ;^64^65^^^^58^76^Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P8_Replace_Mix]^Node condition = NodeUtil.getConditionExpression ( 1.getSource (  ) .getValue (  )  ) ;^64^65^^^^58^76^Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P8_Replace_Mix]^if  ( condition != this ) {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P2_Replace_Operator]^return NodeUtil.getBooleanValue ( condition )  <= ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P2_Replace_Operator]^return NodeUtil.getBooleanValue ( condition )  > ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[P3_Replace_Literal]^return false;^75^^^^^58^76^return true;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
