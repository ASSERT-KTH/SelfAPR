[P2_Replace_Operator]^if  ( node  <  Block )  {^172^^^^^157^187^if  ( node instanceof Block )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^if  ( node  ||  Block )  {^172^^^^^157^187^if  ( node instanceof Block )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^if  ( node instanceof Scope )  {^172^^^^^157^187^if  ( node instanceof Block )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^if  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " + typeToName ( node.getType (  )  ) )  {^172^^^^^157^187^if  ( node instanceof Block )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^if  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  + " type: " )  {^172^^^^^157^187^if  ( node instanceof Block )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^if  ( "Unexpected node type.  class: " + node.getClass (  ) )  {^172^^^^^157^187^if  ( node instanceof Block )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^} else  if  ( node  &  Scope )  {^174^^^^^159^189^} else  if  ( node instanceof Scope )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^} else  if  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " + typeToName ( node.getType (  )  ) )  {^174^^^^^159^189^} else  if  ( node instanceof Scope )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^} else  if  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  + " type: " )  {^174^^^^^159^189^} else  if  ( node instanceof Scope )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^} else  if  ( "Unexpected node type.  class: " + node.getClass (  ) )  {^174^^^^^159^189^} else  if  ( node instanceof Scope )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^} else {^174^^^^^159^189^} else  if  ( node instanceof Scope )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P9_Replace_Statement]^} else  if  ( node instanceof LabeledStatement )  {^174^^^^^159^189^} else  if  ( node instanceof Scope )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P9_Replace_Statement]^} else  if  ( node instanceof VariableInitializer )  {^174^^^^^159^189^} else  if  ( node instanceof Scope )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  >  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^174^181^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  &&  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^174^181^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  <<  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^174^181^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class:  node t" + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^174^181^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + "type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^174^181^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected node type.  class: " + node .getType (  )   + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^174^181^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  ^  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^174^181^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  |  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^174^181^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "   instanceof   node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^174^181^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: pected" + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^174^181^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof ForLoop )  {     return processForLoop (  (  ( ForLoop )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^177^^^^^174^181^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof Scope )  {     return processScope (  (  ( Scope )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^177^^^^^174^181^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^178^179^180^^^174^181^node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^Token.typeToName ( node .getClass (  )   )  ) ;^180^^^^^174^181^Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^180^^^^^174^181^Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processBlock (  ( Scope )  node ) ;^175^^^^^160^190^return processScope (  ( Scope )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^175^^^^^160^190^return processScope (  ( Scope )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  ==  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^162^192^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  &&  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^162^192^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  ^  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^162^192^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type" + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^162^192^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: ype:" + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^162^192^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected node type.  class: " + node .getType (  )   + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^162^192^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  <=  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^162^192^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  >  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^162^192^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  >  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^162^192^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "ted node" + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^162^192^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: y" + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^162^192^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof ForLoop )  {     return processForLoop (  (  ( ForLoop )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^177^^^^^162^192^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof Scope )  {     return processScope (  (  ( Scope )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^177^^^^^162^192^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^178^179^180^^^163^193^node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P8_Replace_Mix]^Token.typeToName ( node .getClass (  )   )  ) ;^180^^^^^165^195^Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^180^^^^^165^195^Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processDoLoop (  ( Block )  node ) ;^173^^^^^158^188^return processBlock (  ( Block )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^173^^^^^158^188^return processBlock (  ( Block )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^} else  if  ( node  ==  Scope )  {^174^^^^^159^189^} else  if  ( node instanceof Scope )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.   instanceof   class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^174^181^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  <=  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^174^181^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "cted" + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^174^181^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + "" + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^174^181^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node .getClass (  )   )  ) ;^177^178^179^180^^174^181^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "c" + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^174^181^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: yp" + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^174^181^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^if  ( node  ==  ExpressionStatement )  {^202^^^^^187^217^if  ( node instanceof ExpressionStatement )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^if  ( node  >  ExpressionStatement )  {^202^^^^^187^217^if  ( node instanceof ExpressionStatement )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^if  ( node instanceof LabeledStatement )  {^202^^^^^187^217^if  ( node instanceof ExpressionStatement )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^if  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " + typeToName ( node.getType (  )  ) )  {^202^^^^^187^217^if  ( node instanceof ExpressionStatement )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^if  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  + " type: " )  {^202^^^^^187^217^if  ( node instanceof ExpressionStatement )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^if  ( "Unexpected node type.  class: " + node.getClass (  ) )  {^202^^^^^187^217^if  ( node instanceof ExpressionStatement )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^} else  if  ( node  >  LabeledStatement )  {^204^^^^^189^219^} else  if  ( node instanceof LabeledStatement )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^} else  if  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " + typeToName ( node.getType (  )  ) )  {^204^^^^^189^219^} else  if  ( node instanceof LabeledStatement )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^} else  if  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  + " type: " )  {^204^^^^^189^219^} else  if  ( node instanceof LabeledStatement )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^} else  if  ( "Unexpected node type.  class: " + node.getClass (  ) )  {^204^^^^^189^219^} else  if  ( node instanceof LabeledStatement )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^} else {^204^^^^^189^219^} else  if  ( node instanceof LabeledStatement )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P9_Replace_Statement]^} else  if  ( node instanceof VariableInitializer )  {^204^^^^^189^219^} else  if  ( node instanceof LabeledStatement )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P9_Replace_Statement]^} else  if  ( node instanceof ForLoop )  {^204^^^^^189^219^} else  if  ( node instanceof LabeledStatement )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P9_Replace_Statement]^} else  if  ( node instanceof Scope )  {^204^^^^^189^219^} else  if  ( node instanceof LabeledStatement )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof VariableInitializer )  {     return processVariableInitializer (  (  ( VariableInitializer )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^204^^^^^189^219^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof VariableDeclaration )  {     return processVariableDeclaration (  (  ( VariableDeclaration )   ( node )  )  ) ; }else     if  ( node instanceof VariableInitializer )  {         return processVariableInitializer (  (  ( VariableInitializer )   ( node )  )  ) ;     }else {         throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ;     }^204^^^^^189^219^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof Block )  {     return processBlock (  (  ( Block )   ( node )  )  ) ; }else     if  ( node instanceof Scope )  {         return processScope (  (  ( Scope )   ( node )  )  ) ;     }else {         throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ;     }^204^^^^^189^219^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof ExpressionStatement )  {     return processExpressionStatement (  (  ( ExpressionStatement )   ( node )  )  ) ; }else     if  ( node instanceof LabeledStatement )  {         return processLabeledStatement (  (  ( LabeledStatement )   ( node )  )  ) ;     }else {         throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ;     }^204^^^^^189^219^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof ForLoop )  {     return processForLoop (  (  ( ForLoop )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^204^^^^^189^219^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof Scope )  {     return processScope (  (  ( Scope )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^204^^^^^189^219^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof ForInLoop )  {     return processForInLoop (  (  ( ForInLoop )   ( node )  )  ) ; }else     if  ( node instanceof ForLoop )  {         return processForLoop (  (  ( ForLoop )   ( node )  )  ) ;     }else {         throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ;     }^204^^^^^189^219^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  <  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  >=  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  >>  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "xpected nnexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: e" + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected node type.  class: " + node .getType (  )   + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node .getClass (  )   )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  >>  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  ||  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  <=  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpenexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + "e:type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof ForLoop )  {     return processForLoop (  (  ( ForLoop )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^207^^^^^204^211^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof Scope )  {     return processScope (  (  ( Scope )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^207^^^^^204^211^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P8_Replace_Mix]^node .getType (  )   + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^208^209^210^^^204^211^node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^208^209^210^^^204^211^node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P8_Replace_Mix]^Token.typeToName ( node .getClass (  )   )  ) ;^210^^^^^204^211^Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^210^^^^^204^211^Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processBreakStatement (  ( LabeledStatement )  node ) ;^205^^^^^190^220^return processLabeledStatement (  ( LabeledStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^205^^^^^190^220^return processLabeledStatement (  ( LabeledStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  <=  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  |  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  ||  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "ed node type.  clasnexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type:  type" + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node .getClass (  )   )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  ^  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.   instanceof   class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  &&  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "e" + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " t" + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof ForLoop )  {     return processForLoop (  (  ( ForLoop )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^207^^^^^192^222^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof Scope )  {     return processScope (  (  ( Scope )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^207^^^^^192^222^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^208^209^210^^^193^223^node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P8_Replace_Mix]^Token.typeToName ( node .getClass (  )   )  ) ;^210^^^^^195^225^Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^210^^^^^195^225^Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processReturnStatement (  ( ExpressionStatement )  node ) ;^203^^^^^188^218^return processExpressionStatement (  ( ExpressionStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^203^^^^^188^218^return processExpressionStatement (  ( ExpressionStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^} else  if  ( node  >=  LabeledStatement )  {^204^^^^^189^219^} else  if  ( node instanceof LabeledStatement )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  >  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "   instanceof   node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "U" + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " tytype: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  &&  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  !=  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "ted nonexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + ":" + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^204^211^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^if  ( node  ^  ForInLoop )  {^219^^^^^204^234^if  ( node instanceof ForInLoop )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^if  ( node  ||  ForInLoop )  {^219^^^^^204^234^if  ( node instanceof ForInLoop )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^if  ( node instanceof ForLoop )  {^219^^^^^204^234^if  ( node instanceof ForInLoop )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^if  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " + typeToName ( node.getType (  )  ) )  {^219^^^^^204^234^if  ( node instanceof ForInLoop )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^if  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  + " type: " )  {^219^^^^^204^234^if  ( node instanceof ForInLoop )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^if  ( "Unexpected node type.  class: " + node.getClass (  ) )  {^219^^^^^204^234^if  ( node instanceof ForInLoop )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P9_Replace_Statement]^if  ( node instanceof Block )  {^219^^^^^204^234^if  ( node instanceof ForInLoop )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^} else  if  ( node  &  ForLoop )  {^221^^^^^206^236^} else  if  ( node instanceof ForLoop )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^} else  if  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " + typeToName ( node.getType (  )  ) )  {^221^^^^^206^236^} else  if  ( node instanceof ForLoop )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^} else  if  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  + " type: " )  {^221^^^^^206^236^} else  if  ( node instanceof ForLoop )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^} else  if  ( "Unexpected node type.  class: " + node.getClass (  ) )  {^221^^^^^206^236^} else  if  ( node instanceof ForLoop )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^} else {^221^^^^^206^236^} else  if  ( node instanceof ForLoop )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P8_Replace_Mix]^}   if  ( node instanceof ForLoop )  {^221^^^^^206^236^} else  if  ( node instanceof ForLoop )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P9_Replace_Statement]^} else  if  ( node instanceof LabeledStatement )  {^221^^^^^206^236^} else  if  ( node instanceof ForLoop )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P9_Replace_Statement]^} else  if  ( node instanceof VariableInitializer )  {^221^^^^^206^236^} else  if  ( node instanceof ForLoop )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  >  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  <  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "   instanceof   node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Un" + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: e" + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P8_Replace_Mix]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node .getClass (  )   )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.   instanceof   class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  <=  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  >>  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "pected node type." + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: type" + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof ForLoop )  {     return processForLoop (  (  ( ForLoop )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^224^^^^^221^228^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof Scope )  {     return processScope (  (  ( Scope )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^224^^^^^221^228^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^node .getType (  )   + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^225^226^227^^^221^228^node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^225^226^227^^^221^228^node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^227^^^^^221^228^Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^Token.typeToName ( node .getClass (  )   )  ) ;^227^^^^^221^228^Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processForInLoop (  ( ForLoop )  node ) ;^222^^^^^207^237^return processForLoop (  ( ForLoop )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^222^^^^^207^237^return processForLoop (  ( ForLoop )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.   instanceof   class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  &  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  >>  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: Unexpected node type. " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + "e:" + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected node type.  class: " + node .getType (  )   + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P8_Replace_Mix]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node .getClass (  )   )  ) ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  !=  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  >=  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  >=  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "ty" + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: ype:" + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P8_Replace_Mix]^throw new IllegalStateException ( "Unexpected node type.  class: " + ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof ForLoop )  {     return processForLoop (  (  ( ForLoop )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^224^^^^^209^239^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof Scope )  {     return processScope (  (  ( Scope )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^224^^^^^209^239^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^node .getType (  )   + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^225^226^227^^^210^240^node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^225^226^227^^^210^240^node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^Token.typeToName ( node .getClass (  )   )  ) ;^227^^^^^212^242^Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^227^^^^^212^242^Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processForLoop (  ( ForInLoop )  node ) ;^220^^^^^205^235^return processForInLoop (  ( ForInLoop )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^220^^^^^205^235^return processForInLoop (  ( ForInLoop )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  >=  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  ||  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  &&  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "ed node type." + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " typtype: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P8_Replace_Mix]^throw new IllegalStateException ( "Unexpected node type.  class: " + node .getType (  )   + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  >=  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "nexpnexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + "type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^221^228^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^if  ( node  ||  VariableDeclaration )  {^266^^^^^251^281^if  ( node instanceof VariableDeclaration )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^if  ( node  <<  VariableDeclaration )  {^266^^^^^251^281^if  ( node instanceof VariableDeclaration )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^if  ( node instanceof VariableInitializer )  {^266^^^^^251^281^if  ( node instanceof VariableDeclaration )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^if  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " + typeToName ( node.getType (  )  ) )  {^266^^^^^251^281^if  ( node instanceof VariableDeclaration )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^if  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  + " type: " )  {^266^^^^^251^281^if  ( node instanceof VariableDeclaration )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^if  ( "Unexpected node type.  class: " + node.getClass (  ) )  {^266^^^^^251^281^if  ( node instanceof VariableDeclaration )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^} else  if  ( node  <=  VariableInitializer )  {^268^^^^^253^283^} else  if  ( node instanceof VariableInitializer )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^} else  if  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " + typeToName ( node.getType (  )  ) )  {^268^^^^^253^283^} else  if  ( node instanceof VariableInitializer )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^} else  if  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  + " type: " )  {^268^^^^^253^283^} else  if  ( node instanceof VariableInitializer )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^} else  if  ( "Unexpected node type.  class: " + node.getClass (  ) )  {^268^^^^^253^283^} else  if  ( node instanceof VariableInitializer )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P6_Replace_Expression]^} else {^268^^^^^253^283^} else  if  ( node instanceof VariableInitializer )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P9_Replace_Statement]^} else  if  ( node instanceof LabeledStatement )  {^268^^^^^253^283^} else  if  ( node instanceof VariableInitializer )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P9_Replace_Statement]^} else  if  ( node instanceof ForLoop )  {^268^^^^^253^283^} else  if  ( node instanceof VariableInitializer )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof LabeledStatement )  {     return processLabeledStatement (  (  ( LabeledStatement )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^268^^^^^253^283^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof VariableDeclaration )  {     return processVariableDeclaration (  (  ( VariableDeclaration )   ( node )  )  ) ; }else     if  ( node instanceof VariableInitializer )  {         return processVariableInitializer (  (  ( VariableInitializer )   ( node )  )  ) ;     }else {         throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ;     }^268^^^^^253^283^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof Block )  {     return processBlock (  (  ( Block )   ( node )  )  ) ; }else     if  ( node instanceof Scope )  {         return processScope (  (  ( Scope )   ( node )  )  ) ;     }else {         throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ;     }^268^^^^^253^283^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof ExpressionStatement )  {     return processExpressionStatement (  (  ( ExpressionStatement )   ( node )  )  ) ; }else     if  ( node instanceof LabeledStatement )  {         return processLabeledStatement (  (  ( LabeledStatement )   ( node )  )  ) ;     }else {         throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ;     }^268^^^^^253^283^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof ForLoop )  {     return processForLoop (  (  ( ForLoop )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^268^^^^^253^283^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof Scope )  {     return processScope (  (  ( Scope )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^268^^^^^253^283^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof ForInLoop )  {     return processForInLoop (  (  ( ForInLoop )   ( node )  )  ) ; }else     if  ( node instanceof ForLoop )  {         return processForLoop (  (  ( ForLoop )   ( node )  )  ) ;     }else {         throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ;     }^268^^^^^253^283^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  >  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^268^275^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  &&  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^268^275^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  &&  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^268^275^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: U" + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^268^275^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^268^275^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node .getClass (  )   )  ) ;^271^272^273^274^^268^275^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  ==  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^268^275^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  &  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^268^275^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  ^  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^268^275^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class:  node t" + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^268^275^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: e" + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^268^275^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof ForLoop )  {     return processForLoop (  (  ( ForLoop )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^271^^^^^268^275^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof Scope )  {     return processScope (  (  ( Scope )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^271^^^^^268^275^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^node .getType (  )   + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^272^273^274^^^268^275^node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^272^273^274^^^268^275^node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^274^^^^^268^275^Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^Token.typeToName ( node .getClass (  )   )  ) ;^274^^^^^268^275^Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processVariableDeclaration (  ( VariableInitializer )  node ) ;^269^^^^^254^284^return processVariableInitializer (  ( VariableInitializer )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^269^^^^^254^284^return processVariableInitializer (  ( VariableInitializer )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  &&  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^256^286^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  <=  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^256^286^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  >>  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^256^286^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "ass:" + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^256^286^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  |  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^256^286^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  >=  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^256^286^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  <=  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^256^286^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: ected n" + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^256^286^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " t" + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^256^286^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected node type.  class: " + node .getType (  )   + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^256^286^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof ForLoop )  {     return processForLoop (  (  ( ForLoop )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^271^^^^^256^286^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P13_Insert_Block]^if  ( node instanceof Scope )  {     return processScope (  (  ( Scope )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^271^^^^^256^286^[Delete]^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^node .getType (  )   + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^272^273^274^^^257^287^node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^272^273^274^^^257^287^node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^Token.typeToName ( node .getClass (  )   )  ) ;^274^^^^^259^289^Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^274^^^^^259^289^Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processVariableInitializer (  ( VariableDeclaration )  node ) ;^267^^^^^252^282^return processVariableDeclaration (  ( VariableDeclaration )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^267^^^^^252^282^return processVariableDeclaration (  ( VariableDeclaration )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  <  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^268^275^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: ne" + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^268^275^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type:  type:" + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^268^275^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P8_Replace_Mix]^throw new IllegalStateException ( "Unexpected node type.  class: " + node .getType (  )   + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^268^275^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  <=  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^268^275^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  >=  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^268^275^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "pected node type.nexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^268^275^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processUnaryExpression (  ( InfixExpression )  node ) ;^145^^^^^130^160^return processInfixExpression (  ( InfixExpression )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processStringLiteral (  ( ArrayLiteral )  node ) ;^147^^^^^132^162^return processArrayLiteral (  ( ArrayLiteral )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processIfStatement (  ( Assignment )  node ) ;^160^^^^^145^175^return processAssignment (  ( Assignment )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processInfixExpression (  ( UnaryExpression )  node ) ;^170^^^^^155^185^return processUnaryExpression (  ( UnaryExpression )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processTryStatement (  ( BreakStatement )  node ) ;^183^^^^^168^198^return processBreakStatement (  ( BreakStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processFunctionNode (  ( FunctionCall )  node ) ;^185^^^^^170^200^return processFunctionCall (  ( FunctionCall )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processCatchClause (  ( SwitchCase )  node ) ;^188^^^^^173^203^return processSwitchCase (  ( SwitchCase )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processSwitchCase (  ( CatchClause )  node ) ;^191^^^^^176^206^return processCatchClause (  ( CatchClause )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processObjectLiteral (  ( ObjectProperty )  node ) ;^193^^^^^178^208^return processObjectProperty (  ( ObjectProperty )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processIfStatement (  ( ContinueStatement )  node ) ;^195^^^^^180^210^return processContinueStatement (  ( ContinueStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processForLoop (  ( DoLoop )  node ) ;^197^^^^^182^212^return processDoLoop (  ( DoLoop )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processUnaryExpression (  ( EmptyExpression )  node ) ;^199^^^^^184^214^return processEmptyExpression (  ( EmptyExpression )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processNumberLiteral (  ( KeywordLiteral )  node ) ;^217^^^^^202^232^return processKeywordLiteral (  ( KeywordLiteral )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processFunctionCall (  ( FunctionNode )  node ) ;^230^^^^^215^245^return processFunctionNode (  ( FunctionNode )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processPropertyGet (  ( ElementGet )  node ) ;^232^^^^^217^247^return processElementGet (  ( ElementGet )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processElementGet (  ( PropertyGet )  node ) ;^234^^^^^219^249^return processPropertyGet (  ( PropertyGet )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processInfixExpression (  ( ConditionalExpression )  node ) ;^236^^^^^221^251^return processConditionalExpression (  ( ConditionalExpression )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processWithStatement (  ( IfStatement )  node ) ;^238^^^^^223^253^return processIfStatement (  ( IfStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processName (  ( Label )  node ) ;^240^^^^^225^255^return processLabel (  ( Label )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processInfixExpression (  ( ParenthesizedExpression )  node ) ;^242^^^^^227^257^return processParenthesizedExpression (  ( ParenthesizedExpression )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processLabel (  ( Name )  node ) ;^244^^^^^229^259^return processName (  ( Name )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processInfixExpression (  ( NewExpression )  node ) ;^246^^^^^231^261^return processNewExpression (  ( NewExpression )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processKeywordLiteral (  ( NumberLiteral )  node ) ;^248^^^^^233^263^return processNumberLiteral (  ( NumberLiteral )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processRegExpLiteral (  ( ObjectLiteral )  node ) ;^250^^^^^235^265^return processObjectLiteral (  ( ObjectLiteral )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processObjectLiteral (  ( RegExpLiteral )  node ) ;^252^^^^^237^267^return processRegExpLiteral (  ( RegExpLiteral )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processTryStatement (  ( ReturnStatement )  node ) ;^254^^^^^239^269^return processReturnStatement (  ( ReturnStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return process (  ( AstRoot )  node ) ;^256^^^^^241^271^return processAstRoot (  ( AstRoot )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processArrayLiteral (  ( StringLiteral )  node ) ;^258^^^^^243^273^return processStringLiteral (  ( StringLiteral )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processWithStatement (  ( SwitchStatement )  node ) ;^260^^^^^245^275^return processSwitchStatement (  ( SwitchStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processTryStatement (  ( ThrowStatement )  node ) ;^262^^^^^247^277^return processThrowStatement (  ( ThrowStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processThrowStatement (  ( TryStatement )  node ) ;^264^^^^^249^279^return processTryStatement (  ( TryStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processDoLoop (  ( WhileLoop )  node ) ;^277^^^^^262^292^return processWhileLoop (  ( WhileLoop )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return processSwitchStatement (  ( WithStatement )  node ) ;^279^^^^^264^294^return processWithStatement (  ( WithStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  ||  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^162^192^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  ||  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^162^192^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "xp" + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^162^192^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: yp" + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^162^192^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P8_Replace_Mix]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node .getClass (  )   )  ) ;^177^178^179^180^^162^192^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  <  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  &  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  <=  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "de " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type:  " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected node type.  class: " + node .getType (  )   + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  |  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  <=  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "enexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + "type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  &  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^256^286^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  <<  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^256^286^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  &&  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^256^286^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: type. " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^256^286^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " tytype: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^256^286^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node .getClass (  )   )  ) ;^271^272^273^274^^256^286^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  >=  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^162^192^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "xpected node type. nexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^162^192^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + "t" + Token.typeToName ( node.getType (  )  )  ) ;^177^178^179^180^^162^192^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  ^  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( " cl" + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type" + Token.typeToName ( node.getType (  )  )  ) ;^207^208^209^210^^192^222^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  ||  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: pected" + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + "ty" + Token.typeToName ( node.getType (  )  )  ) ;^224^225^226^227^^209^239^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  <  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^256^286^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected node type.  class: "  !=  node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^256^286^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^throw new IllegalStateException ( "xpected node type. " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^271^272^273^274^^256^286^throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^switch  ( node .getClass (  )   )  {^120^^^^^105^135^switch  ( node.getType (  )  )  {^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^145^^^^^130^160^return processInfixExpression (  ( InfixExpression )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^147^^^^^132^162^return processArrayLiteral (  ( ArrayLiteral )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^160^^^^^145^175^return processAssignment (  ( Assignment )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^170^^^^^155^185^return processUnaryExpression (  ( UnaryExpression )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^node .getType (  )   + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^178^179^180^^^163^193^node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^183^^^^^168^198^return processBreakStatement (  ( BreakStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^185^^^^^170^200^return processFunctionCall (  ( FunctionCall )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^188^^^^^173^203^return processSwitchCase (  ( SwitchCase )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^191^^^^^176^206^return processCatchClause (  ( CatchClause )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^193^^^^^178^208^return processObjectProperty (  ( ObjectProperty )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^195^^^^^180^210^return processContinueStatement (  ( ContinueStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^197^^^^^182^212^return processDoLoop (  ( DoLoop )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^199^^^^^184^214^return processEmptyExpression (  ( EmptyExpression )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^node .getType (  )   + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^208^209^210^^^193^223^node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^217^^^^^202^232^return processKeywordLiteral (  ( KeywordLiteral )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^230^^^^^215^245^return processFunctionNode (  ( FunctionNode )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^232^^^^^217^247^return processElementGet (  ( ElementGet )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^234^^^^^219^249^return processPropertyGet (  ( PropertyGet )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^236^^^^^221^251^return processConditionalExpression (  ( ConditionalExpression )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^238^^^^^223^253^return processIfStatement (  ( IfStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^240^^^^^225^255^return processLabel (  ( Label )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^242^^^^^227^257^return processParenthesizedExpression (  ( ParenthesizedExpression )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^244^^^^^229^259^return processName (  ( Name )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^246^^^^^231^261^return processNewExpression (  ( NewExpression )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^248^^^^^233^263^return processNumberLiteral (  ( NumberLiteral )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^250^^^^^235^265^return processObjectLiteral (  ( ObjectLiteral )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^252^^^^^237^267^return processRegExpLiteral (  ( RegExpLiteral )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^254^^^^^239^269^return processReturnStatement (  ( ReturnStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^256^^^^^241^271^return processAstRoot (  ( AstRoot )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^258^^^^^243^273^return processStringLiteral (  ( StringLiteral )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^260^^^^^245^275^return processSwitchStatement (  ( SwitchStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^262^^^^^247^277^return processThrowStatement (  ( ThrowStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^264^^^^^249^279^return processTryStatement (  ( TryStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^277^^^^^262^292^return processWhileLoop (  ( WhileLoop )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^279^^^^^264^294^return processWithStatement (  ( WithStatement )  node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^return process ( node ) ;^281^^^^^266^296^return processIllegalToken ( node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^281^^^^^266^296^return processIllegalToken ( node ) ;^[CLASS] TypeSafeDispatcher  [METHOD] process [RETURN_TYPE] T   AstNode node [VARIABLES] boolean  AstNode  node  
