[P1_Replace_Type]^private static final char configResource = "com.google.javascript.jscomp.parsing.ParserConfig";^37^38^^^^37^38^private static final String configResource = "com.google.javascript.jscomp.parsing.ParserConfig";^[CLASS] ParserRunner   [VARIABLES] 
[P3_Replace_Literal]^private static final String configResource = "com.google.javascript.jscomp.parsing.ParserConfig.js";^37^38^^^^37^38^private static final String configResource = "com.google.javascript.jscomp.parsing.ParserConfig";^[CLASS] ParserRunner   [VARIABLES] 
[P8_Replace_Mix]^private static Set<String> annotationNames  = null ;^40^^^^^35^45^private static Set<String> annotationNames = null;^[CLASS] ParserRunner   [VARIABLES] 
[P14_Delete_Statement]^^50^^^^^49^52^initAnnotationNames (  ) ;^[CLASS] ParserRunner  [METHOD] getAnnotationNames [RETURN_TYPE] Set   [VARIABLES] Set  annotationNames  String  configResource  boolean  
[P12_Insert_Condition]^if  ( annotationNames != null )  { initAnnotationNames (  ) ; }^50^^^^^49^52^initAnnotationNames (  ) ;^[CLASS] ParserRunner  [METHOD] getAnnotationNames [RETURN_TYPE] Set   [VARIABLES] Set  annotationNames  String  configResource  boolean  
[P2_Replace_Operator]^if  ( annotationNames == null )  {^55^^^^^54^66^if  ( annotationNames != null )  {^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P8_Replace_Mix]^if  ( annotationNames != this )  {^55^^^^^54^66^if  ( annotationNames != null )  {^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P15_Unwrap_Block]^return ;^55^56^57^^^54^66^if  ( annotationNames != null )  { return; }^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P16_Remove_Block]^^55^56^57^^^54^66^if  ( annotationNames != null )  { return; }^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P14_Delete_Statement]^^59^60^^^^54^66^Set<String> trimmedNames = Sets.newHashSet (  ) ; ResourceBundle config = ResourceBundle.getBundle ( configResource ) ;^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P5_Replace_Variable]^ResourceBundle config = ResourceBundle.getBundle ( name ) ;^60^^^^^54^66^ResourceBundle config = ResourceBundle.getBundle ( configResource ) ;^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P7_Replace_Invocation]^ResourceBundle config = ResourceBundle .getString ( name )  ;^60^^^^^54^66^ResourceBundle config = ResourceBundle.getBundle ( configResource ) ;^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P14_Delete_Statement]^^60^61^^^^54^66^ResourceBundle config = ResourceBundle.getBundle ( configResource ) ; String[] names = config.getString ( "jsdoc.annotations" ) .split ( "," ) ;^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P3_Replace_Literal]^String[] names = config.getString ( "jsdoc.annotationsd" ) .split ( "," ) ;^61^^^^^54^66^String[] names = config.getString ( "jsdoc.annotations" ) .split ( "," ) ;^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P3_Replace_Literal]^String[] names = config.getString ( "jsdoc.annotations" ) .split ( "" ) ;^61^^^^^54^66^String[] names = config.getString ( "jsdoc.annotations" ) .split ( "," ) ;^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P7_Replace_Invocation]^String[] names = config.getString ( "jsdoc.annotations" )  .trim (  )  ;^61^^^^^54^66^String[] names = config.getString ( "jsdoc.annotations" ) .split ( "," ) ;^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P3_Replace_Literal]^String[] names = config.getString ( "jsdoc.annotationssdoc." ) .split ( "," ) ;^61^^^^^54^66^String[] names = config.getString ( "jsdoc.annotations" ) .split ( "," ) ;^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P14_Delete_Statement]^^61^^^^^54^66^String[] names = config.getString ( "jsdoc.annotations" ) .split ( "," ) ;^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P3_Replace_Literal]^String[] names = config.getString ( "jsdoc.annotationssdoc.anno" ) .split ( "," ) ;^61^^^^^54^66^String[] names = config.getString ( "jsdoc.annotations" ) .split ( "," ) ;^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P7_Replace_Invocation]^String[] names = config .getBundle ( name )  .split ( "," ) ;^61^^^^^54^66^String[] names = config.getString ( "jsdoc.annotations" ) .split ( "," ) ;^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P1_Replace_Type]^for  ( char name : names )  {^62^^^^^54^66^for  ( String name : names )  {^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P5_Replace_Variable]^trimmedNames.add ( configResource.trim (  )  ) ;^63^^^^^54^66^trimmedNames.add ( name.trim (  )  ) ;^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P7_Replace_Invocation]^trimmedNames.add ( name.split (  )  ) ;^63^^^^^54^66^trimmedNames.add ( name.trim (  )  ) ;^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P14_Delete_Statement]^^63^^^^^54^66^trimmedNames.add ( name.trim (  )  ) ;^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P8_Replace_Mix]^trimmedNames.add ( configResource .split ( name )   ) ;^63^^^^^54^66^trimmedNames.add ( name.trim (  )  ) ;^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P8_Replace_Mix]^annotationNames =  ImmutableSet.copyOf ( null ) ;^65^^^^^54^66^annotationNames = ImmutableSet.copyOf ( trimmedNames ) ;^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P14_Delete_Statement]^^65^^^^^54^66^annotationNames = ImmutableSet.copyOf ( trimmedNames ) ;^[CLASS] ParserRunner  [METHOD] initAnnotationNames [RETURN_TYPE] void   [VARIABLES] ResourceBundle  config  Set  annotationNames  trimmedNames  String  configResource  name  String[]  names  boolean  
[P14_Delete_Statement]^^86^^^^^71^101^initAnnotationNames (  ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P12_Insert_Condition]^if  ( annotationNames != null )  { initAnnotationNames (  ) ; }^86^^^^^71^101^initAnnotationNames (  ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P7_Replace_Invocation]^Context cx = Context.exit (  ) ;^88^^^^^73^103^Context cx = Context.enter (  ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P7_Replace_Invocation]^Context cx = Context .setErrorReporter ( errorReporter )  ;^88^^^^^73^103^Context cx = Context.enter (  ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P14_Delete_Statement]^^88^89^^^^73^103^Context cx = Context.enter (  ) ; cx.setErrorReporter ( errorReporter ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^Context.exit (  ) ;Context cx = Context.enter (  ) ;^88^^^^^73^103^Context cx = Context.enter (  ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P14_Delete_Statement]^^89^90^^^^74^104^cx.setErrorReporter ( errorReporter ) ; cx.setLanguageVersion ( Context.VERSION_1_5 ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P7_Replace_Invocation]^cx.setErrorReporter ( Context.VERSION_1_5 ) ;^90^^^^^75^105^cx.setLanguageVersion ( Context.VERSION_1_5 ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P7_Replace_Invocation]^cx .setErrorReporter ( errorReporter )  ;^90^^^^^75^105^cx.setLanguageVersion ( Context.VERSION_1_5 ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P14_Delete_Statement]^^90^^^^^75^105^cx.setLanguageVersion ( Context.VERSION_1_5 ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P4_Replace_Constructor]^CompilerEnvirons compilerEnv = new Parser ( compilerEnv, errorReporter )  ;^91^^^^^76^106^CompilerEnvirons compilerEnv = new CompilerEnvirons (  ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P14_Delete_Statement]^^92^93^^^^77^107^compilerEnv.initFromContext ( cx ) ; compilerEnv.setRecordingComments ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^compilerEnv.setRecordingComments ( true ) ;compilerEnv.initFromContext ( cx ) ;^92^^^^^77^107^compilerEnv.initFromContext ( cx ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P3_Replace_Literal]^compilerEnv.setRecordingComments ( false ) ;^93^^^^^78^108^compilerEnv.setRecordingComments ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P8_Replace_Mix]^compilerEnv .setRecordingLocalJsDocComments ( isIdeMode )  ;^93^^^^^78^108^compilerEnv.setRecordingComments ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P14_Delete_Statement]^^93^^^^^78^108^compilerEnv.setRecordingComments ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^compilerEnv.setAllowMemberExprAsFunctionName ( true ) ;compilerEnv.setRecordingComments ( true ) ;^93^^^^^78^108^compilerEnv.setRecordingComments ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^compilerEnv.initFromContext ( cx ) ;compilerEnv.setRecordingComments ( true ) ;^93^^^^^78^108^compilerEnv.setRecordingComments ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^compilerEnv.setWarnTrailingComma ( true ) ;compilerEnv.setRecordingComments ( true ) ;^93^^^^^78^108^compilerEnv.setRecordingComments ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^compilerEnv.setRecordingLocalJsDocComments ( true ) ;compilerEnv.setRecordingComments ( true ) ;^93^^^^^78^108^compilerEnv.setRecordingComments ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^compilerEnv.setReservedKeywordAsIdentifier ( true ) ;compilerEnv.setRecordingComments ( true ) ;^93^^^^^78^108^compilerEnv.setRecordingComments ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P3_Replace_Literal]^compilerEnv.setRecordingLocalJsDocComments ( false ) ;^94^^^^^79^109^compilerEnv.setRecordingLocalJsDocComments ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P7_Replace_Invocation]^compilerEnv .setRecordingComments ( isIdeMode )  ;^94^^^^^79^109^compilerEnv.setRecordingLocalJsDocComments ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P14_Delete_Statement]^^94^^^^^79^109^compilerEnv.setRecordingLocalJsDocComments ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^compilerEnv.setAllowMemberExprAsFunctionName ( true ) ;compilerEnv.setRecordingLocalJsDocComments ( true ) ;^94^^^^^79^109^compilerEnv.setRecordingLocalJsDocComments ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^compilerEnv.setWarnTrailingComma ( true ) ;compilerEnv.setRecordingLocalJsDocComments ( true ) ;^94^^^^^79^109^compilerEnv.setRecordingLocalJsDocComments ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^compilerEnv.setRecordingComments ( true ) ;compilerEnv.setRecordingLocalJsDocComments ( true ) ;^94^^^^^79^109^compilerEnv.setRecordingLocalJsDocComments ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^compilerEnv.setReservedKeywordAsIdentifier ( true ) ;compilerEnv.setRecordingLocalJsDocComments ( true ) ;^94^^^^^79^109^compilerEnv.setRecordingLocalJsDocComments ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P3_Replace_Literal]^compilerEnv.setWarnTrailingComma ( false ) ;^95^^^^^80^110^compilerEnv.setWarnTrailingComma ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P14_Delete_Statement]^^95^^^^^80^110^compilerEnv.setWarnTrailingComma ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^compilerEnv.setAllowMemberExprAsFunctionName ( true ) ;compilerEnv.setWarnTrailingComma ( true ) ;^95^^^^^80^110^compilerEnv.setWarnTrailingComma ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^compilerEnv.setRecordingLocalJsDocComments ( true ) ;compilerEnv.setWarnTrailingComma ( true ) ;^95^^^^^80^110^compilerEnv.setWarnTrailingComma ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^compilerEnv.setRecordingComments ( true ) ;compilerEnv.setWarnTrailingComma ( true ) ;^95^^^^^80^110^compilerEnv.setWarnTrailingComma ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^compilerEnv.setReservedKeywordAsIdentifier ( true ) ;compilerEnv.setWarnTrailingComma ( true ) ;^95^^^^^80^110^compilerEnv.setWarnTrailingComma ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P15_Unwrap_Block]^compilerEnv.setReservedKeywordAsIdentifier(true); compilerEnv.setAllowMemberExprAsFunctionName(true);^96^97^98^99^^81^111^if  ( isIdeMode )  { compilerEnv.setReservedKeywordAsIdentifier ( true ) ; compilerEnv.setAllowMemberExprAsFunctionName ( true ) ; }^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P16_Remove_Block]^^96^97^98^99^^81^111^if  ( isIdeMode )  { compilerEnv.setReservedKeywordAsIdentifier ( true ) ; compilerEnv.setAllowMemberExprAsFunctionName ( true ) ; }^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P3_Replace_Literal]^compilerEnv.setReservedKeywordAsIdentifier ( false ) ;^97^^^^^82^112^compilerEnv.setReservedKeywordAsIdentifier ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P14_Delete_Statement]^^97^98^99^^^82^112^compilerEnv.setReservedKeywordAsIdentifier ( true ) ; compilerEnv.setAllowMemberExprAsFunctionName ( true ) ; }^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P3_Replace_Literal]^compilerEnv.setAllowMemberExprAsFunctionName ( false ) ;^98^^^^^83^113^compilerEnv.setAllowMemberExprAsFunctionName ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P14_Delete_Statement]^^98^^^^^83^113^compilerEnv.setAllowMemberExprAsFunctionName ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^compilerEnv.setWarnTrailingComma ( true ) ;compilerEnv.setAllowMemberExprAsFunctionName ( true ) ;^98^^^^^83^113^compilerEnv.setAllowMemberExprAsFunctionName ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^compilerEnv.setRecordingLocalJsDocComments ( true ) ;compilerEnv.setAllowMemberExprAsFunctionName ( true ) ;^98^^^^^83^113^compilerEnv.setAllowMemberExprAsFunctionName ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^compilerEnv.setRecordingComments ( true ) ;compilerEnv.setAllowMemberExprAsFunctionName ( true ) ;^98^^^^^83^113^compilerEnv.setAllowMemberExprAsFunctionName ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^compilerEnv.setReservedKeywordAsIdentifier ( true ) ;compilerEnv.setAllowMemberExprAsFunctionName ( true ) ;^98^^^^^83^113^compilerEnv.setAllowMemberExprAsFunctionName ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P8_Replace_Mix]^compilerEnv .setRecordingComments ( isIdeMode )  ;^97^^^^^82^112^compilerEnv.setReservedKeywordAsIdentifier ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P7_Replace_Invocation]^compilerEnv .setWarnTrailingComma ( isIdeMode )  ;^98^^^^^83^113^compilerEnv.setAllowMemberExprAsFunctionName ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P4_Replace_Constructor]^Parser p = new Parser (  errorReporter ) ;^101^^^^^86^116^Parser p = new Parser ( compilerEnv, errorReporter ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P4_Replace_Constructor]^Parser p = new Parser ( compilerEnv ) ;^101^^^^^86^116^Parser p = new Parser ( compilerEnv, errorReporter ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^Parser p = new Parser ( errorReporter, compilerEnv ) ;^101^^^^^86^116^Parser p = new Parser ( compilerEnv, errorReporter ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^Node root = null;AstRoot astRoot = null;^102^^^^^87^117^AstRoot astRoot = null;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P3_Replace_Literal]^astRoot = p.parse ( sourceString, sourceName,  ) ;^104^^^^^89^119^astRoot = p.parse ( sourceString, sourceName, 1 ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^astRoot = p.parse ( name, sourceName, 1 ) ;^104^^^^^89^119^astRoot = p.parse ( sourceString, sourceName, 1 ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^astRoot = p.parse ( sourceString, name, 1 ) ;^104^^^^^89^119^astRoot = p.parse ( sourceString, sourceName, 1 ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^astRoot = p.parse (  sourceName, 1 ) ;^104^^^^^89^119^astRoot = p.parse ( sourceString, sourceName, 1 ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^astRoot = p.parse ( sourceString,  1 ) ;^104^^^^^89^119^astRoot = p.parse ( sourceString, sourceName, 1 ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^astRoot = sourceString.parse ( p, sourceName, 1 ) ;^104^^^^^89^119^astRoot = p.parse ( sourceString, sourceName, 1 ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^astRoot = p.parse ( sourceName, sourceString, 1 ) ;^104^^^^^89^119^astRoot = p.parse ( sourceString, sourceName, 1 ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P8_Replace_Mix]^astRoot = p.parse ( sourceString, sourceName, 0 ) ;^104^^^^^89^119^astRoot = p.parse ( sourceString, sourceName, 1 ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P3_Replace_Literal]^astRoot = p.parse ( sourceString, sourceName, -7 ) ;^104^^^^^89^119^astRoot = p.parse ( sourceString, sourceName, 1 ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^astRoot = sourceName.parse ( sourceString, p, 1 ) ;^104^^^^^89^119^astRoot = p.parse ( sourceString, sourceName, 1 ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P14_Delete_Statement]^^104^^^^^89^119^astRoot = p.parse ( sourceString, sourceName, 1 ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P3_Replace_Literal]^astRoot = p.parse ( sourceString, sourceName, -1 ) ;^104^^^^^89^119^astRoot = p.parse ( sourceString, sourceName, 1 ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P7_Replace_Invocation]^astRoot = p .parse ( name , sourceString , isIdeMode , typeRegistry , errorReporter , logger )  ;^104^^^^^89^119^astRoot = p.parse ( sourceString, sourceName, 1 ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P8_Replace_Mix]^astRoot = p.parse ( sourceString, sourceName, 1 + 3 ) ;^104^^^^^89^119^astRoot = p.parse ( sourceString, sourceName, 1 ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^astRoot = p.parse ( sourceString, sourceString, 1 ) ;^104^^^^^89^119^astRoot = p.parse ( sourceString, sourceName, 1 ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P2_Replace_Operator]^logger.info ( "Error parsing " + sourceName + ": " + e.getMessage (  |  )  ) ;^106^^^^^91^121^logger.info ( "Error parsing " + sourceName + ": " + e.getMessage (  )  ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P2_Replace_Operator]^logger.info ( "Error parsing "  |  sourceName  |  ": " + e.getMessage (  )  ) ;^106^^^^^91^121^logger.info ( "Error parsing " + sourceName + ": " + e.getMessage (  )  ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P2_Replace_Operator]^logger.info ( "Error parsing "  <<  sourceName + ": " + e.getMessage (  )  ) ;^106^^^^^91^121^logger.info ( "Error parsing " + sourceName + ": " + e.getMessage (  )  ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P3_Replace_Literal]^logger.info ( "rror parsing " + sourceName + ": " + e.getMessage (  )  ) ;^106^^^^^91^121^logger.info ( "Error parsing " + sourceName + ": " + e.getMessage (  )  ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P3_Replace_Literal]^logger.info ( "Error parsing " + sourceName + ":" + e.getMessage (  )  ) ;^106^^^^^91^121^logger.info ( "Error parsing " + sourceName + ": " + e.getMessage (  )  ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^logger.info ( "Error parsing " + sourceString + ": " + e.getMessage (  )  ) ;^106^^^^^91^121^logger.info ( "Error parsing " + sourceName + ": " + e.getMessage (  )  ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^logger.info ( "Error parsing " + e + ": " + sourceName.getMessage (  )  ) ;^106^^^^^91^121^logger.info ( "Error parsing " + sourceName + ": " + e.getMessage (  )  ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P14_Delete_Statement]^^106^^^^^91^121^logger.info ( "Error parsing " + sourceName + ": " + e.getMessage (  )  ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P7_Replace_Invocation]^Context.enter (  ) ;^108^^^^^93^123^Context.exit (  ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P14_Delete_Statement]^^108^^^^^93^123^Context.exit (  ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^Context cx = Context.enter (  ) ;Context.exit (  ) ;^108^^^^^93^123^Context.exit (  ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P11_Insert_Donor_Statement]^AstRoot astRoot = null;Node root = null;^110^^^^^95^125^Node root = null;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P2_Replace_Operator]^if  ( astRoot == null )  {^111^^^^^96^126^if  ( astRoot != null )  {^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P8_Replace_Mix]^if  ( astRoot != true )  {^111^^^^^96^126^if  ( astRoot != null )  {^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^root = IRFactory.transformTree ( astRoot, sourceName, config, errorReporter ) ;^114^115^^^^99^129^root = IRFactory.transformTree ( astRoot, sourceString, config, errorReporter ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^root = IRFactory.transformTree (  sourceString, config, errorReporter ) ;^114^115^^^^99^129^root = IRFactory.transformTree ( astRoot, sourceString, config, errorReporter ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^root = IRFactory.transformTree ( astRoot,  config, errorReporter ) ;^114^115^^^^99^129^root = IRFactory.transformTree ( astRoot, sourceString, config, errorReporter ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^root = IRFactory.transformTree ( astRoot, sourceString,  errorReporter ) ;^114^115^^^^99^129^root = IRFactory.transformTree ( astRoot, sourceString, config, errorReporter ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^root = IRFactory.transformTree ( astRoot, sourceString, config ) ;^114^115^^^^99^129^root = IRFactory.transformTree ( astRoot, sourceString, config, errorReporter ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^root = IRFactory.transformTree ( sourceString, astRoot, config, errorReporter ) ;^114^115^^^^99^129^root = IRFactory.transformTree ( astRoot, sourceString, config, errorReporter ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^root = IRFactory.transformTree ( astRoot, config, sourceString, errorReporter ) ;^114^115^^^^99^129^root = IRFactory.transformTree ( astRoot, sourceString, config, errorReporter ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^root = IRFactory.transformTree ( config, sourceString, astRoot, errorReporter ) ;^114^115^^^^99^129^root = IRFactory.transformTree ( astRoot, sourceString, config, errorReporter ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^root = IRFactory.transformTree ( errorReporter, sourceString, config, astRoot ) ;^114^115^^^^99^129^root = IRFactory.transformTree ( astRoot, sourceString, config, errorReporter ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P8_Replace_Mix]^root =  IRFactory.transformTree ( null, sourceString, config, errorReporter ) ;^114^115^^^^99^129^root = IRFactory.transformTree ( astRoot, sourceString, config, errorReporter ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P4_Replace_Constructor]^Config config = new Config (  annotationNames, isIdeMode ) ;^112^113^^^^97^127^Config config = new Config ( typeRegistry, annotationNames, isIdeMode ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P4_Replace_Constructor]^Config config = new Config ( typeRegistry, annotationNames ) ;^112^113^^^^97^127^Config config = new Config ( typeRegistry, annotationNames, isIdeMode ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^Config config = new Config ( typeRegistry,  isIdeMode ) ;^112^113^^^^97^127^Config config = new Config ( typeRegistry, annotationNames, isIdeMode ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^Config config = new Config ( annotationNames, typeRegistry, isIdeMode ) ;^112^113^^^^97^127^Config config = new Config ( typeRegistry, annotationNames, isIdeMode ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^Config config = new Config ( typeRegistry, isIdeMode, annotationNames ) ;^112^113^^^^97^127^Config config = new Config ( typeRegistry, annotationNames, isIdeMode ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^Config config = new Config ( typeRegistry, this, isIdeMode ) ;^112^113^^^^97^127^Config config = new Config ( typeRegistry, annotationNames, isIdeMode ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^Config config = new Config ( isIdeMode, annotationNames, typeRegistry ) ;^112^113^^^^97^127^Config config = new Config ( typeRegistry, annotationNames, isIdeMode ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P13_Insert_Block]^if  ( astRoot != null )  {     Config config = new Config ( typeRegistry, annotationNames, isIdeMode ) ;     root = transformTree ( astRoot, sourceString, config, errorReporter ) ;     root.setIsSyntheticBlock ( true ) ; }^112^^^^^97^127^[Delete]^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P14_Delete_Statement]^^114^115^116^117^^99^129^root = IRFactory.transformTree ( astRoot, sourceString, config, errorReporter ) ; root.setIsSyntheticBlock ( true ) ; }^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P3_Replace_Literal]^root.setIsSyntheticBlock ( false ) ;^116^^^^^101^131^root.setIsSyntheticBlock ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P14_Delete_Statement]^^116^^^^^101^131^root.setIsSyntheticBlock ( true ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
[P5_Replace_Variable]^root = IRFactory.transformTree ( astRoot, sourceString, errorReporter, config ) ;^114^115^^^^99^129^root = IRFactory.transformTree ( astRoot, sourceString, config, errorReporter ) ;^[CLASS] ParserRunner  [METHOD] parse [RETURN_TYPE] Node   String sourceName String sourceString boolean isIdeMode JSTypeRegistry typeRegistry ErrorReporter errorReporter Logger logger [VARIABLES] Context  cx  Set  annotationNames  trimmedNames  Config  config  Node  root  CompilerEnvirons  compilerEnv  String  configResource  name  sourceName  sourceString  Logger  logger  Parser  p  JSTypeRegistry  typeRegistry  ErrorReporter  errorReporter  boolean  isIdeMode  EvaluatorException  e  AstRoot  astRoot  
