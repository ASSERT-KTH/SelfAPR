[P8_Replace_Mix]^private  Scope jsScope;^47^^^^^42^52^private final Scope jsScope;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [VARIABLES] 
[P8_Replace_Mix]^Node node;^67^^^^^62^72^final Node node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [VARIABLES] 
[P8_Replace_Mix]^final Set<Var> depends ;^68^^^^^63^73^final Set<Var> depends = Sets.newHashSet (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [VARIABLES] 
[P4_Replace_Constructor]^super ( cfg, super ( cfg,  new MustDef ( input )   ) ;^53^^^^^51^58^super ( cfg, new JoinOp (  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[P14_Delete_Statement]^^53^54^^^^51^58^super ( cfg, new JoinOp (  )  ) ; this.jsScope = jsScope;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[P8_Replace_Mix]^this.jsScope =  null;^54^^^^^51^58^this.jsScope = jsScope;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[P11_Insert_Donor_Statement]^this.node = node;this.jsScope = jsScope;^54^^^^^51^58^this.jsScope = jsScope;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[P8_Replace_Mix]^this.compiler =  null;^55^^^^^51^58^this.compiler = compiler;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[P11_Insert_Donor_Statement]^this.node = node;this.compiler = compiler;^55^^^^^51^58^this.compiler = compiler;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[P8_Replace_Mix]^this.escaped  =  this.escaped ;^56^^^^^51^58^this.escaped = Sets.newHashSet (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[P11_Insert_Donor_Statement]^reachingDef = Maps.newHashMap (  ) ;this.escaped = Sets.newHashSet (  ) ;^56^^^^^51^58^this.escaped = Sets.newHashSet (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[P14_Delete_Statement]^^56^57^^^^51^58^this.escaped = Sets.newHashSet (  ) ; computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[P5_Replace_Variable]^computeEscaped ( jsScope, this, compiler ) ;^57^^^^^51^58^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[P5_Replace_Variable]^computeEscaped (  escaped, compiler ) ;^57^^^^^51^58^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[P5_Replace_Variable]^computeEscaped ( jsScope, escaped ) ;^57^^^^^51^58^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[P5_Replace_Variable]^computeEscaped ( jsScope,  compiler ) ;^57^^^^^51^58^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[P5_Replace_Variable]^computeEscaped ( compiler, escaped, jsScope ) ;^57^^^^^51^58^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[P5_Replace_Variable]^computeEscaped ( escaped, jsScope, compiler ) ;^57^^^^^51^58^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[P14_Delete_Statement]^^57^^^^^51^58^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[P8_Replace_Mix]^this.node =  null;^70^^^^^69^71^this.node = node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] Node)   Node node [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Map  reachingDef  Node  node  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.node = node;^70^^^^^69^71^this.node = node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] Node)   Node node [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Map  reachingDef  Node  node  
[P11_Insert_Donor_Statement]^this.jsScope = jsScope;this.node = node;^70^^^^^69^71^this.node = node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] Node)   Node node [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Map  reachingDef  Node  node  
[P7_Replace_Invocation]^reachingDef = Maps .newHashMap (  )  ;^113^^^^^112^114^reachingDef = Maps.newHashMap (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef()   [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Map  reachingDef  Node  node  
[P8_Replace_Mix]^reachingDef ;^113^^^^^112^114^reachingDef = Maps.newHashMap (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef()   [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Map  reachingDef  Node  node  
[P11_Insert_Donor_Statement]^this.escaped = Sets.newHashSet (  ) ;reachingDef = Maps.newHashMap (  ) ;^113^^^^^112^114^reachingDef = Maps.newHashMap (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef()   [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Map  reachingDef  Node  node  
[P11_Insert_Donor_Statement]^reachingDef = Maps.newHashMap ( other.reachingDef ) ;reachingDef = Maps.newHashMap (  ) ;^113^^^^^112^114^reachingDef = Maps.newHashMap (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef()   [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Map  reachingDef  Node  node  
[P14_Delete_Statement]^^113^^^^^112^114^reachingDef = Maps.newHashMap (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef()   [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Map  reachingDef  Node  node  
[P14_Delete_Statement]^^117^^^^^116^125^this (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] Iterator)   Var> vars [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  node  Iterator  vars  Map  reachingDef  
[P8_Replace_Mix]^while ( vars .next (  )   )  {^118^^^^^116^125^while ( vars.hasNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] Iterator)   Var> vars [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  node  Iterator  vars  Map  reachingDef  
[P4_Replace_Constructor]^reachingDef.put ( var, reachingDef.put ( var,  new Definition ( node )   )  ) ;^123^^^^^116^125^reachingDef.put ( var, new Definition ( var.scope.getRootNode (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] Iterator)   Var> vars [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  node  Iterator  vars  Map  reachingDef  
[P5_Replace_Variable]^reachingDef.put (  new Definition ( var.scope.getRootNode (  )  )  ) ;^123^^^^^116^125^reachingDef.put ( var, new Definition ( var.scope.getRootNode (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] Iterator)   Var> vars [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  node  Iterator  vars  Map  reachingDef  
[P8_Replace_Mix]^Var var = 2.next (  ) ;^119^^^^^116^125^Var var = vars.next (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] Iterator)   Var> vars [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  node  Iterator  vars  Map  reachingDef  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;Var var = vars.next (  ) ;^119^^^^^116^125^Var var = vars.next (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] Iterator)   Var> vars [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  node  Iterator  vars  Map  reachingDef  
[P11_Insert_Donor_Statement]^Var var = jsScope.getVar ( name ) ;Var var = vars.next (  ) ;^119^^^^^116^125^Var var = vars.next (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] Iterator)   Var> vars [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  node  Iterator  vars  Map  reachingDef  
[P14_Delete_Statement]^^119^^^^^116^125^Var var = vars.next (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] Iterator)   Var> vars [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  node  Iterator  vars  Map  reachingDef  
[P14_Delete_Statement]^^123^^^^^116^125^reachingDef.put ( var, new Definition ( var.scope.getRootNode (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] Iterator)   Var> vars [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  node  Iterator  vars  Map  reachingDef  
[P14_Delete_Statement]^^118^119^^^^116^125^while ( vars.hasNext (  )  )  { Var var = vars.next (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] Iterator)   Var> vars [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  node  Iterator  vars  Map  reachingDef  
[P5_Replace_Variable]^reachingDef = Maps.newHashMap ( other.reachingDef.reachingDef ) ;^133^^^^^132^134^reachingDef = Maps.newHashMap ( other.reachingDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef)   MustDef other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Map  reachingDef  MustDef  other  
[P5_Replace_Variable]^reachingDef = Maps.newHashMap ( other ) ;^133^^^^^132^134^reachingDef = Maps.newHashMap ( other.reachingDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef)   MustDef other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Map  reachingDef  MustDef  other  
[P8_Replace_Mix]^reachingDef =  Maps.newHashMap ( null.reachingDef ) ;^133^^^^^132^134^reachingDef = Maps.newHashMap ( other.reachingDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef)   MustDef other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Map  reachingDef  MustDef  other  
[P11_Insert_Donor_Statement]^reachingDef = Maps.newHashMap (  ) ;reachingDef = Maps.newHashMap ( other.reachingDef ) ;^133^^^^^132^134^reachingDef = Maps.newHashMap ( other.reachingDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef)   MustDef other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Map  reachingDef  MustDef  other  
[P14_Delete_Statement]^^133^^^^^132^134^reachingDef = Maps.newHashMap ( other.reachingDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef)   MustDef other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Map  reachingDef  MustDef  other  
[P2_Replace_Operator]^if  ( ! ( other  !=  Definition )  )  {^75^^^^^74^82^if  ( ! ( other instanceof Definition )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Definition  otherDef  Object  other  Map  reachingDef  
[P8_Replace_Mix]^if  (  ( other instanceof Definition )  )  {^75^^^^^74^82^if  ( ! ( other instanceof Definition )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Definition  otherDef  Object  other  Map  reachingDef  
[P15_Unwrap_Block]^return false;^75^76^77^^^74^82^if  ( ! ( other instanceof Definition )  )  { return false; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Definition  otherDef  Object  other  Map  reachingDef  
[P16_Remove_Block]^^75^76^77^^^74^82^if  ( ! ( other instanceof Definition )  )  { return false; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Definition  otherDef  Object  other  Map  reachingDef  
[P3_Replace_Literal]^return true;^76^^^^^74^82^return false;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Definition  otherDef  Object  other  Map  reachingDef  
[P11_Insert_Donor_Statement]^Definition definition = new Definition ( node ) ;Definition otherDef =  ( Definition )  other;^78^^^^^74^82^Definition otherDef =  ( Definition )  other;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Definition  otherDef  Object  other  Map  reachingDef  
[P11_Insert_Donor_Statement]^Definition otherDef = def.reachingDef.get ( other ) ;Definition otherDef =  ( Definition )  other;^78^^^^^74^82^Definition otherDef =  ( Definition )  other;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Definition  otherDef  Object  other  Map  reachingDef  
[P2_Replace_Operator]^return otherDef.node != node;^81^^^^^74^82^return otherDef.node == node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Definition  otherDef  Object  other  Map  reachingDef  
[P5_Replace_Variable]^return otherDef.node.node == node;^81^^^^^74^82^return otherDef.node == node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Definition  otherDef  Object  other  Map  reachingDef  
[P5_Replace_Variable]^return node == otherDef.node;^81^^^^^74^82^return otherDef.node == node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Definition  otherDef  Object  other  Map  reachingDef  
[P8_Replace_Mix]^return false ;^81^^^^^74^82^return otherDef.node == node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Definition  otherDef  Object  other  Map  reachingDef  
[P2_Replace_Operator]^return  ( other instanceof MustDef )  || (  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^138^139^^^^137^140^return  ( other instanceof MustDef )  && (  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Object  other  Map  reachingDef  
[P2_Replace_Operator]^return  ( other  ||  MustDef )  && (  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^138^139^^^^137^140^return  ( other instanceof MustDef )  && (  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Object  other  Map  reachingDef  
[P5_Replace_Variable]^return  ( this.reachingDef instanceof MustDef )  && (  ( MustDef )  other ) .reachingDef.equals ( other ) ;^138^139^^^^137^140^return  ( other instanceof MustDef )  && (  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Object  other  Map  reachingDef  
[P7_Replace_Invocation]^return  ( other instanceof MustDef )  && (  ( MustDef )  other ) .reachingDef.get ( this.reachingDef ) ;^138^139^^^^137^140^return  ( other instanceof MustDef )  && (  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Object  other  Map  reachingDef  
[P7_Replace_Invocation]^return  ( other instanceof MustDef )  && (  ( MustDef )  other ) .reachingDef .Definition ( node )  ;^138^139^^^^137^140^return  ( other instanceof MustDef )  && (  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Object  other  Map  reachingDef  
[P7_Replace_Invocation]^(  ( MustDef )  other ) .reachingDef.get ( this.reachingDef ) ;^139^^^^^137^140^(  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Object  other  Map  reachingDef  
[P8_Replace_Mix]^(  ( MustDef )  other ) .reachingDef.get ( this.3 ) ;^139^^^^^137^140^(  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Object  other  Map  reachingDef  
[P14_Delete_Statement]^^139^^^^^137^140^(  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Object  other  Map  reachingDef  
[P4_Replace_Constructor]^MustDef result = new MustDef ( input )  ;^146^^^^^131^161^MustDef result = new MustDef (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^MustDef output = new MustDef ( input ) ;MustDef result = new MustDef (  ) ;^146^^^^^131^161^MustDef result = new MustDef (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^Map<Var, Definition> bMap = result.reachingDef;^147^^^^^132^162^Map<Var, Definition> resultMap = result.reachingDef;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^Map<Var, Definition> resultMap = null;^147^^^^^132^162^Map<Var, Definition> resultMap = result.reachingDef;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^Map<Var, Definition> result.reachingDefMap = result;^147^^^^^132^162^Map<Var, Definition> resultMap = result.reachingDef;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P2_Replace_Operator]^if  ( aDef != null )  {^154^^^^^139^169^if  ( aDef == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^if  ( bDef == null )  {^154^^^^^139^169^if  ( aDef == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P8_Replace_Mix]^if  ( bDef == true )  {^154^^^^^139^169^if  ( aDef == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P9_Replace_Statement]^if  ( rValue != null )  {^154^^^^^139^169^if  ( aDef == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P9_Replace_Statement]^if  ( def == null )  {^154^^^^^139^169^if  ( aDef == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P9_Replace_Statement]^if  ( node == null )  {^154^^^^^139^169^if  ( aDef == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P9_Replace_Statement]^if  ( otherDef == null )  {^154^^^^^139^169^if  ( aDef == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P13_Insert_Block]^if  ( aDef.equals ( bDef )  )  {     resultMap.put ( var, aDef ) ; }else {     resultMap.put ( var, null ) ; }^154^^^^^139^169^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put (  null ) ;^158^^^^^143^173^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P14_Delete_Statement]^^158^159^^^^143^173^resultMap.put ( var, null ) ; continue;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^resultMap.put ( var, aDef ) ;resultMap.put ( var, null ) ;^158^^^^^143^173^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^def.reachingDef.put ( var, null ) ;resultMap.put ( var, null ) ;^158^^^^^143^173^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^def.reachingDef.put ( other, null ) ;resultMap.put ( var, null ) ;^158^^^^^143^173^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^resultMap.put ( var, b.reachingDef.get ( var )  ) ;resultMap.put ( var, null ) ;^158^^^^^143^173^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^if  ( result.reachingDef.containsKey ( var )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^if  ( b.reachingDef.reachingDef.containsKey ( var )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^if  ( var.containsKey ( b.reachingDef )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P7_Replace_Invocation]^if  ( b.reachingDef.put ( var )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P9_Replace_Statement]^if  ( !a.reachingDef.containsKey ( var )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P9_Replace_Statement]^if  ( !escaped.contains ( var )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put (  aDef ) ;^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put ( var ) ;^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P7_Replace_Invocation]^resultMap .put ( var , bDef )  ;^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P8_Replace_Mix]^resultMap .put ( var , aDef )  ;^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P14_Delete_Statement]^^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^def.reachingDef.put ( var, null ) ;resultMap.put ( var, aDef ) ;^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^resultMap.put ( var, b.reachingDef.get ( var )  ) ;resultMap.put ( var, aDef ) ;^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^resultMap.put ( var, null ) ;resultMap.put ( var, aDef ) ;^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^if  ( aDef.equals ( aDef )  )  {^167^^^^^152^182^if  ( aDef.equals ( bDef )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^if  ( bDef.equals ( aDef )  )  {^167^^^^^152^182^if  ( aDef.equals ( bDef )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P15_Unwrap_Block]^resultMap.put(var, aDef);^167^168^169^170^171^152^182^if  ( aDef.equals ( bDef )  )  { resultMap.put ( var, aDef ) ; } else { resultMap.put ( var, null ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P16_Remove_Block]^^167^168^169^170^171^152^182^if  ( aDef.equals ( bDef )  )  { resultMap.put ( var, aDef ) ; } else { resultMap.put ( var, null ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P13_Insert_Block]^if  ( aDef == null )  {     resultMap.put ( var, null ) ;     continue; }^167^^^^^152^182^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put (  null ) ;^170^^^^^167^171^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P14_Delete_Statement]^^170^^^^^167^171^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^resultMap.put ( var, aDef ) ;resultMap.put ( var, null ) ;^170^^^^^167^171^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^def.reachingDef.put ( var, null ) ;resultMap.put ( var, null ) ;^170^^^^^167^171^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^def.reachingDef.put ( other, null ) ;resultMap.put ( var, null ) ;^170^^^^^167^171^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^resultMap.put ( var, b.reachingDef.get ( var )  ) ;resultMap.put ( var, null ) ;^170^^^^^167^171^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put ( var, bDef ) ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put (  aDef ) ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put ( var ) ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put ( aDef, var ) ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P7_Replace_Invocation]^resultMap .put ( var , aDef )  ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P14_Delete_Statement]^^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^def.reachingDef.put ( var, null ) ;resultMap.put ( var, aDef ) ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^resultMap.put ( var, b.reachingDef.get ( var )  ) ;resultMap.put ( var, aDef ) ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^resultMap.put ( var, null ) ;resultMap.put ( var, aDef ) ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^Definition resultDef = b.reachingDef.get ( var ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^Definition varDef = b.reachingDef.get ( b ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^Definition bDef = var.get ( b.reachingDef ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^Definition b.reachingDefDef = b.get ( var ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P7_Replace_Invocation]^Definition bDef = b.reachingDef.put ( var ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P8_Replace_Mix]^Definition resultDef = b.reachingDef.put ( var ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^Definition def = state.getIn (  ) .reachingDef.get ( jsScope.getVar ( name )  ) ;Definition bDef = b.reachingDef.get ( var ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^Definition aDef = a.reachingDef.get ( var ) ;Definition bDef = b.reachingDef.get ( var ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^Definition otherDef = def.reachingDef.get ( other ) ;Definition bDef = b.reachingDef.get ( var ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P13_Insert_Block]^if  ( ! ( other instanceof Definition )  )  {     return false; }^165^^^^^150^180^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P14_Delete_Statement]^^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^resultMap.put ( var, b.reachingDef.get ( var )  ) ;Definition bDef = b.reachingDef.get ( var ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put (  null ) ;^170^^^^^155^185^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P14_Delete_Statement]^^170^^^^^155^185^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^resultMap.put ( var, aDef ) ;resultMap.put ( var, null ) ;^170^^^^^155^185^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^def.reachingDef.put ( var, null ) ;resultMap.put ( var, null ) ;^170^^^^^155^185^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^def.reachingDef.put ( other, null ) ;resultMap.put ( var, null ) ;^170^^^^^155^185^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^resultMap.put ( var, b.reachingDef.get ( var )  ) ;resultMap.put ( var, null ) ;^170^^^^^155^185^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^Definition resultDef = a.reachingDef.get ( var ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^Definition varDef = a.reachingDef.get ( a ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^Definition aDef = var.get ( a.reachingDef ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P7_Replace_Invocation]^Definition aDef = a.reachingDef.put ( var ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^Definition bDef = b.reachingDef.get ( var ) ;Definition aDef = a.reachingDef.get ( var ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^Definition def = state.getIn (  ) .reachingDef.get ( jsScope.getVar ( name )  ) ;Definition aDef = a.reachingDef.get ( var ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^Definition otherDef = def.reachingDef.get ( other ) ;Definition aDef = a.reachingDef.get ( var ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^Node aNode = bDef.node;^162^^^^^147^177^Node aNode = aDef.node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^Node aNode = node;^162^^^^^147^177^Node aNode = aDef.node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^Node aNode = aDef.node.node;^162^^^^^147^177^Node aNode = aDef.node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^Node aNode = aDef;^162^^^^^147^177^Node aNode = aDef.node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^Definition bDef = null.get ( var ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^for  ( Var var : result.reachingDef.keySet (  )  )  {^150^^^^^135^165^for  ( Var var : a.reachingDef.keySet (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^for  ( Var var : a.reachingDef.reachingDef.keySet (  )  )  {^150^^^^^135^165^for  ( Var var : a.reachingDef.keySet (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^for  ( Var var : a.keySet (  )  )  {^150^^^^^135^165^for  ( Var var : a.reachingDef.keySet (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P7_Replace_Invocation]^for  ( Var var : a.reachingDef.equals (  )  )  {^150^^^^^135^165^for  ( Var var : a.reachingDef.keySet (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P14_Delete_Statement]^^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^resultMap.put ( var, b.reachingDef.get ( var )  ) ;Definition aDef = a.reachingDef.get ( var ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P14_Delete_Statement]^^158^^^^^143^173^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^if  ( var.reachingDef.containsKey ( b )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^if  ( b.containsKey ( var )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P8_Replace_Mix]^if  ( result.reachingDef.put ( var )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P7_Replace_Invocation]^Definition bDef = b.reachingDef .get ( var )  ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put ( var, bDef ) ;^173^^^^^158^188^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put (  aDef ) ;^173^^^^^158^188^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put ( var ) ;^173^^^^^158^188^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P14_Delete_Statement]^^173^^^^^158^188^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^def.reachingDef.put ( var, null ) ;resultMap.put ( var, aDef ) ;^173^^^^^158^188^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^resultMap.put ( var, b.reachingDef.get ( var )  ) ;resultMap.put ( var, aDef ) ;^173^^^^^158^188^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P11_Insert_Donor_Statement]^resultMap.put ( var, null ) ;resultMap.put ( var, aDef ) ;^173^^^^^158^188^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P7_Replace_Invocation]^if  ( !a.reachingDef.put ( var )  )  {^180^^^^^165^195^if  ( !a.reachingDef.containsKey ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P9_Replace_Statement]^if  ( b.reachingDef.containsKey ( var )  )  {^180^^^^^165^195^if  ( !a.reachingDef.containsKey ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P9_Replace_Statement]^if  ( !escaped.contains ( var )  )  {^180^^^^^165^195^if  ( !a.reachingDef.containsKey ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P15_Unwrap_Block]^resultMap.put(var, b.reachingDef.get(var));^180^181^182^^^165^195^if  ( !a.reachingDef.containsKey ( var )  )  { resultMap.put ( var, b.reachingDef.get ( var )  ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P16_Remove_Block]^^180^181^182^^^165^195^if  ( !a.reachingDef.containsKey ( var )  )  { resultMap.put ( var, b.reachingDef.get ( var )  ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put ( var, result.reachingDef.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put (  b.reachingDef.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put ( var.reachingDef.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put ( var.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P7_Replace_Invocation]^resultMap.put ( var, b.reachingDef.put ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P14_Delete_Statement]^^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put ( var, b.reachingDef.reachingDef.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put ( b.reachingDef, var.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put ( var, b.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^for  ( Var var : result.reachingDef.keySet (  )  )  {^179^^^^^164^194^for  ( Var var : b.reachingDef.keySet (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^for  ( Var var : b.reachingDef.reachingDef.keySet (  )  )  {^179^^^^^164^194^for  ( Var var : b.reachingDef.keySet (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^for  ( Var var : b.keySet (  )  )  {^179^^^^^164^194^for  ( Var var : b.reachingDef.keySet (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P7_Replace_Invocation]^for  ( Var var : b.reachingDef.equals (  )  )  {^179^^^^^164^194^for  ( Var var : b.reachingDef.keySet (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P14_Delete_Statement]^^179^180^181^182^^164^194^for  ( Var var : b.reachingDef.keySet (  )  )  { if  ( !a.reachingDef.containsKey ( var )  )  { resultMap.put ( var, b.reachingDef.get ( var )  ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put ( b, var.reachingDef.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P7_Replace_Invocation]^resultMap.put ( var, b.reachingDef .get ( var )   ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^resultMap.put ( var, null.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P5_Replace_Variable]^return b;^184^^^^^169^199^return result;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[P3_Replace_Literal]^return false;^190^^^^^189^191^return true;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] isForward [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Map  reachingDef  resultMap  Node  aNode  node  
[P4_Replace_Constructor]^return return  new Definition ( getRootNode (  )  )   ) ;^195^^^^^194^196^return new MustDef ( jsScope.getVars (  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] createEntryLattice [RETURN_TYPE] MustBeReachingVariableDef$MustDef   [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Map  reachingDef  resultMap  Node  aNode  node  
[P7_Replace_Invocation]^return new MustDef ( jsScope.getVar (  )  ) ;^195^^^^^194^196^return new MustDef ( jsScope.getVars (  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] createEntryLattice [RETURN_TYPE] MustBeReachingVariableDef$MustDef   [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Map  reachingDef  resultMap  Node  aNode  node  
[P14_Delete_Statement]^^195^^^^^194^196^return new MustDef ( jsScope.getVars (  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] createEntryLattice [RETURN_TYPE] MustBeReachingVariableDef$MustDef   [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Map  reachingDef  resultMap  Node  aNode  node  
[P4_Replace_Constructor]^return return  new MustDef ( input )  ;^200^^^^^199^201^return new MustDef (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] createInitialEstimateLattice [RETURN_TYPE] MustBeReachingVariableDef$MustDef   [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Map  reachingDef  resultMap  Node  aNode  node  
[P8_Replace_Mix]^return  new MustDef ( input )  ;^200^^^^^199^201^return new MustDef (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] createInitialEstimateLattice [RETURN_TYPE] MustBeReachingVariableDef$MustDef   [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Map  reachingDef  resultMap  Node  aNode  node  
[P4_Replace_Constructor]^MustDef output = new Definition ( node )  ;^207^^^^^204^213^MustDef output = new MustDef ( input ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] flowThrough [RETURN_TYPE] MustBeReachingVariableDef$MustDef   Node n MustDef input [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  n  node  Map  reachingDef  resultMap  MustDef  input  output  
[P5_Replace_Variable]^MustDef output = new MustDef ( output ) ;^207^^^^^204^213^MustDef output = new MustDef ( input ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] flowThrough [RETURN_TYPE] MustBeReachingVariableDef$MustDef   Node n MustDef input [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  n  node  Map  reachingDef  resultMap  MustDef  input  output  
[P11_Insert_Donor_Statement]^MustDef result = new MustDef (  ) ;MustDef output = new MustDef ( input ) ;^207^^^^^204^213^MustDef output = new MustDef ( input ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] flowThrough [RETURN_TYPE] MustBeReachingVariableDef$MustDef   Node n MustDef input [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  n  node  Map  reachingDef  resultMap  MustDef  input  output  
[P3_Replace_Literal]^computeMustDef ( n, n, output, true ) ;^211^^^^^204^213^computeMustDef ( n, n, output, false ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] flowThrough [RETURN_TYPE] MustBeReachingVariableDef$MustDef   Node n MustDef input [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  n  node  Map  reachingDef  resultMap  MustDef  input  output  
[P5_Replace_Variable]^computeMustDef ( node, n, output, false ) ;^211^^^^^204^213^computeMustDef ( n, n, output, false ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] flowThrough [RETURN_TYPE] MustBeReachingVariableDef$MustDef   Node n MustDef input [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  n  node  Map  reachingDef  resultMap  MustDef  input  output  
[P5_Replace_Variable]^computeMustDef ( n, n, input, false ) ;^211^^^^^204^213^computeMustDef ( n, n, output, false ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] flowThrough [RETURN_TYPE] MustBeReachingVariableDef$MustDef   Node n MustDef input [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  n  node  Map  reachingDef  resultMap  MustDef  input  output  
[P5_Replace_Variable]^computeMustDef (  n, output, false ) ;^211^^^^^204^213^computeMustDef ( n, n, output, false ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] flowThrough [RETURN_TYPE] MustBeReachingVariableDef$MustDef   Node n MustDef input [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  n  node  Map  reachingDef  resultMap  MustDef  input  output  
[P5_Replace_Variable]^computeMustDef ( n, n,  false ) ;^211^^^^^204^213^computeMustDef ( n, n, output, false ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] flowThrough [RETURN_TYPE] MustBeReachingVariableDef$MustDef   Node n MustDef input [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  n  node  Map  reachingDef  resultMap  MustDef  input  output  
[P5_Replace_Variable]^computeMustDef ( output, n, n, false ) ;^211^^^^^204^213^computeMustDef ( n, n, output, false ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] flowThrough [RETURN_TYPE] MustBeReachingVariableDef$MustDef   Node n MustDef input [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  n  node  Map  reachingDef  resultMap  MustDef  input  output  
[P7_Replace_Invocation]^addToDefIfLocal ( n, n, output, false ) ;^211^^^^^204^213^computeMustDef ( n, n, output, false ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] flowThrough [RETURN_TYPE] MustBeReachingVariableDef$MustDef   Node n MustDef input [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  n  node  Map  reachingDef  resultMap  MustDef  input  output  
[P14_Delete_Statement]^^211^^^^^204^213^computeMustDef ( n, n, output, false ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] flowThrough [RETURN_TYPE] MustBeReachingVariableDef$MustDef   Node n MustDef input [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  n  node  Map  reachingDef  resultMap  MustDef  input  output  
[P11_Insert_Donor_Statement]^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;computeMustDef ( n, n, output, false ) ;^211^^^^^204^213^computeMustDef ( n, n, output, false ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] flowThrough [RETURN_TYPE] MustBeReachingVariableDef$MustDef   Node n MustDef input [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  n  node  Map  reachingDef  resultMap  MustDef  input  output  
[P11_Insert_Donor_Statement]^computeMustDef ( c, cfgNode, output, conditional ) ;computeMustDef ( n, n, output, false ) ;^211^^^^^204^213^computeMustDef ( n, n, output, false ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] flowThrough [RETURN_TYPE] MustBeReachingVariableDef$MustDef   Node n MustDef input [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  n  node  Map  reachingDef  resultMap  MustDef  input  output  
[P11_Insert_Donor_Statement]^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;computeMustDef ( n, n, output, false ) ;^211^^^^^204^213^computeMustDef ( n, n, output, false ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] flowThrough [RETURN_TYPE] MustBeReachingVariableDef$MustDef   Node n MustDef input [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  n  node  Map  reachingDef  resultMap  MustDef  input  output  
[P5_Replace_Variable]^if  ( !NodeUtil.isForIn ( target )  )  {^236^^^^^221^251^if  ( !NodeUtil.isForIn ( n )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( !NodeUtil.isVar ( n )  )  {^236^^^^^221^251^if  ( !NodeUtil.isForIn ( n )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( !NodeUtil .isVar ( c )   )  {^236^^^^^221^251^if  ( !NodeUtil.isForIn ( n )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^if  ( !NodeUtil.isForIn ( rhs )  )  {^236^^^^^221^251^if  ( !NodeUtil.isForIn ( n )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P9_Replace_Statement]^if  ( NodeUtil.isVar ( lhs )  )  {^236^^^^^221^251^if  ( !NodeUtil.isForIn ( n )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( lhs )  )  {^236^^^^^221^251^if  ( !NodeUtil.isForIn ( n )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( target )  )  {^236^^^^^221^251^if  ( !NodeUtil.isForIn ( n )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^if  ( NodeUtil.isVar ( target )  )  {^243^^^^^236^249^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( lhs )  )  {^243^^^^^236^249^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P9_Replace_Statement]^if  ( !NodeUtil.isForIn ( n )  )  {^243^^^^^236^249^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( target )  )  {^243^^^^^236^249^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P15_Unwrap_Block]^lhs = lhs.getLastChild();^243^244^245^^^236^249^if  ( NodeUtil.isVar ( lhs )  )  { lhs = lhs.getLastChild (  ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P16_Remove_Block]^^243^244^245^^^236^249^if  ( NodeUtil.isVar ( lhs )  )  { lhs = lhs.getLastChild (  ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P13_Insert_Block]^if  ( isName ( lhs )  )  {     addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ; }^243^^^^^236^249^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^lhs = node.getLastChild (  ) ;^244^^^^^236^249^lhs = lhs.getLastChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^lhs = lhs .getFirstChild (  )  ;^244^^^^^236^249^lhs = lhs.getLastChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^lhs =  target.getLastChild (  ) ;^244^^^^^236^249^lhs = lhs.getLastChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^244^^^^^236^249^lhs = lhs.getLastChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;lhs = lhs.getLastChild (  ) ;^244^^^^^236^249^lhs = lhs.getLastChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;lhs = lhs.getLastChild (  ) ;^244^^^^^236^249^lhs = lhs.getLastChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node target = n.getFirstChild (  ) ;lhs = lhs.getLastChild (  ) ;^244^^^^^236^249^lhs = lhs.getLastChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;lhs = lhs.getLastChild (  ) ;^244^^^^^236^249^lhs = lhs.getLastChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( target )  )  {^246^^^^^236^249^if  ( NodeUtil.isName ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( lhs )  )  {^246^^^^^236^249^if  ( NodeUtil.isName ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P9_Replace_Statement]^if  ( !NodeUtil.isForIn ( n )  )  {^246^^^^^236^249^if  ( NodeUtil.isName ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P15_Unwrap_Block]^addToDefIfLocal(lhs.getString(), cfgNode, rhs, output);^246^247^248^^^236^249^if  ( NodeUtil.isName ( lhs )  )  { addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P16_Remove_Block]^^246^247^248^^^236^249^if  ( NodeUtil.isName ( lhs )  )  { addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P13_Insert_Block]^if  ( isName ( target )  )  {     addToDefIfLocal ( target.getString (  ) ,  ( conditional ? null : cfgNode ) , null, output ) ;     return ; }^246^^^^^236^249^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P13_Insert_Block]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^246^^^^^236^249^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  ) , cfgNode, rhs, output ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( lhs.getString (  ) , node, rhs, output ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( lhs.getString (  ) , cfgNode, name, output ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( lhs.getString (  ) ,  rhs, output ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( lhs.getString (  ) , cfgNode,  output ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( rhs.getString (  ) , cfgNode, lhs, output ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( lhs.getString (  ) , output, rhs, cfgNode ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( lhs.getString (  ) , cfgNode, output, rhs ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^computeMustDef ( lhs.getString (  ) , cfgNode, rhs, output ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( node.getString (  ) , cfgNode, rhs, output ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^lhs =  name.getLastChild (  ) ;^244^^^^^236^249^lhs = lhs.getLastChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^Node lhs = rhs.getFirstChild (  ) ;^241^^^^^236^249^Node lhs = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^Node lhs = target .getLastChild (  )  ;^241^^^^^236^249^Node lhs = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;Node lhs = n.getFirstChild (  ) ;^241^^^^^236^249^Node lhs = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node target = n.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^241^^^^^236^249^Node lhs = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^241^^^^^236^249^Node lhs = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^Node rhs = name.getNext (  ) ;^242^^^^^236^249^Node rhs = lhs.getNext (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node rhs = lhs.getNext (  ) ;^242^^^^^236^249^Node rhs = lhs.getNext (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Var var = vars.next (  ) ;Node rhs = lhs.getNext (  ) ;^242^^^^^236^249^Node rhs = lhs.getNext (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node target = n.getFirstChild (  ) ;Node rhs = lhs.getNext (  ) ;^242^^^^^236^249^Node rhs = lhs.getNext (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node rhs = lhs.getNext (  ) ;^242^^^^^236^249^Node rhs = lhs.getNext (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^Node lhs = target.getFirstChild (  ) ;^241^^^^^236^249^Node lhs = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^Node lhs = n .getLastChild (  )  ;^241^^^^^236^249^Node lhs = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^241^^^^^236^249^Node lhs = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^lhs = lhs.getLastChild (  ) ;Node lhs = n.getFirstChild (  ) ;^241^^^^^236^249^Node lhs = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^Node rhs = target.getNext (  ) ;^242^^^^^236^249^Node rhs = lhs.getNext (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^242^^^^^236^249^Node rhs = lhs.getNext (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^lhs = lhs.getLastChild (  ) ;Node rhs = lhs.getNext (  ) ;^242^^^^^236^249^Node rhs = lhs.getNext (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( NodeUtil .isName ( node )   )  {^243^^^^^236^249^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^if  ( NodeUtil.isVar ( node )  )  {^243^^^^^236^249^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P13_Insert_Block]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^243^^^^^236^249^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^lhs = rhs.getLastChild (  ) ;^244^^^^^236^249^lhs = lhs.getLastChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( name )  )  {^246^^^^^236^249^if  ( NodeUtil.isName ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( NodeUtil .isVar ( aNode )   )  {^246^^^^^236^249^if  ( NodeUtil.isName ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( name.getString (  ) , cfgNode, rhs, output ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( lhs.getString (  ) , name, rhs, output ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( lhs.getString (  ) , cfgNode, target, output ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( cfgNode.getString (  ) , lhs, rhs, output ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( lhs.getString (  ) , rhs, cfgNode, output ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( output.getString (  ) , cfgNode, rhs, lhs ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( NodeUtil.getConditionExpression ( rhs ) , cfgNode, output, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( NodeUtil.getConditionExpression ( n ) , rhs, output, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( NodeUtil.getConditionExpression ( n ) ,  output, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode,  conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( NodeUtil.getConditionExpression ( conditional ) , cfgNode, output, n ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( NodeUtil.getConditionExpression ( cfgNode ) , n, output, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( NodeUtil.getConditionExpression ( output ) , cfgNode, n, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( NodeUtil.getConditionExpression ( n ) , conditional, output, cfgNode ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^addToDefIfLocal ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^computeMustDef ( NodeUtil.isForIn ( n ) , cfgNode, output, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^computeMustDef ( NodeUtil .isForIn ( c )  , cfgNode, output, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( NodeUtil.getConditionExpression ( n ) , node, output, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( c, cfgNode, output, conditional ) ;computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^NodeUtil.getConditionExpression ( node ) , cfgNode, output, conditional ) ;^238^^^^^223^253^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^NodeUtil.isForIn ( n ) , cfgNode, output, conditional ) ;^238^^^^^223^253^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^NodeUtil.getConditionExpression ( target ) , cfgNode, output, conditional ) ;^238^^^^^223^253^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^238^^^^^223^253^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^238^^^^^223^253^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^238^^^^^223^253^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( c, cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^238^^^^^223^253^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^238^^^^^223^253^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^238^^^^^223^253^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( lhs )  )  {^243^^^^^228^258^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P9_Replace_Statement]^if  ( !NodeUtil.isForIn ( n )  )  {^243^^^^^228^258^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( target )  )  {^243^^^^^228^258^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P15_Unwrap_Block]^lhs = lhs.getLastChild();^243^244^245^^^228^258^if  ( NodeUtil.isVar ( lhs )  )  { lhs = lhs.getLastChild (  ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P16_Remove_Block]^^243^244^245^^^228^258^if  ( NodeUtil.isVar ( lhs )  )  { lhs = lhs.getLastChild (  ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P13_Insert_Block]^if  ( isName ( lhs )  )  {     addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ; }^243^^^^^228^258^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^lhs = node.getLastChild (  ) ;^244^^^^^229^259^lhs = lhs.getLastChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^lhs =  target.getLastChild (  ) ;^244^^^^^229^259^lhs = lhs.getLastChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^244^^^^^229^259^lhs = lhs.getLastChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;lhs = lhs.getLastChild (  ) ;^244^^^^^229^259^lhs = lhs.getLastChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;lhs = lhs.getLastChild (  ) ;^244^^^^^229^259^lhs = lhs.getLastChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node target = n.getFirstChild (  ) ;lhs = lhs.getLastChild (  ) ;^244^^^^^229^259^lhs = lhs.getLastChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;lhs = lhs.getLastChild (  ) ;^244^^^^^229^259^lhs = lhs.getLastChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( target )  )  {^246^^^^^231^261^if  ( NodeUtil.isName ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( lhs )  )  {^246^^^^^231^261^if  ( NodeUtil.isName ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( node )  )  {^246^^^^^231^261^if  ( NodeUtil.isName ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P9_Replace_Statement]^if  ( !NodeUtil.isForIn ( n )  )  {^246^^^^^231^261^if  ( NodeUtil.isName ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P15_Unwrap_Block]^addToDefIfLocal(lhs.getString(), cfgNode, rhs, output);^246^247^248^^^231^261^if  ( NodeUtil.isName ( lhs )  )  { addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P16_Remove_Block]^^246^247^248^^^231^261^if  ( NodeUtil.isName ( lhs )  )  { addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P13_Insert_Block]^if  ( isName ( target )  )  {     addToDefIfLocal ( target.getString (  ) ,  ( conditional ? null : cfgNode ) , null, output ) ;     return ; }^246^^^^^231^261^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P13_Insert_Block]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^246^^^^^231^261^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( node.getString (  ) , cfgNode, rhs, output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( lhs.getString (  ) , node, rhs, output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( lhs.getString (  ) , cfgNode, target, output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( lhs.getString (  ) ,  rhs, output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( lhs.getString (  ) , cfgNode,  output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( rhs.getString (  ) , cfgNode, lhs, output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( cfgNode.getString (  ) , lhs, rhs, output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( lhs.getString (  ) , rhs, cfgNode, output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( lhs.getString (  ) , output, rhs, cfgNode ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^computeMustDef ( lhs.getString (  ) , cfgNode, rhs, output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( lhs.getString (  ) , rhs, rhs, output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( name .getLastChild (  )  , cfgNode, rhs, output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^if  ( target.hasChildren (  )  )  {^266^^^^^251^281^if  ( c.hasChildren (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( c .getLastChild (  )   )  {^266^^^^^251^281^if  ( c.hasChildren (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^if  ( node.hasChildren (  )  )  {^266^^^^^251^281^if  ( c.hasChildren (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P15_Unwrap_Block]^computeMustDef(c.getFirstChild(), cfgNode, output, conditional); addToDefIfLocal(c.getString(), (conditional ? null : cfgNode), c.getFirstChild(), output);^266^267^268^269^270^251^281^if  ( c.hasChildren (  )  )  { computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ; addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P16_Remove_Block]^^266^267^268^269^270^251^281^if  ( c.hasChildren (  )  )  { computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ; addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( node.getFirstChild (  ) , cfgNode, output, conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c.getFirstChild (  ) fgNode, output, conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c.getFirstChild (  ) ,  output, conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c.getFirstChild (  ) , cfgNode,  conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c.getFirstChild (  ) , cfgNode, output ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( cfgNode.getFirstChild (  ) , c, output, conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c.getFirstChild (  ) , conditional, output, cfgNode ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c.getFirstChild (  ) , output, cfgNode, conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c.getFirstChild (  ) , cfgNode, conditional, output ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^addToDefIfLocal ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^computeMustDef ( c .getLastChild (  )  , cfgNode, output, conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^computeMustDef ( c.getFirstChild (  ) , target, output, conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( node.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( c.getString (  ) , conditional ? null : target, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( c.getString (  ) onditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( c.getString (  )  ? null : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( c.getString (  ) , conditional ? null :  c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  )  ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( cfgNode.getString (  ) , conditional ? null : c, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( conditional.getString (  ) , c ? null : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( c.getString (  ) , cfgNode ? null : conditional, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( output.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , c ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^addToDefIfLocal ( c .getLastChild (  )  , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c .getLastChild (  )  , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( target .getLastChild (  )  , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^269^^^^^254^284^c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^n.getLastChild (  ) , output ) ;c.getFirstChild (  ) , output ) ;^269^^^^^254^284^c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P2_Replace_Operator]^if  ( NodeUtil.isAssignmentOp ( n )  || NodeUtil.isName ( n.getFirstChild (  )  )  )  {^275^^^^^260^290^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^if  ( NodeUtil.isAssignmentOp ( target )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^275^^^^^260^290^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P6_Replace_Expression]^if  ( NodeUtil.isAssignmentOp ( n )  ) {^275^^^^^260^290^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P6_Replace_Expression]^if  (  NodeUtil.isName ( n.getFirstChild (  )  )  )  {^275^^^^^260^290^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P6_Replace_Expression]^if  ( n.getType() == DEC || n.getType() == INC )  {^275^^^^^260^290^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P6_Replace_Expression]^if  ( n.getType (  )  == DEC )  {^275^^^^^260^290^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P6_Replace_Expression]^if  ( n.getType (  )  == INC )  {^275^^^^^260^290^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P6_Replace_Expression]^if  ( c != null )  {^275^^^^^260^290^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( NodeUtil.isForIn ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^275^^^^^260^290^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( NodeUtil .isForIn ( cfgNode )   && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^275^^^^^260^290^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil .isVar ( name )   )  {^275^^^^^260^290^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n .getLastChild (  )   )  )  {^275^^^^^260^290^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isVar ( n.getFirstChild (  )  )  )  {^275^^^^^260^290^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^if  ( NodeUtil.isAssignmentOp ( rhs )  ) {^275^^^^^260^290^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.DEC && n.getType (  )  == Token.INC )  {^283^^^^^275^295^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P2_Replace_Operator]^if  ( n.getType (  )  > Token.DEC || n.getType (  )  == Token.INC )  {^283^^^^^275^295^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.DEC || n.getType (  )  == Token.INC )  {^283^^^^^275^295^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^if  ( rhs.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^283^^^^^275^295^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P6_Replace_Expression]^if  ( n.getType (  )  == Token.DEC ) {^283^^^^^275^295^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P6_Replace_Expression]^if  (  n.getType (  )  == Token.INC )  {^283^^^^^275^295^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P6_Replace_Expression]^if  ( n.getType (  )  == DEC )  {^283^^^^^275^295^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P6_Replace_Expression]^if  ( n.getType (  )  == INC )  {^283^^^^^275^295^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( rhs )  )  {^285^^^^^275^295^if  ( NodeUtil.isName ( target )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( target )  )  {^285^^^^^275^295^if  ( NodeUtil.isName ( target )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( NodeUtil .isVar ( lhs )   )  {^285^^^^^275^295^if  ( NodeUtil.isName ( target )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( node )  )  {^285^^^^^275^295^if  ( NodeUtil.isName ( target )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P9_Replace_Statement]^if  ( !NodeUtil.isForIn ( n )  )  {^285^^^^^275^295^if  ( NodeUtil.isName ( target )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( lhs )  )  {^285^^^^^275^295^if  ( NodeUtil.isName ( target )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P15_Unwrap_Block]^addToDefIfLocal(target.getString(), (conditional ? null : cfgNode), null, output); return ;^285^286^287^288^289^275^295^if  ( NodeUtil.isName ( target )  )  { addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ; return; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P16_Remove_Block]^^285^286^287^288^289^275^295^if  ( NodeUtil.isName ( target )  )  { addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ; return; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P13_Insert_Block]^if  ( isName ( lhs )  )  {     addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ; }^285^^^^^275^295^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  ) , conditional ? null : rhs, null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  )  ? null : cfgNode, null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  ) , conditional ? null :  null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( cfgNode.getString (  ) , conditional ? null : target, null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( conditional.getString (  ) , target ? null : cfgNode, null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( output.getString (  ) , conditional ? null : cfgNode, null, target ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( rhs.getString (  ) , conditional ? null : cfgNode, null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P13_Insert_Block]^if  ( isName ( target )  )  {     addToDefIfLocal ( target.getString (  ) ,  ( conditional ? null : cfgNode ) , null, output ) ;     return ; }^286^^^^^275^295^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( n.getString (  ) , conditional ? null : cfgNode, null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^Node target = rhs.getFirstChild (  ) ;^284^^^^^275^295^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^Node target = n .getLastChild (  )  ;^284^^^^^275^295^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;Node target = n.getFirstChild (  ) ;^284^^^^^275^295^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node target = n.getFirstChild (  ) ;^284^^^^^275^295^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node target = n.getFirstChild (  ) ;^284^^^^^275^295^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P13_Insert_Block]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^284^^^^^275^295^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^Node target = target.getFirstChild (  ) ;^284^^^^^275^295^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^Node target = node.getFirstChild (  ) ;^284^^^^^275^295^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^284^^^^^275^295^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^lhs = lhs.getLastChild (  ) ;Node target = n.getFirstChild (  ) ;^284^^^^^275^295^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( n )  )  {^285^^^^^275^295^if  ( NodeUtil.isName ( target )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P13_Insert_Block]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^285^^^^^275^295^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  ) , conditional ? null : name, null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  ) , conditional ? null : output, null, cfgNode ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  ) , output ? null : cfgNode, null, conditional ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^addToDefIfLocal ( target .getLastChild (  )  , conditional ? null : cfgNode, null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( name .getLastChild (  )  , conditional ? null : cfgNode, null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( name )  )  {^285^^^^^275^295^if  ( NodeUtil.isName ( target )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( NodeUtil .isVar ( aNode )   )  {^285^^^^^275^295^if  ( NodeUtil.isName ( target )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  ) , conditional ? null : target, null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P2_Replace_Operator]^for  ( Node c = n.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^292^^^^^275^295^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^for  ( Node c = rhs.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^292^^^^^275^295^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^for  ( Node target = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^292^^^^^275^295^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^for  ( Node n = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^292^^^^^275^295^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^for  ( Node rhs = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^292^^^^^275^295^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( target, cfgNode, output, conditional ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c, target, output, conditional ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef (  cfgNode, output, conditional ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c,  output, conditional ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c, cfgNode,  conditional ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c, cfgNode, output ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( cfgNode, c, output, conditional ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c, output, cfgNode, conditional ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( conditional, cfgNode, output, c ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^addToDefIfLocal ( c, cfgNode, output, conditional ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^computeMustDef ( node, cfgNode, output, conditional ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^for  ( Node node = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^292^^^^^275^295^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c .getType (  )   )  {^292^^^^^275^295^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^for  ( Node c =  n.getFirstChild (  ) ; rhs !^292^^^^^275^295^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^Node target = name.getFirstChild (  ) ;^284^^^^^275^295^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^292^^^^^275^295^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^for  ( Node c = n .getLastChild (  )  ; c != null; c = c.getNext (  )  )  {^292^^^^^275^295^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^if  ( name.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^283^^^^^275^295^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^if  ( name .getString (  )   == Token.DEC || n^283^^^^^275^295^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^if  ( target.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^283^^^^^275^295^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( n .getString (  )   == Token.DEC || n^283^^^^^275^295^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^if  ( node.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^283^^^^^275^295^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^if  ( NodeUtil.isVar ( node )  )  {^285^^^^^275^295^if  ( NodeUtil.isName ( target )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  ) , cfgNode ? null : conditional, null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^for  ( Node c = target.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^292^^^^^275^295^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^for  ( Node c = name.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^292^^^^^275^295^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^292^293^294^^^275^295^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { computeMustDef ( c, cfgNode, output, conditional ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( rhs, cfgNode, output, conditional ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c, name, output, conditional ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( output, cfgNode, c, conditional ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( c, rhs, output, conditional ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^Node nodeame = n.getFirstChild (  ) ;^276^^^^^261^291^Node name = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^Node targetame = n.getFirstChild (  ) ;^276^^^^^261^291^Node name = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;Node name = n.getFirstChild (  ) ;^276^^^^^261^291^Node name = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node name = n.getFirstChild (  ) ;^276^^^^^261^291^Node name = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node target = n.getFirstChild (  ) ;Node name = n.getFirstChild (  ) ;^276^^^^^261^291^Node name = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^Node rhsame = n.getFirstChild (  ) ;^276^^^^^261^291^Node name = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^276^^^^^261^291^Node name = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^lhs = lhs.getLastChild (  ) ;Node name = n.getFirstChild (  ) ;^276^^^^^261^291^Node name = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getNext (  ) , cfgNode, output, conditional ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( name.getNext (  ) , target, output, conditional ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( name.getNext (  ) ,  output, conditional ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( name.getNext (  ) , cfgNode,  conditional ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( name.getNext (  ) , cfgNode, output ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( cfgNode.getNext (  ) , name, output, conditional ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( output.getNext (  ) , cfgNode, name, conditional ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( conditional.getNext (  ) , cfgNode, output, name ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^addToDefIfLocal ( name.getNext (  ) , cfgNode, output, conditional ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( name.getNext (  ) , node, output, conditional ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( rhs.getNext (  ) , cfgNode, output, conditional ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^computeMustDef ( node .getType (  )  , cfgNode, output, conditional ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( rhsame.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( name.getString (  )  ? null : cfgNode, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( name.getString (  ) , conditional ? null :  n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  )  ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( cfgNode.getString (  ) , conditional ? null : name, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( conditionalame.getString (  ) , n ? null : cfgNode, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( cfgNodeame.getString (  ) , conditional ? null : n, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( nameame.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( output.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , name ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n .getFirstChild (  )  , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( nodeame.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( node.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^addToDefIfLocal ( name .getLastChild (  )  , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( n.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^n .getFirstChild (  )  , output ) ;^279^^^^^264^294^n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^279^^^^^264^294^n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^c.getFirstChild (  ) , output ) ;n.getLastChild (  ) , output ) ;^279^^^^^264^294^n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.DEC && n.getType (  )  == Token.INC )  {^283^^^^^268^298^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.DEC || n.getType (  )  == Token.INC )  {^283^^^^^268^298^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.DEC || n.getType (  )  == Token.INC )  {^283^^^^^268^298^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^if  ( node.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^283^^^^^268^298^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P6_Replace_Expression]^if  ( n.getType (  )  == Token.DEC ) {^283^^^^^268^298^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P6_Replace_Expression]^if  (  n.getType (  )  == Token.INC )  {^283^^^^^268^298^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P6_Replace_Expression]^if  ( n.getType (  )  == DEC )  {^283^^^^^268^298^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P6_Replace_Expression]^if  ( n.getType (  )  == INC )  {^283^^^^^268^298^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^if  ( rhs.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^283^^^^^268^298^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( rhs )  )  {^285^^^^^270^300^if  ( NodeUtil.isName ( target )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( target )  )  {^285^^^^^270^300^if  ( NodeUtil.isName ( target )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( n )  )  {^285^^^^^270^300^if  ( NodeUtil.isName ( target )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P9_Replace_Statement]^if  ( !NodeUtil.isForIn ( n )  )  {^285^^^^^270^300^if  ( NodeUtil.isName ( target )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P9_Replace_Statement]^if  ( NodeUtil.isVar ( lhs )  )  {^285^^^^^270^300^if  ( NodeUtil.isName ( target )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( lhs )  )  {^285^^^^^270^300^if  ( NodeUtil.isName ( target )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P15_Unwrap_Block]^addToDefIfLocal(target.getString(), (conditional ? null : cfgNode), null, output); return ;^285^286^287^288^289^270^300^if  ( NodeUtil.isName ( target )  )  { addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ; return; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P16_Remove_Block]^^285^286^287^288^289^270^300^if  ( NodeUtil.isName ( target )  )  { addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ; return; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P13_Insert_Block]^if  ( isName ( lhs )  )  {     addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ; }^285^^^^^270^300^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( rhs.getString (  ) , conditional ? null : cfgNode, null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  ) , conditional ? null : node, null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  )  ? null : cfgNode, null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  ) , conditional ? null :  null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( conditional.getString (  ) , target ? null : cfgNode, null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  ) , cfgNode ? null : conditional, null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( cfgNode.getString (  ) , conditional ? null : target, null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  ) , output ? null : cfgNode, null, conditional ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^addToDefIfLocal ( target .getLastChild (  )  , conditional ? null : cfgNode, null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( node.getString (  ) , conditional ? null : cfgNode, null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P13_Insert_Block]^if  ( isName ( target )  )  {     addToDefIfLocal ( target.getString (  ) ,  ( conditional ? null : cfgNode ) , null, output ) ;     return ; }^286^^^^^271^301^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^Node target = rhs.getFirstChild (  ) ;^284^^^^^269^299^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^Node target = rhs .getLastChild (  )  ;^284^^^^^269^299^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;Node target = n.getFirstChild (  ) ;^284^^^^^269^299^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node target = n.getFirstChild (  ) ;^284^^^^^269^299^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node target = n.getFirstChild (  ) ;^284^^^^^269^299^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P13_Insert_Block]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^284^^^^^269^299^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^Node target = name.getFirstChild (  ) ;^284^^^^^269^299^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^Node target = node.getFirstChild (  ) ;^284^^^^^269^299^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^284^^^^^269^299^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^lhs = lhs.getLastChild (  ) ;Node target = n.getFirstChild (  ) ;^284^^^^^269^299^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^if  ( NodeUtil.isVar ( node )  )  {^285^^^^^270^300^if  ( NodeUtil.isName ( target )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P13_Insert_Block]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^285^^^^^270^300^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( n.getString (  ) , conditional ? null : cfgNode, null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  ) , conditional ? null : rhs, null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( output.getString (  ) , conditional ? null : cfgNode, null, target ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^if  ( NodeUtil .isVar ( aNode )   )  {^285^^^^^270^300^if  ( NodeUtil.isName ( target )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  ) , conditional ? null : output, null, cfgNode ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P2_Replace_Operator]^for  ( Node c = n.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^265^^^^^250^280^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^for  ( Node c = target.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^265^^^^^250^280^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^for  ( Node target = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^265^^^^^250^280^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^for  ( Node n = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^265^^^^^250^280^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c .getType (  )   )  {^265^^^^^250^280^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( rhs.getFirstChild (  ) , cfgNode, output, conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c.getFirstChild (  ) , node, output, conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( output.getFirstChild (  ) , cfgNode, c, conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^computeMustDef ( target.getFirstChild (  ) , cfgNode, output, conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( name.getFirstChild (  ) , cfgNode, output, conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( c.getString (  ) , output ? null : cfgNode, c.getFirstChild (  ) , conditional ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( rhs .getLastChild (  )  , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^if  ( name.hasChildren (  )  )  {^266^^^^^251^281^if  ( c.hasChildren (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( c.getString (  ) , conditional ? null : rhs, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( c.getString (  ) , conditional ? null : output, c.getFirstChild (  ) , cfgNode ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( c.getString (  ) , conditional ? null : name, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( rhs.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^c .getLastChild (  )  , output ) ;^269^^^^^254^284^c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P2_Replace_Operator]^for  ( Node c = n.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^292^^^^^277^307^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^for  ( Node name = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^292^^^^^277^307^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^292^^^^^277^307^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( target, cfgNode, output, conditional ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c, rhs, output, conditional ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef (  cfgNode, output, conditional ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c,  output, conditional ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c, cfgNode,  conditional ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c, cfgNode, output ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( output, cfgNode, c, conditional ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( cfgNode, c, output, conditional ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c, cfgNode, conditional, output ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c, conditional, output, cfgNode ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^addToDefIfLocal ( c, cfgNode, output, conditional ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( c, node, output, conditional ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^for  ( Node node = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^265^^^^^250^280^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c .getType (  )   )  {^265^^^^^250^280^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^for  ( Node c =  n.getFirstChild (  ) ; name !^265^^^^^250^280^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^for  ( Node c =  n.getFirstChild (  ) ; node !^292^^^^^277^307^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^Node lhs = target.getFirstChild (  ) ;^241^^^^^226^256^Node lhs = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;Node lhs = n.getFirstChild (  ) ;^241^^^^^226^256^Node lhs = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node target = n.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^241^^^^^226^256^Node lhs = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^241^^^^^226^256^Node lhs = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^Node rhs = target.getNext (  ) ;^242^^^^^227^257^Node rhs = lhs.getNext (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^Node rhs = lhs .getType (  )  ;^242^^^^^227^257^Node rhs = lhs.getNext (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node rhs = lhs.getNext (  ) ;^242^^^^^227^257^Node rhs = lhs.getNext (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Var var = vars.next (  ) ;Node rhs = lhs.getNext (  ) ;^242^^^^^227^257^Node rhs = lhs.getNext (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node target = n.getFirstChild (  ) ;Node rhs = lhs.getNext (  ) ;^242^^^^^227^257^Node rhs = lhs.getNext (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node rhs = lhs.getNext (  ) ;^242^^^^^227^257^Node rhs = lhs.getNext (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^for  ( Node c = rhs.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^265^^^^^250^280^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^for  ( Node c = n .getLastChild (  )  ; c != null; c = c.getNext (  )  )  {^265^^^^^250^280^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^265^^^^^250^280^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^Node name = n .getLastChild (  )  ;^276^^^^^261^291^Node name = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^for  ( Node c = target.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^292^^^^^277^307^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^switch  ( target.getType (  )  )  {^222^^^^^207^237^switch  ( n.getType (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( NodeUtil.getConditionExpression ( target ) , cfgNode, output, conditional ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( NodeUtil.getConditionExpression ( n ) , node, output, conditional ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( NodeUtil.getConditionExpression ( n ) ,  output, conditional ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode,  conditional ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( NodeUtil.getConditionExpression ( cfgNode ) , n, output, conditional ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, conditional, output ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( NodeUtil.getConditionExpression ( conditional ) , cfgNode, output, n ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^addToDefIfLocal ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^computeMustDef ( NodeUtil.isForIn ( n ) , cfgNode, output, conditional ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^computeMustDef ( NodeUtil .isForIn ( node )  , cfgNode, output, conditional ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( c, cfgNode, output, conditional ) ;computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^NodeUtil.isForIn ( n ) , cfgNode, output, conditional ) ;^232^^^^^217^247^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^232^233^^^^217^247^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ; return;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^232^^^^^217^247^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^232^^^^^217^247^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( c, cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^232^^^^^217^247^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^232^^^^^217^247^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^232^^^^^217^247^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^if  ( !NodeUtil.isForIn ( name )  )  {^236^^^^^221^251^if  ( !NodeUtil.isForIn ( n )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P13_Insert_Block]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^236^^^^^221^251^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( NodeUtil.getConditionExpression ( node ) , cfgNode, output, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, conditional, output ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^NodeUtil.getConditionExpression ( name ) , cfgNode, output, conditional ) ;^238^^^^^223^253^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^NodeUtil.getConditionExpression ( rhs ) , cfgNode, output, conditional ) ;^238^^^^^223^253^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^Node lhs = name.getFirstChild (  ) ;^241^^^^^226^256^Node lhs = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^241^^^^^226^256^Node lhs = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^lhs = lhs.getLastChild (  ) ;Node lhs = n.getFirstChild (  ) ;^241^^^^^226^256^Node lhs = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^Node rhs = name.getNext (  ) ;^242^^^^^227^257^Node rhs = lhs.getNext (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^Node rhs = target .getType (  )  ;^242^^^^^227^257^Node rhs = lhs.getNext (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^242^^^^^227^257^Node rhs = lhs.getNext (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^lhs = lhs.getLastChild (  ) ;Node rhs = lhs.getNext (  ) ;^242^^^^^227^257^Node rhs = lhs.getNext (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^if  ( NodeUtil.isVar ( rhs )  )  {^243^^^^^228^258^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^if  ( NodeUtil .isName ( aNode )   )  {^243^^^^^228^258^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P13_Insert_Block]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^243^^^^^228^258^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^if  ( NodeUtil.isVar ( name )  )  {^246^^^^^231^261^if  ( NodeUtil.isName ( lhs )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( target.getString (  ) , cfgNode, rhs, output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( lhs.getString (  ) , cfgNode, name, output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( lhs.getString (  ) , cfgNode, output, rhs ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^addToDefIfLocal ( lhs .getLastChild (  )  , cfgNode, rhs, output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( lhs.getString (  ) , target, rhs, output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( target.getFirstChild (  ) , cfgNode, output, conditional ) ;^254^^^^^239^269^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getFirstChild (  ) ,  output, conditional ) ;^254^^^^^239^269^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getFirstChild (  ) , cfgNode,  conditional ) ;^254^^^^^239^269^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getFirstChild (  ) , cfgNode, output ) ;^254^^^^^239^269^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( output.getFirstChild (  ) , cfgNode, n, conditional ) ;^254^^^^^239^269^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getFirstChild (  ) , output, cfgNode, conditional ) ;^254^^^^^239^269^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getFirstChild (  ) , cfgNode, conditional, output ) ;^254^^^^^239^269^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^addToDefIfLocal ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^254^^^^^239^269^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( rhs.getFirstChild (  ) , cfgNode, output, conditional ) ;^254^^^^^239^269^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^254^^^^^239^269^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^254^255^^^^239^269^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ; computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P3_Replace_Literal]^computeMustDef ( n.getLastChild (  ) , cfgNode, output, false ) ;^255^^^^^240^270^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( node.getLastChild (  ) , cfgNode, output, true ) ;^255^^^^^240^270^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getLastChild (  ) , node, output, true ) ;^255^^^^^240^270^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getLastChild (  ) ,  output, true ) ;^255^^^^^240^270^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getLastChild (  ) , cfgNode,  true ) ;^255^^^^^240^270^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( cfgNode.getLastChild (  ) , n, output, true ) ;^255^^^^^240^270^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getLastChild (  ) , output, cfgNode, true ) ;^255^^^^^240^270^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^addToDefIfLocal ( n.getLastChild (  ) , cfgNode, output, true ) ;^255^^^^^240^270^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^computeMustDef ( n.getLastChild (  ) , target, output, true ) ;^255^^^^^240^270^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^255^^^^^240^270^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( name.getLastChild (  ) , cfgNode, output, true ) ;^255^^^^^240^270^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^computeMustDef ( n .getFirstChild (  )  , cfgNode, output, true ) ;^255^^^^^240^270^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^255^256^^^^240^270^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ; return;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( target.getFirstChild (  ) , cfgNode, output, conditional ) ;^259^^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getFirstChild (  ) ,  output, conditional ) ;^259^^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getFirstChild (  ) , cfgNode,  conditional ) ;^259^^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getFirstChild (  ) , cfgNode, output ) ;^259^^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( conditional.getFirstChild (  ) , cfgNode, output, n ) ;^259^^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( cfgNode.getFirstChild (  ) , n, output, conditional ) ;^259^^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getFirstChild (  ) , cfgNode, conditional, output ) ;^259^^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getFirstChild (  ) , conditional, output, cfgNode ) ;^259^^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^addToDefIfLocal ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^259^^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^computeMustDef ( n.getFirstChild (  ) , node, output, conditional ) ;^259^^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^259^260^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ; computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( node.getFirstChild (  ) , cfgNode, output, conditional ) ;^259^^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^computeMustDef ( name.getFirstChild (  ) , cfgNode, output, conditional ) ;^259^^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^259^^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P3_Replace_Literal]^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, false ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( node.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , rhs, output, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getFirstChild (  ) .getNext (  ) ,  output, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode,  true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( cfgNode.getFirstChild (  ) .getNext (  ) , n, output, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , output, cfgNode, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^addToDefIfLocal ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^computeMustDef ( n.getFirstChild (  ) .getNode (  ) , cfgNode, output, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^computeMustDef ( n .getLastChild (  )  .getNext (  ) , target, output, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^260^261^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ; computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P11_Insert_Donor_Statement]^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( target.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^computeMustDef ( n.getFirstChild (  )  .getType (  )  , cfgNode, output, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^computeMustDef ( target .getLastChild (  )  .getNext (  ) , cfgNode, output, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^computeMustDef ( n .getLastChild (  )  .getNext (  ) , cfgNode, output, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^computeMustDef ( rhs.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P3_Replace_Literal]^computeMustDef ( n.getLastChild (  ) , cfgNode, output, false ) ;^261^^^^^246^276^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getLastChild (  ) , node, output, true ) ;^261^^^^^246^276^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getLastChild (  ) ,  output, true ) ;^261^^^^^246^276^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( n.getLastChild (  ) , cfgNode,  true ) ;^261^^^^^246^276^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( cfgNode.getLastChild (  ) , n, output, true ) ;^261^^^^^246^276^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( output.getLastChild (  ) , cfgNode, n, true ) ;^261^^^^^246^276^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^addToDefIfLocal ( n.getLastChild (  ) , cfgNode, output, true ) ;^261^^^^^246^276^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^computeMustDef ( n .getFirstChild (  )  , cfgNode, output, true ) ;^261^^^^^246^276^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( node.getLastChild (  ) , cfgNode, output, true ) ;^261^^^^^246^276^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^261^262^^^^246^276^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ; return;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( name.getLastChild (  ) , cfgNode, output, true ) ;^261^^^^^246^276^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^computeMustDef ( name .getFirstChild (  )  , cfgNode, output, true ) ;^261^^^^^246^276^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^261^^^^^246^276^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^265^266^267^268^269^250^280^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { if  ( c.hasChildren (  )  )  { computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ; addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^if  ( name .getLastChild (  )   )  {^266^^^^^251^281^if  ( c.hasChildren (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( conditional.getFirstChild (  ) , cfgNode, output, c ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^addToDefIfLocal ( c .getLastChild (  )  , conditional ? null : node, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( NodeUtil .isForIn ( rhs )   && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^275^^^^^260^290^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^if  ( NodeUtil.isForIn ( node )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^275^^^^^260^290^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P13_Insert_Block]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^275^^^^^260^290^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^if  ( NodeUtil.isAssignmentOp ( name )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^275^^^^^260^290^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( name.getNext (  ) , output, cfgNode, conditional ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( target.getNext (  ) , cfgNode, output, conditional ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P8_Replace_Mix]^computeMustDef ( rhs .getType (  )  , cfgNode, output, conditional ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( rhs.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( name.getString (  ) , conditional ? null : target, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( n.getString (  ) , conditional ? nameull : cfgNode, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( conditional.getString (  ) , name ? null : cfgNode, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^addToDefIfLocal ( name.getString (  ) , output ? null : cfgNode, n.getLastChild (  ) , conditional ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^if  ( name.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^283^^^^^268^298^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^if  ( n .getString (  )   == Token.DEC || n^283^^^^^268^298^if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^Node target = target.getFirstChild (  ) ;^284^^^^^269^299^Node target = n.getFirstChild (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( node )  )  {^285^^^^^270^300^if  ( NodeUtil.isName ( target )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^for  ( Node c = name.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^292^^^^^277^307^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P7_Replace_Invocation]^for  ( Node c = n .getLastChild (  )  ; c != null; c = c.getNext (  )  )  {^292^^^^^277^307^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P14_Delete_Statement]^^292^293^294^^^277^307^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { computeMustDef ( c, cfgNode, output, conditional ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^for  ( Node target = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^292^^^^^277^307^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c, target, output, conditional ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^computeMustDef ( c, output, cfgNode, conditional ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[P5_Replace_Variable]^Var var = name.getVar ( jsScope ) ;^308^^^^^307^337^Var var = jsScope.getVar ( name ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P7_Replace_Invocation]^Var var = jsScope.isDeclared ( name ) ;^308^^^^^307^337^Var var = jsScope.getVar ( name ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P7_Replace_Invocation]^Var var = jsScope .getVars (  )  ;^308^^^^^307^337^Var var = jsScope.getVar ( name ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P11_Insert_Donor_Statement]^Var var = vars.next (  ) ;Var var = jsScope.getVar ( name ) ;^308^^^^^307^337^Var var = jsScope.getVar ( name ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P14_Delete_Statement]^^308^^^^^307^337^Var var = jsScope.getVar ( name ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P11_Insert_Donor_Statement]^return new MustDef ( jsScope.getVars (  )  ) ;Var var = jsScope.getVar ( name ) ;^308^^^^^307^337^Var var = jsScope.getVar ( name ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P2_Replace_Operator]^if  ( var == null && var.scope != jsScope )  {^312^^^^^307^337^if  ( var == null || var.scope != jsScope )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P2_Replace_Operator]^if  ( var != null || var.scope != jsScope )  {^312^^^^^307^337^if  ( var == null || var.scope != jsScope )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P2_Replace_Operator]^if  ( var == null || var.scope == jsScope )  {^312^^^^^307^337^if  ( var == null || var.scope != jsScope )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P6_Replace_Expression]^if  ( var == null ) {^312^^^^^307^337^if  ( var == null || var.scope != jsScope )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P6_Replace_Expression]^if  (  var.scope != jsScope )  {^312^^^^^307^337^if  ( var == null || var.scope != jsScope )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P8_Replace_Mix]^if  ( var == false || var.scope != jsScope )  {^312^^^^^307^337^if  ( var == null || var.scope != jsScope )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P15_Unwrap_Block]^return ;^312^313^314^^^307^337^if  ( var == null || var.scope != jsScope )  { return; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P16_Remove_Block]^^312^313^314^^^307^337^if  ( var == null || var.scope != jsScope )  { return; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P2_Replace_Operator]^if  ( otherDef != null )  {^318^^^^^307^337^if  ( otherDef == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^if  ( definition == null )  {^318^^^^^307^337^if  ( otherDef == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P8_Replace_Mix]^if  ( otherDef == false )  {^318^^^^^307^337^if  ( otherDef == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P9_Replace_Statement]^if  ( rValue != null )  {^318^^^^^307^337^if  ( otherDef == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P9_Replace_Statement]^if  ( def == null )  {^318^^^^^307^337^if  ( otherDef == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P9_Replace_Statement]^if  ( aDef == null )  {^318^^^^^307^337^if  ( otherDef == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P9_Replace_Statement]^if  ( node == null )  {^318^^^^^307^337^if  ( otherDef == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P15_Unwrap_Block]^continue;^318^319^320^^^307^337^if  ( otherDef == null )  { continue; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P16_Remove_Block]^^318^319^320^^^307^337^if  ( otherDef == null )  { continue; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^if  ( definition.depends.contains ( var )  )  {^321^^^^^307^337^if  ( otherDef.depends.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^if  ( otherDef.depends.contains ( other )  )  {^321^^^^^307^337^if  ( otherDef.depends.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^if  ( other.depends.contains ( var )  )  {^321^^^^^307^337^if  ( otherDef.depends.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^if  ( varDef.depends.contains ( other )  )  {^321^^^^^307^337^if  ( otherDef.depends.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^if  ( other.contains ( var )  )  {^321^^^^^307^337^if  ( otherDef.depends.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P7_Replace_Invocation]^if  ( otherDef.depends .add (  )   )  {^321^^^^^307^337^if  ( otherDef.depends.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P9_Replace_Statement]^if  ( !escaped.contains ( var )  )  {^321^^^^^307^337^if  ( otherDef.depends.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P15_Unwrap_Block]^def.reachingDef.put(other, null);^321^322^323^^^307^337^if  ( otherDef.depends.contains ( var )  )  { def.reachingDef.put ( other, null ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P16_Remove_Block]^^321^322^323^^^307^337^if  ( otherDef.depends.contains ( var )  )  { def.reachingDef.put ( other, null ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put ( var, null ) ;^322^^^^^307^337^def.reachingDef.put ( other, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put (  null ) ;^322^^^^^307^337^def.reachingDef.put ( other, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P8_Replace_Mix]^def.reachingDef .put ( var , otherDef )  ;^322^^^^^307^337^def.reachingDef.put ( other, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P14_Delete_Statement]^^322^^^^^307^337^def.reachingDef.put ( other, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P11_Insert_Donor_Statement]^def.reachingDef.put ( var, null ) ;def.reachingDef.put ( other, null ) ;^322^^^^^307^337^def.reachingDef.put ( other, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P11_Insert_Donor_Statement]^def.reachingDef.put ( var, definition ) ;def.reachingDef.put ( other, null ) ;^322^^^^^307^337^def.reachingDef.put ( other, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P11_Insert_Donor_Statement]^resultMap.put ( var, null ) ;def.reachingDef.put ( other, null ) ;^322^^^^^307^337^def.reachingDef.put ( other, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^Definition varDef = def.reachingDef.get ( other ) ;^317^^^^^307^337^Definition otherDef = def.reachingDef.get ( other ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^Definition defDef = other.reachingDef.get ( other ) ;^317^^^^^307^337^Definition otherDef = def.reachingDef.get ( other ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^Definition def.reachingDefDef = other.get ( other ) ;^317^^^^^307^337^Definition otherDef = def.reachingDef.get ( other ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P7_Replace_Invocation]^Definition otherDef = def.reachingDef.put ( other ) ;^317^^^^^307^337^Definition otherDef = def.reachingDef.get ( other ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P8_Replace_Mix]^Definition varDef = def.reachingDef.put ( other ) ;^317^^^^^307^337^Definition otherDef = def.reachingDef.get ( other ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P11_Insert_Donor_Statement]^Definition bDef = b.reachingDef.get ( var ) ;Definition otherDef = def.reachingDef.get ( other ) ;^317^^^^^307^337^Definition otherDef = def.reachingDef.get ( other ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P11_Insert_Donor_Statement]^Definition def = state.getIn (  ) .reachingDef.get ( jsScope.getVar ( name )  ) ;Definition otherDef = def.reachingDef.get ( other ) ;^317^^^^^307^337^Definition otherDef = def.reachingDef.get ( other ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P11_Insert_Donor_Statement]^Definition aDef = a.reachingDef.get ( var ) ;Definition otherDef = def.reachingDef.get ( other ) ;^317^^^^^307^337^Definition otherDef = def.reachingDef.get ( other ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P11_Insert_Donor_Statement]^Definition otherDef =  ( Definition )  other;Definition otherDef = def.reachingDef.get ( other ) ;^317^^^^^307^337^Definition otherDef = def.reachingDef.get ( other ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^for  ( Var other : def.reachingDef.reachingDef.keySet (  )  )  {^316^^^^^307^337^for  ( Var other : def.reachingDef.keySet (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^for  ( Var other : def.keySet (  )  )  {^316^^^^^307^337^for  ( Var other : def.reachingDef.keySet (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P7_Replace_Invocation]^for  ( Var other : def.reachingDef.equals (  )  )  {^316^^^^^307^337^for  ( Var other : def.reachingDef.keySet (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P14_Delete_Statement]^^316^317^318^319^320^307^337^for  ( Var other : def.reachingDef.keySet (  )  )  { Definition otherDef = def.reachingDef.get ( other ) ; if  ( otherDef == null )  { continue; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P7_Replace_Invocation]^Definition otherDef = def.reachingDef .get ( other )  ;^317^^^^^307^337^Definition otherDef = def.reachingDef.get ( other ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P14_Delete_Statement]^^317^^^^^307^337^Definition otherDef = def.reachingDef.get ( other ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^if  ( var.depends.contains ( otherDef )  )  {^321^^^^^307^337^if  ( otherDef.depends.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^if  ( var.contains ( otherDef.depends )  )  {^321^^^^^307^337^if  ( otherDef.depends.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^if  ( !escaped.contains ( other )  )  {^326^^^^^307^337^if  ( !escaped.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P6_Replace_Expression]^if  ( rValue != null )  {^326^^^^^307^337^if  ( !escaped.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P8_Replace_Mix]^if  ( !escaped .add (  )   )  {^326^^^^^307^337^if  ( !escaped.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P9_Replace_Statement]^if  ( otherDef.depends.contains ( var )  )  {^326^^^^^307^337^if  ( !escaped.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P9_Replace_Statement]^if  ( b.reachingDef.containsKey ( var )  )  {^326^^^^^307^337^if  ( !escaped.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P9_Replace_Statement]^if  ( !a.reachingDef.containsKey ( var )  )  {^326^^^^^307^337^if  ( !escaped.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P2_Replace_Operator]^if  ( node != null )  {^327^^^^^307^337^if  ( node == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^if  ( rhs == null )  {^327^^^^^307^337^if  ( node == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P6_Replace_Expression]^if  ( rValue != null )  {^327^^^^^307^337^if  ( node == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P8_Replace_Mix]^if  ( rValue == true )  {^327^^^^^307^337^if  ( node == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P9_Replace_Statement]^if  ( def == null )  {^327^^^^^307^337^if  ( node == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P9_Replace_Statement]^if  ( aDef == null )  {^327^^^^^307^337^if  ( node == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P9_Replace_Statement]^if  ( otherDef == null )  {^327^^^^^307^337^if  ( node == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P2_Replace_Operator]^if  ( rValue == null )  {^331^^^^^327^335^if  ( rValue != null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^if  ( name != null )  {^331^^^^^327^335^if  ( rValue != null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P8_Replace_Mix]^if  ( name != false )  {^331^^^^^327^335^if  ( rValue != null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P9_Replace_Statement]^if  ( def == null )  {^331^^^^^327^335^if  ( rValue != null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P9_Replace_Statement]^if  ( aDef == null )  {^331^^^^^327^335^if  ( rValue != null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P9_Replace_Statement]^if  ( node == null )  {^331^^^^^327^335^if  ( rValue != null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P9_Replace_Statement]^if  ( otherDef == null )  {^331^^^^^327^335^if  ( rValue != null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P15_Unwrap_Block]^computeDependence(definition, rValue);^331^332^333^^^327^335^if  ( rValue != null )  { computeDependence ( definition, rValue ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P16_Remove_Block]^^331^332^333^^^327^335^if  ( rValue != null )  { computeDependence ( definition, rValue ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^computeDependence ( otherDef, rValue ) ;^332^^^^^327^335^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^computeDependence ( definition, target ) ;^332^^^^^327^335^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^computeDependence (  rValue ) ;^332^^^^^327^335^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^computeDependence ( definition ) ;^332^^^^^327^335^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^computeDependence ( rValue, definition ) ;^332^^^^^327^335^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P7_Replace_Invocation]^getDef ( definition, rValue ) ;^332^^^^^327^335^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P14_Delete_Statement]^^332^^^^^327^335^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P13_Insert_Block]^if  ( rValue != null )  {     computeDependence ( definition, rValue ) ; }^332^^^^^327^335^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P4_Replace_Constructor]^Definition definition = new Definition ( getRootNode (  )  )  ;^330^^^^^327^335^Definition definition = new Definition ( node ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^Definition definition = new Definition ( name ) ;^330^^^^^327^335^Definition definition = new Definition ( node ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P8_Replace_Mix]^Definition definition = new Definition ( rhs ) ;^330^^^^^327^335^Definition definition = new Definition ( node ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P13_Insert_Block]^if  ( ! ( other instanceof Definition )  )  {     return false; }^330^^^^^327^335^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P11_Insert_Donor_Statement]^Definition otherDef =  ( Definition )  other;Definition definition = new Definition ( node ) ;^330^^^^^327^335^Definition definition = new Definition ( node ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^computeDependence ( definition, name ) ;^332^^^^^327^335^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put ( other, definition ) ;^334^^^^^327^335^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put ( varinition ) ;^334^^^^^327^335^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put (  definition ) ;^334^^^^^327^335^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put ( var ) ;^334^^^^^327^335^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put ( def, varinition ) ;^334^^^^^327^335^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put ( definition, var ) ;^334^^^^^327^335^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P7_Replace_Invocation]^def.reachingDef .put ( var , definition )  ;^334^^^^^327^335^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P14_Delete_Statement]^^334^^^^^327^335^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P11_Insert_Donor_Statement]^def.reachingDef.put ( var, null ) ;def.reachingDef.put ( var, definition ) ;^334^^^^^327^335^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P11_Insert_Donor_Statement]^def.reachingDef.put ( other, null ) ;def.reachingDef.put ( var, definition ) ;^334^^^^^327^335^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put ( other, null ) ;^328^^^^^307^337^def.reachingDef.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put (  null ) ;^328^^^^^307^337^def.reachingDef.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P8_Replace_Mix]^def.reachingDef .put ( other , otherDef )  ;^328^^^^^307^337^def.reachingDef.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P14_Delete_Statement]^^328^^^^^307^337^def.reachingDef.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P11_Insert_Donor_Statement]^resultMap.put ( var, aDef ) ;def.reachingDef.put ( var, null ) ;^328^^^^^307^337^def.reachingDef.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P11_Insert_Donor_Statement]^def.reachingDef.put ( var, definition ) ;def.reachingDef.put ( var, null ) ;^328^^^^^307^337^def.reachingDef.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P11_Insert_Donor_Statement]^def.reachingDef.put ( other, null ) ;def.reachingDef.put ( var, null ) ;^328^^^^^307^337^def.reachingDef.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P11_Insert_Donor_Statement]^resultMap.put ( var, null ) ;def.reachingDef.put ( var, null ) ;^328^^^^^307^337^def.reachingDef.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P2_Replace_Operator]^if  ( rValue == null )  {^331^^^^^307^337^if  ( rValue != null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^if  ( target != null )  {^331^^^^^307^337^if  ( rValue != null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P8_Replace_Mix]^if  ( rValue != false )  {^331^^^^^307^337^if  ( rValue != null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P9_Replace_Statement]^if  ( def == null )  {^331^^^^^307^337^if  ( rValue != null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P9_Replace_Statement]^if  ( aDef == null )  {^331^^^^^307^337^if  ( rValue != null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P9_Replace_Statement]^if  ( node == null )  {^331^^^^^307^337^if  ( rValue != null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P9_Replace_Statement]^if  ( otherDef == null )  {^331^^^^^307^337^if  ( rValue != null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P15_Unwrap_Block]^computeDependence(definition, rValue);^331^332^333^^^307^337^if  ( rValue != null )  { computeDependence ( definition, rValue ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P16_Remove_Block]^^331^332^333^^^307^337^if  ( rValue != null )  { computeDependence ( definition, rValue ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^computeDependence ( otherDef, rValue ) ;^332^^^^^307^337^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^computeDependence ( definition, target ) ;^332^^^^^307^337^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^computeDependence (  rValue ) ;^332^^^^^307^337^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^computeDependence ( definition ) ;^332^^^^^307^337^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^computeDependence ( rValue, definition ) ;^332^^^^^307^337^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P7_Replace_Invocation]^getDef ( definition, rValue ) ;^332^^^^^307^337^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P8_Replace_Mix]^getDef ( definition, name ) ;^332^^^^^307^337^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P14_Delete_Statement]^^332^^^^^307^337^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P13_Insert_Block]^if  ( rValue != null )  {     computeDependence ( definition, rValue ) ; }^332^^^^^307^337^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P4_Replace_Constructor]^Definition definition = new Definition ( getRootNode (  )  )  ;^330^^^^^307^337^Definition definition = new Definition ( node ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^Definition definition = new Definition ( name ) ;^330^^^^^307^337^Definition definition = new Definition ( node ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P8_Replace_Mix]^Definition definition = new Definition ( target ) ;^330^^^^^307^337^Definition definition = new Definition ( node ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P13_Insert_Block]^if  ( ! ( other instanceof Definition )  )  {     return false; }^330^^^^^307^337^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P11_Insert_Donor_Statement]^Definition otherDef =  ( Definition )  other;Definition definition = new Definition ( node ) ;^330^^^^^307^337^Definition definition = new Definition ( node ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P7_Replace_Invocation]^def.reachingDef .put ( other , definition )  ;^328^^^^^307^337^def.reachingDef.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put ( other, definition ) ;^334^^^^^307^337^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put ( var, otherDef ) ;^334^^^^^307^337^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put ( varinition ) ;^334^^^^^307^337^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put (  definition ) ;^334^^^^^307^337^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put ( var ) ;^334^^^^^307^337^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put ( var, definitioninition ) ;^334^^^^^307^337^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put ( var, def ) ;^334^^^^^307^337^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P14_Delete_Statement]^^334^^^^^307^337^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P11_Insert_Donor_Statement]^def.reachingDef.put ( var, null ) ;def.reachingDef.put ( var, definition ) ;^334^^^^^307^337^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P11_Insert_Donor_Statement]^def.reachingDef.put ( other, null ) ;def.reachingDef.put ( var, definition ) ;^334^^^^^307^337^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^if  ( name == null )  {^327^^^^^307^337^if  ( node == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P8_Replace_Mix]^if  ( node == this )  {^327^^^^^307^337^if  ( node == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^if  ( target != null )  {^331^^^^^327^335^if  ( rValue != null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P8_Replace_Mix]^if  ( rValue != this )  {^331^^^^^327^335^if  ( rValue != null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^Definition definition = new Definition ( target ) ;^330^^^^^327^335^Definition definition = new Definition ( node ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P8_Replace_Mix]^Definition definition = new Definition ( rValue ) ;^330^^^^^327^335^Definition definition = new Definition ( node ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^computeDependence ( definition, rhs ) ;^332^^^^^327^335^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P8_Replace_Mix]^getDef ( otherDef, rValue ) ;^332^^^^^327^335^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put ( var, otherDef ) ;^334^^^^^327^335^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put ( var, definitioninition ) ;^334^^^^^327^335^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P7_Replace_Invocation]^def.reachingDef .put ( var , definition )  ;^328^^^^^307^337^def.reachingDef.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P8_Replace_Mix]^if  ( name != true )  {^331^^^^^307^337^if  ( rValue != null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^computeDependence ( definition, name ) ;^332^^^^^307^337^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P8_Replace_Mix]^getDef ( otherDef, rValue ) ;^332^^^^^307^337^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^Definition definition = new Definition ( rValue ) ;^330^^^^^307^337^Definition definition = new Definition ( node ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put ( def, varinition ) ;^334^^^^^307^337^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P5_Replace_Variable]^def.reachingDef.put ( definition, var ) ;^334^^^^^307^337^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( n )  || jsScope.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^343^353^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P3_Replace_Literal]^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , true )  )  {^348^^^^^343^353^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( node )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^343^353^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( n )  ) {^348^^^^^343^353^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P6_Replace_Expression]^if  (  jsScope.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^343^353^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^343^353^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n .getLastChild (  )  , false )  )  {^348^^^^^343^353^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P15_Unwrap_Block]^def.depends.add(jsScope.getVar(n.getString()));^348^349^350^^^343^353^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  { def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P16_Remove_Block]^^348^349^350^^^343^353^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  { def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P5_Replace_Variable]^def.depends.add ( jsScope.getVar ( parent.getString (  )  )  ) ;^349^^^^^343^353^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P5_Replace_Variable]^def.depends.add ( n.getVar ( jsScope.getString (  )  )  ) ;^349^^^^^343^353^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P7_Replace_Invocation]^def.depends.add ( jsScope.isDeclared ( n.getString (  )  )  ) ;^349^^^^^343^353^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P7_Replace_Invocation]^def.depends.add ( jsScope.getVar ( n .getLastChild (  )   )  ) ;^349^^^^^343^353^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P8_Replace_Mix]^def.depends.add ( jsScope.isDeclared ( target.getString (  )  )  ) ;^349^^^^^343^353^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P14_Delete_Statement]^^349^^^^^343^353^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P12_Insert_Condition]^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  { def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ; }^349^^^^^343^353^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P5_Replace_Variable]^def.depends.add ( jsScope.getVar ( target.getString (  )  )  ) ;^349^^^^^343^353^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P8_Replace_Mix]^def.depends.add ( jsScope .getVars (  )   ) ;^349^^^^^343^353^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P4_Replace_Constructor]^NodeTraversal.traverse ( compiler,  new AbstractCfgNodeTraversalCallback (  )  {^344^345^^^^343^353^NodeTraversal.traverse ( compiler, rValue, new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P4_Replace_Constructor]^NodeTraversal.traverse ( compiler, rValueew AbstractCfgNodeTraversalCallback (  )  {^344^345^^^^343^353^NodeTraversal.traverse ( compiler, rValue, new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, parent, new AbstractCfgNodeTraversalCallback (  )  {^344^345^^^^343^353^NodeTraversal.traverse ( compiler, rValue, new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, rValue, targetew AbstractCfgNodeTraversalCallback (  )  {^344^345^^^^343^353^NodeTraversal.traverse ( compiler, rValue, new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P5_Replace_Variable]^NodeTraversal.traverse (  rValue, new AbstractCfgNodeTraversalCallback (  )  {^344^345^^^^343^353^NodeTraversal.traverse ( compiler, rValue, new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P5_Replace_Variable]^NodeTraversal.traverse ( n, rValue, compilerew AbstractCfgNodeTraversalCallback (  )  {^344^345^^^^343^353^NodeTraversal.traverse ( compiler, rValue, new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P8_Replace_Mix]^NodeTraversal.traverse ( compiler, node, new AbstractCfgNodeTraversalCallback (  )  {^344^345^^^^343^353^NodeTraversal.traverse ( compiler, rValue, new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( parent )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^343^353^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P13_Insert_Block]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^348^^^^^343^353^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( jsScope )  && n.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^343^353^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && jsScope .getVars (  )   )  {^348^^^^^343^353^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( rValue )  && jsScope .getVars (  )   )  {^348^^^^^343^353^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( target )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^343^353^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P5_Replace_Variable]^def.depends.add ( jsScope.getVar ( rValue.getString (  )  )  ) ;^349^^^^^343^353^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P8_Replace_Mix]^def.depends.add ( jsScope.getVar ( rValue .getLastChild (  )   )  ) ;^349^^^^^343^353^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( n )  || jsScope.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P3_Replace_Literal]^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , true )  )  {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( rhs )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( n )  ) {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P6_Replace_Expression]^if  (  jsScope.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && jsScope .getVars (  )   )  {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n .getLastChild (  )  , false )  )  {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P15_Unwrap_Block]^def.depends.add(jsScope.getVar(n.getString()));^348^349^350^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  { def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P16_Remove_Block]^^348^349^350^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  { def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P5_Replace_Variable]^def.depends.add ( jsScope.getVar ( target.getString (  )  )  ) ;^349^^^^^347^351^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P5_Replace_Variable]^def.depends.add ( n.getVar ( jsScope.getString (  )  )  ) ;^349^^^^^347^351^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P7_Replace_Invocation]^def.depends.add ( jsScope.isDeclared ( n.getString (  )  )  ) ;^349^^^^^347^351^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P7_Replace_Invocation]^def.depends.add ( jsScope.getVar ( n .getLastChild (  )   )  ) ;^349^^^^^347^351^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P8_Replace_Mix]^def.depends.add ( jsScope.getVar ( parent.getString (  )  )  ) ;^349^^^^^347^351^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P14_Delete_Statement]^^349^^^^^347^351^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P12_Insert_Condition]^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  { def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ; }^349^^^^^347^351^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P5_Replace_Variable]^def.depends.add ( jsScope.getVar ( node.getString (  )  )  ) ;^349^^^^^347^351^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P7_Replace_Invocation]^def.depends.add ( jsScope .getVars (  )   ) ;^349^^^^^347^351^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P8_Replace_Mix]^def.depends.add ( jsScope.getVar ( rValue.getString (  )  )  ) ;^349^^^^^347^351^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( rValue )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P13_Insert_Block]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^348^^^^^347^351^[Delete]^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parent )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( jsScope )  && n.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( target )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P8_Replace_Mix]^def.depends.add ( jsScope.getVar ( parent .getLastChild (  )   )  ) ;^349^^^^^347^351^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[P5_Replace_Variable]^Preconditions.checkArgument ( getCfg (  ) .hasNode ( node )  ) ;^365^^^^^364^374^Preconditions.checkArgument ( getCfg (  ) .hasNode ( useNode )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P7_Replace_Invocation]^Preconditions.checkArgument ( getCfg (  ) .getNode ( useNode )  ) ;^365^^^^^364^374^Preconditions.checkArgument ( getCfg (  ) .hasNode ( useNode )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P7_Replace_Invocation]^Preconditions.checkArgument ( getCfg (  )  .getNode ( node )   ) ;^365^^^^^364^374^Preconditions.checkArgument ( getCfg (  ) .hasNode ( useNode )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P7_Replace_Invocation]^Preconditions.checkArgument ( get (  ) .hasNode ( useNode )  ) ;^365^^^^^364^374^Preconditions.checkArgument ( getCfg (  ) .hasNode ( useNode )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P8_Replace_Mix]^Preconditions.checkArgument ( getCfg (  )  .getNode ( name )   ) ;^365^^^^^364^374^Preconditions.checkArgument ( getCfg (  ) .hasNode ( useNode )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P14_Delete_Statement]^^365^^^^^364^374^Preconditions.checkArgument ( getCfg (  ) .hasNode ( useNode )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P11_Insert_Donor_Statement]^GraphNode<Node, Branch> n = getCfg (  ) .getNode ( useNode ) ;Preconditions.checkArgument ( getCfg (  ) .hasNode ( useNode )  ) ;^365^^^^^364^374^Preconditions.checkArgument ( getCfg (  ) .hasNode ( useNode )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P8_Replace_Mix]^Preconditions.checkArgument ( getCfg (  ) .hasNode ( parent )  ) ;^365^^^^^364^374^Preconditions.checkArgument ( getCfg (  ) .hasNode ( useNode )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P14_Delete_Statement]^^365^366^^^^364^374^Preconditions.checkArgument ( getCfg (  ) .hasNode ( useNode )  ) ; GraphNode<Node, Branch> n = getCfg (  ) .getNode ( useNode ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P5_Replace_Variable]^GraphNode<Node, Branch> n = getCfg (  ) .getNode ( rhs ) ;^366^^^^^364^374^GraphNode<Node, Branch> n = getCfg (  ) .getNode ( useNode ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P7_Replace_Invocation]^GraphNode<Node, Branch> n = getCfg (  ) .hasNode ( useNode ) ;^366^^^^^364^374^GraphNode<Node, Branch> n = getCfg (  ) .getNode ( useNode ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P7_Replace_Invocation]^GraphNode<Node, Branch> n = getCfg (  )  .getNext (  )  ;^366^^^^^364^374^GraphNode<Node, Branch> n = getCfg (  ) .getNode ( useNode ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P7_Replace_Invocation]^GraphNode<Node, Branch> n = get (  ) .getNode ( useNode ) ;^366^^^^^364^374^GraphNode<Node, Branch> n = getCfg (  ) .getNode ( useNode ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P8_Replace_Mix]^GraphNode<Node, Branch> n = getCfg (  ) .getNode ( target ) ;^366^^^^^364^374^GraphNode<Node, Branch> n = getCfg (  ) .getNode ( useNode ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P8_Replace_Mix]^GraphNode<Node, Branch> n = getCfg (  ) .getNode ( rValue ) ;^366^^^^^364^374^GraphNode<Node, Branch> n = getCfg (  ) .getNode ( useNode ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P14_Delete_Statement]^^366^367^^^^364^374^GraphNode<Node, Branch> n = getCfg (  ) .getNode ( useNode ) ; FlowState<MustDef> state = n.getAnnotation (  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( getCfg (  ) .hasNode ( useNode )  ) ;GraphNode<Node, Branch> n = getCfg (  ) .getNode ( useNode ) ;^366^^^^^364^374^GraphNode<Node, Branch> n = getCfg (  ) .getNode ( useNode ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P14_Delete_Statement]^^367^368^^^^364^374^FlowState<MustDef> state = n.getAnnotation (  ) ; Definition def = state.getIn (  ) .reachingDef.get ( jsScope.getVar ( name )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P7_Replace_Invocation]^Definition def = state.getIn (  ) .reachingDef.get ( jsScope.isDeclared ( name )  ) ;^368^^^^^364^374^Definition def = state.getIn (  ) .reachingDef.get ( jsScope.getVar ( name )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P11_Insert_Donor_Statement]^Definition bDef = b.reachingDef.get ( var ) ;Definition def = state.getIn (  ) .reachingDef.get ( jsScope.getVar ( name )  ) ;^368^^^^^364^374^Definition def = state.getIn (  ) .reachingDef.get ( jsScope.getVar ( name )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P11_Insert_Donor_Statement]^Definition aDef = a.reachingDef.get ( var ) ;Definition def = state.getIn (  ) .reachingDef.get ( jsScope.getVar ( name )  ) ;^368^^^^^364^374^Definition def = state.getIn (  ) .reachingDef.get ( jsScope.getVar ( name )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P11_Insert_Donor_Statement]^Definition otherDef = def.reachingDef.get ( other ) ;Definition def = state.getIn (  ) .reachingDef.get ( jsScope.getVar ( name )  ) ;^368^^^^^364^374^Definition def = state.getIn (  ) .reachingDef.get ( jsScope.getVar ( name )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P14_Delete_Statement]^^368^^^^^364^374^Definition def = state.getIn (  ) .reachingDef.get ( jsScope.getVar ( name )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P5_Replace_Variable]^Definition def = state.getIn (  ) .reachingDef.get ( name.getVar ( jsScope )  ) ;^368^^^^^364^374^Definition def = state.getIn (  ) .reachingDef.get ( jsScope.getVar ( name )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P7_Replace_Invocation]^Definition def = state.getIn (  ) .reachingDef.get ( jsScope .getVars (  )   ) ;^368^^^^^364^374^Definition def = state.getIn (  ) .reachingDef.get ( jsScope.getVar ( name )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P2_Replace_Operator]^if  ( def != null )  {^369^^^^^364^374^if  ( def == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P8_Replace_Mix]^if  ( def == true )  {^369^^^^^364^374^if  ( def == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P9_Replace_Statement]^if  ( rValue != null )  {^369^^^^^364^374^if  ( def == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P9_Replace_Statement]^if  ( aDef == null )  {^369^^^^^364^374^if  ( def == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P9_Replace_Statement]^if  ( node == null )  {^369^^^^^364^374^if  ( def == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P9_Replace_Statement]^if  ( otherDef == null )  {^369^^^^^364^374^if  ( def == null )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P15_Unwrap_Block]^return null;^369^370^371^372^373^364^374^if  ( def == null )  { return null; } else { return def.node; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P16_Remove_Block]^^369^370^371^372^373^364^374^if  ( def == null )  { return null; } else { return def.node; }^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P5_Replace_Variable]^return useNode;^372^^^^^364^374^return def.node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P5_Replace_Variable]^return def.node.node;^372^^^^^364^374^return def.node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P5_Replace_Variable]^return def;^372^^^^^364^374^return def.node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P8_Replace_Mix]^return node;^372^^^^^364^374^return def.node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P8_Replace_Mix]^return this;^370^^^^^364^374^return null;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P8_Replace_Mix]^return true;^370^^^^^364^374^return null;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P5_Replace_Variable]^return target;^372^^^^^364^374^return def.node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P8_Replace_Mix]^Node node;^67^^^^^62^72^final Node node;^[CLASS] Definition  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P8_Replace_Mix]^Set<Var> depends = Sets.newHashSet (  ) ;^68^^^^^63^73^final Set<Var> depends = Sets.newHashSet (  ) ;^[CLASS] Definition  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[P8_Replace_Mix]^this.node =  null;^70^^^^^69^71^this.node = node;^[CLASS] Definition  [METHOD] <init> [RETURN_TYPE] Node)   Node node [VARIABLES] Set  depends  Node  node  boolean  
[P2_Replace_Operator]^if  ( ! ( other  !=  Definition )  )  {^75^^^^^74^82^if  ( ! ( other instanceof Definition )  )  {^[CLASS] Definition  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Definition  otherDef  Object  other  Set  depends  boolean  Node  node  
[P8_Replace_Mix]^if  (  ( other instanceof Definition )  )  {^75^^^^^74^82^if  ( ! ( other instanceof Definition )  )  {^[CLASS] Definition  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Definition  otherDef  Object  other  Set  depends  boolean  Node  node  
[P15_Unwrap_Block]^return false;^75^76^77^^^74^82^if  ( ! ( other instanceof Definition )  )  { return false; }^[CLASS] Definition  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Definition  otherDef  Object  other  Set  depends  boolean  Node  node  
[P16_Remove_Block]^^75^76^77^^^74^82^if  ( ! ( other instanceof Definition )  )  { return false; }^[CLASS] Definition  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Definition  otherDef  Object  other  Set  depends  boolean  Node  node  
[P3_Replace_Literal]^return true;^76^^^^^74^82^return false;^[CLASS] Definition  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Definition  otherDef  Object  other  Set  depends  boolean  Node  node  
[P2_Replace_Operator]^return otherDef.node >= node;^81^^^^^74^82^return otherDef.node == node;^[CLASS] Definition  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Definition  otherDef  Object  other  Set  depends  boolean  Node  node  
[P5_Replace_Variable]^return node.node == otherDef;^81^^^^^74^82^return otherDef.node == node;^[CLASS] Definition  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Definition  otherDef  Object  other  Set  depends  boolean  Node  node  
[P5_Replace_Variable]^return node == otherDef.node;^81^^^^^74^82^return otherDef.node == node;^[CLASS] Definition  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Definition  otherDef  Object  other  Set  depends  boolean  Node  node  
[P8_Replace_Mix]^return otherDef.node  &&  node;^81^^^^^74^82^return otherDef.node == node;^[CLASS] Definition  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Definition  otherDef  Object  other  Set  depends  boolean  Node  node  
[P8_Replace_Mix]^Map<Var, Definition> reachingDef;^110^^^^^105^115^final Map<Var, Definition> reachingDef;^[CLASS] MustDef  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Definition  otherDef  Object  other  Set  depends  boolean  Node  node  
[P7_Replace_Invocation]^reachingDef = Maps .newHashMap (  )  ;^113^^^^^112^114^reachingDef = Maps.newHashMap (  ) ;^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef()   [VARIABLES] Map  reachingDef  boolean  
[P8_Replace_Mix]^reachingDef  =  reachingDef ;^113^^^^^112^114^reachingDef = Maps.newHashMap (  ) ;^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef()   [VARIABLES] Map  reachingDef  boolean  
[P11_Insert_Donor_Statement]^reachingDef = Maps.newHashMap ( other.reachingDef ) ;reachingDef = Maps.newHashMap (  ) ;^113^^^^^112^114^reachingDef = Maps.newHashMap (  ) ;^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef()   [VARIABLES] Map  reachingDef  boolean  
[P14_Delete_Statement]^^113^^^^^112^114^reachingDef = Maps.newHashMap (  ) ;^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef()   [VARIABLES] Map  reachingDef  boolean  
[P14_Delete_Statement]^^117^^^^^116^125^this (  ) ;^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] Iterator)   Var> vars [VARIABLES] Iterator  vars  boolean  Map  reachingDef  Var  var  
[P7_Replace_Invocation]^while ( vars .next (  )   )  {^118^^^^^116^125^while ( vars.hasNext (  )  )  {^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] Iterator)   Var> vars [VARIABLES] Iterator  vars  boolean  Map  reachingDef  Var  var  
[P5_Replace_Variable]^reachingDef.put (  new Definition ( var.scope.getRootNode (  )  )  ) ;^123^^^^^116^125^reachingDef.put ( var, new Definition ( var.scope.getRootNode (  )  )  ) ;^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] Iterator)   Var> vars [VARIABLES] Iterator  vars  boolean  Map  reachingDef  Var  var  
[P8_Replace_Mix]^Var var = vars .hasNext (  )  ;^119^^^^^116^125^Var var = vars.next (  ) ;^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] Iterator)   Var> vars [VARIABLES] Iterator  vars  boolean  Map  reachingDef  Var  var  
[P14_Delete_Statement]^^119^^^^^116^125^Var var = vars.next (  ) ;^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] Iterator)   Var> vars [VARIABLES] Iterator  vars  boolean  Map  reachingDef  Var  var  
[P8_Replace_Mix]^reachingDef .equals ( 1 )   ) ;^123^^^^^116^125^reachingDef.put ( var, new Definition ( var.scope.getRootNode (  )  )  ) ;^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] Iterator)   Var> vars [VARIABLES] Iterator  vars  boolean  Map  reachingDef  Var  var  
[P14_Delete_Statement]^^123^^^^^116^125^reachingDef.put ( var, new Definition ( var.scope.getRootNode (  )  )  ) ;^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] Iterator)   Var> vars [VARIABLES] Iterator  vars  boolean  Map  reachingDef  Var  var  
[P14_Delete_Statement]^^118^119^^^^116^125^while ( vars.hasNext (  )  )  { Var var = vars.next (  ) ;^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] Iterator)   Var> vars [VARIABLES] Iterator  vars  boolean  Map  reachingDef  Var  var  
[P5_Replace_Variable]^reachingDef = Maps.newHashMap ( 2 ) ;^133^^^^^132^134^reachingDef = Maps.newHashMap ( other.reachingDef ) ;^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef)   MustDef other [VARIABLES] Map  reachingDef  MustDef  other  boolean  
[P5_Replace_Variable]^reachingDef = Maps.newHashMap ( other.reachingDef.reachingDef ) ;^133^^^^^132^134^reachingDef = Maps.newHashMap ( other.reachingDef ) ;^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef)   MustDef other [VARIABLES] Map  reachingDef  MustDef  other  boolean  
[P5_Replace_Variable]^reachingDef = Maps.newHashMap ( other ) ;^133^^^^^132^134^reachingDef = Maps.newHashMap ( other.reachingDef ) ;^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef)   MustDef other [VARIABLES] Map  reachingDef  MustDef  other  boolean  
[P8_Replace_Mix]^reachingDef =  Maps.newHashMap ( null.reachingDef ) ;^133^^^^^132^134^reachingDef = Maps.newHashMap ( other.reachingDef ) ;^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef)   MustDef other [VARIABLES] Map  reachingDef  MustDef  other  boolean  
[P11_Insert_Donor_Statement]^reachingDef = Maps.newHashMap (  ) ;reachingDef = Maps.newHashMap ( other.reachingDef ) ;^133^^^^^132^134^reachingDef = Maps.newHashMap ( other.reachingDef ) ;^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef)   MustDef other [VARIABLES] Map  reachingDef  MustDef  other  boolean  
[P14_Delete_Statement]^^133^^^^^132^134^reachingDef = Maps.newHashMap ( other.reachingDef ) ;^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef)   MustDef other [VARIABLES] Map  reachingDef  MustDef  other  boolean  
[P2_Replace_Operator]^return  ( other instanceof MustDef )  || (  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^138^139^^^^137^140^return  ( other instanceof MustDef )  && (  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^[CLASS] MustDef  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Map  reachingDef  Object  other  boolean  
[P2_Replace_Operator]^return  ( other  !=  MustDef )  && (  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^138^139^^^^137^140^return  ( other instanceof MustDef )  && (  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^[CLASS] MustDef  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Map  reachingDef  Object  other  boolean  
[P5_Replace_Variable]^return  ( other instanceof MustDef )  && (  ( MustDef )  other ) .reachingDef.equals ( this.this ) ;^138^139^^^^137^140^return  ( other instanceof MustDef )  && (  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^[CLASS] MustDef  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Map  reachingDef  Object  other  boolean  
[P8_Replace_Mix]^return  ( other instanceof MustDef )  ;^138^139^^^^137^140^return  ( other instanceof MustDef )  && (  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^[CLASS] MustDef  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Map  reachingDef  Object  other  boolean  
[P7_Replace_Invocation]^(  ( MustDef )  other ) .reachingDef .equals ( other )  ;^139^^^^^137^140^(  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^[CLASS] MustDef  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Map  reachingDef  Object  other  boolean  
[P14_Delete_Statement]^^139^^^^^137^140^(  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^[CLASS] MustDef  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Map  reachingDef  Object  other  boolean  
[P5_Replace_Variable]^Map<Var, Definition> bMap = result.reachingDef;^147^^^^^132^162^Map<Var, Definition> resultMap = result.reachingDef;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^Map<Var, Definition> result.reachingDefMap = result;^147^^^^^132^162^Map<Var, Definition> resultMap = result.reachingDef;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P2_Replace_Operator]^if  ( aDef != null )  {^154^^^^^139^169^if  ( aDef == null )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^if  ( bDef == null )  {^154^^^^^139^169^if  ( aDef == null )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P8_Replace_Mix]^if  ( aDef == this )  {^154^^^^^139^169^if  ( aDef == null )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P13_Insert_Block]^if  ( aDef.equals ( bDef )  )  {     resultMap.put ( var, aDef ) ; }else {     resultMap.put ( var, null ) ; }^154^^^^^139^169^[Delete]^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put (  null ) ;^158^^^^^143^173^resultMap.put ( var, null ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P14_Delete_Statement]^^158^^^^^143^173^resultMap.put ( var, null ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P11_Insert_Donor_Statement]^resultMap.put ( var, aDef ) ;resultMap.put ( var, null ) ;^158^^^^^143^173^resultMap.put ( var, null ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P11_Insert_Donor_Statement]^resultMap.put ( var, b.reachingDef.get ( var )  ) ;resultMap.put ( var, null ) ;^158^^^^^143^173^resultMap.put ( var, null ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^if  ( b.reachingDef.reachingDef.containsKey ( var )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^if  ( var.reachingDef.containsKey ( b )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P7_Replace_Invocation]^if  ( b.reachingDef.put ( var )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P7_Replace_Invocation]^if  ( b.reachingDef .keySet (  )   )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P8_Replace_Mix]^if  ( result.reachingDef.containsKey ( var )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P9_Replace_Statement]^if  ( !a.reachingDef.containsKey ( var )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put ( var, bDef ) ;^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put (  aDef ) ;^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put ( var ) ;^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put ( aDef, var ) ;^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P14_Delete_Statement]^^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P11_Insert_Donor_Statement]^resultMap.put ( var, b.reachingDef.get ( var )  ) ;resultMap.put ( var, aDef ) ;^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P11_Insert_Donor_Statement]^resultMap.put ( var, null ) ;resultMap.put ( var, aDef ) ;^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P8_Replace_Mix]^if  ( bDef.equals ( bDef )  )  {^167^^^^^152^182^if  ( aDef.equals ( bDef )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P15_Unwrap_Block]^resultMap.put(var, aDef);^167^168^169^170^171^152^182^if  ( aDef.equals ( bDef )  )  { resultMap.put ( var, aDef ) ; } else { resultMap.put ( var, null ) ; }^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P16_Remove_Block]^^167^168^169^170^171^152^182^if  ( aDef.equals ( bDef )  )  { resultMap.put ( var, aDef ) ; } else { resultMap.put ( var, null ) ; }^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P13_Insert_Block]^if  ( aDef == null )  {     resultMap.put ( var, null ) ;     continue; }^167^^^^^152^182^[Delete]^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put (  null ) ;^170^^^^^167^171^resultMap.put ( var, null ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P14_Delete_Statement]^^170^^^^^167^171^resultMap.put ( var, null ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P11_Insert_Donor_Statement]^resultMap.put ( var, aDef ) ;resultMap.put ( var, null ) ;^170^^^^^167^171^resultMap.put ( var, null ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P11_Insert_Donor_Statement]^resultMap.put ( var, b.reachingDef.get ( var )  ) ;resultMap.put ( var, null ) ;^170^^^^^167^171^resultMap.put ( var, null ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put ( var, bDef ) ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put (  aDef ) ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put ( var ) ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put ( aDef, var ) ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P14_Delete_Statement]^^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P11_Insert_Donor_Statement]^resultMap.put ( var, b.reachingDef.get ( var )  ) ;resultMap.put ( var, aDef ) ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P11_Insert_Donor_Statement]^resultMap.put ( var, null ) ;resultMap.put ( var, aDef ) ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^Definition resultDef = b.reachingDef.get ( var ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^Definition varDef = b.reachingDef.get ( b ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^Definition bDef = var.get ( b.reachingDef ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^Definition b.reachingDefDef = b.get ( var ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P7_Replace_Invocation]^Definition bDef = b.reachingDef.put ( var ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P11_Insert_Donor_Statement]^Definition aDef = a.reachingDef.get ( var ) ;Definition bDef = b.reachingDef.get ( var ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P14_Delete_Statement]^^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P11_Insert_Donor_Statement]^resultMap.put ( var, b.reachingDef.get ( var )  ) ;Definition bDef = b.reachingDef.get ( var ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^if  ( bDef.equals ( aDef )  )  {^167^^^^^152^182^if  ( aDef.equals ( bDef )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put (  null ) ;^170^^^^^155^185^resultMap.put ( var, null ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P14_Delete_Statement]^^170^^^^^155^185^resultMap.put ( var, null ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P11_Insert_Donor_Statement]^resultMap.put ( var, aDef ) ;resultMap.put ( var, null ) ;^170^^^^^155^185^resultMap.put ( var, null ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P11_Insert_Donor_Statement]^resultMap.put ( var, b.reachingDef.get ( var )  ) ;resultMap.put ( var, null ) ;^170^^^^^155^185^resultMap.put ( var, null ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P8_Replace_Mix]^if  ( aDef.equals ( aDef )  )  {^167^^^^^152^182^if  ( aDef.equals ( bDef )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^Definition varDef = a.reachingDef.get ( a ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^Definition a.reachingDefDef = a.get ( var ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P7_Replace_Invocation]^Definition aDef = a.reachingDef.put ( var ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P8_Replace_Mix]^Definition resultDef = a.reachingDef.get ( var ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P11_Insert_Donor_Statement]^Definition bDef = b.reachingDef.get ( var ) ;Definition aDef = a.reachingDef.get ( var ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^Node aNode = bDef.node;^162^^^^^147^177^Node aNode = aDef.node;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^Node aNode = aDef.node.node;^162^^^^^147^177^Node aNode = aDef.node;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^Node aNode = aDef;^162^^^^^147^177^Node aNode = aDef.node;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P7_Replace_Invocation]^Definition bDef = b.reachingDef .keySet (  )  ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^for  ( Var var : result.reachingDef.keySet (  )  )  {^150^^^^^135^165^for  ( Var var : a.reachingDef.keySet (  )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^for  ( Var var : a.reachingDef.reachingDef.keySet (  )  )  {^150^^^^^135^165^for  ( Var var : a.reachingDef.keySet (  )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^for  ( Var var : a.keySet (  )  )  {^150^^^^^135^165^for  ( Var var : a.reachingDef.keySet (  )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P7_Replace_Invocation]^for  ( Var var : a.reachingDef.get (  )  )  {^150^^^^^135^165^for  ( Var var : a.reachingDef.keySet (  )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P7_Replace_Invocation]^for  ( Var var : a.reachingDef .get ( var )   )  {^150^^^^^135^165^for  ( Var var : a.reachingDef.keySet (  )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^Definition aDef = var.get ( a.reachingDef ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P14_Delete_Statement]^^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P11_Insert_Donor_Statement]^resultMap.put ( var, b.reachingDef.get ( var )  ) ;Definition aDef = a.reachingDef.get ( var ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^if  ( var.containsKey ( b.reachingDef )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^if  ( b.containsKey ( var )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put ( var, bDef ) ;^173^^^^^158^188^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put (  aDef ) ;^173^^^^^158^188^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put ( var ) ;^173^^^^^158^188^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P14_Delete_Statement]^^173^^^^^158^188^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P11_Insert_Donor_Statement]^resultMap.put ( var, b.reachingDef.get ( var )  ) ;resultMap.put ( var, aDef ) ;^173^^^^^158^188^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P11_Insert_Donor_Statement]^resultMap.put ( var, null ) ;resultMap.put ( var, aDef ) ;^173^^^^^158^188^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P7_Replace_Invocation]^if  ( !a.reachingDef.put ( var )  )  {^180^^^^^165^195^if  ( !a.reachingDef.containsKey ( var )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P9_Replace_Statement]^if  ( b.reachingDef.containsKey ( var )  )  {^180^^^^^165^195^if  ( !a.reachingDef.containsKey ( var )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P15_Unwrap_Block]^resultMap.put(var, b.reachingDef.get(var));^180^181^182^^^165^195^if  ( !a.reachingDef.containsKey ( var )  )  { resultMap.put ( var, b.reachingDef.get ( var )  ) ; }^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P16_Remove_Block]^^180^181^182^^^165^195^if  ( !a.reachingDef.containsKey ( var )  )  { resultMap.put ( var, b.reachingDef.get ( var )  ) ; }^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put ( var, result.reachingDef.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put ( var, this.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put (  b.reachingDef.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put ( var.reachingDef.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put ( var.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put ( var, b.reachingDef.reachingDef.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P7_Replace_Invocation]^resultMap.put ( var, b.reachingDef.put ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P7_Replace_Invocation]^resultMap.put ( var, b.reachingDef .keySet (  )   ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P8_Replace_Mix]^resultMap.put ( var, result.reachingDef.put ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P14_Delete_Statement]^^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put ( b, var.reachingDef.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put ( var, b.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^for  ( Var var : result.reachingDef.keySet (  )  )  {^179^^^^^164^194^for  ( Var var : b.reachingDef.keySet (  )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^for  ( Var var : b.reachingDef.reachingDef.keySet (  )  )  {^179^^^^^164^194^for  ( Var var : b.reachingDef.keySet (  )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^for  ( Var var : b.keySet (  )  )  {^179^^^^^164^194^for  ( Var var : b.reachingDef.keySet (  )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P7_Replace_Invocation]^for  ( Var var : b.reachingDef.get (  )  )  {^179^^^^^164^194^for  ( Var var : b.reachingDef.keySet (  )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P8_Replace_Mix]^for  ( Var var : result.reachingDef.get (  )  )  {^179^^^^^164^194^for  ( Var var : b.reachingDef.keySet (  )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P14_Delete_Statement]^^179^180^181^182^^164^194^for  ( Var var : b.reachingDef.keySet (  )  )  { if  ( !a.reachingDef.containsKey ( var )  )  { resultMap.put ( var, b.reachingDef.get ( var )  ) ; }^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put ( var, 0.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^resultMap.put ( b.reachingDef, var.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P5_Replace_Variable]^return b;^184^^^^^169^199^return result;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( n )  || jsScope.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P3_Replace_Literal]^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , true )  )  {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( n )  ) {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P6_Replace_Expression]^if  (  jsScope.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P15_Unwrap_Block]^def.depends.add(jsScope.getVar(n.getString()));^348^349^350^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  { def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ; }^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P16_Remove_Block]^^348^349^350^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  { def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ; }^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^def.depends.add ( jsScope.getVar ( parent.getString (  )  )  ) ;^349^^^^^347^351^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^def.depends.add ( jsScope.isDeclared ( n.getString (  )  )  ) ;^349^^^^^347^351^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^349^^^^^347^351^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P12_Insert_Condition]^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  { def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ; }^349^^^^^347^351^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^def.depends.add ( n.getVar ( jsScope.getString (  )  )  ) ;^349^^^^^347^351^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parent )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( jsScope )  && n.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && jsScope .getVar (  )   )  {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
