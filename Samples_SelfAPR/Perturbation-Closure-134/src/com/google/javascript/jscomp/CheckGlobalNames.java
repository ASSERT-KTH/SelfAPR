[P8_Replace_Mix]^private  CheckLevel level;^32^^^^^27^37^private final CheckLevel level;^[CLASS] CheckGlobalNames   [VARIABLES] 
[P8_Replace_Mix]^private GlobalNamespace namespace = this;^34^^^^^29^39^private GlobalNamespace namespace = null;^[CLASS] CheckGlobalNames   [VARIABLES] 
[P7_Replace_Invocation]^static final DiagnosticType UNDEFINED_NAME_WARNING = DiagnosticType.disabled ( "JSC_UNDEFINED_NAME", "{0} is never defined" ) ;^37^38^39^^^37^39^static final DiagnosticType UNDEFINED_NAME_WARNING = DiagnosticType.warning ( "JSC_UNDEFINED_NAME", "{0} is never defined" ) ;^[CLASS] CheckGlobalNames   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType UNDEFINED_NAME_WARNING  = null ;^37^38^39^^^37^39^static final DiagnosticType UNDEFINED_NAME_WARNING = DiagnosticType.warning ( "JSC_UNDEFINED_NAME", "{0} is never defined" ) ;^[CLASS] CheckGlobalNames   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType STRICT_MODULE_DEP_QNAME = DiagnosticType.disabled ( "JSC_STRICT_MODULE_DEP_QNAMEICT", "module {0} cannot reference {2}, defined in " +^41^42^43^44^^41^45^static final DiagnosticType STRICT_MODULE_DEP_QNAME = DiagnosticType.disabled ( "JSC_STRICT_MODULE_DEP_QNAME", "module {0} cannot reference {2}, defined in " +^[CLASS] CheckGlobalNames   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType STRICT_MODULE_DEP_QNAME = DiagnosticType.disabled ( "JSC_STRICT_MODULE_DEP_QNAME", " reference {2}, defi" +^41^42^43^44^^41^45^static final DiagnosticType STRICT_MODULE_DEP_QNAME = DiagnosticType.disabled ( "JSC_STRICT_MODULE_DEP_QNAME", "module {0} cannot reference {2}, defined in " +^[CLASS] CheckGlobalNames   [VARIABLES] 
[P8_Replace_Mix]^static  DiagnosticType STRICT_MODULE_DEP_QNAME = DiagnosticType.disabled ( "JSC_STRICT_MODULE_DEP_QNAME", "module {0} cannot reference {2}, defined in " +^41^42^43^44^^41^45^static final DiagnosticType STRICT_MODULE_DEP_QNAME = DiagnosticType.disabled ( "JSC_STRICT_MODULE_DEP_QNAME", "module {0} cannot reference {2}, defined in " +^[CLASS] CheckGlobalNames   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^51^^^^^50^53^this.compiler = compiler;^[CLASS] CheckGlobalNames  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  
[P8_Replace_Mix]^this.level =  null;^52^^^^^50^53^this.level = level;^[CLASS] CheckGlobalNames  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  
[P8_Replace_Mix]^this.namespace =  null;^60^^^^^59^62^this.namespace = namespace;^[CLASS] CheckGlobalNames  [METHOD] injectNamespace [RETURN_TYPE] CheckGlobalNames   GlobalNamespace namespace [VARIABLES] AbstractCompiler  compiler  boolean  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  
[P8_Replace_Mix]^return null;^61^^^^^59^62^return this;^[CLASS] CheckGlobalNames  [METHOD] injectNamespace [RETURN_TYPE] CheckGlobalNames   GlobalNamespace namespace [VARIABLES] AbstractCompiler  compiler  boolean  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  
[P2_Replace_Operator]^if  ( namespace != null )  {^67^^^^^64^74^if  ( namespace == null )  {^[CLASS] CheckGlobalNames  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Node  externs  root  GlobalNamespace  namespace  Name  name  
[P8_Replace_Mix]^if  ( namespace == this )  {^67^^^^^64^74^if  ( namespace == null )  {^[CLASS] CheckGlobalNames  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Node  externs  root  GlobalNamespace  namespace  Name  name  
[P9_Replace_Statement]^if  ( name.props != null )  {^67^^^^^64^74^if  ( namespace == null )  {^[CLASS] CheckGlobalNames  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Node  externs  root  GlobalNamespace  namespace  Name  name  
[P9_Replace_Statement]^if  ( name.refs != null )  {^67^^^^^64^74^if  ( namespace == null )  {^[CLASS] CheckGlobalNames  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Node  externs  root  GlobalNamespace  namespace  Name  name  
[P15_Unwrap_Block]^namespace = new com.google.javascript.jscomp.GlobalNamespace(compiler, root);^67^68^69^^^64^74^if  ( namespace == null )  { namespace = new GlobalNamespace ( compiler, root ) ; }^[CLASS] CheckGlobalNames  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Node  externs  root  GlobalNamespace  namespace  Name  name  
[P16_Remove_Block]^^67^68^69^^^64^74^if  ( namespace == null )  { namespace = new GlobalNamespace ( compiler, root ) ; }^[CLASS] CheckGlobalNames  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Node  externs  root  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^namespace = new GlobalNamespace ( compiler, externs ) ;^68^^^^^64^74^namespace = new GlobalNamespace ( compiler, root ) ;^[CLASS] CheckGlobalNames  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Node  externs  root  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^namespace = new GlobalNamespace ( compiler ) ;^68^^^^^64^74^namespace = new GlobalNamespace ( compiler, root ) ;^[CLASS] CheckGlobalNames  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Node  externs  root  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^namespace = new GlobalNamespace (  root ) ;^68^^^^^64^74^namespace = new GlobalNamespace ( compiler, root ) ;^[CLASS] CheckGlobalNames  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Node  externs  root  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^namespace = new GlobalNamespace ( root, compiler ) ;^68^^^^^64^74^namespace = new GlobalNamespace ( compiler, root ) ;^[CLASS] CheckGlobalNames  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Node  externs  root  GlobalNamespace  namespace  Name  name  
[P8_Replace_Mix]^namespace =  new GlobalNamespace ( compiler, null ) ;^68^^^^^64^74^namespace = new GlobalNamespace ( compiler, root ) ;^[CLASS] CheckGlobalNames  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Node  externs  root  GlobalNamespace  namespace  Name  name  
[P13_Insert_Block]^if  (  ( namespace )  == null )  {     namespace = new GlobalNamespace ( compiler, root ) ; }^68^^^^^64^74^[Delete]^[CLASS] CheckGlobalNames  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Node  externs  root  GlobalNamespace  namespace  Name  name  
[P14_Delete_Statement]^^71^72^73^^^64^74^for  ( Name name : namespace.getNameForest (  )  )  { checkDescendantNames ( name, name.globalSets + name.localSets > 0 ) ; }^[CLASS] CheckGlobalNames  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Node  externs  root  GlobalNamespace  namespace  Name  name  
[P2_Replace_Operator]^checkDescendantNames ( name, name.globalSets + name.localSets >= 0 ) ;^72^^^^^64^74^checkDescendantNames ( name, name.globalSets + name.localSets > 0 ) ;^[CLASS] CheckGlobalNames  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Node  externs  root  GlobalNamespace  namespace  Name  name  
[P2_Replace_Operator]^checkDescendantNames ( name, name.globalSets  ==  name.localSets > 0 ) ;^72^^^^^64^74^checkDescendantNames ( name, name.globalSets + name.localSets > 0 ) ;^[CLASS] CheckGlobalNames  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Node  externs  root  GlobalNamespace  namespace  Name  name  
[P3_Replace_Literal]^checkDescendantNames ( name, name.globalSets + name.localSets > 2 ) ;^72^^^^^64^74^checkDescendantNames ( name, name.globalSets + name.localSets > 0 ) ;^[CLASS] CheckGlobalNames  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Node  externs  root  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^checkDescendantNames (  name.globalSets + name.localSets > 0 ) ;^72^^^^^64^74^checkDescendantNames ( name, name.globalSets + name.localSets > 0 ) ;^[CLASS] CheckGlobalNames  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Node  externs  root  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^checkDescendantNames ( name + name.localSets > 0 ) ;^72^^^^^64^74^checkDescendantNames ( name, name.globalSets + name.localSets > 0 ) ;^[CLASS] CheckGlobalNames  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Node  externs  root  GlobalNamespace  namespace  Name  name  
[P14_Delete_Statement]^^72^^^^^64^74^checkDescendantNames ( name, name.globalSets + name.localSets > 0 ) ;^[CLASS] CheckGlobalNames  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Node  externs  root  GlobalNamespace  namespace  Name  name  
[P2_Replace_Operator]^if  ( name.props == null )  {^85^^^^^84^101^if  ( name.props != null )  {^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P6_Replace_Expression]^if  ( propertyMustBeInitializedByFullName(prop)) || (prop.globalSets + prop.localSets) > 0 )  {^85^^^^^84^101^if  ( name.props != null )  {^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P6_Replace_Expression]^if  (  ( prop.globalSets )  +  ( prop.localSets )  > 0 )  {^85^^^^^84^101^if  ( name.props != null )  {^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P6_Replace_Expression]^if  ( prop.globalSets + prop.localSets )  {^85^^^^^84^101^if  ( name.props != null )  {^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P8_Replace_Mix]^if  ( name.props != this )  {^85^^^^^84^101^if  ( name.props != null )  {^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P9_Replace_Statement]^if  ( namespace == null )  {^85^^^^^84^101^if  ( name.props != null )  {^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P9_Replace_Statement]^if  ( name.refs != null )  {^85^^^^^84^101^if  ( name.props != null )  {^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P6_Replace_Expression]^if  (  ( prop.globalSets )  +  ( prop.localSets )  > 0 )  {^90^^^^^84^101^if  ( nameIsDefined )  {^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P6_Replace_Expression]^if  ( prop.globalSets + prop.localSets )  {^90^^^^^84^101^if  ( nameIsDefined )  {^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P9_Replace_Statement]^if  ( !isDefined )  {^90^^^^^84^101^if  ( nameIsDefined )  {^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P15_Unwrap_Block]^propIsDefined = (!(com.google.javascript.jscomp.CheckGlobalNames.propertyMustBeInitializedByFullName(prop))) || (((prop.globalSets) + (prop.localSets)) > 0);^90^91^^93^94^84^101^if  ( nameIsDefined )  {  propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ; }^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P16_Remove_Block]^^90^91^^93^94^84^101^if  ( nameIsDefined )  {  propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ; }^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P2_Replace_Operator]^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  && prop.globalSets + prop.localSets > 0 ) ;^93^94^^^^84^101^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P2_Replace_Operator]^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets >= 0 ) ;^93^94^^^^84^101^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P2_Replace_Operator]^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets  <=  prop.localSets > 0 ) ;^93^94^^^^84^101^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P3_Replace_Literal]^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > this ) ;^93^94^^^^84^101^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P8_Replace_Mix]^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 4 ) ;^93^94^^^^84^101^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P5_Replace_Variable]^propIsDefined =  ( !propertyMustBeInitializedByFullName ( name )  || prop.globalSets + prop.localSets > 0 ) ;^93^94^^^^84^101^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P14_Delete_Statement]^^93^94^^^^84^101^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P2_Replace_Operator]^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets  >>  prop.localSets > 0 ) ;^93^94^^^^84^101^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P3_Replace_Literal]^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 1 ) ;^93^94^^^^84^101^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P3_Replace_Literal]^boolean propIsDefined = true;^89^^^^^84^101^boolean propIsDefined = false;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P5_Replace_Variable]^validateName ( name, propIsDefined ) ;^97^^^^^84^101^validateName ( prop, propIsDefined ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P5_Replace_Variable]^validateName ( prop, nameIsDefined ) ;^97^^^^^84^101^validateName ( prop, propIsDefined ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P5_Replace_Variable]^validateName (  propIsDefined ) ;^97^^^^^84^101^validateName ( prop, propIsDefined ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P5_Replace_Variable]^validateName ( prop ) ;^97^^^^^84^101^validateName ( prop, propIsDefined ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P5_Replace_Variable]^validateName ( propIsDefined, prop ) ;^97^^^^^84^101^validateName ( prop, propIsDefined ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P7_Replace_Invocation]^checkDescendantNames ( prop, propIsDefined ) ;^97^^^^^84^101^validateName ( prop, propIsDefined ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P8_Replace_Mix]^checkDescendantNames ( name, propIsDefined ) ;^97^^^^^84^101^validateName ( prop, propIsDefined ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P14_Delete_Statement]^^97^98^^^^84^101^validateName ( prop, propIsDefined ) ; checkDescendantNames ( prop, propIsDefined ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P11_Insert_Donor_Statement]^checkDescendantNames ( prop, propIsDefined ) ;validateName ( prop, propIsDefined ) ;^97^^^^^84^101^validateName ( prop, propIsDefined ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P5_Replace_Variable]^checkDescendantNames ( name, propIsDefined ) ;^98^^^^^84^101^checkDescendantNames ( prop, propIsDefined ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P5_Replace_Variable]^checkDescendantNames (  propIsDefined ) ;^98^^^^^84^101^checkDescendantNames ( prop, propIsDefined ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P5_Replace_Variable]^checkDescendantNames ( prop ) ;^98^^^^^84^101^checkDescendantNames ( prop, propIsDefined ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P5_Replace_Variable]^checkDescendantNames ( propIsDefined, prop ) ;^98^^^^^84^101^checkDescendantNames ( prop, propIsDefined ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P7_Replace_Invocation]^validateName ( prop, propIsDefined ) ;^98^^^^^84^101^checkDescendantNames ( prop, propIsDefined ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P8_Replace_Mix]^validateName ( name, propIsDefined ) ;^98^^^^^84^101^checkDescendantNames ( prop, propIsDefined ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P14_Delete_Statement]^^98^^^^^84^101^checkDescendantNames ( prop, propIsDefined ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P11_Insert_Donor_Statement]^validateName ( prop, propIsDefined ) ;checkDescendantNames ( prop, propIsDefined ) ;^98^^^^^84^101^checkDescendantNames ( prop, propIsDefined ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P2_Replace_Operator]^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets < 0 ) ;^93^94^^^^84^101^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P2_Replace_Operator]^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets   instanceof   prop.localSets > 0 ) ;^93^94^^^^84^101^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P8_Replace_Mix]^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 - 2 ) ;^93^94^^^^84^101^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P2_Replace_Operator]^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets  &&  prop.localSets > 0 ) ;^93^94^^^^84^101^propIsDefined =  ( !propertyMustBeInitializedByFullName ( prop )  || prop.globalSets + prop.localSets > 0 ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P5_Replace_Variable]^checkDescendantNames ( prop, nameIsDefined ) ;^98^^^^^84^101^checkDescendantNames ( prop, propIsDefined ) ;^[CLASS] CheckGlobalNames  [METHOD] checkDescendantNames [RETURN_TYPE] void   Name name boolean nameIsDefined [VARIABLES] AbstractCompiler  compiler  boolean  nameIsDefined  propIsDefined  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  prop  
[P9_Replace_Statement]^if  ( nameIsDefined )  {^107^^^^^103^127^if  ( !isDefined )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P15_Unwrap_Block]^if (declaration != null) {    reportRefToUndefinedName(name, declaration);};^107^108^109^110^^103^127^if  ( !isDefined )  { if  ( declaration != null )  { reportRefToUndefinedName ( name, declaration ) ; }^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P16_Remove_Block]^^107^108^109^110^^103^127^if  ( !isDefined )  { if  ( declaration != null )  { reportRefToUndefinedName ( name, declaration ) ; }^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P13_Insert_Block]^if  ( declaration != null )  {     reportRefToUndefinedName ( name, declaration ) ; }^107^^^^^103^127^[Delete]^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P2_Replace_Operator]^if  ( declaration == null )  {^108^^^^^103^127^if  ( declaration != null )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^if  ( ref != null )  {^108^^^^^103^127^if  ( declaration != null )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P8_Replace_Mix]^if  ( declaration != this )  {^108^^^^^103^127^if  ( declaration != null )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P9_Replace_Statement]^if  ( name.refs != null )  {^108^^^^^103^127^if  ( declaration != null )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P15_Unwrap_Block]^reportRefToUndefinedName(name, declaration);^108^109^110^^^103^127^if  ( declaration != null )  { reportRefToUndefinedName ( name, declaration ) ; }^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P16_Remove_Block]^^108^109^110^^^103^127^if  ( declaration != null )  { reportRefToUndefinedName ( name, declaration ) ; }^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P13_Insert_Block]^if  ( !isDefined )  {     if  ( declaration != null )  {         reportRefToUndefinedName ( name, declaration ) ;     } }^108^^^^^103^127^[Delete]^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^reportRefToUndefinedName ( name, ref ) ;^109^^^^^103^127^reportRefToUndefinedName ( name, declaration ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^reportRefToUndefinedName (  declaration ) ;^109^^^^^103^127^reportRefToUndefinedName ( name, declaration ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^reportRefToUndefinedName ( name ) ;^109^^^^^103^127^reportRefToUndefinedName ( name, declaration ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^reportRefToUndefinedName ( declaration, name ) ;^109^^^^^103^127^reportRefToUndefinedName ( name, declaration ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P7_Replace_Invocation]^reportBadModuleReference ( name, declaration ) ;^109^^^^^103^127^reportRefToUndefinedName ( name, declaration ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P14_Delete_Statement]^^109^^^^^103^127^reportRefToUndefinedName ( name, declaration ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P11_Insert_Donor_Statement]^reportBadModuleReference ( name, ref ) ;reportRefToUndefinedName ( name, declaration ) ;^109^^^^^103^127^reportRefToUndefinedName ( name, declaration ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P11_Insert_Donor_Statement]^reportRefToUndefinedName ( name, ref ) ;reportRefToUndefinedName ( name, declaration ) ;^109^^^^^103^127^reportRefToUndefinedName ( name, declaration ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P13_Insert_Block]^if  ( declaration != null )  {     reportRefToUndefinedName ( name, declaration ) ; }^109^^^^^103^127^[Delete]^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P8_Replace_Mix]^reportBadModuleReference ( name, ref ) ;^109^^^^^103^127^reportRefToUndefinedName ( name, declaration ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P2_Replace_Operator]^if  ( name.refs == null )  {^113^^^^^103^127^if  ( name.refs != null )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P6_Replace_Expression]^if  ( (declaration != null) && (ref.module != declaration.module) && module, declaration.module)) )  {^113^^^^^103^127^if  ( name.refs != null )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P6_Replace_Expression]^if  ( (declaration != null && ref.module != declaration.module) )  {^113^^^^^103^127^if  ( name.refs != null )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P6_Replace_Expression]^if  ( declaration != null )  {^113^^^^^103^127^if  ( name.refs != null )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P6_Replace_Expression]^if  ( ref.module != declaration.module )  {^113^^^^^103^127^if  ( name.refs != null )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P8_Replace_Mix]^if  ( name.refs != this )  {^113^^^^^103^127^if  ( name.refs != null )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P9_Replace_Statement]^if  ( namespace == null )  {^113^^^^^103^127^if  ( name.refs != null )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P9_Replace_Statement]^if  ( name.props != null )  {^113^^^^^103^127^if  ( name.refs != null )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P6_Replace_Expression]^if  ( (declaration != null && ref.module != declaration.module) )  {^116^^^^^103^127^if  ( !isDefined )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P6_Replace_Expression]^if  ( declaration != null )  {^116^^^^^103^127^if  ( !isDefined )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P6_Replace_Expression]^if  ( ref.module != declaration.module )  {^116^^^^^103^127^if  ( !isDefined )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P9_Replace_Statement]^if  ( nameIsDefined )  {^116^^^^^103^127^if  ( !isDefined )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P2_Replace_Operator]^if  ( declaration != null || ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^119^120^121^^^103^127^if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P2_Replace_Operator]^if  ( declaration == null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^119^120^121^^^103^127^if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P2_Replace_Operator]^if  ( declaration != null && ref.module == declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^119^120^121^^^103^127^if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module.module )  )  {^119^120^121^^^103^127^if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn (  declaration.module )  )  {^119^120^121^^^103^127^if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module )  )  {^119^120^121^^^103^127^if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P6_Replace_Expression]^if  ( declaration != null ) {^119^120^121^^^103^127^if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P6_Replace_Expression]^if  (  ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^119^120^121^^^103^127^if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P6_Replace_Expression]^if  ( (declaration != null && ref.module != declaration.module) )  {^119^120^121^^^103^127^if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P6_Replace_Expression]^if  ( ref.module != declaration.module )  {^119^120^121^^^103^127^if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P8_Replace_Mix]^if  ( declaration != false ) {^119^120^121^^^103^127^if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P15_Unwrap_Block]^reportBadModuleReference(name, ref);^119^120^121^122^123^103^127^if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  { reportBadModuleReference ( name, ref ) ; }^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P16_Remove_Block]^^119^120^121^122^123^103^127^if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  { reportBadModuleReference ( name, ref ) ; }^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^reportBadModuleReference ( name, declaration ) ;^122^^^^^103^127^reportBadModuleReference ( name, ref ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^reportBadModuleReference (  ref ) ;^122^^^^^103^127^reportBadModuleReference ( name, ref ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^reportBadModuleReference ( name ) ;^122^^^^^103^127^reportBadModuleReference ( name, ref ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^reportBadModuleReference ( ref, name ) ;^122^^^^^103^127^reportBadModuleReference ( name, ref ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P7_Replace_Invocation]^reportRefToUndefinedName ( name, ref ) ;^122^^^^^103^127^reportBadModuleReference ( name, ref ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P14_Delete_Statement]^^122^^^^^103^127^reportBadModuleReference ( name, ref ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P11_Insert_Donor_Statement]^reportRefToUndefinedName ( name, declaration ) ;reportBadModuleReference ( name, ref ) ;^122^^^^^103^127^reportBadModuleReference ( name, ref ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P11_Insert_Donor_Statement]^reportRefToUndefinedName ( name, ref ) ;reportBadModuleReference ( name, ref ) ;^122^^^^^103^127^reportBadModuleReference ( name, ref ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^!moduleGraph.dependsOn ( ref.module.module )  )  {^121^^^^^103^127^!moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^!moduleGraph.dependsOn (  declaration.module )  )  {^121^^^^^103^127^!moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^!moduleGraph.dependsOn ( ref.module )  )  {^121^^^^^103^127^!moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P14_Delete_Statement]^^121^122^^^^103^127^!moduleGraph.dependsOn ( ref.module, declaration.module )  )  { reportBadModuleReference ( name, ref ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^reportRefToUndefinedName ( name, declaration ) ;^117^^^^^103^127^reportRefToUndefinedName ( name, ref ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^reportRefToUndefinedName (  ref ) ;^117^^^^^103^127^reportRefToUndefinedName ( name, ref ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^reportRefToUndefinedName ( name ) ;^117^^^^^103^127^reportRefToUndefinedName ( name, ref ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^reportRefToUndefinedName ( ref, name ) ;^117^^^^^103^127^reportRefToUndefinedName ( name, ref ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P7_Replace_Invocation]^reportBadModuleReference ( name, ref ) ;^117^^^^^103^127^reportRefToUndefinedName ( name, ref ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P14_Delete_Statement]^^117^^^^^103^127^reportRefToUndefinedName ( name, ref ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P11_Insert_Donor_Statement]^reportRefToUndefinedName ( name, declaration ) ;reportRefToUndefinedName ( name, ref ) ;^117^^^^^103^127^reportRefToUndefinedName ( name, ref ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P11_Insert_Donor_Statement]^reportBadModuleReference ( name, ref ) ;reportRefToUndefinedName ( name, ref ) ;^117^^^^^103^127^reportRefToUndefinedName ( name, ref ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P7_Replace_Invocation]^JSModuleGraph moduleGraph = compiler.report (  ) ;^114^^^^^103^127^JSModuleGraph moduleGraph = compiler.getModuleGraph (  ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P14_Delete_Statement]^^114^^^^^103^127^JSModuleGraph moduleGraph = compiler.getModuleGraph (  ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P8_Replace_Mix]^if  ( isDefined )  {^116^^^^^103^127^if  ( !isDefined )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P8_Replace_Mix]^if  ( declaration != true ) {^119^120^121^^^103^127^if  ( declaration != null && ref.module != declaration.module && !moduleGraph.dependsOn ( ref.module, declaration.module )  )  {^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P8_Replace_Mix]^reportBadModuleReference ( name, declaration ) ;^117^^^^^103^127^reportRefToUndefinedName ( name, ref ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P8_Replace_Mix]^reportRefToUndefinedName ( name, declaration ) ;^122^^^^^103^127^reportBadModuleReference ( name, ref ) ;^[CLASS] CheckGlobalNames  [METHOD] validateName [RETURN_TYPE] void   Name name boolean isDefined [VARIABLES] AbstractCompiler  compiler  Ref  declaration  ref  boolean  isDefined  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  JSModuleGraph  moduleGraph  Name  name  
[P5_Replace_Variable]^compiler.report ( JSError.make ( ref.sourceName.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^130^131^132^133^^129^134^compiler.report ( JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^compiler.report ( JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) .declaration.module.getName (  ) , name.fullName (  )  )  ) ;^130^131^132^133^^129^134^compiler.report ( JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^compiler.report ( JSError.make (  ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^130^131^132^133^^129^134^compiler.report ( JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^compiler.report ( JSError.make ( ref.sourceName,  STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^130^131^132^133^^129^134^compiler.report ( JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^compiler.report ( JSError.make ( ref.sourceName, ref.node,  ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^130^131^132^133^^129^134^compiler.report ( JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^compiler.report ( JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^130^131^132^133^^129^134^compiler.report ( JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^compiler.report ( JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) .module.getName (  ) , name.fullName (  )  )  ) ;^130^131^132^133^^129^134^compiler.report ( JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P7_Replace_Invocation]^compiler.report ( JSError .make ( STRICT_MODULE_DEP_QNAME )  , name.fullName (  )  )  ) ;^130^131^132^133^^129^134^compiler.report ( JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P8_Replace_Mix]^compiler .getModuleGraph (  )  , name.fullName (  )  )  ) ;^130^131^132^133^^129^134^compiler.report ( JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^JSError.make ( ref.sourceName.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^131^132^133^^^129^134^JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) .declaration.module.getName (  ) , name.fullName (  )  )  ) ;^131^132^133^^^129^134^JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^JSError.make (  ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^131^132^133^^^129^134^JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^JSError.make ( ref.sourceName,  STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^131^132^133^^^129^134^JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^JSError.make ( ref.sourceName, ref.node,  ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^131^132^133^^^129^134^JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^131^132^133^^^129^134^JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) .module.getName (  ) , name.fullName (  )  )  ) ;^131^132^133^^^129^134^JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P14_Delete_Statement]^^131^132^133^^^129^134^JSError.make ( ref.sourceName, ref.node, STRICT_MODULE_DEP_QNAME, ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P14_Delete_Statement]^^132^133^^^^129^134^ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^ref.module.getName (  ) .declaration.module.getName (  ) , name.fullName (  )  )  ) ;^132^133^^^^129^134^ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^ref.module.getName (  ) .module.getName (  ) , name.fullName (  )  )  ) ;^132^133^^^^129^134^ref.module.getName (  ) , name.declaration.module.getName (  ) , name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P14_Delete_Statement]^^133^^^^^129^134^name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportBadModuleReference [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P2_Replace_Operator]^while  ( name.parent != null || name.parent.globalSets + name.parent.localSets == 0 )  {^138^139^^^^136^146^while  ( name.parent != null && name.parent.globalSets + name.parent.localSets == 0 )  {^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P2_Replace_Operator]^while  ( name.parent == null && name.parent.globalSets + name.parent.localSets == 0 )  {^138^139^^^^136^146^while  ( name.parent != null && name.parent.globalSets + name.parent.localSets == 0 )  {^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P2_Replace_Operator]^while  ( name.parent != null && name.parent.globalSets + name.parent.localSets != 0 )  {^138^139^^^^136^146^while  ( name.parent != null && name.parent.globalSets + name.parent.localSets == 0 )  {^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P2_Replace_Operator]^while  |  ( name.parent != null && name.parent.globalSets + name.parent.localSets == 0 )  {^138^139^^^^136^146^while  ( name.parent != null && name.parent.globalSets + name.parent.localSets == 0 )  {^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P3_Replace_Literal]^while  ( name.parent != null && name.parent.globalSets + name.parent.localSets == 9 )  {^138^139^^^^136^146^while  ( name.parent != null && name.parent.globalSets + name.parent.localSets == 0 )  {^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P8_Replace_Mix]^name =  null.parent;^140^^^^^136^146^name = name.parent;^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^compiler.report ( JSError.make ( ref.sourceName.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^143^144^145^^^136^146^compiler.report ( JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^compiler.report ( JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING.fullName (  )  )  ) ;^143^144^145^^^136^146^compiler.report ( JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^compiler.report ( JSError.make (  ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^143^144^145^^^136^146^compiler.report ( JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^compiler.report ( JSError.make ( ref.sourceName,  level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^143^144^145^^^136^146^compiler.report ( JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^compiler.report ( JSError.make ( ref.sourceName, ref.node,  UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^143^144^145^^^136^146^compiler.report ( JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^compiler.report ( JSError.make ( ref.sourceName, ref.node, level,  name.fullName (  )  )  ) ;^143^144^145^^^136^146^compiler.report ( JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P7_Replace_Invocation]^compiler .getModuleGraph (  )   ) ;^143^144^145^^^136^146^compiler.report ( JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P14_Delete_Statement]^^143^144^145^^^136^146^compiler.report ( JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^JSError.make ( ref.sourceName.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^144^145^^^^136^146^JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING.fullName (  )  )  ) ;^144^145^^^^136^146^JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^JSError.make (  ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^144^145^^^^136^146^JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^JSError.make ( ref.sourceName,  level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^144^145^^^^136^146^JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^JSError.make ( ref.sourceName, ref.node,  UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^144^145^^^^136^146^JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P5_Replace_Variable]^JSError.make ( ref.sourceName, ref.node, level,  name.fullName (  )  )  ) ;^144^145^^^^136^146^JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P8_Replace_Mix]^JSError .make ( UNDEFINED_NAME_WARNING )   ) ;^144^145^^^^136^146^JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P14_Delete_Statement]^^144^145^^^^136^146^JSError.make ( ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING, name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P14_Delete_Statement]^^145^^^^^136^146^name.fullName (  )  )  ) ;^[CLASS] CheckGlobalNames  [METHOD] reportRefToUndefinedName [RETURN_TYPE] void   Name name Ref ref [VARIABLES] AbstractCompiler  compiler  Ref  ref  boolean  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  GlobalNamespace  namespace  Name  name  
[P2_Replace_Operator]^return name.parent != null || name.parent.aliasingGets == 0 && name.parent.type == Name.Type.OBJECTLIT;^161^162^^^^152^163^return name.parent != null && name.parent.aliasingGets == 0 && name.parent.type == Name.Type.OBJECTLIT;^[CLASS] CheckGlobalNames  [METHOD] propertyMustBeInitializedByFullName [RETURN_TYPE] boolean   Name name [VARIABLES] AbstractCompiler  compiler  boolean  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  
[P2_Replace_Operator]^return name.parent == null && name.parent.aliasingGets == 0 && name.parent.type == Name.Type.OBJECTLIT;^161^162^^^^152^163^return name.parent != null && name.parent.aliasingGets == 0 && name.parent.type == Name.Type.OBJECTLIT;^[CLASS] CheckGlobalNames  [METHOD] propertyMustBeInitializedByFullName [RETURN_TYPE] boolean   Name name [VARIABLES] AbstractCompiler  compiler  boolean  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  
[P2_Replace_Operator]^return name.parent != null && name.parent.aliasingGets != 0 && name.parent.type == Name.Type.OBJECTLIT;^161^162^^^^152^163^return name.parent != null && name.parent.aliasingGets == 0 && name.parent.type == Name.Type.OBJECTLIT;^[CLASS] CheckGlobalNames  [METHOD] propertyMustBeInitializedByFullName [RETURN_TYPE] boolean   Name name [VARIABLES] AbstractCompiler  compiler  boolean  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  
[P3_Replace_Literal]^return name.parent != null && name.parent.aliasingGets == -2 && name.parent.type == Name.Type.OBJECTLIT;^161^162^^^^152^163^return name.parent != null && name.parent.aliasingGets == 0 && name.parent.type == Name.Type.OBJECTLIT;^[CLASS] CheckGlobalNames  [METHOD] propertyMustBeInitializedByFullName [RETURN_TYPE] boolean   Name name [VARIABLES] AbstractCompiler  compiler  boolean  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  
[P8_Replace_Mix]^return name.parent != null ;;^161^162^^^^152^163^return name.parent != null && name.parent.aliasingGets == 0 && name.parent.type == Name.Type.OBJECTLIT;^[CLASS] CheckGlobalNames  [METHOD] propertyMustBeInitializedByFullName [RETURN_TYPE] boolean   Name name [VARIABLES] AbstractCompiler  compiler  boolean  GlobalNamespace  namespace  CheckLevel  level  DiagnosticType  STRICT_MODULE_DEP_QNAME  UNDEFINED_NAME_WARNING  Name  name  
