[P8_Replace_Mix]^this.compiler =  null;^44^^^^^43^45^this.compiler = compiler;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, new Callback (  )  ) ;^48^^^^^47^49^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new Callback (  )  ) ;^48^^^^^47^49^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new Callback (  )  ) ;^48^^^^^47^49^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new Callback (  )  ) ;^48^^^^^47^49^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P14_Delete_Statement]^^48^^^^^47^49^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.NEW )  {^53^^^^^38^68^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( secondArgument.getType (  )  != Token.NEW )  {^53^^^^^38^68^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  != Token.NEW )  {^53^^^^^38^68^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( n .getString (  )   != Token.NEW )  {^53^^^^^38^68^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P15_Unwrap_Block]^return ;^53^54^55^^^38^68^if  ( n.getType (  )  != Token.NEW )  { return; }^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P16_Remove_Block]^^53^54^55^^^38^68^if  ( n.getType (  )  != Token.NEW )  { return; }^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( objectName.getType (  )  != Token.NEW )  {^53^^^^^38^68^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node objectName = secondArgument.getFirstChild (  ) ;^57^^^^^42^72^Node objectName = n.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node objectName = n.removeChild (  ) ;^57^^^^^42^72^Node objectName = n.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newFirstArgument = secondArgument.getFirstChild (  ) ;Node objectName = n.getFirstChild (  ) ;^57^^^^^42^72^Node objectName = n.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;Node objectName = n.getFirstChild (  ) ;^57^^^^^42^72^Node objectName = n.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newChild = secondArgument.getFirstChild (  ) ;Node objectName = n.getFirstChild (  ) ;^57^^^^^42^72^Node objectName = n.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node objectName = parent.removeChild (  ) ;^57^^^^^42^72^Node objectName = n.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^57^^^^^42^72^Node objectName = n.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( secondArgument.getQualifiedName (  )  )  )  {^59^60^^^^44^74^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.removeChild (  )  )  )  {^59^60^^^^44^74^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( parent.getQualifiedName (  )  )  )  {^59^60^^^^44^74^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P15_Unwrap_Block]^return ;^59^60^61^62^^44^74^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  { return; }^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P16_Remove_Block]^^59^60^61^62^^44^74^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  { return; }^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( newSecondArgument.getQualifiedName (  )  )  )  {^59^60^^^^44^74^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( newSecondArgument.removeChild (  )  )  )  {^59^60^^^^44^74^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  ( ! ( equals ( objectName.getQualifiedName (  )  )  )  )  {     return ; }^59^^^^^44^74^[Delete]^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^objectName.removeChild (  )  )  )  {^60^^^^^45^75^objectName.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^60^61^62^^^45^75^objectName.getQualifiedName (  )  )  )  { return; }^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node firstArgument = parent.getNext (  ) ;^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node firstArgument = objectName.removeChild (  ) ;^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node firstArgument = secondArgument.getNext (  ) ;^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newFirstArgument = secondArgument.getFirstChild (  ) ;Node firstArgument = objectName.getNext (  ) ;^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;Node firstArgument = objectName.getNext (  ) ;^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node secondArgument = firstArgument.getNext (  ) ;Node firstArgument = objectName.getNext (  ) ;^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node firstArgument = objectName .getType (  )  ;^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node firstArgument = secondArgument .getType (  )  ;^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^64^65^^^^49^79^Node firstArgument = objectName.getNext (  ) ; Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node secondArgument = firstArgument.removeChild (  ) ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node secondArgument = firstArgument .getType (  )  ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node secondArgument = parent.getNext (  ) ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^int secondArgumentType = secondArgument.getType (  ) ;Node secondArgument = firstArgument.getNext (  ) ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newFirstArgument = secondArgument.getFirstChild (  ) ;Node secondArgument = firstArgument.getNext (  ) ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;Node secondArgument = firstArgument.getNext (  ) ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node firstArgument = objectName.getNext (  ) ;Node secondArgument = firstArgument.getNext (  ) ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node secondArgument = secondArgument.getNext (  ) ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node secondArgument = objectName.getNext (  ) ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^65^66^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ; int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P1_Replace_Type]^short  secondArgumentType = secondArgument.getType (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^int parentType = secondArgument.getType (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^int secondArgumentType = secondArgument.removeChild (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^int secondArgumentType = secondArgument .getString (  )  ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newFirstArgument = secondArgument.getFirstChild (  ) ;int secondArgumentType = secondArgument.getType (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;int secondArgumentType = secondArgument.getType (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node secondArgument = firstArgument.getNext (  ) ;int secondArgumentType = secondArgument.getType (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P12_Insert_Condition]^if  ( secondArgumentType == Token.GETPROP )  { int secondArgumentType = secondArgument.getType (  ) ; }^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^int objectNameType = secondArgument.getType (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^int newSecondArgumentType = secondArgument.getType (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;int secondArgumentType = secondArgument.getType (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^if  ( secondArgumentType <= Token.GETPROP )  {^67^^^^^52^82^if  ( secondArgumentType == Token.GETPROP )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^if  ( secondArgumentType != Token.GETPROP )  {^67^^^^^52^82^if  ( secondArgumentType == Token.GETPROP )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( objectNameType == Token.GETPROP )  {^67^^^^^52^82^if  ( secondArgumentType == Token.GETPROP )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( secondArgumentType == Token.1 )  {^67^^^^^52^82^if  ( secondArgumentType == Token.GETPROP )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( secondArgument == Token.GETPROP )  {^67^^^^^52^82^if  ( secondArgumentType == Token.GETPROP )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P6_Replace_Expression]^if  ( secondArgumentType == GETELEM )  {^67^^^^^52^82^if  ( secondArgumentType == Token.GETPROP )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  ( secondArgumentType ==  ( GETELEM )  )  {     Node newFirstArgument = secondArgument.getFirstChild (  ) ;     secondArgument.removeChild ( newFirstArgument ) ;     Node newSecondArgument = secondArgument.getLastChild (  ) ;     secondArgument.removeChild ( newSecondArgument ) ;     n.replaceChild ( firstArgument, newFirstArgument ) ;     n.replaceChild ( secondArgument, newSecondArgument ) ; }else {     n.replaceChild ( secondArgument, newString ( secondArgument.getString (  )  )  ) ; }^67^^^^^52^82^[Delete]^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^} else if  ( secondArgumentType <= Token.GETELEM )  {^75^^^^^60^90^} else if  ( secondArgumentType == Token.GETELEM )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P6_Replace_Expression]^} else {^75^^^^^60^90^} else if  ( secondArgumentType == Token.GETELEM )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( parent, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild (  Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^n .replaceChild ( parent , newFirstArgument )   ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^n.replaceChild ( secondArgument, Node.removeChild ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.removeChild (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^int secondArgumentType = secondArgument.getType (  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, newSecondArgument ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( firstArgument, newFirstArgument ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getString (  )  )  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node.newString ( newSecondArgument.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node.removeChild ( secondArgument.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node.newString ( secondArgument.removeChild (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node.newString ( parent.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newFirstArgument = secondArgument.getFirstChild (  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newChild = secondArgument.getFirstChild (  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node.newString ( objectName.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newFirstArgument = parent.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newFirstArgument = secondArgument.removeChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^int secondArgumentType = secondArgument.getType (  ) ;Node newFirstArgument = secondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;Node newFirstArgument = secondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node secondArgument = firstArgument.getNext (  ) ;Node newFirstArgument = secondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node objectName = n.getFirstChild (  ) ;Node newFirstArgument = secondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node firstArgument = objectName.getNext (  ) ;Node newFirstArgument = secondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newChild = secondArgument.getFirstChild (  ) ;Node newFirstArgument = secondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newSecondArgument = parent.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newSecondArgument = secondArgument.replaceChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node newSecondArgument = objectName.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^int secondArgumentType = secondArgument.getType (  ) ;Node newSecondArgument = secondArgument.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newFirstArgument = secondArgument.getFirstChild (  ) ;Node newSecondArgument = secondArgument.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node secondArgument = firstArgument.getNext (  ) ;Node newSecondArgument = secondArgument.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node objectName = n.getFirstChild (  ) ;Node newSecondArgument = secondArgument.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node firstArgument = objectName.getNext (  ) ;Node newSecondArgument = secondArgument.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newChild = secondArgument.getFirstChild (  ) ;Node newSecondArgument = secondArgument.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^78^79^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ; secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;Node newFirstArgument = secondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getString (  )  )  ) ;Node newFirstArgument = secondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^secondArgument.removeChild ( objectName ) ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^secondArgument.replaceChild ( newFirstArgument ) ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^secondArgument.removeChild ( newChild ) ;secondArgument.removeChild ( newFirstArgument ) ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^secondArgument.removeChild ( newSecondArgument ) ;secondArgument.removeChild ( newFirstArgument ) ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newSecondArgument = newSecondArgument.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newSecondArgument = secondArgument .getFirstChild (  )  ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^80^81^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ; secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;Node newSecondArgument = secondArgument.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getString (  )  )  ) ;Node newSecondArgument = secondArgument.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^secondArgument.removeChild ( objectName ) ;^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^secondArgument.replaceChild ( newSecondArgument ) ;^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^secondArgument.removeChild ( newFirstArgument ) ;secondArgument.removeChild ( newSecondArgument ) ;^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^secondArgument.removeChild ( newChild ) ;secondArgument.removeChild ( newSecondArgument ) ;^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, secondArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, newFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, secondArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild (  newFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, newFirstArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( newFirstArgument, firstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^n .replaceChild ( newChild , newFirstArgument )  ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^82^83^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ; n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( firstArgument, newChild ) ;n.replaceChild ( firstArgument, newFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, newSecondArgument ) ;n.replaceChild ( firstArgument, newFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;n.replaceChild ( firstArgument, newFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, parentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( objectName, newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, parent ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( secondArgumentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild (  newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( secondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( n, secondArgumentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, n ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( firstArgument, newChild ) ;n.replaceChild ( secondArgument, newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;n.replaceChild ( secondArgument, newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;n.replaceChild ( secondArgument, newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( firstArgument, newFirstArgument ) ;n.replaceChild ( secondArgument, newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newChild = secondArgument.getFirstChild (  ) ;n.replaceChild ( secondArgument, newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newFirstArgument = secondArgument .getLastChild (  )  ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node newFirstArgument = objectName.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^secondArgument.removeChild ( parent ) ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^secondArgument .replaceChild ( newSecondArgument , newFirstArgument )  ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^secondArgument.replaceChild ( parent ) ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node newSecondArgument = newSecondArgument.replaceChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^secondArgument.removeChild ( parent ) ;^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^secondArgument .replaceChild ( n , newFirstArgument )  ;^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( n, firstArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, secondArgumentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, secondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( newSecondArgument, secondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^n .replaceChild ( secondArgument , newSecondArgument )  ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( parent, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild (  Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^n.replaceChild ( secondArgument, Node.removeChild ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^n.replaceChild ( secondArgument, Node .getString (  )   ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.removeChild (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^n.replaceChild ( objectName, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^int secondArgumentType = secondArgument.getType (  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, newSecondArgument ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( firstArgument, newFirstArgument ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getString (  )  )  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node.removeChild ( secondArgument.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node.newString ( secondArgument.removeChild (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newFirstArgument = secondArgument.getFirstChild (  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newChild = secondArgument.getFirstChild (  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node.newString ( newSecondArgument.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node.newString ( parent.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newChild = parent.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newChild = secondArgument.removeChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node newChild = objectName.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newFirstArgument = secondArgument.getFirstChild (  ) ;Node newChild = secondArgument.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;Node newChild = secondArgument.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node objectName = n.getFirstChild (  ) ;Node newChild = secondArgument.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^70^71^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ; secondArgument.removeChild ( newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;Node newChild = secondArgument.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, newSecondArgument ) ;Node newChild = secondArgument.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getString (  )  )  ) ;Node newChild = secondArgument.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^secondArgument.removeChild ( parent ) ;^71^^^^^56^86^secondArgument.removeChild ( newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^secondArgument.replaceChild ( newChild ) ;^71^^^^^56^86^secondArgument.removeChild ( newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^secondArgument .replaceChild ( newSecondArgument , n )  ;^71^^^^^56^86^secondArgument.removeChild ( newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^71^^^^^56^86^secondArgument.removeChild ( newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^secondArgument.removeChild ( newFirstArgument ) ;secondArgument.removeChild ( newChild ) ;^71^^^^^56^86^secondArgument.removeChild ( newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^secondArgument.removeChild ( newSecondArgument ) ;secondArgument.removeChild ( newChild ) ;^71^^^^^56^86^secondArgument.removeChild ( newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, parentewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, newChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, secondArgument ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgumentewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild (  newChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, newChildewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( n, firstArgumentewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, n ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^n .replaceChild ( secondArgument , firstArgument )  ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^n.replaceChild ( parent, newChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, newSecondArgument ) ;n.replaceChild ( firstArgument, newChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( firstArgument, newFirstArgument ) ;n.replaceChild ( firstArgument, newChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( parent, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild (  Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^n.replaceChild ( secondArgument, Node.removeChild ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^n.replaceChild ( secondArgument, Node .getString (  )   )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.removeChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, newSecondArgument ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getString (  )  )  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node.newString ( parent.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node.removeChild ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node .getString (  )   )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node.newString ( secondArgument.removeChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node.newString ( secondArgument .getLastChild (  )  .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newFirstArgument = secondArgument.getFirstChild (  ) ;Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getString (  )  )  ) ;Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node newChild = secondArgument.getFirstChild (  ) ;Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node.newString ( newSecondArgument.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^} else if  ( secondArgumentType != Token.GETELEM )  {^75^^^^^60^90^} else if  ( secondArgumentType == Token.GETELEM )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^} else if  ( parentType == Token.GETELEM )  {^75^^^^^60^90^} else if  ( secondArgumentType == Token.GETELEM )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node .getString (  )   ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node.newString ( newSecondArgument.removeChild (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node newFirstArgument = objectName.removeChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node newFirstArgument = objectName .getLastChild (  )  ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^secondArgument .replaceChild ( n , newFirstArgument )  ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node newSecondArgument = objectName .getFirstChild (  )  ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^secondArgument .replaceChild ( newFirstArgument , firstArgument )  ;^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( parent, newFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, n ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^n .replaceChild ( firstArgument , secondArgument )  ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^n.replaceChild ( secondArgument, objectNameewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newChild = secondArgument .getLastChild (  )  ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node newChild = parent.removeChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node newSecondArgument = objectName.replaceChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newChild = newSecondArgument.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^secondArgument.removeChild ( objectName ) ;^71^^^^^56^86^secondArgument.removeChild ( newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^secondArgument .replaceChild ( firstArgument , parent )  ;^71^^^^^56^86^secondArgument.removeChild ( newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^71^72^^^^56^86^secondArgument.removeChild ( newChild ) ; n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, secondArgumentewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( newChild, firstArgument ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^n .replaceChild ( newSecondArgument , n )  ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^n .replaceChild ( parent , n )   )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newFirstArgument = newSecondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^secondArgument .replaceChild ( newChild , n )  ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node newSecondArgument = parent.replaceChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^secondArgument.replaceChild ( parent ) ;^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^81^82^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ; n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, parentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, parent ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^n .replaceChild ( n , newFirstArgument )  ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^n.replaceChild ( secondArgument, objectName ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^n .replaceChild ( newSecondArgument , newSecondArgument )   ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node.newString ( objectName.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^90^^^^^75^105^compiler.reportCodeChange (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.NEW )  {^53^^^^^38^68^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^if  ( secondArgument.getType (  )  != Token.NEW )  {^53^^^^^38^68^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  != Token.NEW )  {^53^^^^^38^68^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^if  ( objectName.getType (  )  != Token.NEW )  {^53^^^^^38^68^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P15_Unwrap_Block]^return ;^53^54^55^^^38^68^if  ( n.getType (  )  != Token.NEW )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P16_Remove_Block]^^53^54^55^^^38^68^if  ( n.getType (  )  != Token.NEW )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^Node objectName = parent.getFirstChild (  ) ;^57^^^^^42^72^Node objectName = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node objectName = n.removeChild (  ) ;^57^^^^^42^72^Node objectName = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node objectName = n .getLastChild (  )  ;^57^^^^^42^72^Node objectName = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newFirstArgument = secondArgument.getFirstChild (  ) ;Node objectName = n.getFirstChild (  ) ;^57^^^^^42^72^Node objectName = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;Node objectName = n.getFirstChild (  ) ;^57^^^^^42^72^Node objectName = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newChild = secondArgument.getFirstChild (  ) ;Node objectName = n.getFirstChild (  ) ;^57^^^^^42^72^Node objectName = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^Node objectName = secondArgument.getFirstChild (  ) ;^57^^^^^42^72^Node objectName = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^57^^^^^42^72^Node objectName = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.removeChild (  )  )  )  {^59^60^^^^44^74^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName .getLastChild (  )   )  )  {^59^60^^^^44^74^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( newSecondArgument.getQualifiedName (  )  )  )  {^59^60^^^^44^74^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P15_Unwrap_Block]^return ;^59^60^61^62^^44^74^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P16_Remove_Block]^^59^60^61^62^^44^74^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( secondArgument.getQualifiedName (  )  )  )  {^59^60^^^^44^74^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P13_Insert_Block]^if  ( ! ( equals ( objectName.getQualifiedName (  )  )  )  )  {     return ; }^59^^^^^44^74^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^objectName.removeChild (  )  )  )  {^60^^^^^45^75^objectName.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^60^61^62^^^45^75^objectName.getQualifiedName (  )  )  )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^Node firstArgument = secondArgument.getNext (  ) ;^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node firstArgument = objectName.removeChild (  ) ;^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node firstArgument = objectName .getType (  )  ;^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^Node firstArgument = secondArgument.removeChild (  ) ;^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newFirstArgument = secondArgument.getFirstChild (  ) ;Node firstArgument = objectName.getNext (  ) ;^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;Node firstArgument = objectName.getNext (  ) ;^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node secondArgument = firstArgument.getNext (  ) ;Node firstArgument = objectName.getNext (  ) ;^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^Node firstArgument = parent.getNext (  ) ;^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^Node secondArgument = parent.getNext (  ) ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node secondArgument = firstArgument.removeChild (  ) ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node secondArgument = firstArgument .getType (  )  ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^Node secondArgument = objectName.getNext (  ) ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^int secondArgumentType = secondArgument.getType (  ) ;Node secondArgument = firstArgument.getNext (  ) ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newFirstArgument = secondArgument.getFirstChild (  ) ;Node secondArgument = firstArgument.getNext (  ) ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;Node secondArgument = firstArgument.getNext (  ) ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node firstArgument = objectName.getNext (  ) ;Node secondArgument = firstArgument.getNext (  ) ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^Node secondArgument = secondArgument.getNext (  ) ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^65^66^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ; int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P1_Replace_Type]^short  secondArgumentType = secondArgument.getType (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^int newSecondArgumentType = secondArgument.getType (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^int secondArgumentType = secondArgument.removeChild (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^int parentType = secondArgument.getType (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newFirstArgument = secondArgument.getFirstChild (  ) ;int secondArgumentType = secondArgument.getType (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;int secondArgumentType = secondArgument.getType (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node secondArgument = firstArgument.getNext (  ) ;int secondArgumentType = secondArgument.getType (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P12_Insert_Condition]^if  ( secondArgumentType == Token.GETPROP )  { int secondArgumentType = secondArgument.getType (  ) ; }^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;int secondArgumentType = secondArgument.getType (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P2_Replace_Operator]^if  ( secondArgumentType != Token.GETPROP )  {^67^^^^^52^82^if  ( secondArgumentType == Token.GETPROP )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P2_Replace_Operator]^if  ( secondArgumentType <= Token.GETPROP )  {^67^^^^^52^82^if  ( secondArgumentType == Token.GETPROP )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^if  ( parentType == Token.GETPROP )  {^67^^^^^52^82^if  ( secondArgumentType == Token.GETPROP )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^if  ( secondArgument == Token.GETPROP )  {^67^^^^^52^82^if  ( secondArgumentType == Token.GETPROP )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P6_Replace_Expression]^if  ( secondArgumentType == GETELEM )  {^67^^^^^52^82^if  ( secondArgumentType == Token.GETPROP )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P13_Insert_Block]^if  ( secondArgumentType ==  ( GETELEM )  )  {     Node newFirstArgument = secondArgument.getFirstChild (  ) ;     secondArgument.removeChild ( newFirstArgument ) ;     Node newSecondArgument = secondArgument.getLastChild (  ) ;     secondArgument.removeChild ( newSecondArgument ) ;     n.replaceChild ( firstArgument, newFirstArgument ) ;     n.replaceChild ( secondArgument, newSecondArgument ) ; }else {     n.replaceChild ( secondArgument, newString ( secondArgument.getString (  )  )  ) ; }^67^^^^^52^82^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P2_Replace_Operator]^} else if  ( secondArgumentType <= Token.GETELEM )  {^75^^^^^60^90^} else if  ( secondArgumentType == Token.GETELEM )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^} else if  ( parentType == Token.GETELEM )  {^75^^^^^60^90^} else if  ( secondArgumentType == Token.GETELEM )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P6_Replace_Expression]^} else {^75^^^^^60^90^} else if  ( secondArgumentType == Token.GETELEM )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( objectName, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild (  Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^n.replaceChild ( secondArgument, Node.removeChild ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.removeChild (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^int secondArgumentType = secondArgument.getType (  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, newSecondArgument ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( firstArgument, newFirstArgument ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getString (  )  )  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^Node.newString ( parent.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node.removeChild ( secondArgument.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node.newString ( secondArgument.removeChild (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^Node.newString ( objectName.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newFirstArgument = secondArgument.getFirstChild (  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newChild = secondArgument.getFirstChild (  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^Node newFirstArgument = parent.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node newFirstArgument = secondArgument.removeChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^Node newFirstArgument = objectName.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^int secondArgumentType = secondArgument.getType (  ) ;Node newFirstArgument = secondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;Node newFirstArgument = secondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node secondArgument = firstArgument.getNext (  ) ;Node newFirstArgument = secondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node objectName = n.getFirstChild (  ) ;Node newFirstArgument = secondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node firstArgument = objectName.getNext (  ) ;Node newFirstArgument = secondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newChild = secondArgument.getFirstChild (  ) ;Node newFirstArgument = secondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^Node newSecondArgument = parent.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node newSecondArgument = secondArgument.replaceChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^int secondArgumentType = secondArgument.getType (  ) ;Node newSecondArgument = secondArgument.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newFirstArgument = secondArgument.getFirstChild (  ) ;Node newSecondArgument = secondArgument.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node secondArgument = firstArgument.getNext (  ) ;Node newSecondArgument = secondArgument.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node objectName = n.getFirstChild (  ) ;Node newSecondArgument = secondArgument.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node firstArgument = objectName.getNext (  ) ;Node newSecondArgument = secondArgument.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newChild = secondArgument.getFirstChild (  ) ;Node newSecondArgument = secondArgument.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^Node newFirstArgument = newSecondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;Node newFirstArgument = secondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getString (  )  )  ) ;Node newFirstArgument = secondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^secondArgument.removeChild ( objectName ) ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^secondArgument.replaceChild ( newFirstArgument ) ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^secondArgument .replaceChild ( newFirstArgument , firstArgument )  ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^secondArgument.removeChild ( newChild ) ;secondArgument.removeChild ( newFirstArgument ) ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^secondArgument.removeChild ( newSecondArgument ) ;secondArgument.removeChild ( newFirstArgument ) ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^Node newSecondArgument = newSecondArgument.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^80^81^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ; secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;Node newSecondArgument = secondArgument.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getString (  )  )  ) ;Node newSecondArgument = secondArgument.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^secondArgument.removeChild ( parent ) ;^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^secondArgument.replaceChild ( newSecondArgument ) ;^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^secondArgument.replaceChild ( parent ) ;^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^81^82^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ; n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^secondArgument.removeChild ( newFirstArgument ) ;secondArgument.removeChild ( newSecondArgument ) ;^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^secondArgument.removeChild ( newChild ) ;secondArgument.removeChild ( newSecondArgument ) ;^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, secondArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, newFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, secondArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( firstArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild (  newFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( firstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( n, firstArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( newFirstArgument, firstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, n ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^n.replaceChild ( firstArgument, parentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^82^83^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ; n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( firstArgument, newChild ) ;n.replaceChild ( firstArgument, newFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, newSecondArgument ) ;n.replaceChild ( firstArgument, newFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;n.replaceChild ( firstArgument, newFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, parentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( parent, newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, parent ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( secondArgumentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild (  newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( secondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( n, secondArgumentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( newSecondArgument, secondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^n .replaceChild ( parent , firstArgument )  ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( firstArgument, newChild ) ;n.replaceChild ( secondArgument, newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;n.replaceChild ( secondArgument, newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;n.replaceChild ( secondArgument, newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( firstArgument, newFirstArgument ) ;n.replaceChild ( secondArgument, newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newChild = secondArgument.getFirstChild (  ) ;n.replaceChild ( secondArgument, newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^Node newSecondArgument = objectName.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^78^79^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ; secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^secondArgument.replaceChild ( parent ) ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^79^80^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ; Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node newSecondArgument = secondArgument .getFirstChild (  )  ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^secondArgument .replaceChild ( objectName , secondArgument )  ;^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^n .replaceChild ( newFirstArgument , newChild )  ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, secondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, newSecondArgumentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, n ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^n.replaceChild ( secondArgument, objectName ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( objectName, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild (  Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^n.replaceChild ( secondArgument, Node.removeChild ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.removeChild (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^int secondArgumentType = secondArgument.getType (  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, newSecondArgument ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( firstArgument, newFirstArgument ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getString (  )  )  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^Node.newString ( parent.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node.removeChild ( secondArgument.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node.newString ( secondArgument.removeChild (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^Node.newString ( newSecondArgument.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newFirstArgument = secondArgument.getFirstChild (  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newChild = secondArgument.getFirstChild (  ) ;Node.newString ( secondArgument.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^Node newChild = parent.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node newChild = secondArgument.removeChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node newChild = secondArgument .getLastChild (  )  ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^Node newChild = parent.removeChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newFirstArgument = secondArgument.getFirstChild (  ) ;Node newChild = secondArgument.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newSecondArgument = secondArgument.getLastChild (  ) ;Node newChild = secondArgument.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node objectName = n.getFirstChild (  ) ;Node newChild = secondArgument.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^Node newChild = objectName.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^70^71^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ; secondArgument.removeChild ( newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;Node newChild = secondArgument.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, newSecondArgument ) ;Node newChild = secondArgument.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getString (  )  )  ) ;Node newChild = secondArgument.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^secondArgument.removeChild ( objectName ) ;^71^^^^^56^86^secondArgument.removeChild ( newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^secondArgument.replaceChild ( newChild ) ;^71^^^^^56^86^secondArgument.removeChild ( newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^71^72^^^^56^86^secondArgument.removeChild ( newChild ) ; n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^secondArgument.removeChild ( newFirstArgument ) ;secondArgument.removeChild ( newChild ) ;^71^^^^^56^86^secondArgument.removeChild ( newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^secondArgument.removeChild ( newSecondArgument ) ;secondArgument.removeChild ( newChild ) ;^71^^^^^56^86^secondArgument.removeChild ( newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, secondArgumentewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( parent, newChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( firstArgumentewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild (  newChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( firstArgument ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, newChildewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( newChild, firstArgument ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^n.replaceChild ( secondArgument, newChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, newSecondArgument ) ;n.replaceChild ( firstArgument, newChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( firstArgument, newFirstArgument ) ;n.replaceChild ( firstArgument, newChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( parent, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild (  Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^n .replaceChild ( objectName , newFirstArgument )   )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^n.replaceChild ( secondArgument, Node.removeChild ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^n.replaceChild ( secondArgument, Node .getString (  )   )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.removeChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, newSecondArgument ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getString (  )  )  ) ;n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^Node.newString ( newSecondArgument.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node.removeChild ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node .getString (  )   )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node.newString ( secondArgument.removeChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^Node.newString ( parent.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newFirstArgument = secondArgument.getFirstChild (  ) ;Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node.newString ( secondArgument.getString (  )  )  ) ;Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P11_Insert_Donor_Statement]^Node newChild = secondArgument.getFirstChild (  ) ;Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node.newString ( secondArgument .getLastChild (  )  .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^Node.newString ( objectName.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P2_Replace_Operator]^} else if  ( secondArgumentType > Token.GETELEM )  {^75^^^^^60^90^} else if  ( secondArgumentType == Token.GETELEM )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^} else if  ( secondArgumentTypeType == Token.GETELEM )  {^75^^^^^60^90^} else if  ( secondArgumentType == Token.GETELEM )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( parent, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^n.replaceChild ( secondArgument, Node .getString (  )   ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^secondArgument.removeChild ( parent ) ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^secondArgument .replaceChild ( objectName , newChild )  ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^n .replaceChild ( newSecondArgument , newSecondArgument )  ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, objectNameewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( objectName, newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^n .replaceChild ( newFirstArgument , newSecondArgument )  ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^Node newFirstArgument = objectName.removeChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^secondArgument.removeChild ( parent ) ;^71^^^^^56^86^secondArgument.removeChild ( newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, parentewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, secondArgument ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( n, firstArgumentewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^n.replaceChild ( secondArgument, Node.newString ( secondArgument .getLastChild (  )  .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^Node.newString ( parent.removeChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^secondArgument .replaceChild ( parent , secondArgument )  ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^Node newSecondArgument = newSecondArgument .getFirstChild (  )  ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( parent, newFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, newFirstArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^n.replaceChild ( parent, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^n .replaceChild ( objectName , secondArgument )   ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P8_Replace_Mix]^n.replaceChild ( parent, Node.removeChild ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P5_Replace_Variable]^Node.newString ( objectName.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P7_Replace_Invocation]^Node .getString (  )   ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[P14_Delete_Statement]^^90^^^^^75^105^compiler.reportCodeChange (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
