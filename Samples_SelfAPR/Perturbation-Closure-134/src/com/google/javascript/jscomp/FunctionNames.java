[P1_Replace_Type]^private static final  short  serialVersionUID = 1L;^51^^^^^46^56^private static final long serialVersionUID = 1L;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = 1;^51^^^^^46^56^private static final long serialVersionUID = 1L;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^private  transient AbstractCompiler compiler;^53^^^^^48^58^private final transient AbstractCompiler compiler;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^private final Map<Node, FunctionRecord> functionMap ;^54^^^^^49^59^private final Map<Node, FunctionRecord> functionMap = Maps.newLinkedHashMap (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^private  transient FunctionListExtractor functionListExtractor;^55^^^^^50^60^private final transient FunctionListExtractor functionListExtractor;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [VARIABLES] 
[P1_Replace_Type]^private static final  int  serialVersionUID = 1L;^113^^^^^108^118^private static final long serialVersionUID = 1L;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^private static final  short  serialVersionUID = 1;^113^^^^^108^118^private static final long serialVersionUID = 1L;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [VARIABLES] 
[P1_Replace_Type]^public final  short  id;^115^^^^^110^120^public final int id;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^public  Node parent;^116^^^^^111^121^public final Node parent;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [VARIABLES] 
[P1_Replace_Type]^public char name;^117^^^^^112^122^public String name;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [VARIABLES] 
[P1_Replace_Type]^private  short  nextId = 0;^128^^^^^123^133^private int nextId = 0;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [VARIABLES] 
[P3_Replace_Literal]^private int nextId = null;^128^^^^^123^133^private int nextId = 0;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^private int nextId = 1;^128^^^^^123^133^private int nextId = 0;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [VARIABLES] 
[P1_Replace_Type]^private static final int DELIMITER = '.';^150^^^^^145^155^private static final char DELIMITER = '.';^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^private  final int DELIMITER = '.';^150^^^^^145^155^private static final char DELIMITER = '.';^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^private static final NodeNameExtractor extractor ;^151^152^^^^151^152^private static final NodeNameExtractor extractor = new NodeNameExtractor ( DELIMITER ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^private  Map<Node, FunctionRecord> functionMap;^153^^^^^148^158^private final Map<Node, FunctionRecord> functionMap;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^58^^^^^57^60^this.compiler = compiler;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  parent  char  DELIMITER  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^this.name = name;this.compiler = compiler;^58^^^^^57^60^this.compiler = compiler;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  parent  char  DELIMITER  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P4_Replace_Constructor]^this.functionListExtractor = this.functionListExtractor =  new AnonymousFunctionNamer ( functionMap )  ;^59^^^^^57^60^this.functionListExtractor = new FunctionListExtractor ( functionMap ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  parent  char  DELIMITER  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^this.functionListExtractor =  new AnonymousFunctionNamer ( functionMap )  ;^59^^^^^57^60^this.functionListExtractor = new FunctionListExtractor ( functionMap ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  parent  char  DELIMITER  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^this.id = nextId;^120^^^^^119^123^this.id = id;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] String)   int id Node parent String name [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  parent  char  DELIMITER  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^this.name = name;this.id = id;^120^^^^^119^123^this.id = id;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] String)   int id Node parent String name [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  parent  char  DELIMITER  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^this.parent =  null;^121^^^^^119^123^this.parent = parent;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] String)   int id Node parent String name [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  parent  char  DELIMITER  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^this.name = name;this.parent = parent;^121^^^^^119^123^this.parent = parent;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] String)   int id Node parent String name [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  parent  char  DELIMITER  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^this.name =  null;^122^^^^^119^123^this.name = name;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] String)   int id Node parent String name [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  parent  char  DELIMITER  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.name = name;^122^^^^^119^123^this.name = name;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] String)   int id Node parent String name [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  parent  char  DELIMITER  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^this.id = id;this.name = name;^122^^^^^119^123^this.name = name;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] String)   int id Node parent String name [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  parent  char  DELIMITER  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^this.parent = parent;this.name = name;^122^^^^^119^123^this.name = name;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] String)   int id Node parent String name [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  parent  char  DELIMITER  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^record.name = name;this.name = name;^122^^^^^119^123^this.name = name;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] String)   int id Node parent String name [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  parent  char  DELIMITER  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^this.functionMap =  null;^131^^^^^130^132^this.functionMap = functionMap;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] Map)   FunctionRecord> functionMap [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  parent  char  DELIMITER  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^this.functionMap =  null;^156^^^^^155^157^this.functionMap = functionMap;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] Map)   FunctionRecord> functionMap [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  parent  char  DELIMITER  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  functionListExtractor ) ;^64^^^^^63^69^NodeTraversal.traverse ( compiler, root, functionListExtractor ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, functionListExtractor ) ;^64^^^^^63^69^NodeTraversal.traverse ( compiler, root, functionListExtractor ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, root ) ;^64^^^^^63^69^NodeTraversal.traverse ( compiler, root, functionListExtractor ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, functionListExtractor ) ;^64^^^^^63^69^NodeTraversal.traverse ( compiler, root, functionListExtractor ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^NodeTraversal.traverse ( functionListExtractor, root, compiler ) ;^64^^^^^63^69^NodeTraversal.traverse ( compiler, root, functionListExtractor ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P7_Replace_Invocation]^NodeTraversal .traverse ( compiler , parent , functionListExtractor )  ;^64^^^^^63^69^NodeTraversal.traverse ( compiler, root, functionListExtractor ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^NodeTraversal .traverse ( compiler , externs , functionListExtractor )  ;^64^^^^^63^69^NodeTraversal.traverse ( compiler, root, functionListExtractor ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P14_Delete_Statement]^^64^65^^^^63^69^NodeTraversal.traverse ( compiler, root, functionListExtractor ) ; AnonymousFunctionNamer namer = new AnonymousFunctionNamer ( functionMap ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, root, namingCallback ) ;NodeTraversal.traverse ( compiler, root, functionListExtractor ) ;^64^^^^^63^69^NodeTraversal.traverse ( compiler, root, functionListExtractor ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P4_Replace_Constructor]^AnonymousFunctionNamer namer = new FunctionListExtractor ( functionMap )  ;^65^^^^^63^69^AnonymousFunctionNamer namer = new AnonymousFunctionNamer ( functionMap ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^AnonymousFunctionNamingCallback namingCallback = new AnonymousFunctionNamingCallback ( namer ) ;AnonymousFunctionNamer namer = new AnonymousFunctionNamer ( functionMap ) ;^65^^^^^63^69^AnonymousFunctionNamer namer = new AnonymousFunctionNamer ( functionMap ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^AnonymousFunctionNamer namer = new AnonymousFunctionNamer ( functionMap ) ;AnonymousFunctionNamingCallback namingCallback = new AnonymousFunctionNamingCallback ( namer ) ;^66^67^^^^63^69^AnonymousFunctionNamingCallback namingCallback = new AnonymousFunctionNamingCallback ( namer ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, parent, namingCallback ) ;^68^^^^^63^69^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  namingCallback ) ;^68^^^^^63^69^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, root ) ;^68^^^^^63^69^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, namingCallback ) ;^68^^^^^63^69^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, namingCallback, root ) ;^68^^^^^63^69^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, namingCallback ) ;^68^^^^^63^69^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^NodeTraversal .traverse ( compiler , externs , functionListExtractor )  ;^68^^^^^63^69^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P14_Delete_Statement]^^68^^^^^63^69^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, root, functionListExtractor ) ;NodeTraversal.traverse ( compiler, root, namingCallback ) ;^68^^^^^63^69^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  AnonymousFunctionNamer  namer  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^return functionMap .get ( externs )  ;^72^^^^^71^73^return functionMap.keySet (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionNodeList [RETURN_TYPE] Iterable   [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^return functionMap .get ( parent )  ;^72^^^^^71^73^return functionMap.keySet (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionNodeList [RETURN_TYPE] Iterable   [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P14_Delete_Statement]^^72^^^^^71^73^return functionMap.keySet (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionNodeList [RETURN_TYPE] Iterable   [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  parent  root  char  DELIMITER  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^FunctionRecord record = rootunctionMap.get ( f ) ;^76^^^^^75^82^FunctionRecord record = functionMap.get ( f ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionId [RETURN_TYPE] int   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^FunctionRecord record = functionMapunctionMap.get ( f ) ;^76^^^^^75^82^FunctionRecord record = functionMap.get ( f ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionId [RETURN_TYPE] int   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^FunctionRecord record = f.get ( functionMap ) ;^76^^^^^75^82^FunctionRecord record = functionMap.get ( f ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionId [RETURN_TYPE] int   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^FunctionRecord record = functionMap.get ( fnNode ) ;FunctionRecord record = functionMap.get ( f ) ;^76^^^^^75^82^FunctionRecord record = functionMap.get ( f ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionId [RETURN_TYPE] int   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P7_Replace_Invocation]^FunctionRecord record = functionMap .keySet (  )  ;^76^^^^^75^82^FunctionRecord record = functionMap.get ( f ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionId [RETURN_TYPE] int   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P14_Delete_Statement]^^76^^^^^75^82^FunctionRecord record = functionMap.get ( f ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionId [RETURN_TYPE] int   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P2_Replace_Operator]^if  ( record == null )  {^77^^^^^75^82^if  ( record != null )  {^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionId [RETURN_TYPE] int   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^if  ( record != true )  {^77^^^^^75^82^if  ( record != null )  {^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionId [RETURN_TYPE] int   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P9_Replace_Statement]^if  ( parent != null )  {^77^^^^^75^82^if  ( record != null )  {^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionId [RETURN_TYPE] int   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P15_Unwrap_Block]^return record.id;^77^78^79^80^81^75^82^if  ( record != null )  { return record.id; } else { return -1; }^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionId [RETURN_TYPE] int   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P16_Remove_Block]^^77^78^79^80^81^75^82^if  ( record != null )  { return record.id; } else { return -1; }^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionId [RETURN_TYPE] int   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P13_Insert_Block]^if  ( record == null )  {     return null; }^77^^^^^75^82^[Delete]^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionId [RETURN_TYPE] int   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P3_Replace_Literal]^return -nextId;^80^^^^^75^82^return -1;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionId [RETURN_TYPE] int   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^return -1L;^80^^^^^75^82^return -1;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionId [RETURN_TYPE] int   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^return nextId;^78^^^^^75^82^return record.id;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionId [RETURN_TYPE] int   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^return record.id.id;^78^^^^^75^82^return record.id;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionId [RETURN_TYPE] int   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^return record;^78^^^^^75^82^return record.id;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionId [RETURN_TYPE] int   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P3_Replace_Literal]^return -id;^80^^^^^75^82^return -1;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionId [RETURN_TYPE] int   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^return -3;^80^^^^^75^82^return -1;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionId [RETURN_TYPE] int   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^FunctionRecord record = rootunctionMap.get ( f ) ;^85^^^^^84^110^FunctionRecord record = functionMap.get ( f ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^FunctionRecord record = functionMapunctionMap.get ( f ) ;^85^^^^^84^110^FunctionRecord record = functionMap.get ( f ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^FunctionRecord record = f.get ( functionMap ) ;^85^^^^^84^110^FunctionRecord record = functionMap.get ( f ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^FunctionRecord record = functionMap.get ( fnNode ) ;FunctionRecord record = functionMap.get ( f ) ;^85^^^^^84^110^FunctionRecord record = functionMap.get ( f ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P7_Replace_Invocation]^FunctionRecord record = functionMap .keySet (  )  ;^85^^^^^84^110^FunctionRecord record = functionMap.get ( f ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P14_Delete_Statement]^^85^^^^^84^110^FunctionRecord record = functionMap.get ( f ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P2_Replace_Operator]^if  ( record != null )  {^86^^^^^84^110^if  ( record == null )  {^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^if  ( record == this )  {^86^^^^^84^110^if  ( record == null )  {^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P9_Replace_Statement]^if  ( parent != null )  {^86^^^^^84^110^if  ( record == null )  {^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P15_Unwrap_Block]^return null;^86^87^88^89^^84^110^if  ( record == null )  {  return null; }^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P16_Remove_Block]^^86^87^88^89^^84^110^if  ( record == null )  {  return null; }^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P13_Insert_Block]^if  ( record != null )  {     return record.id; }else {     return -1; }^86^^^^^84^110^[Delete]^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^return this;^88^^^^^84^110^return null;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^return false;^88^^^^^84^110^return null;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P1_Replace_Type]^char str = record.name;^91^^^^^84^110^String str = record.name;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^String str = name;^91^^^^^84^110^String str = record.name;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^String str = record.name.name;^91^^^^^84^110^String str = record.name;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^String str = record;^91^^^^^84^110^String str = record.name;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^if  ( name.isEmpty (  )  )  {^92^^^^^84^110^if  ( str.isEmpty (  )  )  {^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P15_Unwrap_Block]^str = "<anonymous>";^92^93^94^^^84^110^if  ( str.isEmpty (  )  )  { str = "<anonymous>"; }^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P16_Remove_Block]^^92^93^94^^^84^110^if  ( str.isEmpty (  )  )  { str = "<anonymous>"; }^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P3_Replace_Literal]^str = "<anonymous>ous";^93^^^^^84^110^str = "<anonymous>";^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^str  =  str ;^93^^^^^84^110^str = "<anonymous>";^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P3_Replace_Literal]^str = "<anonymous";^93^^^^^84^110^str = "<anonymous>";^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^str ;^93^^^^^84^110^str = "<anonymous>";^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^Node parent = root;^96^^^^^84^110^Node parent = record.parent;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^Node parent = record.parent.parent;^96^^^^^84^110^Node parent = record.parent;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^Node parent = record;^96^^^^^84^110^Node parent = record.parent;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P2_Replace_Operator]^if  ( parent == null )  {^97^^^^^84^110^if  ( parent != null )  {^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^if  ( root != null )  {^97^^^^^84^110^if  ( parent != null )  {^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P6_Replace_Expression]^if  ( getFunctionName(parent) + "::" + str )  {^97^^^^^84^110^if  ( parent != null )  {^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P6_Replace_Expression]^if  ( getFunctionName ( parent )  + "::" )  {^97^^^^^84^110^if  ( parent != null )  {^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^if  ( parent != false )  {^97^^^^^84^110^if  ( parent != null )  {^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P9_Replace_Statement]^if  ( record == null )  {^97^^^^^84^110^if  ( parent != null )  {^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P9_Replace_Statement]^if  ( record != null )  {^97^^^^^84^110^if  ( parent != null )  {^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P15_Unwrap_Block]^str = ((getFunctionName(parent)) + "::") + str;^97^98^99^^^84^110^if  ( parent != null )  { str = getFunctionName ( parent )  + "::" + str; }^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P16_Remove_Block]^^97^98^99^^^84^110^if  ( parent != null )  { str = getFunctionName ( parent )  + "::" + str; }^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P2_Replace_Operator]^str = getFunctionName ( parent )  <<  + "::" + str;^98^^^^^84^110^str = getFunctionName ( parent )  + "::" + str;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P2_Replace_Operator]^str = getFunctionName ( parent )   |  "::" + str;^98^^^^^84^110^str = getFunctionName ( parent )  + "::" + str;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P3_Replace_Literal]^str = getFunctionName ( parent )  + "" + str;^98^^^^^84^110^str = getFunctionName ( parent )  + "::" + str;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^str = getFunctionName ( parent )  + "::" + name;^98^^^^^84^110^str = getFunctionName ( parent )  + "::" + str;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^str = getFunctionName ( str )  + "::" + parent;^98^^^^^84^110^str = getFunctionName ( parent )  + "::" + str;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P7_Replace_Invocation]^str = getFunctionId ( parent )  + "::" + str;^98^^^^^84^110^str = getFunctionName ( parent )  + "::" + str;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^str =  getFunctionName ( root )  + "::" + str;^98^^^^^84^110^str = getFunctionName ( parent )  + "::" + str;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P13_Insert_Block]^if  ( parent != null )  {     str =  (  ( getFunctionName ( parent )  )  + "::" )  + str; }^98^^^^^84^110^[Delete]^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P14_Delete_Statement]^^98^^^^^84^110^str = getFunctionName ( parent )  + "::" + str;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P2_Replace_Operator]^str = getFunctionName ( parent )  &  + "::" + str;^98^^^^^84^110^str = getFunctionName ( parent )  + "::" + str;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P2_Replace_Operator]^str = getFunctionName ( parent )   &  "::" + str;^98^^^^^84^110^str = getFunctionName ( parent )  + "::" + str;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P3_Replace_Literal]^str = getFunctionName ( parent )  + ":" + str;^98^^^^^84^110^str = getFunctionName ( parent )  + "::" + str;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P3_Replace_Literal]^str = str.replaceAll ( "::this\\.::", "." ) ;^102^^^^^84^110^str = str.replaceAll ( "::this\\.", "." ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P3_Replace_Literal]^str = str.replaceAll ( "::this\\.", "" ) ;^102^^^^^84^110^str = str.replaceAll ( "::this\\.", "." ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^str = name.replaceAll ( "::this\\.", "." ) ;^102^^^^^84^110^str = str.replaceAll ( "::this\\.", "." ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P7_Replace_Invocation]^str = str .replaceFirst ( str , str )  ;^102^^^^^84^110^str = str.replaceAll ( "::this\\.", "." ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^str = str.replaceAll ( "\\.\\.", "." ) ;str = str.replaceAll ( "::this\\.", "." ) ;^102^^^^^84^110^str = str.replaceAll ( "::this\\.", "." ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^str = str.replaceFirst ( "^ ( <anonymous>:: ) *", "" ) ;str = str.replaceAll ( "::this\\.", "." ) ;^102^^^^^84^110^str = str.replaceAll ( "::this\\.", "." ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P3_Replace_Literal]^str = str.replaceAll ( "\\:this\\.", "." ) ;^102^^^^^84^110^str = str.replaceAll ( "::this\\.", "." ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P7_Replace_Invocation]^str = str .replaceFirst ( str , name )  ;^102^^^^^84^110^str = str.replaceAll ( "::this\\.", "." ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^str = str .replaceFirst ( name , str )  ;^102^^^^^84^110^str = str.replaceAll ( "::this\\.", "." ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P14_Delete_Statement]^^102^^^^^84^110^str = str.replaceAll ( "::this\\.", "." ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P3_Replace_Literal]^str = str.replaceAll ( "\\", "." ) ;^106^^^^^84^110^str = str.replaceAll ( "\\.\\.", "." ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P3_Replace_Literal]^str = str.replaceAll ( "\\.\\.", "" ) ;^106^^^^^84^110^str = str.replaceAll ( "\\.\\.", "." ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^str = name.replaceAll ( "\\.\\.", "." ) ;^106^^^^^84^110^str = str.replaceAll ( "\\.\\.", "." ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^str =  null.replaceAll ( "\\.\\.", "." ) ;^106^^^^^84^110^str = str.replaceAll ( "\\.\\.", "." ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^str = str.replaceAll ( "::this\\.", "." ) ;str = str.replaceAll ( "\\.\\.", "." ) ;^106^^^^^84^110^str = str.replaceAll ( "\\.\\.", "." ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^str = str.replaceFirst ( "^ ( <anonymous>:: ) *", "" ) ;str = str.replaceAll ( "\\.\\.", "." ) ;^106^^^^^84^110^str = str.replaceAll ( "\\.\\.", "." ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P3_Replace_Literal]^str = str.replaceAll ( "\.\\.", "." ) ;^106^^^^^84^110^str = str.replaceAll ( "\\.\\.", "." ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P7_Replace_Invocation]^str = str .replaceFirst ( str , name )  ;^106^^^^^84^110^str = str.replaceAll ( "\\.\\.", "." ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P14_Delete_Statement]^^106^^^^^84^110^str = str.replaceAll ( "\\.\\.", "." ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^str = name.replaceFirst ( "^ ( <anonymous>:: ) *", "" ) ;^108^^^^^84^110^str = str.replaceFirst ( "^ ( <anonymous>:: ) *", "" ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P7_Replace_Invocation]^str = str .replaceAll ( str , name )  ;^108^^^^^84^110^str = str.replaceFirst ( "^ ( <anonymous>:: ) *", "" ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^str = str.replaceAll ( "\\.\\.", "." ) ;str = str.replaceFirst ( "^ ( <anonymous>:: ) *", "" ) ;^108^^^^^84^110^str = str.replaceFirst ( "^ ( <anonymous>:: ) *", "" ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^str = str.replaceAll ( "::this\\.", "." ) ;str = str.replaceFirst ( "^ ( <anonymous>:: ) *", "" ) ;^108^^^^^84^110^str = str.replaceFirst ( "^ ( <anonymous>:: ) *", "" ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P14_Delete_Statement]^^108^^^^^84^110^str = str.replaceFirst ( "^ ( <anonymous>:: ) *", "" ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^return name;^109^^^^^84^110^return str;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getFunctionName [RETURN_TYPE] String   Node f [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  externs  f  parent  root  char  DELIMITER  FunctionRecord  record  String  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.FUNCTION )  {^135^^^^^134^145^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^if  ( root.getType (  )  == Token.FUNCTION )  {^135^^^^^134^145^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.functionListExtractor )  {^135^^^^^134^145^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P7_Replace_Invocation]^if  ( n .getString (  )   == Token.FUNCTION )  {^135^^^^^134^145^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P4_Replace_Constructor]^new FunctionRecord ( nextId,  functionName )  ) ;^142^^^^^134^145^new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P4_Replace_Constructor]^new FunctionRecord ( nextId, enclosingFunction )  ) ;^142^^^^^134^145^new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^new FunctionRecord ( nextId, root, functionName )  ) ;^142^^^^^134^145^new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^new FunctionRecord ( nextId, enclosingFunction, str )  ) ;^142^^^^^134^145^new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^new FunctionRecord ( id, enclosingFunction, functionName )  ) ;^142^^^^^134^145^new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^new FunctionRecord (  enclosingFunction, functionName )  ) ;^142^^^^^134^145^new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^new FunctionRecord ( nextId, functionName, enclosingFunction )  ) ;^142^^^^^134^145^new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^new FunctionRecord ( functionName, enclosingFunction, nextId )  ) ;^142^^^^^134^145^new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^Node functionNameNode = parent.getFirstChild (  ) ;^136^^^^^134^145^Node functionNameNode = n.getFirstChild (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^Node functionNameNode = root.getFirstChild (  ) ;^136^^^^^134^145^Node functionNameNode = n.getFirstChild (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P1_Replace_Type]^char functionName = functionNameNode.getchar (  ) ;^137^^^^^134^145^String functionName = functionNameNode.getString (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^String functionName = n.getString (  ) ;^137^^^^^134^145^String functionName = functionNameNode.getString (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P7_Replace_Invocation]^Node enclosingFunction = t .traverse ( compiler , n , functionListExtractor )  ;^139^^^^^134^145^Node enclosingFunction = t.getEnclosingFunction (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^Node functionNameNode = functionNameNode.getFirstChild (  ) ;^136^^^^^134^145^Node functionNameNode = n.getFirstChild (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P14_Delete_Statement]^^136^137^^^^134^145^Node functionNameNode = n.getFirstChild (  ) ; String functionName = functionNameNode.getString (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^String functionName = parent.getString (  ) ;^137^^^^^134^145^String functionName = functionNameNode.getString (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^String functionName = n .getFirstChild (  )  ;^137^^^^^134^145^String functionName = functionNameNode.getString (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P14_Delete_Statement]^^137^^^^^134^145^String functionName = functionNameNode.getString (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P14_Delete_Statement]^^139^^^^^134^145^Node enclosingFunction = t.getEnclosingFunction (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P4_Replace_Constructor]^functionMap.put (  new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P4_Replace_Constructor]^functionMap.put ( n, new FunctionRecord ( nextId,  functionName )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P4_Replace_Constructor]^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^functionMap.put ( root, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, str )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^functionMap.put ( n, new FunctionRecord ( id, enclosingFunction, functionName )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^functionMap.put ( n, new FunctionRecord (  enclosingFunction, functionName )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^functionMap.put ( enclosingFunction, new FunctionRecord ( nextId, n, functionName )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^functionMap.put ( n, new FunctionRecord ( enclosingFunction, nextId, functionName )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^functionMap.put ( functionName, new FunctionRecord ( nextId, enclosingFunction, n )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^functionMap.put ( nextId, new FunctionRecord ( n, enclosingFunction, functionName )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P14_Delete_Statement]^^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P7_Replace_Invocation]^Node functionNameNode = n .getString (  )  ;^136^^^^^134^145^Node functionNameNode = n.getFirstChild (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^String functionName = root.getString (  ) ;^137^^^^^134^145^String functionName = functionNameNode.getString (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P7_Replace_Invocation]^String functionName = functionNameNode .getFirstChild (  )  ;^137^^^^^134^145^String functionName = functionNameNode.getString (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P7_Replace_Invocation]^Node enclosingFunction = t .traverse ( compiler , enclosingFunction , functionListExtractor )  ;^139^^^^^134^145^Node enclosingFunction = t.getEnclosingFunction (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.FUNCTION )  {^135^^^^^134^145^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P14_Delete_Statement]^^136^^^^^134^145^Node functionNameNode = n.getFirstChild (  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^functionMap.put ( n, new FunctionRecord ( nextId, root, functionName )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^functionMap.put ( n, new FunctionRecord ( functionName, enclosingFunction, nextId )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  NodeTraversal  t  Node  enclosingFunction  externs  f  functionNameNode  n  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^return extractor.getName ( parent ) ;^161^^^^^160^162^return extractor.getName ( node ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  functionNameNode  n  node  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^return node.getName ( extractor ) ;^161^^^^^160^162^return extractor.getName ( node ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  functionNameNode  n  node  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P7_Replace_Invocation]^return extractor.NodeNameExtractor ( node ) ;^161^^^^^160^162^return extractor.getName ( node ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  functionNameNode  n  node  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^return extractor.getName ( root ) ;^161^^^^^160^162^return extractor.getName ( node ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  functionNameNode  n  node  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P14_Delete_Statement]^^161^^^^^160^162^return extractor.getName ( node ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  functionNameNode  n  node  parent  root  char  DELIMITER  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^FunctionRecord record = null.get ( fnNode ) ;^166^^^^^165^170^FunctionRecord record = functionMap.get ( fnNode ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  FunctionRecord  record  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^FunctionRecord record = fnNode.get ( functionMap ) ;^166^^^^^165^170^FunctionRecord record = functionMap.get ( fnNode ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  FunctionRecord  record  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^FunctionRecord record = functionMap.get ( n ) ;^166^^^^^165^170^FunctionRecord record = functionMap.get ( fnNode ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  FunctionRecord  record  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^FunctionRecord record = functionMap.get ( f ) ;FunctionRecord record = functionMap.get ( fnNode ) ;^166^^^^^165^170^FunctionRecord record = functionMap.get ( fnNode ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  FunctionRecord  record  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^FunctionRecord record = functionMap.get ( parent ) ;^166^^^^^165^170^FunctionRecord record = functionMap.get ( fnNode ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  FunctionRecord  record  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P14_Delete_Statement]^^166^167^^^^165^170^FunctionRecord record = functionMap.get ( fnNode ) ; assert ( record != null ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  FunctionRecord  record  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^assert ( str.isEmpty (  )  ) ;^168^^^^^165^170^assert ( record.name.isEmpty (  )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  FunctionRecord  record  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^assert ( record.name.name.isEmpty (  )  ) ;^168^^^^^165^170^assert ( record.name.isEmpty (  )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  FunctionRecord  record  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^assert ( record.isEmpty (  )  ) ;^168^^^^^165^170^assert ( record.name.isEmpty (  )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  FunctionRecord  record  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P7_Replace_Invocation]^assert ( record.name .replaceFirst ( str , str )   ) ;^168^^^^^165^170^assert ( record.name.isEmpty (  )  ) ;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  FunctionRecord  record  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P14_Delete_Statement]^^168^169^^^^165^170^assert ( record.name.isEmpty (  )  ) ; record.name = name;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  FunctionRecord  record  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^record.name = str;^169^^^^^165^170^record.name = name;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  FunctionRecord  record  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^record.name =  name;^169^^^^^165^170^record.name = name;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  FunctionRecord  record  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P11_Insert_Donor_Statement]^this.name = name;record.name = name;^169^^^^^165^170^record.name = name;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  FunctionRecord  record  String  functionName  name  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P2_Replace_Operator]^return lhs  &&  DELIMITER + rhs;^174^^^^^173^175^return lhs + DELIMITER + rhs;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  String  functionName  lhs  name  rhs  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^return str + DELIMITER + rhs;^174^^^^^173^175^return lhs + DELIMITER + rhs;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  String  functionName  lhs  name  rhs  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^return lhs + DELIMITER + str;^174^^^^^173^175^return lhs + DELIMITER + rhs;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  String  functionName  lhs  name  rhs  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^return rhs + DELIMITER + lhs;^174^^^^^173^175^return lhs + DELIMITER + rhs;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  String  functionName  lhs  name  rhs  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P5_Replace_Variable]^return lhs + rhs + DELIMITER;^174^^^^^173^175^return lhs + DELIMITER + rhs;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  String  functionName  lhs  name  rhs  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^return lhs  ^  DELIMITER  ^  name;^174^^^^^173^175^return lhs + DELIMITER + rhs;^[CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  String  functionName  lhs  name  rhs  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P1_Replace_Type]^private static final  int  serialVersionUID = 1L;^113^^^^^108^118^private static final long serialVersionUID = 1L;^[CLASS] FunctionRecord  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  String  functionName  lhs  name  rhs  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^private static final long serialVersionUID = 1;^113^^^^^108^118^private static final long serialVersionUID = 1L;^[CLASS] FunctionRecord  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  String  functionName  lhs  name  rhs  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P1_Replace_Type]^public final  short  id;^115^^^^^110^120^public final int id;^[CLASS] FunctionRecord  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  String  functionName  lhs  name  rhs  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P1_Replace_Type]^public char name;^117^^^^^112^122^public String name;^[CLASS] FunctionRecord  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  FunctionListExtractor  functionListExtractor  boolean  Node  enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  char  DELIMITER  String  functionName  lhs  name  rhs  str  NodeNameExtractor  extractor  Map  functionMap  long  serialVersionUID  int  id  nextId  
[P8_Replace_Mix]^this.id =  null;^120^^^^^119^123^this.id = id;^[CLASS] FunctionRecord  [METHOD] <init> [RETURN_TYPE] String)   int id Node parent String name [VARIABLES] String  name  boolean  long  serialVersionUID  int  id  Node  parent  
[P11_Insert_Donor_Statement]^this.name = name;this.id = id;^120^^^^^119^123^this.id = id;^[CLASS] FunctionRecord  [METHOD] <init> [RETURN_TYPE] String)   int id Node parent String name [VARIABLES] String  name  boolean  long  serialVersionUID  int  id  Node  parent  
[P8_Replace_Mix]^this.parent =  null;^121^^^^^119^123^this.parent = parent;^[CLASS] FunctionRecord  [METHOD] <init> [RETURN_TYPE] String)   int id Node parent String name [VARIABLES] String  name  boolean  long  serialVersionUID  int  id  Node  parent  
[P11_Insert_Donor_Statement]^this.name = name;this.parent = parent;^121^^^^^119^123^this.parent = parent;^[CLASS] FunctionRecord  [METHOD] <init> [RETURN_TYPE] String)   int id Node parent String name [VARIABLES] String  name  boolean  long  serialVersionUID  int  id  Node  parent  
[P8_Replace_Mix]^this.name =  null;^122^^^^^119^123^this.name = name;^[CLASS] FunctionRecord  [METHOD] <init> [RETURN_TYPE] String)   int id Node parent String name [VARIABLES] String  name  boolean  long  serialVersionUID  int  id  Node  parent  
[P11_Insert_Donor_Statement]^this.id = id;this.name = name;^122^^^^^119^123^this.name = name;^[CLASS] FunctionRecord  [METHOD] <init> [RETURN_TYPE] String)   int id Node parent String name [VARIABLES] String  name  boolean  long  serialVersionUID  int  id  Node  parent  
[P11_Insert_Donor_Statement]^this.parent = parent;this.name = name;^122^^^^^119^123^this.name = name;^[CLASS] FunctionRecord  [METHOD] <init> [RETURN_TYPE] String)   int id Node parent String name [VARIABLES] String  name  boolean  long  serialVersionUID  int  id  Node  parent  
[P1_Replace_Type]^private  short  nextId = 0;^128^^^^^123^133^private int nextId = 0;^[CLASS] FunctionListExtractor  [METHOD] <init> [RETURN_TYPE] String)   int id Node parent String name [VARIABLES] String  name  boolean  long  serialVersionUID  int  id  Node  parent  
[P3_Replace_Literal]^private int nextId = id;^128^^^^^123^133^private int nextId = 0;^[CLASS] FunctionListExtractor  [METHOD] <init> [RETURN_TYPE] String)   int id Node parent String name [VARIABLES] String  name  boolean  long  serialVersionUID  int  id  Node  parent  
[P8_Replace_Mix]^private int nextId = 3;^128^^^^^123^133^private int nextId = 0;^[CLASS] FunctionListExtractor  [METHOD] <init> [RETURN_TYPE] String)   int id Node parent String name [VARIABLES] String  name  boolean  long  serialVersionUID  int  id  Node  parent  
[P8_Replace_Mix]^this.functionMap =  null;^131^^^^^130^132^this.functionMap = functionMap;^[CLASS] FunctionListExtractor  [METHOD] <init> [RETURN_TYPE] Map)   FunctionRecord> functionMap [VARIABLES] Map  functionMap  int  nextId  boolean  
[P2_Replace_Operator]^if  ( n.getType (  )  <= Token.FUNCTION )  {^135^^^^^134^145^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.FUNCTION )  {^135^^^^^134^145^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P4_Replace_Constructor]^new FunctionRecord ( nextId,  functionName )  ) ;^142^^^^^134^145^new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P4_Replace_Constructor]^new FunctionRecord ( nextId, enclosingFunction )  ) ;^142^^^^^134^145^new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P5_Replace_Variable]^new FunctionRecord ( nextId, parent, functionName )  ) ;^142^^^^^134^145^new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P5_Replace_Variable]^new FunctionRecord (  enclosingFunction, functionName )  ) ;^142^^^^^134^145^new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P5_Replace_Variable]^new FunctionRecord ( nextId, functionName, enclosingFunction )  ) ;^142^^^^^134^145^new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P5_Replace_Variable]^new FunctionRecord ( functionName, enclosingFunction, nextId )  ) ;^142^^^^^134^145^new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P5_Replace_Variable]^Node functionNameNode = parent.getFirstChild (  ) ;^136^^^^^134^145^Node functionNameNode = n.getFirstChild (  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P1_Replace_Type]^char functionName = functionNameNode.getchar (  ) ;^137^^^^^134^145^String functionName = functionNameNode.getString (  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P8_Replace_Mix]^String functionName = parent.getString (  ) ;^137^^^^^134^145^String functionName = functionNameNode.getString (  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P7_Replace_Invocation]^Node functionNameNode = n .getString (  )  ;^136^^^^^134^145^Node functionNameNode = n.getFirstChild (  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P14_Delete_Statement]^^136^137^^^^134^145^Node functionNameNode = n.getFirstChild (  ) ; String functionName = functionNameNode.getString (  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P14_Delete_Statement]^^137^^^^^134^145^String functionName = functionNameNode.getString (  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P14_Delete_Statement]^^139^^^^^134^145^Node enclosingFunction = t.getEnclosingFunction (  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P4_Replace_Constructor]^functionMap.put (  new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P4_Replace_Constructor]^functionMap.put ( n, new FunctionRecord ( nextId,  functionName )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P4_Replace_Constructor]^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P5_Replace_Variable]^functionMap.put ( parent, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P5_Replace_Variable]^functionMap.put ( n, new FunctionRecord ( nextId, parent, functionName )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P5_Replace_Variable]^functionMap.put ( n, new FunctionRecord (  enclosingFunction, functionName )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P5_Replace_Variable]^functionMap.put ( enclosingFunction, new FunctionRecord ( nextId, n, functionName )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P5_Replace_Variable]^functionMap.put ( functionName, new FunctionRecord ( nextId, enclosingFunction, n )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P5_Replace_Variable]^functionMap.put ( nextId, new FunctionRecord ( n, enclosingFunction, functionName )  ) ;^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P14_Delete_Statement]^^141^142^^^^134^145^functionMap.put ( n, new FunctionRecord ( nextId, enclosingFunction, functionName )  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P7_Replace_Invocation]^String functionName = functionNameNode .getFirstChild (  )  ;^137^^^^^134^145^String functionName = functionNameNode.getString (  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P7_Replace_Invocation]^if  ( n .getString (  )   == Token.FUNCTION )  {^135^^^^^134^145^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P14_Delete_Statement]^^136^^^^^134^145^Node functionNameNode = n.getFirstChild (  ) ;^[CLASS] FunctionListExtractor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P1_Replace_Type]^private static final int DELIMITER = '.';^150^^^^^145^155^private static final char DELIMITER = '.';^[CLASS] AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P8_Replace_Mix]^private static final String DELIMITER = '.';^150^^^^^145^155^private static final char DELIMITER = '.';^[CLASS] AnonymousFunctionNamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  functionName  boolean  Map  functionMap  NodeTraversal  t  int  nextId  Node  enclosingFunction  functionNameNode  n  parent  
[P8_Replace_Mix]^this.functionMap =  null;^156^^^^^155^157^this.functionMap = functionMap;^[CLASS] AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] Map)   FunctionRecord> functionMap [VARIABLES] char  DELIMITER  NodeNameExtractor  extractor  boolean  Map  functionMap  
[P5_Replace_Variable]^return node.getName ( extractor ) ;^161^^^^^160^162^return extractor.getName ( node ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] char  DELIMITER  NodeNameExtractor  extractor  boolean  Map  functionMap  Node  node  
[P8_Replace_Mix]^return extractor .NodeNameExtractor ( DELIMITER )  ;^161^^^^^160^162^return extractor.getName ( node ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] char  DELIMITER  NodeNameExtractor  extractor  boolean  Map  functionMap  Node  node  
[P14_Delete_Statement]^^161^^^^^160^162^return extractor.getName ( node ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] char  DELIMITER  NodeNameExtractor  extractor  boolean  Map  functionMap  Node  node  
[P5_Replace_Variable]^FunctionRecord record = fnNode.get ( functionMap ) ;^166^^^^^165^170^FunctionRecord record = functionMap.get ( fnNode ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] boolean  Node  fnNode  char  DELIMITER  FunctionRecord  record  NodeNameExtractor  extractor  String  name  Map  functionMap  
[P5_Replace_Variable]^FunctionRecord record = null.get ( fnNode ) ;^166^^^^^165^170^FunctionRecord record = functionMap.get ( fnNode ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] boolean  Node  fnNode  char  DELIMITER  FunctionRecord  record  NodeNameExtractor  extractor  String  name  Map  functionMap  
[P8_Replace_Mix]^FunctionRecord record = 3.get ( fnNode ) ;^166^^^^^165^170^FunctionRecord record = functionMap.get ( fnNode ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] boolean  Node  fnNode  char  DELIMITER  FunctionRecord  record  NodeNameExtractor  extractor  String  name  Map  functionMap  
[P14_Delete_Statement]^^166^^^^^165^170^FunctionRecord record = functionMap.get ( fnNode ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] boolean  Node  fnNode  char  DELIMITER  FunctionRecord  record  NodeNameExtractor  extractor  String  name  Map  functionMap  
[P5_Replace_Variable]^assert ( name.isEmpty (  )  ) ;^168^^^^^165^170^assert ( record.name.isEmpty (  )  ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] boolean  Node  fnNode  char  DELIMITER  FunctionRecord  record  NodeNameExtractor  extractor  String  name  Map  functionMap  
[P5_Replace_Variable]^assert ( record.name.name.isEmpty (  )  ) ;^168^^^^^165^170^assert ( record.name.isEmpty (  )  ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] boolean  Node  fnNode  char  DELIMITER  FunctionRecord  record  NodeNameExtractor  extractor  String  name  Map  functionMap  
[P5_Replace_Variable]^assert ( record.isEmpty (  )  ) ;^168^^^^^165^170^assert ( record.name.isEmpty (  )  ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] boolean  Node  fnNode  char  DELIMITER  FunctionRecord  record  NodeNameExtractor  extractor  String  name  Map  functionMap  
[P14_Delete_Statement]^^168^^^^^165^170^assert ( record.name.isEmpty (  )  ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] boolean  Node  fnNode  char  DELIMITER  FunctionRecord  record  NodeNameExtractor  extractor  String  name  Map  functionMap  
[P8_Replace_Mix]^record.name =  name;^169^^^^^165^170^record.name = name;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] boolean  Node  fnNode  char  DELIMITER  FunctionRecord  record  NodeNameExtractor  extractor  String  name  Map  functionMap  
[P2_Replace_Operator]^return lhs  >  DELIMITER + rhs;^174^^^^^173^175^return lhs + DELIMITER + rhs;^[CLASS] AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] char  DELIMITER  NodeNameExtractor  extractor  String  lhs  rhs  boolean  Map  functionMap  
[P5_Replace_Variable]^return DELIMITER + lhs + rhs;^174^^^^^173^175^return lhs + DELIMITER + rhs;^[CLASS] AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] char  DELIMITER  NodeNameExtractor  extractor  String  lhs  rhs  boolean  Map  functionMap  
[P5_Replace_Variable]^return rhs + DELIMITER + lhs;^174^^^^^173^175^return lhs + DELIMITER + rhs;^[CLASS] AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] char  DELIMITER  NodeNameExtractor  extractor  String  lhs  rhs  boolean  Map  functionMap  
[P5_Replace_Variable]^return lhs + rhs + DELIMITER;^174^^^^^173^175^return lhs + DELIMITER + rhs;^[CLASS] AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] char  DELIMITER  NodeNameExtractor  extractor  String  lhs  rhs  boolean  Map  functionMap  
[P8_Replace_Mix]^return lhs  ;^174^^^^^173^175^return lhs + DELIMITER + rhs;^[CLASS] AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] char  DELIMITER  NodeNameExtractor  extractor  String  lhs  rhs  boolean  Map  functionMap  
