[P8_Replace_Mix]^private static  Logger logger = Logger.getLogger ( DisambiguateProperties.class.getName (  )  ) ;^78^79^^^^78^79^private static final Logger logger = Logger.getLogger ( DisambiguateProperties.class.getName (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P2_Replace_Operator]^static final DiagnosticType INVALIDATION = DiagnosticType.warning ( "JSC_INVALIDATION", "Property disambiguator skipping all instances of property {0} "  <=  "because of type {1} node {2}" ) ;^83^84^85^86^^83^86^static final DiagnosticType INVALIDATION = DiagnosticType.warning ( "JSC_INVALIDATION", "Property disambiguator skipping all instances of property {0} " + "because of type {1} node {2}" ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType INVALIDATION = DiagnosticType.warning ( "ALIDATSC_INVALIDATION", "Property disambiguator skipping all instances of property {0} " + "because of type {1} node {2}" ) ;^83^84^85^86^^83^86^static final DiagnosticType INVALIDATION = DiagnosticType.warning ( "JSC_INVALIDATION", "Property disambiguator skipping all instances of property {0} " + "because of type {1} node {2}" ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType INVALIDATION = DiagnosticType.warning ( "JSC_INVALIDATION", "Property disambiguator skipping all instances of property {0} g all instances of property " + "because of type {1} node {2}" ) ;^83^84^85^86^^83^86^static final DiagnosticType INVALIDATION = DiagnosticType.warning ( "JSC_INVALIDATION", "Property disambiguator skipping all instances of property {0} " + "because of type {1} node {2}" ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType INVALIDATION = DiagnosticType.warning ( "JSC_INVALIDATION", "Property disambiguator skipping all instances of property {0} " + "because of type {1} node {2}becaus" ) ;^83^84^85^86^^83^86^static final DiagnosticType INVALIDATION = DiagnosticType.warning ( "JSC_INVALIDATION", "Property disambiguator skipping all instances of property {0} " + "because of type {1} node {2}" ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType INVALIDATION  = null ;^83^84^85^86^^83^86^static final DiagnosticType INVALIDATION = DiagnosticType.warning ( "JSC_INVALIDATION", "Property disambiguator skipping all instances of property {0} " + "because of type {1} node {2}" ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P3_Replace_Literal]^private final boolean showInvalidationWarnings = true;^87^^^^^82^92^private final boolean showInvalidationWarnings = false;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P12_Insert_Condition]^if  ( showInvalidationWarnings )  { private final boolean showInvalidationWarnings = false; }^87^^^^^82^92^private final boolean showInvalidationWarnings = false;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P8_Replace_Mix]^private  AbstractCompiler compiler;^89^^^^^84^94^private final AbstractCompiler compiler;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P1_Replace_Type]^final char name;^94^^^^^89^99^final String name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P7_Replace_Invocation]^Set<T> typesToSkip = Sets .newHashSet (  )  ;^103^^^^^98^108^Set<T> typesToSkip = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P8_Replace_Mix]^Set<T> typesToSkip  = null ;^103^^^^^98^108^Set<T> typesToSkip = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P8_Replace_Mix]^Set<Node> renameNodes  = null ;^112^^^^^107^117^Set<Node> renameNodes = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P8_Replace_Mix]^final Map<Node, T> rootTypes  = null ;^119^^^^^114^124^final Map<Node, T> rootTypes = Maps.newHashMap (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P8_Replace_Mix]^private Map<String, Property> properties  = null ;^254^^^^^249^259^private Map<String, Property> properties = Maps.newHashMap (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P8_Replace_Mix]^protected  Stack<StaticScope<T>> scopes = new Stack<StaticScope<T>> (  ) ;^325^326^^^^325^326^protected final Stack<StaticScope<T>> scopes = new Stack<StaticScope<T>> (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P8_Replace_Mix]^private  TightenTypes tt;^808^^^^^803^813^private final TightenTypes tt;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P1_Replace_Type]^private  long  nextUniqueId;^809^^^^^804^814^private int nextUniqueId;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P7_Replace_Invocation]^private final Set<JSType> invalidatingTypes = Sets .newHashSet (  )  ;^811^^^^^806^816^private final Set<JSType> invalidatingTypes = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P8_Replace_Mix]^private final Set<JSType> invalidatingTypes  = null ;^811^^^^^806^816^private final Set<JSType> invalidatingTypes = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P8_Replace_Mix]^private  final JSTypeNative [] nativeTypes = new JSTypeNative[] {^815^^^^^815^819^private static final JSTypeNative [] nativeTypes = new JSTypeNative[] {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem   [VARIABLES] 
[P8_Replace_Mix]^this.name =  null;^122^^^^^121^123^this.name = name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.name = name;^122^^^^^121^123^this.name = name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^this.tt = tt;this.name = name;^122^^^^^121^123^this.name = name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^newName = name;this.name = name;^122^^^^^121^123^this.name = name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^this.compiler =  null;^274^^^^^272^276^this.compiler = compiler;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] DisambiguateProperties$TypeSystem)   AbstractCompiler compiler TypeSystem<T> typeSystem [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^this.name = name;this.compiler = compiler;^274^^^^^272^276^this.compiler = compiler;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] DisambiguateProperties$TypeSystem)   AbstractCompiler compiler TypeSystem<T> typeSystem [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^this.typeSystem =  null;^275^^^^^272^276^this.typeSystem = typeSystem;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] DisambiguateProperties$TypeSystem)   AbstractCompiler compiler TypeSystem<T> typeSystem [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^registry = compiler .getTypeValidator (  )  ;^639^^^^^638^649^registry = compiler.getTypeRegistry (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^registry =  null.getTypeRegistry (  ) ;^639^^^^^638^649^registry = compiler.getTypeRegistry (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^639^^^^^638^649^registry = compiler.getTypeRegistry (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^invalidatingTypes = Sets .newHashSet (  )  , registry.getNativeType ( JSTypeNative.NO_TYPE ) ,^640^641^642^643^^638^649^invalidatingTypes = Sets.newHashSet ( registry.getNativeType ( JSTypeNative.ALL_TYPE ) , registry.getNativeType ( JSTypeNative.NO_OBJECT_TYPE ) , registry.getNativeType ( JSTypeNative.NO_TYPE ) ,^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^invalidatingTypes  = null ;^640^641^642^643^^638^649^invalidatingTypes = Sets.newHashSet ( registry.getNativeType ( JSTypeNative.ALL_TYPE ) , registry.getNativeType ( JSTypeNative.NO_OBJECT_TYPE ) , registry.getNativeType ( JSTypeNative.NO_TYPE ) ,^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^registry .getDirectImplementors ( 3 )  , registry^643^644^645^646^^638^649^registry.getNativeType ( JSTypeNative.NO_TYPE ) , registry.getNativeType ( JSTypeNative.FUNCTION_PROTOTYPE ) , registry.getNativeType ( JSTypeNative.OBJECT_PROTOTYPE ) , registry.getNativeType ( JSTypeNative.TOP_LEVEL_PROTOTYPE ) ,^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^645^646^647^^^638^649^registry.getNativeType ( JSTypeNative.OBJECT_PROTOTYPE ) , registry.getNativeType ( JSTypeNative.TOP_LEVEL_PROTOTYPE ) , registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^646^647^^^^638^649^registry.getNativeType ( JSTypeNative.TOP_LEVEL_PROTOTYPE ) , registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^647^^^^^638^649^registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^this.tt =  null;^822^^^^^821^824^this.tt = tt;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] CodingConvention)   TightenTypes tt CodingConvention convention [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^this.name = name;this.tt = tt;^822^^^^^821^824^this.tt = tt;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] CodingConvention)   TightenTypes tt CodingConvention convention [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^this.codingConvention = codingConvention;^823^^^^^821^824^this.codingConvention = convention;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] CodingConvention)   TightenTypes tt CodingConvention convention [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P2_Replace_Operator]^if  ( types != null )  {^127^^^^^126^131^if  ( types == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^if  ( types == true )  {^127^^^^^126^131^if  ( types == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( alternatives != null )  {^127^^^^^126^131^if  ( types == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( jsType == null )  {^127^^^^^126^131^if  ( types == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( relatedType == null )  {^127^^^^^126^131^if  ( types == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( top != null )  {^127^^^^^126^131^if  ( types == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( objSkipType != null )  {^127^^^^^126^131^if  ( types == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( objType != null )  {^127^^^^^126^131^if  ( types == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( scope != null )  {^127^^^^^126^131^if  ( types == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( ret != null )  {^127^^^^^126^131^if  ( types == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( lastType != null )  {^127^^^^^126^131^if  ( types == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P15_Unwrap_Block]^types = new com.google.javascript.jscomp.graph.StandardUnionFind<T>();^127^128^129^^^126^131^if  ( types == null )  { types = new StandardUnionFind<T> (  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P16_Remove_Block]^^127^128^129^^^126^131^if  ( types == null )  { types = new StandardUnionFind<T> (  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^types  =  types ;^128^^^^^126^131^types = new StandardUnionFind<T> (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P13_Insert_Block]^if  (  ( types )  == null )  {     types = new StandardUnionFind<T> (  ) ; }^128^^^^^126^131^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^checkState ( !skipRenaming, "Attempt to record skipped property: %st", name ) ;^139^^^^^138^156^checkState ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^checkState ( ! "Attempt to record skipped property: %s", name ) ;^139^^^^^138^156^checkState ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^checkState ( !skipRenaming, "Attempt to record skipped property: %s" ) ;^139^^^^^138^156^checkState ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^Property ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^139^^^^^138^156^checkState ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^139^^^^^138^156^checkState ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( typeSystem.isInvalidatingType ( relatedType )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( 0.isInvalidatingType ( top )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( topSystem.isInvalidatingType ( type )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( type.isInvalidatingType ( top )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^if  ( typeSystem.isTypeToSkip ( top )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^if  ( topSystem.isInvalidatingType ( top )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( typeSystem.isInvalidatingType ( type )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( typeSystem.isInvalidatingType ( topType )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( typeSystem.isTypeToSkip ( type )  )  {^144^^^^^138^156^if  ( typeSystem.isTypeToSkip ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( top.isTypeToSkip ( typeSystem )  )  {^144^^^^^138^156^if  ( typeSystem.isTypeToSkip ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^if  ( typeSystem.getTypesToSkipForType ( top )  )  {^144^^^^^138^156^if  ( typeSystem.isTypeToSkip ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^if  ( typeSystem .getTypesToSkipForType ( relatedType )   )  {^144^^^^^138^156^if  ( typeSystem.isTypeToSkip ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( typeSystem.isInvalidatingType ( type )  )  {^144^^^^^138^156^if  ( typeSystem.isTypeToSkip ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( typeSystem.isInvalidatingType ( top )  )  {^144^^^^^138^156^if  ( typeSystem.isTypeToSkip ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( typeSystem.isInvalidatingType ( topType )  )  {^144^^^^^138^156^if  ( typeSystem.isTypeToSkip ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P15_Unwrap_Block]^addTypeToSkip(top);^144^145^146^^^138^156^if  ( typeSystem.isTypeToSkip ( top )  )  { addTypeToSkip ( top ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P16_Remove_Block]^^144^145^146^^^138^156^if  ( typeSystem.isTypeToSkip ( top )  )  { addTypeToSkip ( top ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^addTypeToSkip ( type ) ;^145^^^^^138^156^addTypeToSkip ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^shouldRename ( top ) ;^145^^^^^138^156^addTypeToSkip ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^145^^^^^138^156^addTypeToSkip ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^typesToSkip.add ( skipType ) ;addTypeToSkip ( top ) ;^145^^^^^138^156^addTypeToSkip ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^addTypeToSkip ( newType ) ;addTypeToSkip ( top ) ;^145^^^^^138^156^addTypeToSkip ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.addTypeToSkip ( type ) ;addTypeToSkip ( top ) ;^145^^^^^138^156^addTypeToSkip ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.expandTypesToSkip (  ) ;addTypeToSkip ( top ) ;^145^^^^^138^156^addTypeToSkip ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^newTypesToSkip.add ( subType ) ;addTypeToSkip ( top ) ;^145^^^^^138^156^addTypeToSkip ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.typesToSkip.add ( type ) ;addTypeToSkip ( top ) ;^145^^^^^138^156^addTypeToSkip ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P2_Replace_Operator]^if  ( relatedType != null )  {^148^^^^^138^156^if  ( relatedType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( type == null )  {^148^^^^^138^156^if  ( relatedType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^if  ( relatedType == true )  {^148^^^^^138^156^if  ( relatedType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( alternatives != null )  {^148^^^^^138^156^if  ( relatedType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( jsType == null )  {^148^^^^^138^156^if  ( relatedType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( top != null )  {^148^^^^^138^156^if  ( relatedType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( objSkipType != null )  {^148^^^^^138^156^if  ( relatedType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( objType != null )  {^148^^^^^138^156^if  ( relatedType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( types == null )  {^148^^^^^138^156^if  ( relatedType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( scope != null )  {^148^^^^^138^156^if  ( relatedType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( ret != null )  {^148^^^^^138^156^if  ( relatedType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( lastType != null )  {^148^^^^^138^156^if  ( relatedType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P15_Unwrap_Block]^getTypes().add(top);^148^149^150^151^152^138^156^if  ( relatedType == null )  { getTypes (  ) .add ( top ) ; } else { getTypes (  ) .union ( top, relatedType ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P16_Remove_Block]^^148^149^150^151^152^138^156^if  ( relatedType == null )  { getTypes (  ) .add ( top ) ; } else { getTypes (  ) .union ( top, relatedType ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P13_Insert_Block]^if  ( top != null )  {     p.addType ( itype, top, relatedType ) ; }else {     recordInterfaces ( itype, relatedType, p ) ; }^148^^^^^138^156^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^getTypes (  ) .union ( top, type ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^getTypes (  ) .union (  relatedType ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^getTypes (  ) .union ( top ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^getTypes (  ) .union ( relatedType, top ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^getTypes (  )  .find ( relatedType )  ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^invalidate (  ) .union ( top, relatedType ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^getTypes (  ) .union ( type, relatedType ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^getTypes (  ) .add ( top ) ;getTypes (  ) .union ( top, relatedType ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^p.addType ( itype, top, relatedType ) ;getTypes (  ) .union ( top, relatedType ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^getTypes (  ) .union ( skipType, type ) ;getTypes (  ) .union ( top, relatedType ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.addType ( type, topType, relatedType ) ;getTypes (  ) .union ( top, relatedType ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^getTypes (  ) .add ( type ) ;^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^getTypes (  ) .find ( top ) ;^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^invalidate (  ) .add ( top ) ;^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^invalidate (  ) .add ( type ) ;^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^getTypes (  ) .union ( top, relatedType ) ;getTypes (  ) .add ( top ) ;^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.getTypes (  ) .add ( type ) ;getTypes (  ) .add ( top ) ;^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^getTypes (  ) .union ( skipType, type ) ;getTypes (  ) .add ( top ) ;^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^newTypesToSkip.add ( subType ) ;getTypes (  ) .add ( top ) ;^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.typesToSkip.add ( type ) ;getTypes (  ) .add ( top ) ;^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^return false;^154^^^^^138^156^return true;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^typeSystem.recordInterfaces ( type, relatedType, this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^typeSystem.recordInterfaces (  top, this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^typeSystem.recordInterfaces ( type,  this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^typeSystem.recordInterfaces ( top, type, this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^typeSystem.getTypeWithProperty ( type, top, this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^typeSystem.getTypeWithProperty ( type, relatedType, this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^typeSystem.addInvalidatingType ( type ) ;typeSystem.recordInterfaces ( type, top, this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^return true;^142^^^^^138^156^return false;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^shouldRename (  ) ;^141^^^^^138^156^invalidate (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^141^142^^^^138^156^invalidate (  ) ; return false;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.invalidate (  ) ;invalidate (  ) ;^141^^^^^138^156^invalidate (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^invalidatingTypes.add ( type ) ;invalidate (  ) ;^141^^^^^138^156^invalidate (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^addInvalidatingType ( alt ) ;invalidate (  ) ;^141^^^^^138^156^invalidate (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^if  ( relatedType == this )  {^148^^^^^138^156^if  ( relatedType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^getTypes (  )  .find ( type )  ;^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( top.isInvalidatingType ( typeSystem )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^if  ( typeSystem.isTypeToSkip ( type )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P13_Insert_Block]^if  ( typeSystem.isInvalidatingType ( topType )  )  {     return null; }^140^^^^^138^156^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^141^^^^^138^156^invalidate (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^typeSystem.recordInterfaces ( top, top, this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^for  ( T skipType : skipTypeSystem.getTypesToSkipForType ( type )  )  {^160^^^^^159^164^for  ( T skipType : typeSystem.getTypesToSkipForType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^for  ( T skipType : typeSystemSystem.getTypesToSkipForType ( type )  )  {^160^^^^^159^164^for  ( T skipType : typeSystem.getTypesToSkipForType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^for  ( T skipType : type.getTypesToSkipForType ( typeSystem )  )  {^160^^^^^159^164^for  ( T skipType : typeSystem.getTypesToSkipForType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^for  ( T skipType : typeSystem.isTypeToSkip ( type )  )  {^160^^^^^159^164^for  ( T skipType : typeSystem.getTypesToSkipForType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^160^161^162^163^^159^164^for  ( T skipType : typeSystem.getTypesToSkipForType ( type )  )  { typesToSkip.add ( skipType ) ; getTypes (  ) .union ( skipType, type ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^typesToSkip.addAll ( skipType ) ;^161^^^^^159^164^typesToSkip.add ( skipType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^typesToSkip.addAll ( type ) ;^161^^^^^159^164^typesToSkip.add ( skipType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^161^162^^^^159^164^typesToSkip.add ( skipType ) ; getTypes (  ) .union ( skipType, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^types.add ( skipType ) ;typesToSkip.add ( skipType ) ;^161^^^^^159^164^typesToSkip.add ( skipType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^addTypeToSkip ( top ) ;typesToSkip.add ( skipType ) ;^161^^^^^159^164^typesToSkip.add ( skipType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^addTypeToSkip ( newType ) ;typesToSkip.add ( skipType ) ;^161^^^^^159^164^typesToSkip.add ( skipType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^typesToSkip.addAll ( rootTypesToSkip ) ;typesToSkip.add ( skipType ) ;^161^^^^^159^164^typesToSkip.add ( skipType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^getTypes (  ) .union ( skipType, type ) ;typesToSkip.add ( skipType ) ;^161^^^^^159^164^typesToSkip.add ( skipType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^newTypesToSkip.add ( subType ) ;typesToSkip.add ( skipType ) ;^161^^^^^159^164^typesToSkip.add ( skipType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.typesToSkip.add ( type ) ;typesToSkip.add ( skipType ) ;^161^^^^^159^164^typesToSkip.add ( skipType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^rootTypesToSkip.add ( types.find ( subType )  ) ;typesToSkip.add ( skipType ) ;^161^^^^^159^164^typesToSkip.add ( skipType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^getTypes (  ) .union (  type ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^getTypes (  ) .union ( skipType ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^getTypes (  ) .union ( type, skipType ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^invalidate (  ) .union ( skipType, type ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^types.add ( skipType ) ;getTypes (  ) .union ( skipType, type ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^typesToSkip.add ( skipType ) ;getTypes (  ) .union ( skipType, type ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^getTypes (  ) .add ( top ) ;getTypes (  ) .union ( skipType, type ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^getTypes (  ) .union ( top, relatedType ) ;getTypes (  ) .union ( skipType, type ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.getTypes (  ) .add ( type ) ;getTypes (  ) .union ( skipType, type ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^while  ( false )  {^172^^^^^157^187^while  ( true )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P2_Replace_Operator]^if  ( !typesToSkip.contains ( subType ) || typesToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( !typesToSkip.contains ( newType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( !typesToSkip.contains ( typesToSkip ) && subType.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( !typesToSkip.contains ( subType ) && types.contains ( typesToSkip.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( !typesToSkip.contains ( subType ) && typesToSkipToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P6_Replace_Expression]^if  ( !typesToSkip.contains ( subType ) ) {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P6_Replace_Expression]^if  (  typesToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^if  ( !typesToSkip.addAll ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.add ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types .add ( newType )   )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P15_Unwrap_Block]^newTypesToSkip.add(subType);^188^189^190^191^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  { newTypesToSkip.add ( subType ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P16_Remove_Block]^^188^189^190^191^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  { newTypesToSkip.add ( subType ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^newTypesToSkip.add ( newType ) ;^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^newTypesToSkip .add ( subType )  ;^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^types.add ( skipType ) ;newTypesToSkip.add ( subType ) ;^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^typesToSkip.add ( skipType ) ;newTypesToSkip.add ( subType ) ;^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^addTypeToSkip ( top ) ;newTypesToSkip.add ( subType ) ;^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^addTypeToSkip ( newType ) ;newTypesToSkip.add ( subType ) ;^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^getTypes (  ) .add ( top ) ;newTypesToSkip.add ( subType ) ;^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^typesToSkip.addAll ( rootTypesToSkip ) ;newTypesToSkip.add ( subType ) ;^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.getTypes (  ) .add ( type ) ;newTypesToSkip.add ( subType ) ;^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.typesToSkip.add ( type ) ;newTypesToSkip.add ( subType ) ;^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^rootTypesToSkip.add ( types.find ( subType )  ) ;newTypesToSkip.add ( subType ) ;^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P2_Replace_Operator]^if  ( types.elements (  ) .size (  )  != originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^if  ( types.elements (  ) .size() - 0  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( types.elements (  ) .size (  )  == nextUniqueId )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( originalTypesSize.elements (  ) .size (  )  == types )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^if  ( types.elements (  ) .isNone (  )  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^if  ( types.allEquivalenceClasses (  ) .size (  )  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P15_Unwrap_Block]^break;^199^200^201^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  { break; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P16_Remove_Block]^^199^200^201^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  { break; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^Set<T> rootTypesToSkip = Sets .newHashSet (  )  ;^178^^^^^163^193^Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet (  ) ;Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^178^^^^^163^193^Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<T> allTypes = types.elements (  ) ;Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^178^^^^^163^193^Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet ( type ) ;Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^178^^^^^163^193^Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<T> newTypesToSkip = Sets.newHashSet (  ) ;Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^178^^^^^163^193^Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet (  ) ;Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^184^^^^^169^199^Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^184^^^^^169^199^Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<T> allTypes = types.elements (  ) ;Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^184^^^^^169^199^Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet ( type ) ;Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^184^^^^^169^199^Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^Set<T> allTypes = types.allEquivalenceClasses (  ) ;^185^^^^^170^200^Set<T> allTypes = types.elements (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet (  ) ;Set<T> allTypes = types.elements (  ) ;^185^^^^^170^200^Set<T> allTypes = types.elements (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;Set<T> allTypes = types.elements (  ) ;^185^^^^^170^200^Set<T> allTypes = types.elements (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<T> newTypesToSkip = Sets.newHashSet (  ) ;Set<T> allTypes = types.elements (  ) ;^185^^^^^170^200^Set<T> allTypes = types.elements (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P1_Replace_Type]^short  originalTypesSize = allTypes.size (  ) ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^int originalTypesSize = allTypes.size() + 6 ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^int originalTypesSize = allTypes.add (  ) ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^int originalTypesSize = allTypes .isEmpty (  )  ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P2_Replace_Operator]^checkState ( ++count == 10, "Stuck in loop expanding types to skip." ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^checkState ( ++count < originalTypesSize, "Stuck in loop expanding types to skip." ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^checkState ( ++count < 10, "tuck in loop expandintuck in loop expanding types to skip." ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^scheduleRenaming ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^178^^^^^163^193^Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^rootTypesToSkip.add ( types.find ( newType )  ) ;^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^rootTypesToSkip.add ( subType.find ( types )  ) ;^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^rootTypesToSkip .add ( subType )  ;^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^rootTypesToSkip.add ( types.add ( subType )  ) ;^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^rootTypesToSkip.add ( types .add ( newType )   ) ;^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^typesToSkip.add ( skipType ) ;rootTypesToSkip.add ( types.find ( subType )  ) ;^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^newTypesToSkip.add ( subType ) ;rootTypesToSkip.add ( types.find ( subType )  ) ;^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.typesToSkip.add ( type ) ;rootTypesToSkip.add ( types.find ( subType )  ) ;^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^typesToSkip.contains ( rootTypesToSkip ) ;^182^^^^^167^197^typesToSkip.addAll ( rootTypesToSkip ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^182^^^^^167^197^typesToSkip.addAll ( rootTypesToSkip ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^typesToSkip.add ( skipType ) ;typesToSkip.addAll ( rootTypesToSkip ) ;^182^^^^^167^197^typesToSkip.addAll ( rootTypesToSkip ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^newTypesToSkip.add ( subType ) ;typesToSkip.addAll ( rootTypesToSkip ) ;^182^^^^^167^197^typesToSkip.addAll ( rootTypesToSkip ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.typesToSkip.add ( type ) ;typesToSkip.addAll ( rootTypesToSkip ) ;^182^^^^^167^197^typesToSkip.addAll ( rootTypesToSkip ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^Set<T> newTypesToSkip = Sets .newHashSet (  )  ;^184^^^^^169^199^Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^184^185^^^^169^199^Set<T> newTypesToSkip = Sets.newHashSet (  ) ; Set<T> allTypes = types.elements (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^185^186^^^^170^200^Set<T> allTypes = types.elements (  ) ; int originalTypesSize = allTypes.size (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^int originalTypesSize = allTypes.size() + 1 ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^&& typesToSkip.contains ( types.find ( newType )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^&& subType.contains ( types.find ( typesToSkip )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^&& types.contains ( typesToSkip.find ( subType )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^&& typesToSkipToSkip.contains ( types.find ( subType )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^&& typesToSkip.addAll ( types.find ( subType )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^&& typesToSkip.contains ( types.add ( subType )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^&& typesToSkip.contains ( types.add ( newType )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^189^190^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  { newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^&& subTypeToSkip.contains ( types.find ( types )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^newTypesToSkip.add ( newType ) ;^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^types.add ( skipType ) ;newTypesToSkip.add ( subType ) ;^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^typesToSkip.add ( skipType ) ;newTypesToSkip.add ( subType ) ;^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^addTypeToSkip ( top ) ;newTypesToSkip.add ( subType ) ;^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^addTypeToSkip ( newType ) ;newTypesToSkip.add ( subType ) ;^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^getTypes (  ) .add ( top ) ;newTypesToSkip.add ( subType ) ;^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^typesToSkip.addAll ( rootTypesToSkip ) ;newTypesToSkip.add ( subType ) ;^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.getTypes (  ) .add ( type ) ;newTypesToSkip.add ( subType ) ;^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.typesToSkip.add ( type ) ;newTypesToSkip.add ( subType ) ;^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^rootTypesToSkip.add ( types.find ( subType )  ) ;newTypesToSkip.add ( subType ) ;^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^addTypeToSkip ( subType ) ;^195^^^^^180^210^addTypeToSkip ( newType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^shouldRename ( newType ) ;^195^^^^^180^210^addTypeToSkip ( newType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^195^^^^^180^210^addTypeToSkip ( newType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^types.add ( skipType ) ;addTypeToSkip ( newType ) ;^195^^^^^180^210^addTypeToSkip ( newType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^typesToSkip.add ( skipType ) ;addTypeToSkip ( newType ) ;^195^^^^^180^210^addTypeToSkip ( newType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^node.setString ( newName ) ;addTypeToSkip ( newType ) ;^195^^^^^180^210^addTypeToSkip ( newType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^addTypeToSkip ( top ) ;addTypeToSkip ( newType ) ;^195^^^^^180^210^addTypeToSkip ( newType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^rootTypes.put ( node, type ) ;addTypeToSkip ( newType ) ;^195^^^^^180^210^addTypeToSkip ( newType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.addTypeToSkip ( type ) ;addTypeToSkip ( newType ) ;^195^^^^^180^210^addTypeToSkip ( newType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^newTypesToSkip.add ( subType ) ;addTypeToSkip ( newType ) ;^195^^^^^180^210^addTypeToSkip ( newType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.typesToSkip.add ( type ) ;addTypeToSkip ( newType ) ;^195^^^^^180^210^addTypeToSkip ( newType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^if  ( types.elements (  ) .size() - 9  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^if  ( types.elements (  ) .size() + 7  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( 1.elements (  ) .size (  )  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P6_Replace_Expression]^if  ( !(typesToSkip.contains(subType)) && find(subType)) )  {^170^^^^^155^185^if  ( shouldRename (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P6_Replace_Expression]^if  ( size() == originalTypesSize )  {^170^^^^^155^185^if  ( shouldRename (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^if  ( invalidate (  )  )  {^170^^^^^155^185^if  ( shouldRename (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( prop.shouldRename ( rootType )  )  {^170^^^^^155^185^if  ( shouldRename (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( prop.shouldRename (  )  )  {^170^^^^^155^185^if  ( shouldRename (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^if  ( !typesToSkip .add ( newType )  && typesToSkip^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^if  ( !typesToSkip.contains ( newType ) ) {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^if  ( types.elements (  ) .size() - 2  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^if  ( types.elements (  )  .isEmpty (  )   == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^Set<T> allTypes = 2.elements (  ) ;^185^^^^^170^200^Set<T> allTypes = types.elements (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^int originalTypesSize = allTypes.size() + 5 ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P2_Replace_Operator]^checkState ( ++count <= 10, "Stuck in loop expanding types to skip." ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^checkState ( ++count < nextUniqueId, "Stuck in loop expanding types to skip." ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^checkState ( ++count < 10, "Stucktuck in loop expanding types to skip." ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^typesToSkip .add ( subType )  ;^182^^^^^167^197^typesToSkip.addAll ( rootTypesToSkip ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^typesToSkip .add ( newType )  ;^182^^^^^167^197^typesToSkip.addAll ( rootTypesToSkip ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^184^^^^^169^199^Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^int originalTypesSize = allTypes.size() - 0 ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^int originalTypesSize = this.size (  ) ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^if  ( !typesToSkip.addAll ( newType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^newTypesToSkip .add ( subType )  ;^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^if  ( types.elements (  ) .size() + 0  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( !typesToSkip.contains ( types ) && subTypeToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^if  (  0.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^if  ( types.elements (  ) .size() + 6  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P1_Replace_Type]^long  count = 0;^171^^^^^156^186^int count = 0;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^int count = -7;^171^^^^^156^186^int count = 0;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^int originalTypesSize = 0.size (  ) ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^checkState ( ++count < 7, "Stuck in loop expanding types to skip." ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^checkState ( ++count < 10, "Stuctuck in loop expanding types to skip." ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^rootTypesToSkip.add ( 3.find ( subType )  ) ;^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^Set<T> allTypes = 3.elements (  ) ;^185^^^^^170^200^Set<T> allTypes = types.elements (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^185^^^^^170^200^Set<T> allTypes = types.elements (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^int originalTypesSize = allTypes.size() + 7 ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^int originalTypesSize = 3.size (  ) ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^if  ( types.elements (  ) .size() + 5  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^if  ( types.elements (  ) .size() - 8  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^if  ( 0.elements (  ) .size (  )  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P2_Replace_Operator]^if  ( types.elements (  ) .size (  )  <= originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^int count = count;^171^^^^^156^186^int count = 0;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P1_Replace_Type]^long  originalTypesSize = allTypes.size (  ) ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^checkState ( ++count < count, "Stuck in loop expanding types to skip." ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^checkState ( ++count < 10, "ltuck in loop expanding types to skip." ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^rootTypesToSkip.add ( 4.find ( subType )  ) ;^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^int originalTypesSize = allTypes.size() + 2 ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^&& typesToSkip .add ( newType )   )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^&& nullToSkip.contains ( types.find ( subType )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^if  ( types.elements (  ) .size() - 4  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^if  ( types.elements (  ) .size() + 3  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P2_Replace_Operator]^return !skipRenaming || types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^208^209^^^^207^210^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P2_Replace_Operator]^return !skipRenaming && types == null && types.allEquivalenceClasses (  ) .size (  )  > 1;^208^209^^^^207^210^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P2_Replace_Operator]^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  >= 1;^208^209^^^^207^210^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > nextUniqueId;^208^209^^^^207^210^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size() + 0  > 1;^208^209^^^^207^210^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^return !showInvalidationWarnings && types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^208^209^^^^207^210^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .isNone (  )  > 1;^208^209^^^^207^210^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^return !skipRenaming && types != null && types.elements (  ) .size (  )  > 1;^208^209^^^^207^210^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^return !showInvalidationWarnings && types != null && types .elements (  )  .size (  )  > 1;^208^209^^^^207^210^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^&& types.allEquivalenceClasses (  ) .size() + 6  > 1;^209^^^^^207^210^&& types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^&& types.allEquivalenceClasses (  ) .isNone (  )  > 1;^209^^^^^207^210^&& types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^&& types.allEquivalenceClasses (  )  .isEmpty (  )   > 1;^209^^^^^207^210^&& types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^&& types.elements (  ) .size (  )  > 1;^209^^^^^207^210^&& types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^209^^^^^207^210^&& types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^&& types.allEquivalenceClasses (  ) .size() + 3  > 1;^209^^^^^207^210^&& types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P2_Replace_Operator]^return !skipRenaming || !typesToSkip.contains ( type ) ;^218^^^^^217^219^return !skipRenaming && !typesToSkip.contains ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^return !showInvalidationWarnings && !typesToSkip.contains ( type ) ;^218^^^^^217^219^return !skipRenaming && !typesToSkip.contains ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^return !skipRenaming && !typesToSkip.addAll ( type ) ;^218^^^^^217^219^return !skipRenaming && !typesToSkip.contains ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^return !skipRenaming && !typesToSkip .add ( type )  ;^218^^^^^217^219^return !skipRenaming && !typesToSkip.contains ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^return !skipRenaming || !typesToSkip.addAll ( type ) ;^218^^^^^217^219^return !skipRenaming && !typesToSkip.contains ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^218^^^^^217^219^return !skipRenaming && !typesToSkip.contains ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldRename [RETURN_TYPE] boolean   T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^skipRenaming = false;^227^^^^^225^230^skipRenaming = true;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] invalidate [RETURN_TYPE] boolean   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^types = false;^228^^^^^225^230^types = null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] invalidate [RETURN_TYPE] boolean   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^return skipRenaming;^229^^^^^225^230^return changed;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] invalidate [RETURN_TYPE] boolean   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( !showInvalidationWarnings )  {^242^^^^^241^251^if  ( !skipRenaming )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( prop.skipRenaming )  {^242^^^^^241^251^if  ( !skipRenaming )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P15_Unwrap_Block]^if (typeSystem.isInvalidatingType(type)) {    invalidate();    return false;}; renameNodes.add(node); rootTypes.put(node, type);^242^243^244^245^246^241^251^if  ( !skipRenaming )  { if  ( typeSystem.isInvalidatingType ( type )  )  { invalidate (  ) ; return false; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P16_Remove_Block]^^242^243^244^245^246^241^251^if  ( !skipRenaming )  { if  ( typeSystem.isInvalidatingType ( type )  )  { invalidate (  ) ; return false; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( typeSystemSystem.isInvalidatingType ( type )  )  {^243^^^^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( type.isInvalidatingType ( typeSystem )  )  {^243^^^^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^if  ( typeSystem.isTypeToSkip ( type )  )  {^243^^^^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^243^^^^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( typeSystem.isInvalidatingType ( top )  )  {^243^^^^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( typeSystem.isInvalidatingType ( topType )  )  {^243^^^^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( typeSystem.isTypeToSkip ( top )  )  {^243^^^^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P15_Unwrap_Block]^invalidate(); return false;^243^244^245^246^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  { invalidate (  ) ; return false; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P16_Remove_Block]^^243^244^245^246^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  { invalidate (  ) ; return false; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P13_Insert_Block]^if  ( typeSystem.isInvalidatingType ( topType )  )  {     return null; }^243^^^^^241^251^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^return true;^245^^^^^241^251^return false;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^shouldRename (  ) ;^244^^^^^241^251^invalidate (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^244^245^^^^241^251^invalidate (  ) ; return false;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.invalidate (  ) ;invalidate (  ) ;^244^^^^^241^251^invalidate (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^invalidatingTypes.add ( type ) ;invalidate (  ) ;^244^^^^^241^251^invalidate (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^addInvalidatingType ( alt ) ;invalidate (  ) ;^244^^^^^241^251^invalidate (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^244^^^^^241^251^invalidate (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^247^248^^^^241^251^renameNodes.add ( node ) ; rootTypes.put ( node, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^renameProperties (  ) ;renameNodes.add ( node ) ;^247^^^^^241^251^renameNodes.add ( node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^rootTypes.put (  type ) ;^248^^^^^241^251^rootTypes.put ( node, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^rootTypes.put ( node ) ;^248^^^^^241^251^rootTypes.put ( node, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^rootTypes.put ( type, node ) ;^248^^^^^241^251^rootTypes.put ( node, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^248^^^^^241^251^rootTypes.put ( node, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^types.add ( skipType ) ;rootTypes.put ( node, type ) ;^248^^^^^241^251^rootTypes.put ( node, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^addTypeToSkip ( newType ) ;rootTypes.put ( node, type ) ;^248^^^^^241^251^rootTypes.put ( node, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.getTypes (  ) .add ( type ) ;rootTypes.put ( node, type ) ;^248^^^^^241^251^rootTypes.put ( node, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.typesToSkip.add ( type ) ;rootTypes.put ( node, type ) ;^248^^^^^241^251^rootTypes.put ( node, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( null.isInvalidatingType ( type )  )  {^243^^^^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^if  ( 0.isTypeToSkip ( type )  )  {^243^^^^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^renameNodes .find ( type )  ;^247^^^^^241^251^renameNodes.add ( node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^return false;^250^^^^^241^251^return true;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P4_Replace_Constructor]^return return  new ConcreteType> ( compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  )   ) ;^258^259^^^^256^260^return new DisambiguateProperties<JSType> ( compiler, new JSTypeSystem ( compiler )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] forJSTypeSystem [RETURN_TYPE] DisambiguateProperties   AbstractCompiler compiler [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^return  new ConcreteType> ( compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  )   ) ;^258^259^^^^256^260^return new DisambiguateProperties<JSType> ( compiler, new JSTypeSystem ( compiler )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] forJSTypeSystem [RETURN_TYPE] DisambiguateProperties   AbstractCompiler compiler [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P4_Replace_Constructor]^return return  new JSType> ( compiler, new JSTypeSystem ( compiler )  )   )  ) ;^264^265^^^^262^266^return new DisambiguateProperties<ConcreteType> ( compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] forConcreteTypeSystem [RETURN_TYPE] DisambiguateProperties   AbstractCompiler compiler TightenTypes tt [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P4_Replace_Constructor]^return new DisambiguateProperties<ConcreteType> (  new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^264^265^^^^262^266^return new DisambiguateProperties<ConcreteType> ( compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] forConcreteTypeSystem [RETURN_TYPE] DisambiguateProperties   AbstractCompiler compiler TightenTypes tt [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P4_Replace_Constructor]^return new DisambiguateProperties<ConcreteType> ( compiler, new ConcreteTypeSystem (  compiler.getCodingConvention (  )  )  ) ;^264^265^^^^262^266^return new DisambiguateProperties<ConcreteType> ( compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] forConcreteTypeSystem [RETURN_TYPE] DisambiguateProperties   AbstractCompiler compiler TightenTypes tt [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^return new DisambiguateProperties<ConcreteType> ( tt, new ConcreteTypeSystem ( compiler, compiler.getCodingConvention (  )  )  ) ;^264^265^^^^262^266^return new DisambiguateProperties<ConcreteType> ( compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] forConcreteTypeSystem [RETURN_TYPE] DisambiguateProperties   AbstractCompiler compiler TightenTypes tt [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^return  new JSType> ( compiler, new JSTypeSystem ( compiler )  )   )  ) ;^264^265^^^^262^266^return new DisambiguateProperties<ConcreteType> ( compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] forConcreteTypeSystem [RETURN_TYPE] DisambiguateProperties   AbstractCompiler compiler TightenTypes tt [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^return new DisambiguateProperties<ConcreteType> ( compiler, new ConcreteTypeSystem ( tt, compiler .getTypeValidator (  )   )  ) ;^264^265^^^^262^266^return new DisambiguateProperties<ConcreteType> ( compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] forConcreteTypeSystem [RETURN_TYPE] DisambiguateProperties   AbstractCompiler compiler TightenTypes tt [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P4_Replace_Constructor]^compiler, new ConcreteTypeSystem (  compiler.getCodingConvention (  )  )  ) ;^265^^^^^262^266^compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] forConcreteTypeSystem [RETURN_TYPE] DisambiguateProperties   AbstractCompiler compiler TightenTypes tt [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P4_Replace_Constructor]^new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^265^^^^^262^266^compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] forConcreteTypeSystem [RETURN_TYPE] DisambiguateProperties   AbstractCompiler compiler TightenTypes tt [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^compiler, new ConcreteTypeSystem ( compiler, tt.getCodingConvention (  )  )  ) ;^265^^^^^262^266^compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] forConcreteTypeSystem [RETURN_TYPE] DisambiguateProperties   AbstractCompiler compiler TightenTypes tt [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^compiler, new ConcreteTypeSystem ( tt, compiler .getTypeValidator (  )   )  ) ;^265^^^^^262^266^compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] forConcreteTypeSystem [RETURN_TYPE] DisambiguateProperties   AbstractCompiler compiler TightenTypes tt [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^265^^^^^262^266^compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] forConcreteTypeSystem [RETURN_TYPE] DisambiguateProperties   AbstractCompiler compiler TightenTypes tt [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^for  ( TypeMismatch mis : compiler.getTypeValidator (  ) .getAlternatives (  )  )  {^279^^^^^278^288^for  ( TypeMismatch mis : compiler.getTypeValidator (  ) .getMismatches (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P7_Replace_Invocation]^for  ( TypeMismatch mis : compiler.getTypeRegistry (  ) .getMismatches (  )  )  {^279^^^^^278^288^for  ( TypeMismatch mis : compiler.getTypeValidator (  ) .getMismatches (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P14_Delete_Statement]^^279^280^281^282^^278^288^for  ( TypeMismatch mis : compiler.getTypeValidator (  ) .getMismatches (  )  )  { addInvalidatingType ( mis.first ) ; addInvalidatingType ( mis.second ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P7_Replace_Invocation]^forJSTypeSystem ( mis.first ) ;^280^^^^^278^288^addInvalidatingType ( mis.first ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P14_Delete_Statement]^^280^^^^^278^288^addInvalidatingType ( mis.first ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P11_Insert_Donor_Statement]^addInvalidatingType ( mis.second ) ;addInvalidatingType ( mis.first ) ;^280^^^^^278^288^addInvalidatingType ( mis.first ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P11_Insert_Donor_Statement]^typeSystem.addInvalidatingType ( type ) ;addInvalidatingType ( mis.first ) ;^280^^^^^278^288^addInvalidatingType ( mis.first ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P11_Insert_Donor_Statement]^invalidatingTypes.add ( type ) ;addInvalidatingType ( mis.first ) ;^280^^^^^278^288^addInvalidatingType ( mis.first ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P11_Insert_Donor_Statement]^addInvalidatingType ( alt ) ;addInvalidatingType ( mis.first ) ;^280^^^^^278^288^addInvalidatingType ( mis.first ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P7_Replace_Invocation]^forJSTypeSystem ( mis.second ) ;^281^^^^^278^288^addInvalidatingType ( mis.second ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P14_Delete_Statement]^^281^^^^^278^288^addInvalidatingType ( mis.second ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P11_Insert_Donor_Statement]^typeSystem.addInvalidatingType ( type ) ;addInvalidatingType ( mis.second ) ;^281^^^^^278^288^addInvalidatingType ( mis.second ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P11_Insert_Donor_Statement]^invalidatingTypes.add ( type ) ;addInvalidatingType ( mis.second ) ;^281^^^^^278^288^addInvalidatingType ( mis.second ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P11_Insert_Donor_Statement]^addInvalidatingType ( alt ) ;addInvalidatingType ( mis.second ) ;^281^^^^^278^288^addInvalidatingType ( mis.second ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P11_Insert_Donor_Statement]^addInvalidatingType ( mis.first ) ;addInvalidatingType ( mis.second ) ;^281^^^^^278^288^addInvalidatingType ( mis.second ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P7_Replace_Invocation]^StaticScope<T> scope = typeSystem .getFunctionScope ( externs )  ;^284^^^^^278^288^StaticScope<T> scope = typeSystem.getRootScope (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P8_Replace_Mix]^StaticScope<T> scope = typeSystem .getFunctionScope ( root )  ;^284^^^^^278^288^StaticScope<T> scope = typeSystem.getRootScope (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P14_Delete_Statement]^^284^285^^^^278^288^StaticScope<T> scope = typeSystem.getRootScope (  ) ; NodeTraversal.traverse ( compiler, externs, new FindExternProperties (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P4_Replace_Constructor]^NodeTraversal.traverse ( compiler, externs, NodeTraversal.traverse ( compiler, externs,  new FindRenameableProperties (  )   ) ;^285^^^^^278^288^NodeTraversal.traverse ( compiler, externs, new FindExternProperties (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, root, new FindExternProperties (  )  ) ;^285^^^^^278^288^NodeTraversal.traverse ( compiler, externs, new FindExternProperties (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new FindExternProperties (  )  ) ;^285^^^^^278^288^NodeTraversal.traverse ( compiler, externs, new FindExternProperties (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P5_Replace_Variable]^NodeTraversal.traverse (  externs, new FindExternProperties (  )  ) ;^285^^^^^278^288^NodeTraversal.traverse ( compiler, externs, new FindExternProperties (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P5_Replace_Variable]^NodeTraversal.traverse ( externs, compiler, new FindExternProperties (  )  ) ;^285^^^^^278^288^NodeTraversal.traverse ( compiler, externs, new FindExternProperties (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P14_Delete_Statement]^^285^^^^^278^288^NodeTraversal.traverse ( compiler, externs, new FindExternProperties (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P4_Replace_Constructor]^NodeTraversal.traverse ( compiler, root, NodeTraversal.traverse ( compiler, root,  new FindExternProperties (  )   ) ;^286^^^^^278^288^NodeTraversal.traverse ( compiler, root, new FindRenameableProperties (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, new FindRenameableProperties (  )  ) ;^286^^^^^278^288^NodeTraversal.traverse ( compiler, root, new FindRenameableProperties (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new FindRenameableProperties (  )  ) ;^286^^^^^278^288^NodeTraversal.traverse ( compiler, root, new FindRenameableProperties (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new FindRenameableProperties (  )  ) ;^286^^^^^278^288^NodeTraversal.traverse ( compiler, root, new FindRenameableProperties (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new FindRenameableProperties (  )  ) ;^286^^^^^278^288^NodeTraversal.traverse ( compiler, root, new FindRenameableProperties (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P14_Delete_Statement]^^286^^^^^278^288^NodeTraversal.traverse ( compiler, root, new FindRenameableProperties (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P14_Delete_Statement]^^287^^^^^278^288^renameProperties (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P11_Insert_Donor_Statement]^typeName = type.toString (  ) ;renameProperties (  ) ;^287^^^^^278^288^renameProperties (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P11_Insert_Donor_Statement]^renameNodes.add ( node ) ;renameProperties (  ) ;^287^^^^^278^288^renameProperties (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P11_Insert_Donor_Statement]^return scopes.peek (  ) ;renameProperties (  ) ;^287^^^^^278^288^renameProperties (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P11_Insert_Donor_Statement]^return properties.get ( name ) ;renameProperties (  ) ;^287^^^^^278^288^renameProperties (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[P5_Replace_Variable]^type = alt.restrictByNotNullOrUndefined (  ) ;^294^^^^^293^307^type = type.restrictByNotNullOrUndefined (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;type = type.restrictByNotNullOrUndefined (  ) ;^294^^^^^293^307^type = type.restrictByNotNullOrUndefined (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^jsType = jsType.restrictByNotNullOrUndefined (  ) ;type = type.restrictByNotNullOrUndefined (  ) ;^294^^^^^293^307^type = type.restrictByNotNullOrUndefined (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^type = type .isFunctionPrototypeType (  )  ;^294^^^^^293^307^type = type.restrictByNotNullOrUndefined (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^type = alt .isFunctionPrototypeType (  )  ;^294^^^^^293^307^type = type.restrictByNotNullOrUndefined (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^294^^^^^293^307^type = type.restrictByNotNullOrUndefined (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^return type.restrictByNotNullOrUndefined (  ) ;type = type.restrictByNotNullOrUndefined (  ) ;^294^^^^^293^307^type = type.restrictByNotNullOrUndefined (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P2_Replace_Operator]^if  ( type  ^  UnionType )  {^295^^^^^293^307^if  ( type instanceof UnionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( ! ( type instanceof ObjectType )  )  {^295^^^^^293^307^if  ( type instanceof UnionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( objType instanceof FunctionType )  {^295^^^^^293^307^if  ( type instanceof UnionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P9_Replace_Statement]^if  ( jsType instanceof UnionType )  {^295^^^^^293^307^if  ( type instanceof UnionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P15_Unwrap_Block]^for (com.google.javascript.rhino.jstype.JSType alt : ((com.google.javascript.rhino.jstype.UnionType) (type)).getAlternates()) {    addInvalidatingType(alt);}; return ;^295^296^297^298^^293^307^if  ( type instanceof UnionType )  { for  ( JSType alt :  (  ( UnionType )  type ) .getAlternates (  )  )  { addInvalidatingType ( alt ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P16_Remove_Block]^^295^296^297^298^^293^307^if  ( type instanceof UnionType )  { for  ( JSType alt :  (  ( UnionType )  type ) .getAlternates (  )  )  { addInvalidatingType ( alt ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P13_Insert_Block]^if  ( jsType instanceof UnionType )  {     for  ( JSType alt :  (  ( UnionType )   ( jsType )  ) .getAlternates (  )  )  {         return maybeAddAutoboxes ( cType, alt, prop ) ;     } }^295^^^^^293^307^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P13_Insert_Block]^if  ( type instanceof UnionType )  {     JSType> types = newHashSet ( type ) ;     for  ( JSType alt :  (  ( UnionType )   ( type )  ) .getAlternates (  )  )  {         types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ;     }     return copyOf ( types ) ; }^295^^^^^293^307^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^for  ( JSType alt :  (  ( UnionType )  type ) .getNativeObjectType (  )  )  {^296^^^^^293^307^for  ( JSType alt :  (  ( UnionType )  type ) .getAlternates (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^296^297^298^^^293^307^for  ( JSType alt :  (  ( UnionType )  type ) .getAlternates (  )  )  { addInvalidatingType ( alt ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^addInvalidatingType ( type ) ;^297^^^^^293^307^addInvalidatingType ( alt ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^forJSTypeSystem ( alt ) ;^297^^^^^293^307^addInvalidatingType ( alt ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^297^^^^^293^307^addInvalidatingType ( alt ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.invalidate (  ) ;addInvalidatingType ( alt ) ;^297^^^^^293^307^addInvalidatingType ( alt ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^addInvalidatingType ( mis.second ) ;addInvalidatingType ( alt ) ;^297^^^^^293^307^addInvalidatingType ( alt ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^typeSystem.addInvalidatingType ( type ) ;addInvalidatingType ( alt ) ;^297^^^^^293^307^addInvalidatingType ( alt ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^invalidate (  ) ;addInvalidatingType ( alt ) ;^297^^^^^293^307^addInvalidatingType ( alt ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^invalidatingTypes.add ( type ) ;addInvalidatingType ( alt ) ;^297^^^^^293^307^addInvalidatingType ( alt ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^addInvalidatingType ( mis.first ) ;addInvalidatingType ( alt ) ;^297^^^^^293^307^addInvalidatingType ( alt ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^typeSystem.addInvalidatingType ( alt ) ;^302^^^^^293^307^typeSystem.addInvalidatingType ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^typeSystem.getFunctionScope ( type ) ;^302^^^^^293^307^typeSystem.addInvalidatingType ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^typeSystem.getFunctionScope ( alt ) ;^302^^^^^293^307^typeSystem.addInvalidatingType ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^302^^^^^293^307^typeSystem.addInvalidatingType ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P12_Insert_Condition]^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  { typeSystem.addInvalidatingType ( type ) ; }^302^^^^^293^307^typeSystem.addInvalidatingType ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P12_Insert_Condition]^if  ( typeSystem.isInvalidatingType ( type )  )  { typeSystem.addInvalidatingType ( type ) ; }^302^^^^^293^307^typeSystem.addInvalidatingType ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P12_Insert_Condition]^if  ( typeSystem.isInvalidatingType ( top )  )  { typeSystem.addInvalidatingType ( type ) ; }^302^^^^^293^307^typeSystem.addInvalidatingType ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P12_Insert_Condition]^if  ( typeSystem.isInvalidatingType ( topType )  )  { typeSystem.addInvalidatingType ( type ) ; }^302^^^^^293^307^typeSystem.addInvalidatingType ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^ObjectType objType = ObjectType.cast ( alt ) ;^303^^^^^293^307^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^ObjectType objType = ObjectType.hasOwnProperty ( type ) ;^303^^^^^293^307^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^ObjectType objType = ObjectType .getConstructor (  )  ;^303^^^^^293^307^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^ObjectType objSkipType = skipType.toObjectType (  ) ;ObjectType objType = ObjectType.cast ( type ) ;^303^^^^^293^307^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet ( type ) ;ObjectType objType = ObjectType.cast ( type ) ;^303^^^^^293^307^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^ObjectType objType = type.toObjectType (  ) ;ObjectType objType = ObjectType.cast ( type ) ;^303^^^^^293^307^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^303^^^^^293^307^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P2_Replace_Operator]^if  ( objType != null || objType.getImplicitPrototype (  )  != null )  {^304^^^^^293^307^if  ( objType != null && objType.getImplicitPrototype (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P2_Replace_Operator]^if  ( objType == null && objType.getImplicitPrototype (  )  != null )  {^304^^^^^293^307^if  ( objType != null && objType.getImplicitPrototype (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P2_Replace_Operator]^if  ( objType != null && objType.getImplicitPrototype (  )  == null )  {^304^^^^^293^307^if  ( objType != null && objType.getImplicitPrototype (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P6_Replace_Expression]^if  ( objType != null ) {^304^^^^^293^307^if  ( objType != null && objType.getImplicitPrototype (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P6_Replace_Expression]^if  (  objType.getImplicitPrototype (  )  != null )  {^304^^^^^293^307^if  ( objType != null && objType.getImplicitPrototype (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^if  ( objType != null && objType.hasOwnProperty (  )  != null )  {^304^^^^^293^307^if  ( objType != null && objType.getImplicitPrototype (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^if  ( objType != null && objType .getConstructor (  )   != null )  {^304^^^^^293^307^if  ( objType != null && objType.getImplicitPrototype (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^if  (  objType.hasOwnProperty (  )  != this )  {^304^^^^^293^307^if  ( objType != null && objType.getImplicitPrototype (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P15_Unwrap_Block]^typeSystem.addInvalidatingType(objType.getImplicitPrototype());^304^305^306^^^293^307^if  ( objType != null && objType.getImplicitPrototype (  )  != null )  { typeSystem.addInvalidatingType ( objType.getImplicitPrototype (  )  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P16_Remove_Block]^^304^305^306^^^293^307^if  ( objType != null && objType.getImplicitPrototype (  )  != null )  { typeSystem.addInvalidatingType ( objType.getImplicitPrototype (  )  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^typeSystem.getFunctionScope ( objType.getImplicitPrototype (  )  ) ;^305^^^^^293^307^typeSystem.addInvalidatingType ( objType.getImplicitPrototype (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^typeSystem.addInvalidatingType ( objType.hasOwnProperty (  )  ) ;^305^^^^^293^307^typeSystem.addInvalidatingType ( objType.getImplicitPrototype (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^305^^^^^293^307^typeSystem.addInvalidatingType ( objType.getImplicitPrototype (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P12_Insert_Condition]^if  ( typeSystem.isInvalidatingType ( topType )  )  { typeSystem.addInvalidatingType ( objType.getImplicitPrototype (  )  ) ; }^305^^^^^293^307^typeSystem.addInvalidatingType ( objType.getImplicitPrototype (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  JSType  alt  type  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^if  ( !properties.get ( name )  )  {^312^^^^^311^316^if  ( !properties.containsKey ( name )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getProperty [RETURN_TYPE] DisambiguateProperties$Property   String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P15_Unwrap_Block]^properties.put(name, new Property(name));^312^313^314^^^311^316^if  ( !properties.containsKey ( name )  )  { properties.put ( name, new Property ( name )  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getProperty [RETURN_TYPE] DisambiguateProperties$Property   String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P16_Remove_Block]^^312^313^314^^^311^316^if  ( !properties.containsKey ( name )  )  { properties.put ( name, new Property ( name )  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getProperty [RETURN_TYPE] DisambiguateProperties$Property   String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^properties.put (  new Property ( name )  ) ;^313^^^^^311^316^properties.put ( name, new Property ( name )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getProperty [RETURN_TYPE] DisambiguateProperties$Property   String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^313^^^^^311^316^properties.put ( name, new Property ( name )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getProperty [RETURN_TYPE] DisambiguateProperties$Property   String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^return name.get ( properties ) ;^315^^^^^311^316^return properties.get ( name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getProperty [RETURN_TYPE] DisambiguateProperties$Property   String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^return properties.containsKey ( name ) ;^315^^^^^311^316^return properties.get ( name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getProperty [RETURN_TYPE] DisambiguateProperties$Property   String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^return null.get ( name ) ;^315^^^^^311^316^return properties.get ( name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getProperty [RETURN_TYPE] DisambiguateProperties$Property   String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^315^^^^^311^316^return properties.get ( name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getProperty [RETURN_TYPE] DisambiguateProperties$Property   String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^return typeSystem.getTypeWithProperty ( name, type ) ;^320^^^^^319^321^return typeSystem.getTypeWithProperty ( field, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] T   String field T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^return typeSystem.getTypeWithProperty (  type ) ;^320^^^^^319^321^return typeSystem.getTypeWithProperty ( field, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] T   String field T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^return typeSystem.getTypeWithProperty ( field ) ;^320^^^^^319^321^return typeSystem.getTypeWithProperty ( field, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] T   String field T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^return field.getTypeWithProperty ( typeSystem, type ) ;^320^^^^^319^321^return typeSystem.getTypeWithProperty ( field, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] T   String field T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^return typeSystemSystem.getTypeWithProperty ( field, type ) ;^320^^^^^319^321^return typeSystem.getTypeWithProperty ( field, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] T   String field T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^return type.getTypeWithProperty ( field, typeSystem ) ;^320^^^^^319^321^return typeSystem.getTypeWithProperty ( field, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] T   String field T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^return fieldSystem.getTypeWithProperty ( type, type ) ;^320^^^^^319^321^return typeSystem.getTypeWithProperty ( field, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] T   String field T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^320^^^^^319^321^return typeSystem.getTypeWithProperty ( field, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] T   String field T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P3_Replace_Literal]^return false;^329^^^^^328^330^return true;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P15_Unwrap_Block]^scopes.push(typeSystem.getRootScope());^333^334^335^336^337^332^338^if  ( t.inGlobalScope (  )  )  { scopes.push ( typeSystem.getRootScope (  )  ) ; } else { scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P16_Remove_Block]^^333^334^335^336^337^332^338^if  ( t.inGlobalScope (  )  )  { scopes.push ( typeSystem.getRootScope (  )  ) ; } else { scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^scopes .pop (  )   ) ;^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^scopes.push ( typeSystem.addInvalidatingType ( t.getScopeRoot (  )  )  ) ;^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^scopes.push ( typeSystem.getRootScope (  )  ) ;scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^T type = typeSystem.getType ( getScope (  ) , n, name ) ;scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^scopes.push ( typeSystemypeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^scopes.push ( t.getFunctionScope ( typeSystem.getScopeRoot (  )  )  ) ;^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^scopes.push ( typeSystem .getRootScope (  )   ) ;^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^scopes.push ( typeSystem.getFunctionScope ( t .getSourceName (  )   )  ) ;^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^scopes.push ( null.getRootScope (  )  ) ;^334^^^^^332^338^scopes.push ( typeSystem.getRootScope (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^334^^^^^332^338^scopes.push ( typeSystem.getRootScope (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^scopes.push (  ) ;^341^^^^^340^342^scopes.pop (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^341^^^^^340^342^scopes.pop (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^return scopes.peek (  ) ;scopes.pop (  ) ;^341^^^^^340^342^scopes.pop (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^return null.peek (  ) ;^346^^^^^345^347^return scopes.peek (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^return scopes.push (  ) ;^346^^^^^345^347^return scopes.peek (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^346^^^^^345^347^return scopes.peek (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.GETPROP )  {^356^^^^^355^374^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.GETPROP )  {^356^^^^^355^374^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.4 )  {^356^^^^^355^374^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P6_Replace_Expression]^if  ( type = typeSystem.getInstanceFromPrototype(type) != null )  {^356^^^^^355^374^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  ( n.setString (  )  == Token.GETPROP )  {^356^^^^^355^374^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  ( n.getTypeWithProperty (  )  == Token.GETPROP )  {^356^^^^^355^374^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  ( n .getType (  )   == Token.GETPROP )  {^356^^^^^355^374^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( STRING )  )  {     String name = child.getString (  ) ;     T type = typeSystem.getType ( getScope (  ) , n, name ) ;     Property prop = getProperty ( name ) ;     if  ( ! ( prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  )  {         if  ( showInvalidationWarnings )  {             compiler.report ( make ( t.getSourceName (  ) , child, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;         }     } }^356^^^^^355^374^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  ( typeSystem.isTypeToSkip ( type )  )  {^360^^^^^355^374^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^if  ( 0.isInvalidatingType ( type )  )  {^360^^^^^355^374^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^360^^^^^355^374^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( typeSystem.isInvalidatingType ( top )  )  {^360^^^^^355^374^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( typeSystem.isInvalidatingType ( topType )  )  {^360^^^^^355^374^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( typeSystem.isTypeToSkip ( top )  )  {^360^^^^^355^374^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {     prop.getTypes (  ) .add ( type ) ;     add ( type ) ; }^360^^^^^355^374^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P2_Replace_Operator]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  == null )  {^368^^^^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  (  ( typeSystem = type.getInstanceFromPrototype ( type )  )  != null )  {^368^^^^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  (  ( type = typeSystem.getTypesToSkipForType ( type )  )  != null )  {^368^^^^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != true )  {^368^^^^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P15_Unwrap_Block]^prop.getTypes().add(type); prop.typesToSkip.add(type);^368^369^370^371^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  { prop.getTypes (  ) .add ( type ) ; prop.typesToSkip.add ( type ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P16_Remove_Block]^^368^369^370^371^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  { prop.getTypes (  ) .add ( type ) ; prop.typesToSkip.add ( type ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( typeSystem.isInvalidatingType ( type )  )  {     prop.invalidate (  ) ; }else {     prop.addTypeToSkip ( type ) ;     if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {         prop.getTypes (  ) .add ( type ) ;         add ( type ) ;     } }^368^^^^^355^374^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^prop.getTypes (  ) .union ( type ) ;^369^^^^^355^374^prop.getTypes (  ) .add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^prop.addTypeToSkip (  ) .add ( type ) ;^369^^^^^355^374^prop.getTypes (  ) .add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^369^370^^^^355^374^prop.getTypes (  ) .add ( type ) ; prop.typesToSkip.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^getTypes (  ) .add ( top ) ;prop.getTypes (  ) .add ( type ) ;^369^^^^^355^374^prop.getTypes (  ) .add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^rootTypes.put ( node, type ) ;prop.getTypes (  ) .add ( type ) ;^369^^^^^355^374^prop.getTypes (  ) .add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^prop.addTypeToSkip ( type ) ;prop.getTypes (  ) .add ( type ) ;^369^^^^^355^374^prop.getTypes (  ) .add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^getTypes (  ) .union ( skipType, type ) ;prop.getTypes (  ) .add ( type ) ;^369^^^^^355^374^prop.getTypes (  ) .add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^newTypesToSkip.add ( subType ) ;prop.getTypes (  ) .add ( type ) ;^369^^^^^355^374^prop.getTypes (  ) .add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^prop.typesToSkip.add ( type ) ;prop.getTypes (  ) .add ( type ) ;^369^^^^^355^374^prop.getTypes (  ) .add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^prop .addType ( type , type , type )  .add ( type ) ;^369^^^^^355^374^prop.getTypes (  ) .add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^369^^^^^355^374^prop.getTypes (  ) .add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^370^^^^^355^374^prop.typesToSkip.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^types.add ( skipType ) ;prop.typesToSkip.add ( type ) ;^370^^^^^355^374^prop.typesToSkip.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^typesToSkip.add ( skipType ) ;prop.typesToSkip.add ( type ) ;^370^^^^^355^374^prop.typesToSkip.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^addTypeToSkip ( top ) ;prop.typesToSkip.add ( type ) ;^370^^^^^355^374^prop.typesToSkip.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^addTypeToSkip ( newType ) ;prop.typesToSkip.add ( type ) ;^370^^^^^355^374^prop.typesToSkip.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^getTypes (  ) .add ( top ) ;prop.typesToSkip.add ( type ) ;^370^^^^^355^374^prop.typesToSkip.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^typesToSkip.addAll ( rootTypesToSkip ) ;prop.typesToSkip.add ( type ) ;^370^^^^^355^374^prop.typesToSkip.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^prop.getTypes (  ) .add ( type ) ;prop.typesToSkip.add ( type ) ;^370^^^^^355^374^prop.typesToSkip.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^rootTypes.put ( node, type ) ;prop.typesToSkip.add ( type ) ;^370^^^^^355^374^prop.typesToSkip.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^prop.addTypeToSkip ( type ) ;prop.typesToSkip.add ( type ) ;^370^^^^^355^374^prop.typesToSkip.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^prop.expandTypesToSkip (  ) ;prop.typesToSkip.add ( type ) ;^370^^^^^355^374^prop.typesToSkip.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^newTypesToSkip.add ( subType ) ;prop.typesToSkip.add ( type ) ;^370^^^^^355^374^prop.typesToSkip.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^rootTypesToSkip.add ( types.find ( subType )  ) ;prop.typesToSkip.add ( type ) ;^370^^^^^355^374^prop.typesToSkip.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^if  (  ( type =  nullSystem.getInstanceFromProtonull ( null )  )  !^368^^^^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^prop.checkState ( type ) ;^363^^^^^355^374^prop.addTypeToSkip ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^prop .expandTypesToSkip (  )  ;^363^^^^^355^374^prop.addTypeToSkip ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^363^^^^^355^374^prop.addTypeToSkip ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^types.add ( skipType ) ;prop.addTypeToSkip ( type ) ;^363^^^^^355^374^prop.addTypeToSkip ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^addTypeToSkip ( top ) ;prop.addTypeToSkip ( type ) ;^363^^^^^355^374^prop.addTypeToSkip ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^addTypeToSkip ( newType ) ;prop.addTypeToSkip ( type ) ;^363^^^^^355^374^prop.addTypeToSkip ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^prop.getTypes (  ) .add ( type ) ;prop.addTypeToSkip ( type ) ;^363^^^^^355^374^prop.addTypeToSkip ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^prop.expandTypesToSkip (  ) ;prop.addTypeToSkip ( type ) ;^363^^^^^355^374^prop.addTypeToSkip ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^prop.addType ( type, topType, relatedType ) ;prop.addTypeToSkip ( type ) ;^363^^^^^355^374^prop.addTypeToSkip ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^prop.typesToSkip.add ( type ) ;prop.addTypeToSkip ( type ) ;^363^^^^^355^374^prop.addTypeToSkip ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^prop.getTypes (  )  .add ( type )  ;^369^^^^^355^374^prop.getTypes (  ) .add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^prop.typesToSkip .add ( type )  ;^370^^^^^355^374^prop.typesToSkip.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^prop.shouldRename (  ) ;^361^^^^^355^374^prop.invalidate (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^361^^^^^355^374^prop.invalidate (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^invalidate (  ) ;prop.invalidate (  ) ;^361^^^^^355^374^prop.invalidate (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^addInvalidatingType ( alt ) ;prop.invalidate (  ) ;^361^^^^^355^374^prop.invalidate (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != false )  {^368^^^^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P1_Replace_Type]^char field = n.getLastChild (  ) .getchar (  ) ;^357^^^^^355^374^String field = n.getLastChild (  ) .getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^String field = parent.getLastChild (  ) .getString (  ) ;^357^^^^^355^374^String field = n.getLastChild (  ) .getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^String field = n.getLastChild (  ) .getNativeObjectType (  ) ;^357^^^^^355^374^String field = n.getLastChild (  ) .getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^String field = n.getLastChild (  )  .getAlternatives (  )  ;^357^^^^^355^374^String field = n.getLastChild (  ) .getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^String field = n.setString (  ) .getString (  ) ;^357^^^^^355^374^String field = n.getLastChild (  ) .getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;String field = n.getLastChild (  ) .getString (  ) ;^357^^^^^355^374^String field = n.getLastChild (  ) .getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^String name = n.getLastChild (  ) .getString (  ) ;String field = n.getLastChild (  ) .getString (  ) ;^357^^^^^355^374^String field = n.getLastChild (  ) .getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) , parent.getFirstChild (  ) , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) .getFirstChild (  ) , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  )  ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) , field.getFirstChild (  ) , n ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = field.getType ( getScope (  ) , n.getFirstChild (  ) , typeSystem ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = n.getType ( getScope (  ) , typeSystem.getFirstChild (  ) , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem.getTypeWithProperty ( getScope (  ) , n.getFirstChild (  ) , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem .getType (  )  , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem.getType ( AbstractScopingCallback (  ) , n.getFirstChild (  ) , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem.getType ( getScope (  ) , n.setString (  ) , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem.getType ( getScope (  ) , n .getLastChild (  )  , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^T type = typeSystem.getType ( getScope (  ) , n, name ) ;T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^Property prop = getProperty ( name ) ;^359^^^^^355^374^Property prop = getProperty ( field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^Property prop = checkState ( field ) ;^359^^^^^355^374^Property prop = getProperty ( field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^ConcreteType ret = getTypeWithProperty ( field, t ) ;Property prop = getProperty ( field ) ;^359^^^^^355^374^Property prop = getProperty ( field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^Property prop = entry.getValue (  ) ;Property prop = getProperty ( field ) ;^359^^^^^355^374^Property prop = getProperty ( field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^Property prop = getProperty ( name ) ;Property prop = getProperty ( field ) ;^359^^^^^355^374^Property prop = getProperty ( field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^String field = parent.setString (  ) .getString (  ) ;^357^^^^^355^374^String field = n.getLastChild (  ) .getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^357^358^^^^355^374^String field = n.getLastChild (  ) .getString (  ) ; T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^String field = n .getFirstChild (  )  .getString (  ) ;^357^^^^^355^374^String field = n.getLastChild (  ) .getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^358^359^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ; Property prop = getProperty ( field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^359^^^^^355^374^Property prop = getProperty ( field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( typeSystemSystem.isInvalidatingType ( type )  )  {^360^^^^^355^374^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( type.isInvalidatingType ( typeSystem )  )  {^360^^^^^355^374^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( typeSystem.isInvalidatingType ( topType )  )  {     return null; }^360^^^^^355^374^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^prop .checkState ( changed , field , field )  ;^361^^^^^355^374^prop.invalidate (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^prop .checkState ( showInvalidationWarnings , field , field )  ;^361^^^^^355^374^prop.invalidate (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( 3.isInvalidatingType ( type )  )  {^360^^^^^355^374^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != this )  {^368^^^^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = null.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^Property prop = checkState ( name ) ;^359^^^^^355^374^Property prop = getProperty ( field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^357^^^^^355^374^String field = n.getLastChild (  ) .getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.GETPROP )  {^384^^^^^383^389^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P2_Replace_Operator]^if  ( n.getType (  )  < Token.GETPROP )  {^384^^^^^383^389^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.GETPROP )  {^384^^^^^383^389^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P6_Replace_Expression]^if  ( n.getType() == OBJECTLIT )  {^384^^^^^383^389^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^if  ( n.setString (  )  == Token.GETPROP )  {^384^^^^^383^389^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P15_Unwrap_Block]^handleGetProp(t, n);^384^385^386^387^388^383^389^if  ( n.getType (  )  == Token.GETPROP )  { handleGetProp ( t, n ) ; } else if  ( n.getType (  )  == Token.OBJECTLIT )  { handleObjectLit ( t, n ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P16_Remove_Block]^^384^385^386^387^388^383^389^if  ( n.getType (  )  == Token.GETPROP )  { handleGetProp ( t, n ) ; } else if  ( n.getType (  )  == Token.OBJECTLIT )  { handleObjectLit ( t, n ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P2_Replace_Operator]^} else if  ( n.getType (  )  != Token.OBJECTLIT )  {^386^^^^^383^389^} else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.OBJECTLIT )  {^386^^^^^383^389^} else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P6_Replace_Expression]^} else {^386^^^^^383^389^} else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^} else if  ( n.setString (  )  == Token.OBJECTLIT )  {^386^^^^^383^389^} else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^} else if  ( n.setString (  )  == Token.3 )  {^386^^^^^383^389^} else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P15_Unwrap_Block]^handleObjectLit(t, n);^386^387^388^^^383^389^} else if  ( n.getType (  )  == Token.OBJECTLIT )  { handleObjectLit ( t, n ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P16_Remove_Block]^^386^387^388^^^383^389^} else if  ( n.getType (  )  == Token.OBJECTLIT )  { handleObjectLit ( t, n ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^handleObjectLit ( t, parent ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^handleObjectLit (  n ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^handleObjectLit ( t ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^handleObjectLit ( n, t ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^handleGetProp ( t, n ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^handleGetProp ( t, parent ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^handleGetProp ( t, n ) ;handleObjectLit ( t, n ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P8_Replace_Mix]^} else if  ( parent.setString (  )  == Token.OBJECTLIT )  {^386^^^^^383^389^} else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^handleGetProp ( t, parent ) ;^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^handleGetProp (  n ) ;^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^handleGetProp ( t ) ;^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^handleGetProp ( n, t ) ;^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^handleObjectLit ( t, n ) ;^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P14_Delete_Statement]^^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P11_Insert_Donor_Statement]^handleObjectLit ( t, n ) ;handleGetProp ( t, n ) ;^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P5_Replace_Variable]^} else if  ( n.getType (  )  == Token.1 )  {^386^^^^^383^389^} else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P7_Replace_Invocation]^if  ( n .getType ( null , n , name )   == Token.GETPROP )  {^384^^^^^383^389^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[P1_Replace_Type]^char name = n.getLastChild (  ) .getchar (  ) ;^395^^^^^394^407^String name = n.getLastChild (  ) .getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^String name = n.getLastChild (  ) .getNativeObjectType (  ) ;^395^^^^^394^407^String name = n.getLastChild (  ) .getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^String name = n.getLastChild (  )  .getAlternatives (  )  ;^395^^^^^394^407^String name = n.getLastChild (  ) .getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^String name = n.setString (  ) .getString (  ) ;^395^^^^^394^407^String name = n.getLastChild (  ) .getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^String name = n .getFirstChild (  )  .getString (  ) ;^395^^^^^394^407^String name = n.getLastChild (  ) .getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^String field = n.getLastChild (  ) .getString (  ) ;String name = n.getLastChild (  ) .getString (  ) ;^395^^^^^394^407^String name = n.getLastChild (  ) .getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;String name = n.getLastChild (  ) .getString (  ) ;^395^^^^^394^407^String name = n.getLastChild (  ) .getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^395^^^^^394^407^String name = n.getLastChild (  ) .getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^395^396^^^^394^407^String name = n.getLastChild (  ) .getString (  ) ; T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = 4.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) .getFirstChild (  ) , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  )  ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) , name.getFirstChild (  ) , n ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = name.getType ( getScope (  ) , n.getFirstChild (  ) , typeSystem ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = n.getType ( getScope (  ) , typeSystem.getFirstChild (  ) , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem.getTypeWithProperty ( getScope (  ) , n.getFirstChild (  ) , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem .getType (  )  , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem.getType ( AbstractScopingCallback (  ) , n.getFirstChild (  ) , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem.getType ( getScope (  ) , n.setString (  ) , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem.getType ( getScope (  ) , n .getLastChild (  )  , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^T type = typeSystem.getType ( getScope (  ) , n, name ) ;T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^T type = typeSystem .getType (  )  , field ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^Property prop = getProperty ( field ) ;^398^^^^^394^407^Property prop = getProperty ( name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^Property prop = checkState ( name ) ;^398^^^^^394^407^Property prop = getProperty ( name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^Property prop = checkState ( field ) ;^398^^^^^394^407^Property prop = getProperty ( name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^Property prop = getProperty ( field ) ;Property prop = getProperty ( name ) ;^398^^^^^394^407^Property prop = getProperty ( name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^Property prop = entry.getValue (  ) ;Property prop = getProperty ( name ) ;^398^^^^^394^407^Property prop = getProperty ( name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^398^^^^^394^407^Property prop = getProperty ( name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^return properties.get ( name ) ;Property prop = getProperty ( name ) ;^398^^^^^394^407^Property prop = getProperty ( name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t,  type, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, typeull )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty (  prop, type, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop,  null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( prop, t, type, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( type.getLastChild (  ) , processProperty ( t, prop, n, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  ( !prop.scheduleRenaming ( n.setString (  ) , processProperty ( t, prop, type, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, true )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( skipRenaming )  {^401^^^^^394^407^if  ( showInvalidationWarnings )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t.getSourceName(), n, com.google.javascript.jscomp.DisambiguateProperties.INVALIDATION, name, (type == null ? "null" : type.toString()), n.toString()));^401^402^403^404^405^394^407^if  ( showInvalidationWarnings )  { compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P16_Remove_Block]^^401^402^403^404^405^394^407^if  ( showInvalidationWarnings )  { compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( ! ( prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  )  {     if  ( showInvalidationWarnings )  {         compiler.report ( make ( t.getSourceName (  ) , child, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;     } }^401^^^^^394^407^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( ! ( prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  )  {     if  ( showInvalidationWarnings )  {         compiler.report ( make ( t.getSourceName (  ) , n, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;     } }^401^^^^^394^407^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( showInvalidationWarnings )  {     compiler.report ( make ( t.getSourceName (  ) , child, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^401^^^^^394^407^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P2_Replace_Operator]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type != null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "nuull" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, field, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) ,  INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , n,  name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , name, INVALIDATION, n, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, name, INVALIDATION, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( type.getSourceName (  ) , n, INVALIDATION, name, ( t == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , INVALIDATION, n, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P6_Replace_Expression]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t .getScopeRoot (  )  , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.setString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^compiler .reportCodeChange (  )   ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( ! ( prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  )  {     if  ( showInvalidationWarnings )  {         compiler.report ( make ( t.getSourceName (  ) , child, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;     } }^402^^^^^394^407^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( ! ( prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  )  {     if  ( showInvalidationWarnings )  {         compiler.report ( make ( t.getSourceName (  ) , n, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;     } }^402^^^^^394^407^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( showInvalidationWarnings )  {     compiler.report ( make ( t.getSourceName (  ) , child, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^402^^^^^394^407^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( showInvalidationWarnings )  {     compiler.report ( make ( t.getSourceName (  ) , n, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^402^^^^^394^407^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "nullu" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n.getSourceName (  ) , t, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, type, ( name == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, type, name, ( INVALIDATION == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type .Object (  )   ) , n^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P6_Replace_Expression]^t.getSourceName (  ) , n, INVALIDATION, name, ( type.toString (  )  ) , n.toString (  )  )  ) ;^403^404^^^^394^407^t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^t .getScopeRoot (  )  , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^403^404^^^^394^407^t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^403^404^^^^394^407^t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^403^404^^^^394^407^t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^403^404^^^^394^407^t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P6_Replace_Expression]^( type.toString (  )  ) , n.toString (  )  )  ) ;^404^^^^^394^407^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^404^^^^^394^407^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^404^^^^^394^407^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^404^^^^^394^407^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^( type == null ? "null" : type.setString (  )  ) , n.toString (  )  )  ) ;^404^^^^^394^407^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^( type == null ? "null" : type .Object (  )   ) , n^404^^^^^394^407^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "nulull" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "ulull" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( name.getSourceName (  ) , n, INVALIDATION, t, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "ull" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , type, INVALIDATION, name, ( n == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, field, ( type == null ? "null" : type.setString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, type, prop, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( t.getLastChild (  ) , processProperty ( n, prop, type, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( type, prop, t, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  ( !prop.scheduleRenaming ( n .getFirstChild (  )  , processProperty ( t, prop, type, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^processProperty (  prop, type, null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^processProperty ( t,  type, null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^processProperty ( t, prop,  null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^processProperty ( prop, t, type, null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^processProperty ( type, prop, t, null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( INVALIDATION.getSourceName (  ) , n, t, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^Node child = n.setString (  ) ;^413^^^^^412^433^Node child = n.getFirstChild (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^Node child = child.getFirstChild (  ) ;^413^^^^^412^433^Node child = n.getFirstChild (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^413^^^^^412^433^Node child = n.getFirstChild (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P2_Replace_Operator]^while  ( child == null )  {^414^^^^^412^433^while  ( child != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^while  ( n != null )  {^414^^^^^412^433^while  ( child != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^while  ( child != childull )  {^414^^^^^412^433^while  ( child != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P2_Replace_Operator]^if  ( child.getType (  )  <= Token.STRING )  {^415^^^^^412^433^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P2_Replace_Operator]^if  ( child.getType (  )  >= Token.STRING )  {^415^^^^^412^433^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.STRING )  {^415^^^^^412^433^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( child.getType (  )  == Token.4 )  {^415^^^^^412^433^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P6_Replace_Expression]^if  ( type == null )  {^415^^^^^412^433^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  ( child.setString (  )  == Token.STRING )  {^415^^^^^412^433^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  ( child.getTypeWithProperty (  )  == Token.STRING )  {^415^^^^^412^433^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.GETPROP )  {^415^^^^^412^433^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( n, processProperty ( t, prop, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty ( t,  type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming (  processProperty ( t, prop, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty (  prop, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop,  null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, typeull )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( t, processProperty ( child, prop, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty ( type, prop, t, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, n, typeull )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( n, processProperty ( t, prop, type, childull )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, true )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( skipRenaming )  {^423^^^^^412^433^if  ( showInvalidationWarnings )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t.getSourceName(), child, com.google.javascript.jscomp.DisambiguateProperties.INVALIDATION, name, (type == null ? "null" : type.toString()), n.toString()));^423^424^425^426^427^412^433^if  ( showInvalidationWarnings )  { compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P16_Remove_Block]^^423^424^425^426^427^412^433^if  ( showInvalidationWarnings )  { compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( ! ( prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  )  {     if  ( showInvalidationWarnings )  {         compiler.report ( make ( t.getSourceName (  ) , child, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;     } }^423^^^^^412^433^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( ! ( prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  )  {     if  ( showInvalidationWarnings )  {         compiler.report ( make ( t.getSourceName (  ) , n, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;     } }^423^^^^^412^433^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( showInvalidationWarnings )  {     compiler.report ( make ( t.getSourceName (  ) , n, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^423^^^^^412^433^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P2_Replace_Operator]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type != null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, field, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) ,  INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATIOName, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child,  name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( INVALIDATION.getSourceName (  ) , child, t, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, childame, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , name, INVALIDATION, child, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , type, INVALIDATION, name, ( child == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, name, INVALIDATION, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P6_Replace_Expression]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t .getScopeRoot (  )  , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.setString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, childame, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( ! ( prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  )  {     if  ( showInvalidationWarnings )  {         compiler.report ( make ( t.getSourceName (  ) , child, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;     } }^424^^^^^412^433^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( ! ( prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  )  {     if  ( showInvalidationWarnings )  {         compiler.report ( make ( t.getSourceName (  ) , n, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;     } }^424^^^^^412^433^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( showInvalidationWarnings )  {     compiler.report ( make ( t.getSourceName (  ) , child, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^424^^^^^412^433^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( showInvalidationWarnings )  {     compiler.report ( make ( t.getSourceName (  ) , n, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^424^^^^^412^433^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n.getSourceName (  ) , child, INVALIDATION, tame, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, n, ( type == nameull ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, typeame, ( n == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type .Object (  )   ) , n^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P6_Replace_Expression]^t.getSourceName (  ) , child, INVALIDATION, name, ( type.toString (  )  ) , n.toString (  )  )  ) ;^425^426^^^^412^433^t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^t .getScopeRoot (  )  , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^425^426^^^^412^433^t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^425^426^^^^412^433^t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^425^426^^^^412^433^t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^425^426^^^^412^433^t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P6_Replace_Expression]^( type.toString (  )  ) , n.toString (  )  )  ) ;^426^^^^^412^433^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^( type == null ? "null" : type .Object (  )   ) , n^426^^^^^412^433^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^426^^^^^412^433^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^426^^^^^412^433^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^426^^^^^412^433^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^( type == childull ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^426^^^^^412^433^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^( type == null ? "null" : type.setString (  )  ) , n.toString (  )  )  ) ;^426^^^^^412^433^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( child.getSourceName (  ) , t, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, type, ( name == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, type, name, ( INVALIDATION == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )   ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( name.getSourceName (  ) , child, INVALIDATION, t, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , INVALIDATION, child, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, n, INVALIDATIOName, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type .Object (  )   ) , n^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^( type == childull ? "null" : type.setString (  )  ) , n.toString (  )  )  ) ;^426^^^^^412^433^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "nuull" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, field, ( type == null ? "null" : type.setString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "ull" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( type.getSourceName (  ) , child, INVALIDATION, name, ( t == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P1_Replace_Type]^char name = child.getchar (  ) ;^417^^^^^412^433^String name = child.getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^String name = n.getString (  ) ;^417^^^^^412^433^String name = child.getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^String name = child.setString (  ) ;^417^^^^^412^433^String name = child.getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^String name = child .getAlternatives (  )  ;^417^^^^^412^433^String name = child.getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^String field = n.getLastChild (  ) .getString (  ) ;String name = child.getString (  ) ;^417^^^^^412^433^String name = child.getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^String newName = propNames.get ( rootType ) ;String name = child.getString (  ) ;^417^^^^^412^433^String name = child.getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^String name = n.getLastChild (  ) .getString (  ) ;String name = child.getString (  ) ;^417^^^^^412^433^String name = child.getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) , child, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) , n, field ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) ,  name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) , n ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) , name, n ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = name.getType ( getScope (  ) , n, typeSystem ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem.getTypeWithProperty ( getScope (  ) , n, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem .getType (  )  ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem.getType ( AbstractScopingCallback (  ) , n, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;T type = typeSystem.getType ( getScope (  ) , n, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;T type = typeSystem.getType ( getScope (  ) , n, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;T type = typeSystem.getType ( getScope (  ) , n, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P12_Insert_Condition]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  { T type = typeSystem.getType ( getScope (  ) , n, name ) ; }^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^Property prop = getProperty ( field ) ;^420^^^^^412^433^Property prop = getProperty ( name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^Property prop = checkState ( name ) ;^420^^^^^412^433^Property prop = getProperty ( name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^Property prop = checkState ( field ) ;^420^^^^^412^433^Property prop = getProperty ( name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^Property prop = getProperty ( field ) ;Property prop = getProperty ( name ) ;^420^^^^^412^433^Property prop = getProperty ( name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^Property prop = entry.getValue (  ) ;Property prop = getProperty ( name ) ;^420^^^^^412^433^Property prop = getProperty ( name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^417^418^^^^412^433^String name = child.getString (  ) ; T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^typeName = type.toString (  ) ;String name = child.getString (  ) ;^417^^^^^412^433^String name = child.getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T type = n.getType ( getScope (  ) , typeSystem, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^return typeSystem.getTypeWithProperty ( field, type ) ;T type = typeSystem.getType ( getScope (  ) , n, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;T type = typeSystem.getType ( getScope (  ) , n, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^420^^^^^412^433^Property prop = getProperty ( name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^return properties.get ( name ) ;Property prop = getProperty ( name ) ;^420^^^^^412^433^Property prop = getProperty ( name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty ( prop, t, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^processProperty (  prop, type, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^processProperty ( t,  type, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^processProperty ( t, prop,  null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^processProperty ( prop, t, type, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^processProperty ( t, type, prop, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "n" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, childull )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, type, prop, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^if  ( !prop.scheduleRenaming ( n, processProperty ( t, prop, type, true )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "nullul" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "nul" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, field, ( type == null ? "null" : type .Object (  )   ) , n^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^child = n.getNext (  ) .getNext (  ) ;^431^^^^^412^433^child = child.getNext (  ) .getNext (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^child = child.getNativeObjectType (  ) .getNext (  ) ;^431^^^^^412^433^child = child.getNext (  ) .getNext (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^child = child .getType (  )^431^^^^^412^433^child = child.getNext (  ) .getNext (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^child = child.setString (  ) .getNext (  ) ;^431^^^^^412^433^child = child.getNext (  ) .getNext (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^417^^^^^412^433^String name = child.getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^T type = typeSystem.getType ( AbstractScopingCallback (  ) , child, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  ( !prop .shouldRename (  )   )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^processProperty ( type, prop, t, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "nullnu" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, childame, ( type == null ? "null" : type.setString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^431^^^^^412^433^child = child.getNext (  ) .getNext (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P2_Replace_Operator]^if  ( child.getType (  )  > Token.STRING )  {^415^^^^^412^433^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  ( child .getType (  )   == Token.STRING )  {^415^^^^^412^433^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, false )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "nulull" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "nulln" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, nameame, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^T type = typeSystem.getTypeWithProperty ( getScope (  ) , child, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^String name = n.setString (  ) ;^417^^^^^412^433^String name = child.getString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^T type = typeSystem.getTypeWithProperty ( getScope (  ) , n, field ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( type, processProperty ( t, prop, child, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, this )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "nu" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "ul" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^if  ( n.setString (  )  == Token.STRING )  {^415^^^^^412^433^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^child = n.getNativeObjectType (  ) .getNext (  ) ;^431^^^^^412^433^child = child.getNext (  ) .getNext (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^type = subTypeSystem.restrictByNotNullOrUndefined ( type ) ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^type = typeSystemSystem.restrictByNotNullOrUndefined ( type ) ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^type = type.restrictByNotNullOrUndefined ( typeSystem ) ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^type = typeSystem.getTypeAlternatives ( type ) ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^type =  topTypeSystem.restrictByNotNullOrUndefined ( topType ) ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^jsType = jsType.restrictByNotNullOrUndefined (  ) ;type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^type = type.restrictByNotNullOrUndefined (  ) ;type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^type = topTypeSystem.restrictByNotNullOrUndefined ( type ) ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^return type.restrictByNotNullOrUndefined (  ) ;type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P2_Replace_Operator]^if  ( prop.skipRenaming && typeSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( prop.skipRenaming || topTypeSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( prop.skipRenaming.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( type.skipRenaming || propSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( typeSystem || prop.skipRenaming.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( typeSystem.skipRenaming || prop.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P6_Replace_Expression]^if  ( prop.skipRenaming ) {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P6_Replace_Expression]^if  (  typeSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  ( prop.skipRenaming || typeSystem.isTypeToSkip ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( typeSystem.isInvalidatingType ( top )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( typeSystem.isInvalidatingType ( topType )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P15_Unwrap_Block]^return null;^445^446^447^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  { return null; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P16_Remove_Block]^^445^446^447^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  { return null; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( typeSystem.isInvalidatingType ( topType )  )  {     return null; }^445^^^^^442^467^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^return this;^446^^^^^442^467^return null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^return true;^446^^^^^442^467^return null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( prop.skipRenaming || typeSystemSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( prop.skipRenaming || type.isInvalidatingType ( typeSystem )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^if  ( prop.skipRenaming || topTypeSystem.isTypeToSkip ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^Iterable<T> alternatives = topTypeSystem.getTypeAlternatives ( type ) ;^449^^^^^442^467^Iterable<T> alternatives = typeSystem.getTypeAlternatives ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^Iterable<T> alternatives = typeSystemSystem.getTypeAlternatives ( type ) ;^449^^^^^442^467^Iterable<T> alternatives = typeSystem.getTypeAlternatives ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^Iterable<T> alternatives = type.getTypeAlternatives ( typeSystem ) ;^449^^^^^442^467^Iterable<T> alternatives = typeSystem.getTypeAlternatives ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^Iterable<T> alternatives = typeSystem.getTypesToSkipForType ( type ) ;^449^^^^^442^467^Iterable<T> alternatives = typeSystem.getTypeAlternatives ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^Iterable<T> alternatives = subTypeSystem.getTypeAlternatives ( type ) ;^449^^^^^442^467^Iterable<T> alternatives = typeSystem.getTypeAlternatives ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^449^^^^^442^467^Iterable<T> alternatives = typeSystem.getTypeAlternatives ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P2_Replace_Operator]^if  ( alternatives == null )  {^450^^^^^442^467^if  ( alternatives != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( this != null )  {^450^^^^^442^467^if  ( alternatives != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P6_Replace_Expression]^if  ( lastType != null )  {^450^^^^^442^467^if  ( alternatives != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P6_Replace_Expression]^if  ( firstType == null )  {^450^^^^^442^467^if  ( alternatives != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^if  ( alternatives != true )  {^450^^^^^442^467^if  ( alternatives != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( relatedType == null )  {^450^^^^^442^467^if  ( alternatives != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( objSkipType != null )  {^450^^^^^442^467^if  ( alternatives != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( objType != null )  {^450^^^^^442^467^if  ( alternatives != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( types == null )  {^450^^^^^442^467^if  ( alternatives != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( ret != null )  {^450^^^^^442^467^if  ( alternatives != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( typeSystem.isInvalidatingType ( type )  )  {^461^^^^^442^467^if  ( typeSystem.isInvalidatingType ( topType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( topType.isInvalidatingType ( typeSystem )  )  {^461^^^^^442^467^if  ( typeSystem.isInvalidatingType ( topType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  ( typeSystem.isTypeToSkip ( topType )  )  {^461^^^^^442^467^if  ( typeSystem.isInvalidatingType ( topType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^461^^^^^442^467^if  ( typeSystem.isInvalidatingType ( topType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( typeSystem.isInvalidatingType ( top )  )  {^461^^^^^442^467^if  ( typeSystem.isInvalidatingType ( topType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( typeSystem.isTypeToSkip ( top )  )  {^461^^^^^442^467^if  ( typeSystem.isInvalidatingType ( topType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P15_Unwrap_Block]^return null;^461^462^463^^^442^467^if  ( typeSystem.isInvalidatingType ( topType )  )  { return null; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P16_Remove_Block]^^461^462^463^^^442^467^if  ( typeSystem.isInvalidatingType ( topType )  )  { return null; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  (  ( prop.skipRenaming )  ||  ( typeSystem.isInvalidatingType ( type )  )  )  {     return null; }^461^^^^^442^467^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( typeSystem.isInvalidatingType ( type )  )  {     invalidate (  ) ;     return false; }^461^^^^^442^467^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^return false;^462^^^^^442^467^return null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^return type;^465^^^^^442^467^return topType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T topType = subTypeSystem.getTypeWithProperty ( prop.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T topType = typeSystem.getTypeWithProperty ( name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T topType = typeSystem.getTypeWithProperty ( prop.name ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T topType = typeSystem.getTypeWithProperty (  type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T topType = propSystem.getTypeWithProperty ( type.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T topType = prop.name.getTypeWithProperty ( typeSystem, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T topType = prop.nameSystem.getTypeWithProperty ( type, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^T topType = typeSystem .getTypesToSkipForType ( topType )  ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^JSType top = getTypeWithProperty ( p.name, itype ) ;T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^ConcreteType ret = getTypeWithProperty ( field, t ) ;T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^T type = typeSystem.getType ( getScope (  ) , n, name ) ;T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T topType = topTypeSystem.getTypeWithProperty ( prop.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T topType = prop.getTypeWithProperty ( typeSystem.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T topType = typeSystemSystem.getTypeWithProperty ( prop.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T topType = type.getTypeWithProperty ( prop.name, typeSystem ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^return typeSystem.getTypeWithProperty ( field, type ) ;T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( typeSystem.isInvalidatingType ( topType )  )  {     return null; }^461^^^^^442^467^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^prop.addType ( topType, topType, relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^prop.addType ( type, type, relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^prop.addType ( type, topType, type ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^prop.addType (  topType, relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^prop.addType ( type,  relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^prop.addType ( type, topType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^prop.addType ( topType, type, relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^prop.addType ( relatedType, topType, type ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^prop.addType ( type, topType, topType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^getTypes (  ) .union ( top, relatedType ) ;prop.addType ( type, topType, relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^recordInterfaces ( itype, relatedType, p ) ;prop.addType ( type, topType, relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^prop.addTypeToSkip ( type ) ;prop.addType ( type, topType, relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^p.addType ( itype, top, relatedType ) ;prop.addType ( type, topType, relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P2_Replace_Operator]^if  ( lastType == null )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( type != null )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P6_Replace_Expression]^if  ( firstType == null )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^if  ( type != false )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( alternatives != null )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( jsType == null )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( relatedType == null )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( top != null )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( objSkipType != null )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( objType != null )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( types == null )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( scope != null )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( ret != null )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P15_Unwrap_Block]^firstType = (firstType == null) ? lastType : firstType;^454^455^456^^^442^467^if  ( lastType != null )  { firstType = firstType == null ? lastType : firstType; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P16_Remove_Block]^^454^455^456^^^442^467^if  ( lastType != null )  { firstType = firstType == null ? lastType : firstType; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P2_Replace_Operator]^firstType = firstType != null ? lastType : firstType;^455^^^^^442^467^firstType = firstType == null ? lastType : firstType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^firstType = type == null ? lastType : firstType;^455^^^^^442^467^firstType = firstType == null ? lastType : firstType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^firstType = firstType == null ? type : firstType;^455^^^^^442^467^firstType = firstType == null ? lastType : firstType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^firstType = lastType == null ? firstType : firstType;^455^^^^^442^467^firstType = firstType == null ? lastType : firstType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P6_Replace_Expression]^firstType = firstType ( firstType;^455^^^^^442^467^firstType = firstType == null ? lastType : firstType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^firstType = firstType == this ? lastType : firstType;^455^^^^^442^467^firstType = firstType == null ? lastType : firstType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P13_Insert_Block]^if  ( lastType != null )  {     firstType =  ( firstType == null )  ? lastType : firstType; }^455^^^^^442^467^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^firstType = firstType == false ? lastType : firstType;^455^^^^^442^467^firstType = firstType == null ? lastType : firstType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^return topType;^458^^^^^442^467^return firstType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^String typeName = null;T firstType = null;^451^^^^^442^467^T firstType = null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^ObjectType foundType = null;T firstType = null;^451^^^^^442^467^T firstType = null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P12_Insert_Condition]^if  ( lastType != null )  { T firstType = null; }^451^^^^^442^467^T firstType = null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( t, prop, type, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( t, prop, subType, type ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty (  prop, subType, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( t,  subType, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( t, prop,  firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( t, prop, subType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( firstType, prop, subType, t ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( prop, t, subType, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( subType, prop, t, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( t, prop, topType, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( t, subType, prop, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( t, prop, firstType, subType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^if  ( lastType != false )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^firstType = firstType == true ? lastType : firstType;^455^^^^^442^467^firstType = firstType == null ? lastType : firstType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^return type;^458^^^^^442^467^return firstType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^return true;^462^^^^^442^467^return null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^return subType;^465^^^^^442^467^return topType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( t, firstType, subType, prop ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T topType = typeSystem.getTypeWithProperty ( prop.name.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^prop .addType ( topType , lastType , topType )  ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^464^465^^^^442^467^prop.addType ( type, topType, relatedType ) ; return topType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[P1_Replace_Type]^long  propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, instancesSkipped = 0, singleTypeProps = 0;^472^473^^^^457^487^int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, instancesSkipped = 0, singleTypeProps = 0;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^int propsRenamed = 8, propsSkipped = 8, instancesRenamed = 8, instancesSkipped = 8, singleTypeProps = 8;^472^473^^^^457^487^int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, instancesSkipped = 0, singleTypeProps = 0;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^int propsRenamed = propsRenamed, propsSkipped = propsRenamed, instancesRenamed = propsRenamed, instancesSkipped = propsRenamed, singleTypeProps = propsRenamed;^472^473^^^^457^487^int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, instancesSkipped = 0, singleTypeProps = 0;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P1_Replace_Type]^short  propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, instancesSkipped = 0, singleTypeProps = 0;^472^473^^^^457^487^int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, instancesSkipped = 0, singleTypeProps = 0;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^int propsRenamed = 2, propsSkipped = 2, instancesRenamed = 2, instancesSkipped = 2, singleTypeProps = 2;^472^473^^^^457^487^int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, instancesSkipped = 0, singleTypeProps = 0;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^instancesSkipped = nextUniqueId, singleTypeProps = nextUniqueId;^473^^^^^458^488^instancesSkipped = 0, singleTypeProps = 0;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^instancesSkipped = 5, singleTypeProps = 5;^473^^^^^458^488^instancesSkipped = 0, singleTypeProps = 0;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  ( prop .scheduleRenaming ( node , rootType )   )  {^476^^^^^461^491^if  ( prop.shouldRename (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  ( prop.checkState (  )  )  {^476^^^^^461^491^if  ( prop.shouldRename (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( prop.shouldRename ( rootType )  )  {^476^^^^^461^491^if  ( prop.shouldRename (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( shouldRename (  )  )  {^476^^^^^461^491^if  ( prop.shouldRename (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( skipRenaming )  {^494^^^^^476^499^if  ( prop.skipRenaming )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( prop.skipRenaming.skipRenaming )  {^494^^^^^476^499^if  ( prop.skipRenaming )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( prop )  {^494^^^^^476^499^if  ( prop.skipRenaming )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( !skipRenaming )  {^494^^^^^476^499^if  ( prop.skipRenaming )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( !prop.skipRenaming )  {^494^^^^^476^499^if  ( prop.skipRenaming )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P15_Unwrap_Block]^++propsSkipped;^494^495^496^497^498^476^499^if  ( prop.skipRenaming )  { ++propsSkipped; } else { ++singleTypeProps; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P16_Remove_Block]^^494^495^496^497^498^476^499^if  ( prop.skipRenaming )  { ++propsSkipped; } else { ++singleTypeProps; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  ( prop.checkState ( rootType )  )  {^484^^^^^469^499^if  ( prop.shouldRename ( rootType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  ( prop .shouldRename (  )   )  {^484^^^^^469^499^if  ( prop.shouldRename ( rootType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( shouldRename (  )  )  {^484^^^^^469^499^if  ( prop.shouldRename ( rootType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P1_Replace_Type]^char newName = propNames.get ( rootType ) ;^485^^^^^470^500^String newName = propNames.get ( rootType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^String newName = rootType.get ( propNames ) ;^485^^^^^470^500^String newName = propNames.get ( rootType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^String newName = propNames.put ( rootType ) ;^485^^^^^470^500^String newName = propNames.get ( rootType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;String newName = propNames.get ( rootType ) ;^485^^^^^470^500^String newName = propNames.get ( rootType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^String newName = 3.get ( rootType ) ;^485^^^^^470^500^String newName = propNames.get ( rootType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^485^486^^^^470^500^String newName = propNames.get ( rootType ) ; node.setString ( newName ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^node.setString ( name ) ;^486^^^^^471^501^node.setString ( newName ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^486^487^^^^471^501^node.setString ( newName ) ; compiler.reportCodeChange (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^names.put ( type, newName ) ;node.setString ( newName ) ;^486^^^^^471^501^node.setString ( newName ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^addTypeToSkip ( newType ) ;node.setString ( newName ) ;^486^^^^^471^501^node.setString ( newName ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^compiler.report (  ) ;^487^^^^^472^502^compiler.reportCodeChange (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^487^^^^^472^502^compiler.reportCodeChange (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , newName ) ;^477^^^^^462^492^Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) .name ) ;^477^^^^^462^492^Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^Map<T, String> propNames = buildPropNames ( prop.getTypes (  )  ) ;^477^^^^^462^492^Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^Map<T, String> prop.nameNames = buildPropNames ( prop.getTypes (  ) , prop ) ;^477^^^^^462^492^Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^Map<T, String> propNames = process ( prop.getTypes (  ) , prop.name ) ;^477^^^^^462^492^Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^Map<T, String> propNames = buildPropNames ( prop.addTypeToSkip (  ) , prop.name ) ;^477^^^^^462^492^Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , name ) ;^477^^^^^462^492^Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^UnionFind<T> types = prop.addTypeToSkip (  ) ;^481^^^^^466^496^UnionFind<T> types = prop.getTypes (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^UnionFind<T> types = prop .addType ( rootType , rootType , rootType )  ;^481^^^^^466^496^UnionFind<T> types = prop.getTypes (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T rootType = node.rootTypes.get ( prop ) ;^483^^^^^468^498^T rootType = prop.rootTypes.get ( node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T rootType = node.get ( prop.rootTypes ) ;^483^^^^^468^498^T rootType = prop.rootTypes.get ( node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T rootType = prop.get ( node ) ;^483^^^^^468^498^T rootType = prop.rootTypes.get ( node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^T rootType = prop.rootTypes.put ( node ) ;^483^^^^^468^498^T rootType = prop.rootTypes.get ( node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^477^^^^^462^492^Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^Map<T, String> propNames = buildPropNames ( prop .addType ( rootType , rootType , rootType )  , prop.name ) ;^477^^^^^462^492^Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^prop.addTypeToSkip (  ) ;^480^^^^^465^495^prop.expandTypesToSkip (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^480^481^^^^465^495^prop.expandTypesToSkip (  ) ; UnionFind<T> types = prop.getTypes (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^addTypeToSkip ( top ) ;prop.expandTypesToSkip (  ) ;^480^^^^^465^495^prop.expandTypesToSkip (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^prop.addTypeToSkip ( type ) ;prop.expandTypesToSkip (  ) ;^480^^^^^465^495^prop.expandTypesToSkip (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^prop.typesToSkip.add ( type ) ;prop.expandTypesToSkip (  ) ;^480^^^^^465^495^prop.expandTypesToSkip (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^481^^^^^466^496^UnionFind<T> types = prop.getTypes (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T rootType = this.get ( node ) ;^483^^^^^468^498^T rootType = prop.rootTypes.get ( node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^T rootType = prop.rootTypes.rootTypes.get ( node ) ;^483^^^^^468^498^T rootType = prop.rootTypes.get ( node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^483^^^^^468^498^T rootType = prop.rootTypes.get ( node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^return properties.get ( name ) ;T rootType = prop.rootTypes.get ( node ) ;^483^^^^^468^498^T rootType = prop.rootTypes.get ( node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( rootType.shouldRename ( prop )  )  {^484^^^^^469^499^if  ( prop.shouldRename ( rootType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^486^^^^^471^501^node.setString ( newName ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^487^488^^^^472^502^compiler.reportCodeChange (  ) ; ++instancesRenamed;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^String newName = null.get ( rootType ) ;^485^^^^^470^500^String newName = propNames.get ( rootType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( skipRenaming )  {^494^^^^^479^509^if  ( prop.skipRenaming )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( prop.skipRenaming.skipRenaming )  {^494^^^^^479^509^if  ( prop.skipRenaming )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( prop )  {^494^^^^^479^509^if  ( prop.skipRenaming )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( !skipRenaming )  {^494^^^^^479^509^if  ( prop.skipRenaming )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( !prop.skipRenaming )  {^494^^^^^479^509^if  ( prop.skipRenaming )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P15_Unwrap_Block]^++propsSkipped;^494^495^496^497^498^479^509^if  ( prop.skipRenaming )  { ++propsSkipped; } else { ++singleTypeProps; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P16_Remove_Block]^^494^495^496^497^498^479^509^if  ( prop.skipRenaming )  { ++propsSkipped; } else { ++singleTypeProps; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^for  ( Property prop : this.values (  )  )  {^475^^^^^460^490^for  ( Property prop : properties.values (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^for  ( Property prop : properties.entrySet (  )  )  {^475^^^^^460^490^for  ( Property prop : properties.values (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^Map<T, String> propNames = buildPropNames ( prop.addTypeToSkip (  ) , newName ) ;^477^^^^^462^492^Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^prop .addTypeToSkip ( rootType )  ;^480^^^^^465^495^prop.expandTypesToSkip (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P2_Replace_Operator]^logger.info ( "Renamed "  ||  instancesRenamed  ||  " instances of " + propsRenamed + " properties." ) ;^501^502^^^^486^516^logger.info ( "Renamed " + instancesRenamed + " instances of " + propsRenamed + " properties." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P2_Replace_Operator]^logger.info ( "Renamed "  ||  instancesRenamed + " instances of " + propsRenamed + " properties." ) ;^501^502^^^^486^516^logger.info ( "Renamed " + instancesRenamed + " instances of " + propsRenamed + " properties." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^logger.info ( "Renamed am" + instancesRenamed + " instances of " + propsRenamed + " properties." ) ;^501^502^^^^486^516^logger.info ( "Renamed " + instancesRenamed + " instances of " + propsRenamed + " properties." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^logger.info ( "Renamed " + instancesRenamed + "i" + propsRenamed + " properties." ) ;^501^502^^^^486^516^logger.info ( "Renamed " + instancesRenamed + " instances of " + propsRenamed + " properties." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^logger.info ( "Renamed " + instancesRenamed + " instances of " + propsRenamed + "ert" ) ;^501^502^^^^486^516^logger.info ( "Renamed " + instancesRenamed + " instances of " + propsRenamed + " properties." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^logger.info ( "Renamed " + singleTypeProps + " instances of " + propsRenamed + " properties." ) ;^501^502^^^^486^516^logger.info ( "Renamed " + instancesRenamed + " instances of " + propsRenamed + " properties." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^logger.info ( "Renamed " + instancesRenamed + " instances of " + singleTypeProps + " properties." ) ;^501^502^^^^486^516^logger.info ( "Renamed " + instancesRenamed + " instances of " + propsRenamed + " properties." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^logger.info ( "Renamed " + propsRenamed + " instances of " + instancesRenamed + " properties." ) ;^501^502^^^^486^516^logger.info ( "Renamed " + instancesRenamed + " instances of " + propsRenamed + " properties." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^501^502^^^^486^516^logger.info ( "Renamed " + instancesRenamed + " instances of " + propsRenamed + " properties." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P2_Replace_Operator]^logger.info ( "Skipped renaming "  ||  instancesSkipped  ||  " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^503^504^505^506^^488^518^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P2_Replace_Operator]^logger.info ( "Skipped renaming "  <<  instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^503^504^505^506^^488^518^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated nvali" + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^503^504^505^506^^488^518^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "opertiroperties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^503^504^505^506^^488^518^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties es of pro" + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^503^504^505^506^^488^518^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and ecific " + singleTypeProps + " properties that were referenced from only one type." ) ;^503^504^505^506^^488^518^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P3_Replace_Literal]^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + "rties" ) ;^503^504^505^506^^488^518^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^logger.info ( "Skipped renaming " + propsSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^503^504^505^506^^488^518^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsRenamed + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^503^504^505^506^^488^518^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + propsRenamed + " properties that were referenced from only one type." ) ;^503^504^505^506^^488^518^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^logger.info ( "Skipped renaming " + propsSkipped + " invalidated " + "properties, " + instancesSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^503^504^505^506^^488^518^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + singleTypeProps + " instances of properties " + "that were skipped for specific types and " + propsSkipped + " properties that were referenced from only one type." ) ;^503^504^505^506^^488^518^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet (  ) ;Map<T, String> names = Maps.newHashMap (  ) ;^514^^^^^513^537^Map<T, String> names = Maps.newHashMap (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^514^^^^^513^537^Map<T, String> names = Maps.newHashMap (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( typeName == null && type.toString (  ) .compareTo ( typeName )  < 0 )  {^520^^^^^513^537^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( typeName != null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^520^^^^^513^537^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  == 0 )  {^520^^^^^513^537^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P3_Replace_Literal]^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 4 )  {^520^^^^^513^537^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( newName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^520^^^^^513^537^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( type == null || typeName.toString (  ) .compareTo ( typeName )  < 0 )  {^520^^^^^513^537^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( typeNameName == null || type.toString (  ) .compareTo ( type )  < 0 )  {^520^^^^^513^537^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  ( typeName == null ) {^520^^^^^513^537^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  (  type.toString (  ) .compareTo ( typeName )  < 0 )  {^520^^^^^513^537^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( typeName == null || type.toString (  ) .replaceAll ( typeName )  < 0 )  {^520^^^^^513^537^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( typeName == null || type.toString (  )  .replaceAll ( field , typeName )   < 0 )  {^520^^^^^513^537^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( typeName == null || type .Object (  )  .compareTo ( typeName )  < 0 )  {^520^^^^^513^537^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( typeName == true || type.toString (  ) .compareTo ( typeName )  < 0 )  {^520^^^^^513^537^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^typeName = type.toString();^520^521^522^^^513^537^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  { typeName = type.toString (  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^520^521^522^^^513^537^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  { typeName = type.toString (  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P1_Replace_Type]^typeName = type.tochar (  ) ;^521^^^^^513^537^typeName = type.toString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^typeName =  null.toString (  ) ;^521^^^^^513^537^typeName = type.toString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^type = type.autoboxesTo (  ) ;typeName = type.toString (  ) ;^521^^^^^513^537^typeName = type.toString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^typeName = type .Object (  )  ;^521^^^^^513^537^typeName = type.toString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^521^^^^^513^537^typeName = type.toString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^JSType autoboxed = jsType.autoboxesTo (  ) ;typeName = type.toString (  ) ;^521^^^^^513^537^typeName = type.toString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;typeName = type.toString (  ) ;^521^^^^^513^537^typeName = type.toString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^renameProperties (  ) ;typeName = type.toString (  ) ;^521^^^^^513^537^typeName = type.toString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^JSType jsType = node.getJSType (  ) ;typeName = type.toString (  ) ;^521^^^^^513^537^typeName = type.toString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^ObjectType objType = type.toObjectType (  ) ;typeName = type.toString (  ) ;^521^^^^^513^537^typeName = type.toString (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P3_Replace_Literal]^if  ( "{....}".equals ( typeName )  )  {^526^^^^^513^537^if  ( "{...}".equals ( typeName )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( "{...}".equals ( newName )  )  {^526^^^^^513^537^if  ( "{...}".equals ( typeName )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  ( typeName.replaceAll ( "[^\\w$]", "_" )  + "$" )  {^526^^^^^513^537^if  ( "{...}".equals ( typeName )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( "{...}".replaceAll ( typeName )  )  {^526^^^^^513^537^if  ( "{...}".equals ( typeName )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^newName = name;^526^527^528^529^530^513^537^if  ( "{...}".equals ( typeName )  )  { newName = name; } else { newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^526^527^528^529^530^513^537^if  ( "{...}".equals ( typeName )  )  { newName = name; } else { newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^newName = typeName.replaceAll ( "[^\\w$]", "_" )  ^  + "$" + name;^529^^^^^513^537^newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^newName = typeName.replaceAll ( "[^\\w$]", "_" )   &&  "$" + name;^529^^^^^513^537^newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P3_Replace_Literal]^newName = typeName.replaceAll ( "^\\w", "_" )  + "$" + name;^529^^^^^513^537^newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P3_Replace_Literal]^newName = typeName.replaceAll ( "[^\\w$]", "" )  + "$" + name;^529^^^^^513^537^newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^newName = newName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^529^^^^^513^537^newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + newName;^529^^^^^513^537^newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^newName = name.replaceAll ( "[^\\w$]", "_" )  + "$" + typeName;^529^^^^^513^537^newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^newName = typeName .equals ( this )   + "$" + name;^529^^^^^513^537^newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^newName =  name.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^529^^^^^513^537^newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P3_Replace_Literal]^newName = typeName.replaceAll ( "[^\\w$][", "_" )  + "$" + name;^529^^^^^513^537^newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^529^^^^^513^537^newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^newName = typeName;^527^^^^^513^537^newName = name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^this.name = name;newName = name;^527^^^^^513^537^newName = name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^newName = typeName.replaceAll ( "[^\\w$]", "_" )  >>  + "$" + name;^529^^^^^513^537^newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^newName = typeName.replaceAll ( "[^\\w$]", "_" )   ^  "$" + name;^529^^^^^513^537^newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P3_Replace_Literal]^newName = typeName.replaceAll ( "[^\\w$]^\\", "_" )  + "$" + name;^529^^^^^513^537^newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P3_Replace_Literal]^newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "" + name;^529^^^^^513^537^newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P1_Replace_Type]^char typeName = null;^518^^^^^513^537^String typeName = null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^String newName;String typeName = null;^518^^^^^513^537^String typeName = null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^T firstType = null;String typeName = null;^518^^^^^513^537^String typeName = null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P1_Replace_Type]^char newName;^525^^^^^513^537^String newName;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^String typeName = null;String newName;^525^^^^^513^537^String newName;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^for  ( Set<T> set : types.find (  )  )  {^515^^^^^513^537^for  ( Set<T> set : types.allEquivalenceClasses (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^for  ( Set<T> set : types .elements (  )   )  {^515^^^^^513^537^for  ( Set<T> set : types.allEquivalenceClasses (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^getProperty ( !set.isEmpty (  )  ) ;^516^^^^^513^537^checkState ( !set.isEmpty (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^checkState ( !set.add (  )  ) ;^516^^^^^513^537^checkState ( !set.isEmpty (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^checkState ( !set .size (  )   ) ;^516^^^^^513^537^checkState ( !set.isEmpty (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^516^^^^^513^537^checkState ( !set.isEmpty (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^checkState ( !type.isUnionType (  )  ) ;checkState ( !set.isEmpty (  )  ) ;^516^^^^^513^537^checkState ( !set.isEmpty (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( newName == null || type .Object (  )  .compareTo ( typeName )  < 0 )  {^520^^^^^513^537^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P3_Replace_Literal]^if  ( "{...}{...".equals ( typeName )  )  {^526^^^^^513^537^if  ( "{...}".equals ( typeName )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( "{...}" .replaceAll ( newName , name )   )  {^526^^^^^513^537^if  ( "{...}".equals ( typeName )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P3_Replace_Literal]^newName = typeName.replaceAll ( "\", "_" )  + "$" + name;^529^^^^^513^537^newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^names.put ( type, typeName ) ;^533^^^^^513^537^names.put ( type, newName ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^names.put (  newName ) ;^533^^^^^513^537^names.put ( type, newName ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^names.put ( type ) ;^533^^^^^513^537^names.put ( type, newName ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^names.put ( newName, type ) ;^533^^^^^513^537^names.put ( type, newName ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^533^^^^^513^537^names.put ( type, newName ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^node.setString ( newName ) ;names.put ( type, newName ) ;^533^^^^^513^537^names.put ( type, newName ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return null;^536^^^^^513^537^return names;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^541^^^^^540^553^Multimap<String, Collection<T>> ret = HashMultimap.create (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^if  ( !skipRenaming )  {^544^^^^^540^553^if  ( !prop.skipRenaming )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^if  ( !showInvalidationWarnings )  {^544^^^^^540^553^if  ( !prop.skipRenaming )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P9_Replace_Statement]^if  ( prop.skipRenaming )  {^544^^^^^540^553^if  ( !prop.skipRenaming )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P15_Unwrap_Block]^for (java.util.Collection<T> c : prop.getTypes().allEquivalenceClasses()) {    if ((!(c.isEmpty())) && (!(prop.typesToSkip.contains(c.iterator().next())))) {        ret.put(entry.getKey(), c);    }};^544^545^546^547^548^540^553^if  ( !prop.skipRenaming )  { for  ( Collection<T> c : prop.getTypes (  ) .allEquivalenceClasses (  )  )  { if  ( !c.isEmpty (  )  && !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  { ret.put ( entry.getKey (  ) , c ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P16_Remove_Block]^^544^545^546^547^548^540^553^if  ( !prop.skipRenaming )  { for  ( Collection<T> c : prop.getTypes (  ) .allEquivalenceClasses (  )  )  { if  ( !c.isEmpty (  )  && !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  { ret.put ( entry.getKey (  ) , c ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P2_Replace_Operator]^if  ( !c.isEmpty (  )  || !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  {^546^^^^^540^553^if  ( !c.isEmpty (  )  && !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P6_Replace_Expression]^if  ( !c.isEmpty (  )  ) {^546^^^^^540^553^if  ( !c.isEmpty (  )  && !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P6_Replace_Expression]^if  (  !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  {^546^^^^^540^553^if  ( !c.isEmpty (  )  && !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  ( !c .size (  )   && !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  {^546^^^^^540^553^if  ( !c.isEmpty (  )  && !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^if  ( !c.isEmpty (  )  && !prop.typesToSkip .contains ( this )   )  )  {^546^^^^^540^553^if  ( !c.isEmpty (  )  && !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P15_Unwrap_Block]^ret.put(entry.getKey(), c);^546^547^548^^^540^553^if  ( !c.isEmpty (  )  && !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  { ret.put ( entry.getKey (  ) , c ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P16_Remove_Block]^^546^547^548^^^540^553^if  ( !c.isEmpty (  )  && !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  { ret.put ( entry.getKey (  ) , c ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^ret.put ( entry.getKey (  )  ) ;^547^^^^^540^553^ret.put ( entry.getKey (  ) , c ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^ret.put ( c.getKey (  ) , entry ) ;^547^^^^^540^553^ret.put ( entry.getKey (  ) , c ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^ret.put ( entry .getValue (  )  , c ) ;^547^^^^^540^553^ret.put ( entry.getKey (  ) , c ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^547^^^^^540^553^ret.put ( entry.getKey (  ) , c ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^for  ( Collection<T> c : prop.getTypes (  ) .find (  )  )  {^545^^^^^540^553^for  ( Collection<T> c : prop.getTypes (  ) .allEquivalenceClasses (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^for  ( Collection<T> c : prop.addTypeToSkip (  ) .allEquivalenceClasses (  )  )  {^545^^^^^540^553^for  ( Collection<T> c : prop.getTypes (  ) .allEquivalenceClasses (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^545^546^547^548^^540^553^for  ( Collection<T> c : prop.getTypes (  ) .allEquivalenceClasses (  )  )  { if  ( !c.isEmpty (  )  && !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  { ret.put ( entry.getKey (  ) , c ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  ( !c.isEmpty (  )  && !prop.typesToSkip .contains ( null )   )  )  {^546^^^^^540^553^if  ( !c.isEmpty (  )  && !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^if  ( !c.isEmpty (  )  && !prop.typesToSkip.contains ( c .isEmpty (  )  .next (  )  )  )  {^546^^^^^540^553^if  ( !c.isEmpty (  )  && !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^if  ( !c.isEmpty (  )  && !prop.typesToSkip.contains ( 3.iterator (  ) .next (  )  )  )  {^546^^^^^540^553^if  ( !c.isEmpty (  )  && !prop.typesToSkip.contains ( c.iterator (  ) .next (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^ret.put ( entry.getKey (  ) , null ) ;^547^^^^^540^553^ret.put ( entry.getKey (  ) , c ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^ret.put ( entry.getKey (  ) , 3 ) ;^547^^^^^540^553^ret.put ( entry.getKey (  ) , c ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^Property prop = 2.getValue (  ) ;^543^^^^^540^553^Property prop = entry.getValue (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P8_Replace_Mix]^Property prop = entry .getKey (  )  ;^543^^^^^540^553^Property prop = entry.getValue (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^Property prop = getProperty ( field ) ;Property prop = entry.getValue (  ) ;^543^^^^^540^553^Property prop = entry.getValue (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P11_Insert_Donor_Statement]^Property prop = getProperty ( name ) ;Property prop = entry.getValue (  ) ;^543^^^^^540^553^Property prop = entry.getValue (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^for  ( Map.Entry<String, Property> entry: properties.values (  )  )  {^542^^^^^540^553^for  ( Map.Entry<String, Property> entry: properties.entrySet (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P14_Delete_Statement]^^543^^^^^540^553^Property prop = entry.getValue (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^for  ( Collection<T> c : prop.getTypes (  )  .elements (  )   )  {^545^^^^^540^553^for  ( Collection<T> c : prop.getTypes (  ) .allEquivalenceClasses (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P5_Replace_Variable]^ret.put ( 1.getKey (  ) , c ) ;^547^^^^^540^553^ret.put ( entry.getKey (  ) , c ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[P7_Replace_Invocation]^checkState ( !type .isUnknownType (  )   ) ;^652^^^^^651^654^checkState ( !type.isUnionType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^652^653^^^^651^654^checkState ( !type.isUnionType (  )  ) ; invalidatingTypes.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^652^^^^^651^654^checkState ( !type.isUnionType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^invalidatingTypes.contains ( type ) ;^653^^^^^651^654^invalidatingTypes.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^653^^^^^651^654^invalidatingTypes.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^addInvalidatingType ( mis.second ) ;invalidatingTypes.add ( type ) ;^653^^^^^651^654^invalidatingTypes.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^typeSystem.addInvalidatingType ( type ) ;invalidatingTypes.add ( type ) ;^653^^^^^651^654^invalidatingTypes.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^invalidate (  ) ;invalidatingTypes.add ( type ) ;^653^^^^^651^654^invalidatingTypes.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^addInvalidatingType ( alt ) ;invalidatingTypes.add ( type ) ;^653^^^^^651^654^invalidatingTypes.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^addInvalidatingType ( mis.first ) ;invalidatingTypes.add ( type ) ;^653^^^^^651^654^invalidatingTypes.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^@Override public StaticScope<JSType> getRootScope (  )  { return true; }^656^^^^^651^661^@Override public StaticScope<JSType> getRootScope (  )  { return null; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRootScope [RETURN_TYPE] StaticScope   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return this;^659^^^^^658^660^return null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node node [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( node.getJSType (  )  != null )  {^664^^^^^662^668^if  ( node.getJSType (  )  == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( node.setString (  )  == null )  {^664^^^^^662^668^if  ( node.getJSType (  )  == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( node .getType (  )   == null )  {^664^^^^^662^668^if  ( node.getJSType (  )  == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( node.getJSType (  )  == true )  {^664^^^^^662^668^if  ( node.getJSType (  )  == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( type.autoboxesTo (  )  != null )  {^664^^^^^662^668^if  ( node.getJSType (  )  == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);^664^665^666^^^662^668^if  ( node.getJSType (  )  == null )  { return registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^664^665^666^^^662^668^if  ( node.getJSType (  )  == null )  { return registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P13_Insert_Block]^if  (  ( node.getJSType (  )  )  == null )  {     return registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ; }^665^^^^^662^668^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^665^^^^^662^668^return registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return node.setString (  ) ;^667^^^^^662^668^return node.getJSType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return node .getType (  )  ;^667^^^^^662^668^return node.getJSType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P12_Insert_Condition]^if  ( node.getJSType (  )  == null )  { return node.getJSType (  ) ; }^667^^^^^662^668^return node.getJSType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^667^^^^^662^668^return node.getJSType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( type == null && invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( type != null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  || type.isUnknownType (  )  )  )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( type == null || 4.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( invalidatingTypes == null || type.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  ( type == null ) {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  (  invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  ( (type == null || invalidatingTypes.contains(type)) )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  ( type.isNamedType( && type.isUnknownType()) )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( type == null || invalidatingTypes.add ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type .isUnionType (  )   )  )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  (  invalidatingTypes.add ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^return true;^671^672^673^674^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  { return true; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^671^672^673^674^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  { return true; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P3_Replace_Literal]^return false;^673^^^^^670^678^return true;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^( type .isEnumType (  )   && type.isUnknownType (  )  )  )  {^672^^^^^670^678^( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^672^673^^^^670^678^( type.isNamedType (  )  && type.isUnknownType (  )  )  )  { return true;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^( type.isNamedType (  )  && type .isUnionType (  )   )  )  {^672^^^^^670^678^( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^ObjectType objType = ObjectType.hasOwnProperty ( type ) ;^676^^^^^670^678^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^ObjectType objType = ObjectType .getConstructor (  )  ;^676^^^^^670^678^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^ObjectType objSkipType = skipType.toObjectType (  ) ;ObjectType objType = ObjectType.cast ( type ) ;^676^^^^^670^678^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet ( type ) ;ObjectType objType = ObjectType.cast ( type ) ;^676^^^^^670^678^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^ObjectType objType = type.toObjectType (  ) ;ObjectType objType = ObjectType.cast ( type ) ;^676^^^^^670^678^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^676^677^^^^670^678^ObjectType objType = ObjectType.cast ( type ) ; return objType != null && !objType.hasReferenceName (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^return objType != null || !objType.hasReferenceName (  ) ;^677^^^^^670^678^return objType != null && !objType.hasReferenceName (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^return objType == null && !objType.hasReferenceName (  ) ;^677^^^^^670^678^return objType != null && !objType.hasReferenceName (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return objType != null && !objType.hasOwnProperty (  ) ;^677^^^^^670^678^return objType != null && !objType.hasReferenceName (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return objType != null && !objType .hasOwnProperty ( prop )  ;^677^^^^^670^678^return objType != null && !objType.hasReferenceName (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return objType != null && !objType .hasOwnProperty ( typeName )  ;^677^^^^^670^678^return objType != null && !objType.hasReferenceName (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^677^^^^^670^678^return objType != null && !objType.hasReferenceName (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^type = alt.restrictByNotNullOrUndefined (  ) ;^681^^^^^680^690^type = type.restrictByNotNullOrUndefined (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;type = type.restrictByNotNullOrUndefined (  ) ;^681^^^^^680^690^type = type.restrictByNotNullOrUndefined (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^jsType = jsType.restrictByNotNullOrUndefined (  ) ;type = type.restrictByNotNullOrUndefined (  ) ;^681^^^^^680^690^type = type.restrictByNotNullOrUndefined (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^type = type .isFunctionPrototypeType (  )  ;^681^^^^^680^690^type = type.restrictByNotNullOrUndefined (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^681^^^^^680^690^type = type.restrictByNotNullOrUndefined (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^return type.restrictByNotNullOrUndefined (  ) ;type = type.restrictByNotNullOrUndefined (  ) ;^681^^^^^680^690^type = type.restrictByNotNullOrUndefined (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( type  >=  UnionType )  {^682^^^^^680^690^if  ( type instanceof UnionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( alt instanceof UnionType )  {^682^^^^^680^690^if  ( type instanceof UnionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( ! ( type instanceof ObjectType )  )  {^682^^^^^680^690^if  ( type instanceof UnionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( objType instanceof FunctionType )  {^682^^^^^680^690^if  ( type instanceof UnionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( jsType instanceof UnionType )  {^682^^^^^680^690^if  ( type instanceof UnionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^java.util.Set<com.google.javascript.rhino.jstype.JSType> types = com.google.common.collect.Sets.newHashSet(type); for (com.google.javascript.rhino.jstype.JSType alt : ((com.google.javascript.rhino.jstype.UnionType) (type)).getAlternates()) {    types.addAll(getTypesToSkipForTypeNonUnion(type));}; return com.google.common.collect.ImmutableSet.copyOf(types);^682^683^684^685^686^680^690^if  ( type instanceof UnionType )  { Set<JSType> types = Sets.newHashSet ( type ) ; for  ( JSType alt :  (  ( UnionType )  type ) .getAlternates (  )  )  { types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^682^683^684^685^686^680^690^if  ( type instanceof UnionType )  { Set<JSType> types = Sets.newHashSet ( type ) ; for  ( JSType alt :  (  ( UnionType )  type ) .getAlternates (  )  )  { types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P13_Insert_Block]^if  ( type instanceof UnionType )  {     for  ( JSType alt :  (  ( UnionType )   ( type )  ) .getAlternates (  )  )  {         addInvalidatingType ( alt ) ;     }     return ; }^682^^^^^680^690^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return ImmutableSet.of ( types ) ;^687^^^^^680^690^return ImmutableSet.copyOf ( types ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^Set<JSType> alts = Sets.newHashSet ( type ) ;^683^^^^^680^690^Set<JSType> types = Sets.newHashSet ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^ObjectType objType = ObjectType.cast ( type ) ;Set<JSType> types = Sets.newHashSet ( type ) ;^683^^^^^680^690^Set<JSType> types = Sets.newHashSet ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet (  ) ;Set<JSType> types = Sets.newHashSet ( type ) ;^683^^^^^680^690^Set<JSType> types = Sets.newHashSet ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;Set<JSType> types = Sets.newHashSet ( type ) ;^683^^^^^680^690^Set<JSType> types = Sets.newHashSet ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^List<JSType> list = Lists.newArrayList (  ) ;Set<JSType> types = Sets.newHashSet ( type ) ;^683^^^^^680^690^Set<JSType> types = Sets.newHashSet ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<T> newTypesToSkip = Sets.newHashSet (  ) ;Set<JSType> types = Sets.newHashSet ( type ) ;^683^^^^^680^690^Set<JSType> types = Sets.newHashSet ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^683^^^^^680^690^Set<JSType> types = Sets.newHashSet ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^for  ( JSType alt :  (  ( UnionType )  type ) .getNativeObjectType (  )  )  {^684^^^^^680^690^for  ( JSType alt :  (  ( UnionType )  type ) .getAlternates (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^684^685^686^^^680^690^for  ( JSType alt :  (  ( UnionType )  type ) .getAlternates (  )  )  { types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^types.addAll ( getTypesToSkipForTypeNonUnion ( alt )  ) ;^685^^^^^680^690^types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^types.addAll ( getTypesToSkipForType ( type )  ) ;^685^^^^^680^690^types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^types.addAll ( getTypesToSkipForType ( alt )  ) ;^685^^^^^680^690^types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^685^^^^^680^690^types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^return ImmutableSet.copyOf ( getTypesToSkipForTypeNonUnion ( type )  ) ;types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ;^685^^^^^680^690^types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^687^^^^^680^690^return ImmutableSet.copyOf ( types ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^for  ( JSType alt :  (  ( UnionType )  type )  .getAlternatives (  )   )  {^684^^^^^680^690^for  ( JSType alt :  (  ( UnionType )  type ) .getAlternates (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return ImmutableSet.copyOf ( getTypesToSkipForTypeNonUnion ( alt )  ) ;^689^^^^^680^690^return ImmutableSet.copyOf ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return ImmutableSet.copyOf ( getTypesToSkipForType ( type )  ) ;^689^^^^^680^690^return ImmutableSet.copyOf ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^689^^^^^680^690^return ImmutableSet.copyOf ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;Set<JSType> types = Sets.newHashSet (  ) ;^693^^^^^692^706^Set<JSType> types = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^Map<T, String> names = Maps.newHashMap (  ) ;Set<JSType> types = Sets.newHashSet (  ) ;^693^^^^^692^706^Set<JSType> types = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<T> allTypes = types.elements (  ) ;Set<JSType> types = Sets.newHashSet (  ) ;^693^^^^^692^706^Set<JSType> types = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet ( type ) ;Set<JSType> types = Sets.newHashSet (  ) ;^693^^^^^692^706^Set<JSType> types = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^List<JSType> list = Lists.newArrayList (  ) ;Set<JSType> types = Sets.newHashSet (  ) ;^693^^^^^692^706^Set<JSType> types = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^JSType jsType = node.getJSType (  ) ;Set<JSType> types = Sets.newHashSet (  ) ;^693^^^^^692^706^Set<JSType> types = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<T> newTypesToSkip = Sets.newHashSet (  ) ;Set<JSType> types = Sets.newHashSet (  ) ;^693^^^^^692^706^Set<JSType> types = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^Set<JSType> types = Sets .newHashSet (  )  ;^693^^^^^692^706^Set<JSType> types = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^693^^^^^692^706^Set<JSType> types = Sets.newHashSet (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^while  ( skipType == null )  {^695^^^^^692^706^while  ( skipType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^while  ( type != null )  {^695^^^^^692^706^while  ( skipType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( objSkipType == null )  {^699^^^^^692^706^if  ( objSkipType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( objSkipType != true )  {^699^^^^^692^706^if  ( objSkipType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( alternatives != null )  {^699^^^^^692^706^if  ( objSkipType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( jsType == null )  {^699^^^^^692^706^if  ( objSkipType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( relatedType == null )  {^699^^^^^692^706^if  ( objSkipType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( top != null )  {^699^^^^^692^706^if  ( objSkipType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( objType != null )  {^699^^^^^692^706^if  ( objSkipType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( types == null )  {^699^^^^^692^706^if  ( objSkipType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( scope != null )  {^699^^^^^692^706^if  ( objSkipType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( ret != null )  {^699^^^^^692^706^if  ( objSkipType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( lastType != null )  {^699^^^^^692^706^if  ( objSkipType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^skipType = objSkipType.getImplicitPrototype();^699^700^701^702^703^692^706^if  ( objSkipType != null )  { skipType = objSkipType.getImplicitPrototype (  ) ; } else { break; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^699^700^701^702^703^692^706^if  ( objSkipType != null )  { skipType = objSkipType.getImplicitPrototype (  ) ; } else { break; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^skipType = objSkipType.hasOwnProperty (  ) ;^700^^^^^692^706^skipType = objSkipType.getImplicitPrototype (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^skipType =  null.getImplicitPrototype (  ) ;^700^^^^^692^706^skipType = objSkipType.getImplicitPrototype (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^objType = objType.getImplicitPrototype (  ) ;skipType = objSkipType.getImplicitPrototype (  ) ;^700^^^^^692^706^skipType = objSkipType.getImplicitPrototype (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P12_Insert_Condition]^if  ( objType != null && objType.getImplicitPrototype (  )  != null )  { skipType = objSkipType.getImplicitPrototype (  ) ; }^700^^^^^692^706^skipType = objSkipType.getImplicitPrototype (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^skipType = objSkipType .getConstructor (  )  ;^700^^^^^692^706^skipType = objSkipType.getImplicitPrototype (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^700^^^^^692^706^skipType = objSkipType.getImplicitPrototype (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^typeSystem.addInvalidatingType ( objType.getImplicitPrototype (  )  ) ;skipType = objSkipType.getImplicitPrototype (  ) ;^700^^^^^692^706^skipType = objSkipType.getImplicitPrototype (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^ObjectType objSkipType = skipType.toObjectType (  ) ;skipType = objSkipType.getImplicitPrototype (  ) ;^700^^^^^692^706^skipType = objSkipType.getImplicitPrototype (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^ObjectType objSkipType = type.toObjectType (  ) ;^698^^^^^692^706^ObjectType objSkipType = skipType.toObjectType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^ObjectType objSkipType = skipType .isNamedType (  )  ;^698^^^^^692^706^ObjectType objSkipType = skipType.toObjectType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^ObjectType objType = ObjectType.cast ( type ) ;ObjectType objSkipType = skipType.toObjectType (  ) ;^698^^^^^692^706^ObjectType objSkipType = skipType.toObjectType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^JSType jsType = node.getJSType (  ) ;ObjectType objSkipType = skipType.toObjectType (  ) ;^698^^^^^692^706^ObjectType objSkipType = skipType.toObjectType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^ObjectType objType = type.toObjectType (  ) ;ObjectType objSkipType = skipType.toObjectType (  ) ;^698^^^^^692^706^ObjectType objSkipType = skipType.toObjectType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^types.add ( type ) ;^696^^^^^692^706^types.add ( skipType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^696^^^^^692^706^types.add ( skipType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^typesToSkip.add ( skipType ) ;types.add ( skipType ) ;^696^^^^^692^706^types.add ( skipType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^addTypeToSkip ( newType ) ;types.add ( skipType ) ;^696^^^^^692^706^types.add ( skipType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^rootTypes.put ( node, type ) ;types.add ( skipType ) ;^696^^^^^692^706^types.add ( skipType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.addTypeToSkip ( type ) ;types.add ( skipType ) ;^696^^^^^692^706^types.add ( skipType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^getTypes (  ) .union ( skipType, type ) ;types.add ( skipType ) ;^696^^^^^692^706^types.add ( skipType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^newTypesToSkip.add ( subType ) ;types.add ( skipType ) ;^696^^^^^692^706^types.add ( skipType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^prop.typesToSkip.add ( type ) ;types.add ( skipType ) ;^696^^^^^692^706^types.add ( skipType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^698^^^^^692^706^ObjectType objSkipType = skipType.toObjectType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^skipType = objSkipType.getImplicitPrototype (  ) ;ObjectType objSkipType = skipType.toObjectType (  ) ;^698^^^^^692^706^ObjectType objSkipType = skipType.toObjectType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( objSkipType != false )  {^699^^^^^692^706^if  ( objSkipType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  skipType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objSkipType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^return type.isEnumType (  )  &&  ( type.autoboxesTo (  )  != null ) ;^709^^^^^708^710^return type.isEnumType (  )  ||  ( type.autoboxesTo (  )  != null ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^return type.isEnumType (  )  ||  ( type.autoboxesTo (  )  == null ) ;^709^^^^^708^710^return type.isEnumType (  )  ||  ( type.autoboxesTo (  )  != null ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return type .isUnionType (  )   ||  ( type.autoboxesTo (  )  != null ) ;^709^^^^^708^710^return type.isEnumType (  )  ||  ( type.autoboxesTo (  )  != null ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return type .isUnionType (  )   ||  ( type.autoboxesTo (  )  != false ) ;^709^^^^^708^710^return type.isEnumType (  )  ||  ( type.autoboxesTo (  )  != null ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^709^^^^^708^710^return type.isEnumType (  )  ||  ( type.autoboxesTo (  )  != null ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return type.isEnumType (  )  ||  ( type .unboxesTo (  )   != null ) ;^709^^^^^708^710^return type.isEnumType (  )  ||  ( type.autoboxesTo (  )  != null ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^713^^^^^712^714^return type.restrictByNotNullOrUndefined (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] restrictByNotNullOrUndefined [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  ( (objType != null && objType.getConstructor() != null) )  {^717^^^^^716^734^if  ( type.isUnionType (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  ( objType != null )  {^717^^^^^716^734^if  ( type.isUnionType (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  ( objType.getConstructor (  )  != null )  {^717^^^^^716^734^if  ( type.isUnionType (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( type .isUnknownType (  )   )  {^717^^^^^716^734^if  ( type.isUnionType (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P13_Insert_Block]^if  (  (  ( objType != null )  &&  (  ( objType.getConstructor (  )  )  != null )  )  &&  ( objType.getConstructor (  ) .isInterface (  )  )  )  {     JSType> list = newArrayList (  ) ;     for  ( FunctionType impl : registry.getDirectImplementors ( objType )  )  {         list.add ( impl.getInstanceType (  )  ) ;     }     return list; }else {     return null; }^717^^^^^716^734^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( objType != null || objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( objType == null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( objType != null && objType.getConstructor (  )  == null && objType.getConstructor (  ) .isInterface (  )  )  {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  ( objType != null ) {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  (  objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  ( (objType != null && objType.getConstructor() != null) )  {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  ( objType.getConstructor (  )  != null )  {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( objType != null && objType.hasOwnProperty (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .getNativeObjectType (  )  )  {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( objType != null && objType .getImplicitPrototype (  )   != null && objType^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( objType != false ) {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return this;^731^^^^^716^734^return null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet (  ) ;List<JSType> list = Lists.newArrayList (  ) ;^724^^^^^716^734^List<JSType> list = Lists.newArrayList (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet ( type ) ;List<JSType> list = Lists.newArrayList (  ) ;^724^^^^^716^734^List<JSType> list = Lists.newArrayList (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^724^^^^^716^734^List<JSType> list = Lists.newArrayList (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^: objType.getDirectImplementors ( registry )  )  {^726^^^^^716^734^: registry.getDirectImplementors ( objType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^: registry .getNativeType (  )   )  {^726^^^^^716^734^: registry.getDirectImplementors ( objType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^726^727^^^^716^734^: registry.getDirectImplementors ( objType )  )  { list.add ( impl.getInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^list.add ( impl .isConstructor (  )   ) ;^727^^^^^716^734^list.add ( impl.getInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^727^^^^^716^734^list.add ( impl.getInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P12_Insert_Condition]^if  ( type.isInstance (  )  )  { list.add ( impl.getInstanceType (  )  ) ; }^727^^^^^716^734^list.add ( impl.getInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^ObjectType objType = type .isNamedType (  )  ;^720^^^^^716^734^ObjectType objType = type.toObjectType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^ObjectType objSkipType = skipType.toObjectType (  ) ;ObjectType objType = type.toObjectType (  ) ;^720^^^^^716^734^ObjectType objType = type.toObjectType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^ObjectType objType = ObjectType.cast ( type ) ;ObjectType objType = type.toObjectType (  ) ;^720^^^^^716^734^ObjectType objType = type.toObjectType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^JSType jsType = node.getJSType (  ) ;ObjectType objType = type.toObjectType (  ) ;^720^^^^^716^734^ObjectType objType = type.toObjectType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^720^^^^^716^734^ObjectType objType = type.toObjectType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^typeName = type.toString (  ) ;ObjectType objType = type.toObjectType (  ) ;^720^^^^^716^734^ObjectType objType = type.toObjectType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^objType = objType.getImplicitPrototype (  ) ;ObjectType objType = type.toObjectType (  ) ;^720^^^^^716^734^ObjectType objType = type.toObjectType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^objType.hasOwnProperty (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^722^723^^^^716^734^objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^objType .getImplicitPrototype (  )   != null && objType^722^723^^^^716^734^objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^722^723^724^^^716^734^objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  { List<JSType> list = Lists.newArrayList (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^objType.getConstructor (  ) .getNativeObjectType (  )  )  {^723^^^^^716^734^objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^objType.hasOwnProperty (  ) .isInterface (  )  )  {^723^^^^^716^734^objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^723^724^^^^716^734^objType.getConstructor (  ) .isInterface (  )  )  { List<JSType> list = Lists.newArrayList (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return  (  ( UnionType )  type ) .getNativeObjectType (  ) ;^718^^^^^716^734^return  (  ( UnionType )  type ) .getAlternates (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return  (  ( UnionType )  type )  .getAlternatives (  )  ;^718^^^^^716^734^return  (  ( UnionType )  type ) .getAlternates (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^718^^^^^716^734^return  (  ( UnionType )  type ) .getAlternates (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  (  objType.getConstructor (  )  != true && objType.getConstructor (  ) .isInterface (  )  )  {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return false;^731^^^^^716^734^return null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^objType.getConstructor (  )  .isInstanceType (  )   )  {^723^^^^^716^734^objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( ! ( type  &  ObjectType )  )  {^737^^^^^736^757^if  ( ! ( type instanceof ObjectType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  ( type.autoboxesTo() != null )  {^737^^^^^736^757^if  ( ! ( type instanceof ObjectType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  (  ( type instanceof ObjectType )  )  {^737^^^^^736^757^if  ( ! ( type instanceof ObjectType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( type instanceof UnionType )  {^737^^^^^736^757^if  ( ! ( type instanceof ObjectType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( objType instanceof FunctionType )  {^737^^^^^736^757^if  ( ! ( type instanceof ObjectType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( jsType instanceof UnionType )  {^737^^^^^736^757^if  ( ! ( type instanceof ObjectType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^if ((type.autoboxesTo()) != null) {    type = type.autoboxesTo();}else {    return null;};^737^738^739^740^741^736^757^if  ( ! ( type instanceof ObjectType )  )  { if  ( type.autoboxesTo (  )  != null )  { type = type.autoboxesTo (  ) ; } else { return null; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^737^738^739^740^741^736^757^if  ( ! ( type instanceof ObjectType )  )  { if  ( type.autoboxesTo (  )  != null )  { type = type.autoboxesTo (  ) ; } else { return null; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( type.autoboxesTo (  )  == null )  {^738^^^^^736^757^if  ( type.autoboxesTo (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( type .unboxesTo (  )   != null )  {^738^^^^^736^757^if  ( type.autoboxesTo (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( type.autoboxesTo (  )  != this )  {^738^^^^^736^757^if  ( type.autoboxesTo (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^type = type.autoboxesTo();^738^739^740^741^742^736^757^if  ( type.autoboxesTo (  )  != null )  { type = type.autoboxesTo (  ) ; } else { return null; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^738^739^740^741^742^736^757^if  ( type.autoboxesTo (  )  != null )  { type = type.autoboxesTo (  ) ; } else { return null; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return true;^741^^^^^736^757^return null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^type = type .unboxesTo (  )  ;^739^^^^^736^757^type = type.autoboxesTo (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^type =  null.autoboxesTo (  ) ;^739^^^^^736^757^type = type.autoboxesTo (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^typeName = type.toString (  ) ;type = type.autoboxesTo (  ) ;^739^^^^^736^757^type = type.autoboxesTo (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^cType = cType.unionWith ( concrete ) ;type = type.autoboxesTo (  ) ;^739^^^^^736^757^type = type.autoboxesTo (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P12_Insert_Condition]^if  ( jsType.autoboxesTo (  )  != null )  { type = type.autoboxesTo (  ) ; }^739^^^^^736^757^type = type.autoboxesTo (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P12_Insert_Condition]^if  ( type.autoboxesTo (  )  != null )  { type = type.autoboxesTo (  ) ; }^739^^^^^736^757^type = type.autoboxesTo (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^739^^^^^736^757^type = type.autoboxesTo (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^JSType autoboxed = jsType.autoboxesTo (  ) ;type = type.autoboxesTo (  ) ;^739^^^^^736^757^type = type.autoboxesTo (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^JSType jsType = node.getJSType (  ) ;type = type.autoboxesTo (  ) ;^739^^^^^736^757^type = type.autoboxesTo (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return false;^741^^^^^736^757^return null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( type.autoboxesTo (  )  != true )  {^738^^^^^736^757^if  ( type.autoboxesTo (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^T firstType = null;ObjectType foundType = null;^748^^^^^736^757^ObjectType foundType = null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^ObjectType objType = ObjectType.hasOwnProperty ( type ) ;^749^^^^^736^757^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^ObjectType objSkipType = skipType.toObjectType (  ) ;ObjectType objType = ObjectType.cast ( type ) ;^749^^^^^736^757^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet ( type ) ;ObjectType objType = ObjectType.cast ( type ) ;^749^^^^^736^757^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^ObjectType objType = type.toObjectType (  ) ;ObjectType objType = ObjectType.cast ( type ) ;^749^^^^^736^757^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^749^^^^^736^757^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^while  ( objType != null || objType.getImplicitPrototype (  )  != objType )  {^750^^^^^736^757^while  ( objType != null && objType.getImplicitPrototype (  )  != objType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^while  ( objType == null && objType.getImplicitPrototype (  )  != objType )  {^750^^^^^736^757^while  ( objType != null && objType.getImplicitPrototype (  )  != objType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^while  ( objType != null && objType.getImplicitPrototype (  )  == objType )  {^750^^^^^736^757^while  ( objType != null && objType.getImplicitPrototype (  )  != objType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^while  ( foundType != null && objType.getImplicitPrototype (  )  != objType )  {^750^^^^^736^757^while  ( objType != null && objType.getImplicitPrototype (  )  != objType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^while  ( objType != null && objType.hasOwnProperty (  )  != objType )  {^750^^^^^736^757^while  ( objType != null && objType.getImplicitPrototype (  )  != objType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( foundType.hasOwnProperty ( field )  )  {^751^^^^^736^757^if  ( objType.hasOwnProperty ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( field.hasOwnProperty ( objType )  )  {^751^^^^^736^757^if  ( objType.hasOwnProperty ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^foundType = objType;^751^752^753^^^736^757^if  ( objType.hasOwnProperty ( field )  )  { foundType = objType; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^751^752^753^^^736^757^if  ( objType.hasOwnProperty ( field )  )  { foundType = objType; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^foundType = foundType;^752^^^^^736^757^foundType = objType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^foundType =  null;^752^^^^^736^757^foundType = objType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^objType = objType.hasOwnProperty (  ) ;^754^^^^^736^757^objType = objType.getImplicitPrototype (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^objType =  foundType.getImplicitPrototype (  ) ;^754^^^^^736^757^objType = objType.getImplicitPrototype (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^skipType = objSkipType.getImplicitPrototype (  ) ;objType = objType.getImplicitPrototype (  ) ;^754^^^^^736^757^objType = objType.getImplicitPrototype (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P12_Insert_Condition]^if  ( objType != null && objType.getImplicitPrototype (  )  != null )  { objType = objType.getImplicitPrototype (  ) ; }^754^^^^^736^757^objType = objType.getImplicitPrototype (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( objType.hasOwnProperty ( typeName )  )  {^751^^^^^736^757^if  ( objType.hasOwnProperty ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( objType .hasReferenceName (  )   )  {^751^^^^^736^757^if  ( objType.hasOwnProperty ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^754^^^^^736^757^objType = objType.getImplicitPrototype (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^typeSystem.addInvalidatingType ( objType.getImplicitPrototype (  )  ) ;objType = objType.getImplicitPrototype (  ) ;^754^^^^^736^757^objType = objType.getImplicitPrototype (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^ObjectType objType = type.toObjectType (  ) ;objType = objType.getImplicitPrototype (  ) ;^754^^^^^736^757^objType = objType.getImplicitPrototype (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^objType =  null.getImplicitPrototype (  ) ;^754^^^^^736^757^objType = objType.getImplicitPrototype (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^while  ( objType != null && objType .getConstructor (  )   != objType )  {^750^^^^^736^757^while  ( objType != null && objType.getImplicitPrototype (  )  != objType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^while  ( foundType != null && objType.hasOwnProperty (  )  != objType )  {^750^^^^^736^757^while  ( objType != null && objType.getImplicitPrototype (  )  != objType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^750^751^752^^^736^757^while  ( objType != null && objType.getImplicitPrototype (  )  != objType )  { if  ( objType.hasOwnProperty ( field )  )  { foundType = objType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^objType = objType .getConstructor (  )  ;^754^^^^^736^757^objType = objType.getImplicitPrototype (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^objType = foundType.hasOwnProperty (  ) ;^754^^^^^736^757^objType = objType.getImplicitPrototype (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return objType;^756^^^^^736^757^return foundType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( type .isUnionType (  )   )  {^760^^^^^759^769^if  ( type.isFunctionPrototypeType (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( instanceType.isFunctionPrototype (  )  )  {^760^^^^^759^769^if  ( type.isFunctionPrototypeType (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( owner.isConstructor (  )  && owner.isInterface (  )  )  {^763^^^^^759^769^if  ( owner.isConstructor (  )  || owner.isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  ( owner.isConstructor (  )  ) {^763^^^^^759^769^if  ( owner.isConstructor (  )  || owner.isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  (  owner.isInterface (  )  )  {^763^^^^^759^769^if  ( owner.isConstructor (  )  || owner.isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( owner .getSuperClassConstructor (  )   || owner.isInterface (  )  )  {^763^^^^^759^769^if  ( owner.isConstructor (  )  || owner.isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^return ((com.google.javascript.rhino.jstype.FunctionPrototypeType) (type)).getOwnerFunction().getInstanceType();^763^764^765^766^^759^769^if  ( owner.isConstructor (  )  || owner.isInterface (  )  )  { return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  ) .getInstanceType (  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^763^764^765^766^^759^769^if  ( owner.isConstructor (  )  || owner.isInterface (  )  )  { return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  ) .getInstanceType (  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P13_Insert_Block]^if  ( objType instanceof FunctionPrototypeType )  {     constructor =  (  ( FunctionPrototypeType )   ( objType )  ) .getOwnerFunction (  ) ; }else {     constructor = objType.getConstructor (  ) ; }^763^^^^^759^769^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  ) .getNativeObjectType (  ) ;^764^765^^^^759^769^return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return  (  ( FunctionPrototypeType )  type ) .getNativeObjectType (  ) .getInstanceType (  ) ;^764^765^^^^759^769^return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  )  .isConstructor (  )  ;^764^765^^^^759^769^return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P13_Insert_Block]^if  (  ( owner.isConstructor (  )  )  ||  ( owner.isInterface (  )  )  )  {     return  (  ( FunctionPrototypeType )   ( type )  ) .getOwnerFunction (  ) .getInstanceType (  ) ; }^764^^^^^759^769^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^764^765^^^^759^769^return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type;FunctionPrototypeType prototype =  ( FunctionPrototypeType )  type;^761^^^^^759^769^FunctionPrototypeType prototype =  ( FunctionPrototypeType )  type;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P13_Insert_Block]^if  ( objType instanceof FunctionPrototypeType )  {     constructor =  (  ( FunctionPrototypeType )   ( objType )  ) .getOwnerFunction (  ) ; }else {     constructor = objType.getConstructor (  ) ; }^761^^^^^759^769^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^ConcreteFunctionType func = tt.getConcreteFunction ( decl ) ;FunctionType owner = prototype.getOwnerFunction (  ) ;^762^^^^^759^769^FunctionType owner = prototype.getOwnerFunction (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^762^^^^^759^769^FunctionType owner = prototype.getOwnerFunction (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^constructor = objType.getConstructor (  ) ;FunctionType owner = prototype.getOwnerFunction (  ) ;^762^^^^^759^769^FunctionType owner = prototype.getOwnerFunction (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;FunctionType owner = prototype.getOwnerFunction (  ) ;^762^^^^^759^769^FunctionType owner = prototype.getOwnerFunction (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( owner.isConstructor (  )  || owner .isInstanceType (  )   )  {^763^^^^^759^769^if  ( owner.isConstructor (  )  || owner.isInterface (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return this;^768^^^^^759^769^return null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionPrototypeType  prototype  FunctionType  owner  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^ObjectType objType = ObjectType.cast ( top ) ;^774^^^^^773^803^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P7_Replace_Invocation]^ObjectType objType = ObjectType.hasOwnProperty ( type ) ;^774^^^^^773^803^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^ObjectType objSkipType = skipType.toObjectType (  ) ;ObjectType objType = ObjectType.cast ( type ) ;^774^^^^^773^803^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet ( type ) ;ObjectType objType = ObjectType.cast ( type ) ;^774^^^^^773^803^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^ObjectType objType = type.toObjectType (  ) ;ObjectType objType = ObjectType.cast ( type ) ;^774^^^^^773^803^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P7_Replace_Invocation]^ObjectType objType = ObjectType .getConstructor (  )  ;^774^^^^^773^803^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^ObjectType objType = ObjectType.hasOwnProperty ( top ) ;^774^^^^^773^803^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P14_Delete_Statement]^^774^^^^^773^803^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P2_Replace_Operator]^while  ( constructor == null )  {^784^^^^^773^803^while  ( constructor != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P2_Replace_Operator]^if  ( top == null )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^if  ( type != null )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^if  ( top != true )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P9_Replace_Statement]^if  ( jsType == null )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P9_Replace_Statement]^if  ( relatedType == null )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P9_Replace_Statement]^if  ( objSkipType != null )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P9_Replace_Statement]^if  ( objType != null )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P9_Replace_Statement]^if  ( types == null )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P9_Replace_Statement]^if  ( scope != null )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P9_Replace_Statement]^if  ( ret != null )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P9_Replace_Statement]^if  ( lastType != null )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P15_Unwrap_Block]^p.addType(itype, top, relatedType);^787^788^789^790^791^773^803^if  ( top != null )  { p.addType ( itype, top, relatedType ) ; } else { recordInterfaces ( itype, relatedType, p ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P16_Remove_Block]^^787^788^789^790^791^773^803^if  ( top != null )  { p.addType ( itype, top, relatedType ) ; } else { recordInterfaces ( itype, relatedType, p ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P13_Insert_Block]^if  ( relatedType == null )  {     getTypes (  ) .add ( top ) ; }else {     getTypes (  ) .union ( top, relatedType ) ; }^787^^^^^773^803^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^recordInterfaces ( objType, relatedType, p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^recordInterfaces (  relatedType, p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^recordInterfaces ( itype,  p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^recordInterfaces ( itype, relatedType ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^recordInterfaces ( p, relatedType, itype ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^recordInterfaces ( relatedType, itype, p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P7_Replace_Invocation]^getType ( itype, relatedType, p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^recordInterfaces ( itype, type, p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P14_Delete_Statement]^^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^p.addType ( itype, top, relatedType ) ;recordInterfaces ( itype, relatedType, p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^prop.addType ( type, topType, relatedType ) ;recordInterfaces ( itype, relatedType, p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^p.addType ( objType, top, relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^p.addType ( itype, type, relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^p.addType ( itype, top, type ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^p.addType ( itype, to relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^p.addType (  top, relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^p.addType ( itype,  relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^p.addType ( itype, top ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^p.addType ( itype, relatedType, top ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^p.addType ( relatedType, top, itype ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P14_Delete_Statement]^^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^getTypes (  ) .union ( top, relatedType ) ;p.addType ( itype, top, relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^recordInterfaces ( itype, relatedType, p ) ;p.addType ( itype, top, relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^prop.addType ( type, topType, relatedType ) ;p.addType ( itype, top, relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P15_Unwrap_Block]^return ;^794^795^^^^773^803^if  ( p.skipRenaming )  return; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P16_Remove_Block]^^794^795^^^^773^803^if  ( p.skipRenaming )  return; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P2_Replace_Operator]^if  ( constructor.isInterface (  )  && constructor.isConstructor (  )  )  {^796^^^^^773^803^if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P6_Replace_Expression]^if  ( constructor.isInterface (  )  ) {^796^^^^^773^803^if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P6_Replace_Expression]^if  (  constructor.isConstructor (  )  )  {^796^^^^^773^803^if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P7_Replace_Invocation]^if  ( constructor .isInstanceType (  )   || constructor.isConstructor (  )  )  {^796^^^^^773^803^if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P15_Unwrap_Block]^constructor = constructor.getSuperClassConstructor();^796^797^798^799^800^773^803^if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  { constructor = constructor.getSuperClassConstructor (  ) ; } else { constructor = null; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P16_Remove_Block]^^796^797^798^799^800^773^803^if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  { constructor = constructor.getSuperClassConstructor (  ) ; } else { constructor = null; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^constructor = true;^799^^^^^796^800^constructor = null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^constructor =  null.getSuperClassConstructor (  ) ;^797^^^^^773^803^constructor = constructor.getSuperClassConstructor (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^constructor = objType.getConstructor (  ) ;constructor = constructor.getSuperClassConstructor (  ) ;^797^^^^^773^803^constructor = constructor.getSuperClassConstructor (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P14_Delete_Statement]^^797^^^^^773^803^constructor = constructor.getSuperClassConstructor (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P7_Replace_Invocation]^constructor = constructor .isConstructor (  )  ;^797^^^^^773^803^constructor = constructor.getSuperClassConstructor (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^constructor = true;^799^^^^^773^803^constructor = null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^JSType top = getTypeWithProperty ( p.name ) ;^786^^^^^773^803^JSType top = getTypeWithProperty ( p.name, itype ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^JSType top = getTypeWithProperty (  itype ) ;^786^^^^^773^803^JSType top = getTypeWithProperty ( p.name, itype ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;JSType top = getTypeWithProperty ( p.name, itype ) ;^786^^^^^773^803^JSType top = getTypeWithProperty ( p.name, itype ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^ConcreteType ret = getTypeWithProperty ( field, t ) ;JSType top = getTypeWithProperty ( p.name, itype ) ;^786^^^^^773^803^JSType top = getTypeWithProperty ( p.name, itype ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P7_Replace_Invocation]^for  ( ObjectType itype : constructor .isInterface (  )   )  {^785^^^^^773^803^for  ( ObjectType itype : constructor.getImplementedInterfaces (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P14_Delete_Statement]^^786^^^^^773^803^JSType top = getTypeWithProperty ( p.name, itype ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^return typeSystem.getTypeWithProperty ( field, type ) ;JSType top = getTypeWithProperty ( p.name, itype ) ;^786^^^^^773^803^JSType top = getTypeWithProperty ( p.name, itype ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^p.addType ( top, itype, relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^recordInterfaces ( objType, relatedType, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^recordInterfaces ( itype, type, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^recordInterfaces (  relatedType, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^recordInterfaces ( itype,  p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^recordInterfaces ( itype, relatedType ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^recordInterfaces ( relatedType, itype, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^recordInterfaces ( p, relatedType, itype ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P7_Replace_Invocation]^getType ( itype, relatedType, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P14_Delete_Statement]^^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^p.addType ( itype, top, relatedType ) ;recordInterfaces ( itype, relatedType, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^prop.addType ( type, topType, relatedType ) ;recordInterfaces ( itype, relatedType, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P7_Replace_Invocation]^if  ( constructor.isInterface (  )  || constructor .getSuperClassConstructor (  )   )  {^796^^^^^773^803^if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P2_Replace_Operator]^if  ( objType == null )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P6_Replace_Expression]^if  ( objType instanceof FunctionType )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P6_Replace_Expression]^if  ( objType instanceof FunctionPrototypeType )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P6_Replace_Expression]^if  ( constructor != null )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P6_Replace_Expression]^if  ( top != null )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P6_Replace_Expression]^if  ( constructor.isInterface() || constructor.isConstructor() )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^if  ( objType != this )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P9_Replace_Statement]^if  ( alternatives != null )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P9_Replace_Statement]^if  ( jsType == null )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P9_Replace_Statement]^if  ( relatedType == null )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P9_Replace_Statement]^if  ( objSkipType != null )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P9_Replace_Statement]^if  ( types == null )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P9_Replace_Statement]^if  ( scope != null )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P9_Replace_Statement]^if  ( ret != null )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P9_Replace_Statement]^if  ( lastType != null )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^if  ( type != this )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^recordInterfaces ( itype, p, relatedType ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^recordInterfaces ( itype, p, relatedType ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P2_Replace_Operator]^if  ( objType  >  FunctionType )  {^777^^^^^773^803^if  ( objType instanceof FunctionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P2_Replace_Operator]^if  ( objType  ==  FunctionType )  {^777^^^^^773^803^if  ( objType instanceof FunctionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^if  ( itype instanceof FunctionType )  {^777^^^^^773^803^if  ( objType instanceof FunctionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P6_Replace_Expression]^if  ( objType instanceof FunctionPrototypeType )  {^777^^^^^773^803^if  ( objType instanceof FunctionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P9_Replace_Statement]^if  ( ! ( type instanceof ObjectType )  )  {^777^^^^^773^803^if  ( objType instanceof FunctionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P9_Replace_Statement]^if  ( type instanceof UnionType )  {^777^^^^^773^803^if  ( objType instanceof FunctionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P9_Replace_Statement]^if  ( jsType instanceof UnionType )  {^777^^^^^773^803^if  ( objType instanceof FunctionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P13_Insert_Block]^if  ( objType instanceof FunctionPrototypeType )  {     constructor =  (  ( FunctionPrototypeType )   ( objType )  ) .getOwnerFunction (  ) ; }else {     constructor = objType.getConstructor (  ) ; }^777^^^^^773^803^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P2_Replace_Operator]^} else if  ( objType  ^  FunctionPrototypeType )  {^779^^^^^773^803^} else if  ( objType instanceof FunctionPrototypeType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P6_Replace_Expression]^} else {^779^^^^^773^803^} else if  ( objType instanceof FunctionPrototypeType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^}  if  ( itype instanceof FunctionPrototypeType )  {^779^^^^^773^803^} else if  ( objType instanceof FunctionPrototypeType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P15_Unwrap_Block]^constructor = ((com.google.javascript.rhino.jstype.FunctionPrototypeType) (objType)).getOwnerFunction();^779^780^781^782^783^773^803^} else if  ( objType instanceof FunctionPrototypeType )  { constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ; } else { constructor = objType.getConstructor (  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P16_Remove_Block]^^779^780^781^782^783^773^803^} else if  ( objType instanceof FunctionPrototypeType )  { constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ; } else { constructor = objType.getConstructor (  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P13_Insert_Block]^if  (  ( owner.isConstructor (  )  )  ||  ( owner.isInterface (  )  )  )  {     return  (  ( FunctionPrototypeType )   ( type )  ) .getOwnerFunction (  ) .getInstanceType (  ) ; }^779^^^^^773^803^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P13_Insert_Block]^if  ( objType instanceof FunctionType )  {     constructor =  (  ( FunctionType )   ( objType )  ) ; }else     if  ( objType instanceof FunctionPrototypeType )  {         constructor =  (  ( FunctionPrototypeType )   ( objType )  ) .getOwnerFunction (  ) ;     }else {         constructor = objType.getConstructor (  ) ;     }^779^^^^^773^803^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^constructor = itype.getConstructor (  ) ;^782^^^^^779^783^constructor = objType.getConstructor (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P7_Replace_Invocation]^constructor = objType.hasOwnProperty (  ) ;^782^^^^^779^783^constructor = objType.getConstructor (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^constructor = constructor.getSuperClassConstructor (  ) ;constructor = objType.getConstructor (  ) ;^782^^^^^779^783^constructor = objType.getConstructor (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P14_Delete_Statement]^^782^^^^^779^783^constructor = objType.getConstructor (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^FunctionType owner = prototype.getOwnerFunction (  ) ;constructor = objType.getConstructor (  ) ;^782^^^^^779^783^constructor = objType.getConstructor (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P7_Replace_Invocation]^constructor =  (  ( FunctionPrototypeType )  objType ) .getNativeObjectType (  ) ;^780^^^^^773^803^constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^constructor =   (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^780^^^^^773^803^constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^constructor =  ( FunctionType )  objType;constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^780^^^^^773^803^constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P13_Insert_Block]^if  (  ( owner.isConstructor (  )  )  ||  ( owner.isInterface (  )  )  )  {     return  (  ( FunctionPrototypeType )   ( type )  ) .getOwnerFunction (  ) .getInstanceType (  ) ; }^780^^^^^773^803^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P14_Delete_Statement]^^780^^^^^773^803^constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^constructor = itype.getConstructor (  ) ;^782^^^^^773^803^constructor = objType.getConstructor (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P7_Replace_Invocation]^constructor = objType.hasOwnProperty (  ) ;^782^^^^^773^803^constructor = objType.getConstructor (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P7_Replace_Invocation]^constructor = objType .getImplicitPrototype (  )  ;^782^^^^^773^803^constructor = objType.getConstructor (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^constructor = constructor.getSuperClassConstructor (  ) ;constructor = objType.getConstructor (  ) ;^782^^^^^773^803^constructor = objType.getConstructor (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P14_Delete_Statement]^^782^^^^^773^803^constructor = objType.getConstructor (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^FunctionType owner = prototype.getOwnerFunction (  ) ;constructor = objType.getConstructor (  ) ;^782^^^^^773^803^constructor = objType.getConstructor (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^constructor =   ( FunctionType )  objType;^778^^^^^773^803^constructor =  ( FunctionType )  objType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P11_Insert_Donor_Statement]^constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;constructor =  ( FunctionType )  objType;^778^^^^^773^803^constructor =  ( FunctionType )  objType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P2_Replace_Operator]^} else if  ( objType  !=  FunctionPrototypeType )  {^779^^^^^773^803^} else if  ( objType instanceof FunctionPrototypeType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P7_Replace_Invocation]^constructor = objType .getImplicitPrototype (  )  ;^782^^^^^779^783^constructor = objType.getConstructor (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^if  ( type != true )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^if  ( constructor .isInstanceType (  )   ) {^796^^^^^773^803^if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^constructor = this;^799^^^^^796^800^constructor = null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^constructor = itype.hasOwnProperty (  ) ;^782^^^^^773^803^constructor = objType.getConstructor (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^getType ( objType, relatedType, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P2_Replace_Operator]^if  ( objType  ||  FunctionType )  {^777^^^^^773^803^if  ( objType instanceof FunctionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P2_Replace_Operator]^} else if  ( objType  &  FunctionPrototypeType )  {^779^^^^^773^803^} else if  ( objType instanceof FunctionPrototypeType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^constructor =  null.getConstructor (  ) ;^782^^^^^779^783^constructor = objType.getConstructor (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^constructor = itype .getImplicitPrototype (  )  ;^782^^^^^773^803^constructor = objType.getConstructor (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P2_Replace_Operator]^} else if  ( objType  >=  FunctionPrototypeType )  {^779^^^^^773^803^} else if  ( objType instanceof FunctionPrototypeType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P5_Replace_Variable]^} else if  ( itype instanceof FunctionPrototypeType )  {^779^^^^^773^803^} else if  ( objType instanceof FunctionPrototypeType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^getType ( itype, type, p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^constructor = false;^799^^^^^773^803^constructor = null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^getType ( itype, type, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P7_Replace_Invocation]^checkState ( !type .isUnknownType (  )   ) ;^827^^^^^826^829^checkState ( !type.isUnionType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^827^828^^^^826^829^checkState ( !type.isUnionType (  )  ) ; invalidatingTypes.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^827^^^^^826^829^checkState ( !type.isUnionType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^invalidatingTypes.contains ( type ) ;^828^^^^^826^829^invalidatingTypes.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^828^^^^^826^829^invalidatingTypes.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^addInvalidatingType ( mis.second ) ;invalidatingTypes.add ( type ) ;^828^^^^^826^829^invalidatingTypes.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^typeSystem.addInvalidatingType ( type ) ;invalidatingTypes.add ( type ) ;^828^^^^^826^829^invalidatingTypes.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^invalidate (  ) ;invalidatingTypes.add ( type ) ;^828^^^^^826^829^invalidatingTypes.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^addInvalidatingType ( alt ) ;invalidatingTypes.add ( type ) ;^828^^^^^826^829^invalidatingTypes.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^addInvalidatingType ( mis.first ) ;invalidatingTypes.add ( type ) ;^828^^^^^826^829^invalidatingTypes.add ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return tt.getTypeRegistry (  ) ;^832^^^^^831^833^return tt.getTopScope (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRootScope [RETURN_TYPE] StaticScope   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^832^^^^^831^833^return tt.getTopScope (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRootScope [RETURN_TYPE] StaticScope   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^ConcreteFunctionType func = decl.getConcreteFunction ( tt ) ;^836^^^^^835^839^ConcreteFunctionType func = tt.getConcreteFunction ( decl ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node decl [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  Node  decl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteFunctionType  func  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^ConcreteFunctionType func = tt.getConcreteInstance ( decl ) ;^836^^^^^835^839^ConcreteFunctionType func = tt.getConcreteFunction ( decl ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node decl [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  Node  decl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteFunctionType  func  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^ConcreteFunctionType func = tt .getConcreteInstance (  )  ;^836^^^^^835^839^ConcreteFunctionType func = tt.getConcreteFunction ( decl ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node decl [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  Node  decl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteFunctionType  func  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^836^^^^^835^839^ConcreteFunctionType func = tt.getConcreteFunction ( decl ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node decl [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  Node  decl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteFunctionType  func  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^FunctionType owner = prototype.getOwnerFunction (  ) ;ConcreteFunctionType func = tt.getConcreteFunction ( decl ) ;^836^^^^^835^839^ConcreteFunctionType func = tt.getConcreteFunction ( decl ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node decl [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  Node  decl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteFunctionType  func  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^return  ( func == null )  ? func.getScope (  )  :  ( StaticScope<ConcreteType> )  null;^837^838^^^^835^839^return  ( func != null )  ? func.getScope (  )  :  ( StaticScope<ConcreteType> )  null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node decl [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  Node  decl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteFunctionType  func  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^return  ( func ! =   ( StaticScope<ConcreteType> )  null;^837^838^^^^835^839^return  ( func != null )  ? func.getScope (  )  :  ( StaticScope<ConcreteType> )  null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node decl [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  Node  decl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteFunctionType  func  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^return  ( func ! =  func.getScope (  )  ;^837^838^^^^835^839^return  ( func != null )  ? func.getScope (  )  :  ( StaticScope<ConcreteType> )  null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node decl [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  Node  decl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteFunctionType  func  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return  ( func  =   ( StaticScope;^837^838^^^^835^839^return  ( func != null )  ? func.getScope (  )  :  ( StaticScope<ConcreteType> )  null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node decl [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  Node  decl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteFunctionType  func  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^838^^^^^835^839^func.getScope (  )  :  ( StaticScope<ConcreteType> )  null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node decl [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  Node  decl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteFunctionType  func  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( scope == null )  {^844^^^^^842^851^if  ( scope != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( scope != this )  {^844^^^^^842^851^if  ( scope != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( jsType == null )  {^844^^^^^842^851^if  ( scope != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( relatedType == null )  {^844^^^^^842^851^if  ( scope != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( top != null )  {^844^^^^^842^851^if  ( scope != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( objSkipType != null )  {^844^^^^^842^851^if  ( scope != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( objType != null )  {^844^^^^^842^851^if  ( scope != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( types == null )  {^844^^^^^842^851^if  ( scope != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( ret != null )  {^844^^^^^842^851^if  ( scope != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( lastType != null )  {^844^^^^^842^851^if  ( scope != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return false;^849^^^^^842^851^return null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( c, node, newName ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes (  node, prop ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( c,  prop ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( c, node ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( node, c, prop ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( prop, node, c ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^ConcreteType c = tt.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope ) ;^845^846^^^^842^851^ConcreteType c = tt.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope, node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^ConcreteType c = node.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope, tt ) ;^845^846^^^^842^851^ConcreteType c = tt.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope, node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^ConcreteType c = tt .getConcreteInstance (  )  ;^845^846^^^^842^851^ConcreteType c = tt.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope, node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P13_Insert_Block]^if  ( scope != null )  {     ConcreteType c = tt.inferConcreteType (  (  ( ConcreteScope )   ( scope )  ) , node ) ;     return maybeAddAutoboxes ( c, node, prop ) ; }else {     return null; }^845^^^^^842^851^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^845^846^^^^842^851^ConcreteType c = tt.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope, node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( c, node, typeName ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( c, prop, node ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return true;^849^^^^^842^851^return null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^JSType jsType = node.setString (  ) ;^860^^^^^858^875^JSType jsType = node.getJSType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^ObjectType objSkipType = skipType.toObjectType (  ) ;JSType jsType = node.getJSType (  ) ;^860^^^^^858^875^JSType jsType = node.getJSType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet (  ) ;JSType jsType = node.getJSType (  ) ;^860^^^^^858^875^JSType jsType = node.getJSType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^ObjectType objType = type.toObjectType (  ) ;JSType jsType = node.getJSType (  ) ;^860^^^^^858^875^JSType jsType = node.getJSType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^JSType jsType = node .getType (  )  ;^860^^^^^858^875^JSType jsType = node.getJSType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^860^^^^^858^875^JSType jsType = node.getJSType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^typeName = type.toString (  ) ;JSType jsType = node.getJSType (  ) ;^860^^^^^858^875^JSType jsType = node.getJSType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^return node.getJSType (  ) ;JSType jsType = node.getJSType (  ) ;^860^^^^^858^875^JSType jsType = node.getJSType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^type = type.autoboxesTo (  ) ;JSType jsType = node.getJSType (  ) ;^860^^^^^858^875^JSType jsType = node.getJSType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( jsType != null )  {^861^^^^^858^875^if  ( jsType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  ( concrete != null && isNone()) )  {^861^^^^^858^875^if  ( jsType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  ( concrete != null )  {^861^^^^^858^875^if  ( jsType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( jsType == false )  {^861^^^^^858^875^if  ( jsType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( relatedType == null )  {^861^^^^^858^875^if  ( jsType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( top != null )  {^861^^^^^858^875^if  ( jsType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( objSkipType != null )  {^861^^^^^858^875^if  ( jsType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( objType != null )  {^861^^^^^858^875^if  ( jsType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( types == null )  {^861^^^^^858^875^if  ( jsType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( scope != null )  {^861^^^^^858^875^if  ( jsType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( ret != null )  {^861^^^^^858^875^if  ( jsType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( lastType != null )  {^861^^^^^858^875^if  ( jsType == null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^} else if  ( concrete != null )  {^863^^^^^858^875^} else if  ( jsType.isUnknownType (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^} else {^863^^^^^858^875^} else if  ( jsType.isUnknownType (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^} else if  ( type.isNone (  )  )  {^863^^^^^858^875^} else if  ( jsType.isUnknownType (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^} else if  ( type.isFunction (  )  )  {^863^^^^^858^875^} else if  ( jsType.isUnknownType (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^} else if  ( type.isUnion (  )  )  {^863^^^^^858^875^} else if  ( jsType.isUnknownType (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( concrete != null || !concrete.getPropertyType ( prop ) .isNone (  )  )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( concrete == null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( concrete != null && !concrete.getPropertyType ( typeName ) .isNone (  )  )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  ( concrete != null ) {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  (  !concrete.getPropertyType ( prop ) .isNone (  )  )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( concrete != null && !concrete .toInstance (  )  .isNone (  )  )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( concrete != false ) {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^cType = cType.unionWith(concrete);^867^868^869^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  { cType = cType.unionWith ( concrete ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^867^868^869^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  { cType = cType.unionWith ( concrete ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^cType = concrete.unionWith ( cType ) ;^868^^^^^858^875^cType = cType.unionWith ( concrete ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^cType =  concrete.unionWith ( concrete ) ;^868^^^^^858^875^cType = cType.unionWith ( concrete ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^type = type.autoboxesTo (  ) ;cType = cType.unionWith ( concrete ) ;^868^^^^^858^875^cType = cType.unionWith ( concrete ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^cType = cType .unionWith ( concrete )  ;^868^^^^^858^875^cType = cType.unionWith ( concrete ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^868^^^^^858^875^cType = cType.unionWith ( concrete ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return concrete;^871^^^^^858^875^return cType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^ConcreteType concrete = nativeType.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( tt )  ) ;^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^ConcreteType concrete = tt.getConcreteFunction ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^ConcreteType concrete = tt .getConcreteFunction ( node )   ) ;^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^ConcreteType concrete = tt.getConcreteInstance ( tt.getTopScope (  ) .getNativeObjectType ( nativeType )  ) ;^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^ConcreteType concrete = tt.getConcreteInstance ( tt .getTypeValidator (  )  .getNativeObjectType ( nativeType )  ) ;^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  )  .getInstanceType (  )   ) ;^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^tt.getTopScope (  ) .getNativeObjectType ( nativeType )  ) ;^866^^^^^858^875^tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^866^^^^^858^875^tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^866^^^^^858^875^tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^tt .getTypeValidator (  )  .getNativeObjectType ( nativeType )  ) ;^866^^^^^858^875^tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( cType != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( prop != null && !concrete.getPropertyType ( concrete ) .isNone (  )  )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( concrete != null && !concrete.getPropertyType ( prop )  .isInterface (  )   )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( concrete != null && !concrete.getPropertyType ( newName ) .isNone (  )  )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^} else if  ( jsType .isUnionType (  )   )  {^863^^^^^858^875^} else if  ( jsType.isUnknownType (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^tt.getTypeRegistry (  )  .getInstanceType (  )   ) ;^866^^^^^858^875^tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^cType = cType .unionWith ( cType )  ;^868^^^^^858^875^cType = cType.unionWith ( concrete ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return concrete;^862^^^^^858^875^return cType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^}  if  ( jsType .isUnionType (  )   )  {^863^^^^^858^875^} else if  ( jsType.isUnknownType (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( concrete != this ) {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( cType != null && !concrete .toInstance (  )  .isNone (  )  )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( concrete, jsType, prop ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( cType, jsType, typeName ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes (  jsType, prop ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( cType,  prop ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( cType, jsType ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( jsType, cType, prop ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( cType, prop, jsType ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( prop, jsType, cType ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^jsType = autoboxed.restrictByNotNullOrUndefined (  ) ;^879^^^^^877^894^jsType = jsType.restrictByNotNullOrUndefined (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;jsType = jsType.restrictByNotNullOrUndefined (  ) ;^879^^^^^877^894^jsType = jsType.restrictByNotNullOrUndefined (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^type = type.restrictByNotNullOrUndefined (  ) ;jsType = jsType.restrictByNotNullOrUndefined (  ) ;^879^^^^^877^894^jsType = jsType.restrictByNotNullOrUndefined (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^879^^^^^877^894^jsType = jsType.restrictByNotNullOrUndefined (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^return type.restrictByNotNullOrUndefined (  ) ;jsType = jsType.restrictByNotNullOrUndefined (  ) ;^879^^^^^877^894^jsType = jsType.restrictByNotNullOrUndefined (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( jsType  >  UnionType )  {^880^^^^^877^894^if  ( jsType instanceof UnionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( autoboxed instanceof UnionType )  {^880^^^^^877^894^if  ( jsType instanceof UnionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( ! ( type instanceof ObjectType )  )  {^880^^^^^877^894^if  ( jsType instanceof UnionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( type instanceof UnionType )  {^880^^^^^877^894^if  ( jsType instanceof UnionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( objType instanceof FunctionType )  {^880^^^^^877^894^if  ( jsType instanceof UnionType )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^for (com.google.javascript.rhino.jstype.JSType alt : ((com.google.javascript.rhino.jstype.UnionType) (jsType)).getAlternates()) {    return maybeAddAutoboxes(cType, alt, prop);};^880^881^882^883^^877^894^if  ( jsType instanceof UnionType )  { for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  { return maybeAddAutoboxes ( cType, alt, prop ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^880^881^882^883^^877^894^if  ( jsType instanceof UnionType )  { for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  { return maybeAddAutoboxes ( cType, alt, prop ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P13_Insert_Block]^if  ( type instanceof UnionType )  {     for  ( JSType alt :  (  ( UnionType )   ( type )  ) .getAlternates (  )  )  {         addInvalidatingType ( alt ) ;     }     return ; }^880^^^^^877^894^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( cType, jsType, prop ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( cType, alt, typeName ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes (  alt, prop ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( cType,  prop ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( cType, alt ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( prop, alt, cType ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( alt, cType, prop ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( cType, prop, alt ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^for  ( JSType alt :  (  ( UnionType )  jsType ) .getNativeObjectType (  )  )  {^881^^^^^877^894^for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^for  ( JSType alt :  (  ( UnionType )  jsType )  .getAlternatives (  )   )  {^881^^^^^877^894^for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^881^882^883^^^877^894^for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  { return maybeAddAutoboxes ( cType, alt, prop ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return maybeAddAutoboxes ( cType, alt, newName ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( jsType.autoboxesTo (  )  == null )  {^886^^^^^877^894^if  ( jsType.autoboxesTo (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( alt.autoboxesTo (  )  != null )  {^886^^^^^877^894^if  ( jsType.autoboxesTo (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  ( jsType.unboxesTo() != null )  {^886^^^^^877^894^if  ( jsType.autoboxesTo (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( jsType.autoboxesTo (  )  != false )  {^886^^^^^877^894^if  ( jsType.autoboxesTo (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^com.google.javascript.rhino.jstype.JSType autoboxed = jsType.autoboxesTo(); return cType.unionWith(tt.getConcreteInstance(((com.google.javascript.rhino.jstype.ObjectType) (autoboxed))));^886^887^888^889^890^877^894^if  ( jsType.autoboxesTo (  )  != null )  { JSType autoboxed = jsType.autoboxesTo (  ) ; return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ; } else if  ( jsType.unboxesTo (  )  != null )  { return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^886^887^888^889^890^877^894^if  ( jsType.autoboxesTo (  )  != null )  { JSType autoboxed = jsType.autoboxesTo (  ) ; return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ; } else if  ( jsType.unboxesTo (  )  != null )  { return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^} else if  ( jsType.unboxesTo (  )  == null )  {^889^^^^^877^894^} else if  ( jsType.unboxesTo (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^} else if  ( autoboxed.unboxesTo (  )  != null )  {^889^^^^^877^894^} else if  ( jsType.unboxesTo (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^} else {^889^^^^^877^894^} else if  ( jsType.unboxesTo (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^} else if  ( jsType .autoboxesTo (  )   != null )  {^889^^^^^877^894^} else if  ( jsType.unboxesTo (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^}  if  ( jsType.unboxesTo (  )  != false )  {^889^^^^^877^894^} else if  ( jsType.unboxesTo (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^return cType.unionWith(tt.getConcreteInstance(((com.google.javascript.rhino.jstype.ObjectType) (jsType))));^889^890^891^^^877^894^} else if  ( jsType.unboxesTo (  )  != null )  { return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^889^890^891^^^877^894^} else if  ( jsType.unboxesTo (  )  != null )  { return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return tt.unionWith ( cType.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^890^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return cType .unionWith ( cType )   ) ;^890^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return cType.unionWith ( tt.getConcreteFunction (  ( ObjectType )  jsType )  ) ;^890^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P13_Insert_Block]^if  (  ( jsType.unboxesTo (  )  )  != null )  {     return cType.unionWith ( tt.getConcreteInstance (  (  ( ObjectType )   ( jsType )  )  )  ) ; }^890^^^^^877^894^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^890^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return tt.unionWith ( cType.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^888^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return cType.unionWith ( tt.getConcreteFunction (  ( ObjectType )  autoboxed )  ) ;^888^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^JSType autoboxed = alt.autoboxesTo (  ) ;^887^^^^^877^894^JSType autoboxed = jsType.autoboxesTo (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^JSType autoboxed = autoboxed.autoboxesTo (  ) ;^887^^^^^877^894^JSType autoboxed = jsType.autoboxesTo (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^JSType autoboxed = jsType .unboxesTo (  )  ;^887^^^^^877^894^JSType autoboxed = jsType.autoboxesTo (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^887^^^^^877^894^JSType autoboxed = jsType.autoboxesTo (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return cType.unionWith ( tt .getConcreteFunction ( 0 )   ) ;^888^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^888^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( autoboxed.autoboxesTo (  )  != null )  {^886^^^^^877^894^if  ( jsType.autoboxesTo (  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return cType .unionWith ( cType )   ) ;^888^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return cType.unionWith ( tt .getConcreteFunction ( null )   ) ;^888^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^return  ( type == null )  && type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^return  ( type != null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) || invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return  ( type == null )  || type.getPropertyType (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return  ( type == null )  || type.isAll (  )  || type.getPropertyType (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.getPropertyType (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.add ( type.toInstance (  ) .instanceType )  ) ;^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.getPropertyType (  ) .instanceType )  ) ;^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^||  ( type.getPropertyType (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^900^901^^^^896^902^||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^||  ( type .toInstance (  )  && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^900^901^^^^896^902^||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^900^901^^^^896^902^||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^&& invalidatingTypes.add ( type.toInstance (  ) .instanceType )  ) ;^901^^^^^896^902^&& invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^&& invalidatingTypes.contains ( type.getPropertyType (  ) .instanceType )  ) ;^901^^^^^896^902^&& invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^901^^^^^896^902^&& invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;&& invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^901^^^^^896^902^&& invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^return instanceType.getConstructorType (  ) .getInstanceType (  ) ;&& invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^901^^^^^896^902^&& invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^&& invalidatingTypes.contains ( type .isInstance (  )  .instanceType )  ) ;^901^^^^^896^902^&& invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return ImmutableSet.copyOf ( type ) ;^906^^^^^905^907^return ImmutableSet.of ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^906^^^^^905^907^return ImmutableSet.of ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^return type.isInstance (  ) || ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) && type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return type.getPropertyType (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return type .toInstance (  )  && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return type.isInstance (  ) && ! ( type.toInstance (  ) .getNativeObjectType (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return type.isInstance (  ) && ! ( type.getPropertyType (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return type.isInstance (  ) && ! ( type .isInstance (  )  .isFunctionPrototype (  ) || type^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.getNativeObjectType (  )  ) ;^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^&& ! ( type.toInstance (  ) .getNativeObjectType (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^912^913^^^^909^914^&& ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^&& ! ( type.toInstance (  )  .isInstanceType (  )  || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^912^913^^^^909^914^&& ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^&& ! ( type.getPropertyType (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^912^913^^^^909^914^&& ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^912^913^^^^909^914^&& ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^&& ! ( type .isInstance (  )  .isFunctionPrototype (  ) || type^912^913^^^^909^914^&& ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^|| type.toInstance (  ) .instanceType.getNativeObjectType (  )  ) ;^913^^^^^909^914^|| type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^|| type.getPropertyType (  ) .instanceType.isInstanceType (  )  ) ;^913^^^^^909^914^|| type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^|| type .isInstance (  )  .instanceType.isInstanceType (  )  ) ;^913^^^^^909^914^|| type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^913^^^^^909^914^|| type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^&& ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;|| type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^913^^^^^909^914^|| type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;|| type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^913^^^^^909^914^|| type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( type.getPropertyType (  )  )  {^924^^^^^923^929^if  ( type.isUnion (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^return ((com.google.javascript.jscomp.ConcreteType.ConcreteUnionType) (type)).getAlternatives();^924^925^926^927^928^923^929^if  ( type.isUnion (  )  )  { return  (  ( ConcreteUnionType )  type ) .getAlternatives (  ) ; } else { return null; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^924^925^926^927^928^923^929^if  ( type.isUnion (  )  )  { return  (  ( ConcreteUnionType )  type ) .getAlternatives (  ) ; } else { return null; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return false;^927^^^^^923^929^return null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return  (  ( ConcreteUnionType )  type ) .getNativeObjectType (  ) ;^925^^^^^923^929^return  (  ( ConcreteUnionType )  type ) .getAlternatives (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return  (  ( ConcreteUnionType )  type )  .getAlternates (  )  ;^925^^^^^923^929^return  (  ( ConcreteUnionType )  type ) .getAlternatives (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P13_Insert_Block]^if  ( type.isUnion (  )  )  {     return  (  ( ConcreteUnionType )   ( type )  ) .getAlternatives (  ) ; }else {     return null; }^925^^^^^923^929^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^925^^^^^923^929^return  (  ( ConcreteUnionType )  type ) .getAlternatives (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return true;^927^^^^^923^929^return null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( type .isFunction (  )   )  {^924^^^^^923^929^if  ( type.isUnion (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( typeype.isInstance (  )  )  {^933^^^^^931^956^if  ( type.isInstance (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  ( ret != null )  {^933^^^^^931^956^if  ( type.isInstance (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( type.getPropertyType (  )  )  {^933^^^^^931^956^if  ( type.isInstance (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( type .toInstance (  )   )  {^933^^^^^931^956^if  ( type.isInstance (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( t.isInstance (  )  )  {^933^^^^^931^956^if  ( type.isInstance (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^} else if  ( ret.isFunction (  )  )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^} else if  ( typeype.isFunction (  )  )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^} else if  ( ret != null )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^} else {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^} else if  ( type.getPropertyType (  )  )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^} else if  ( type .isUnion (  )   )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^} else if  ( jsType.isUnknownType (  )  )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^} else if  ( type.isNone (  )  )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^if (("prototype".equals(field)) || (codingConvention.isSuperClassReference(field))) {    return type;};^936^937^938^939^940^931^956^} else if  ( type.isFunction (  )  )  { if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  { return type; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^936^937^938^939^940^931^956^} else if  ( type.isFunction (  )  )  { if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  { return type; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^} else if  ( ret.isNone (  )  )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^} else if  ( typeype.isNone (  )  )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^} else {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^} else if  ( type.getPropertyType (  )  )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^} else if  ( type .isInterface (  )   )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^} else if  ( jsType.isUnknownType (  )  )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^} else if  ( ret.isUnion (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^} else if  ( typeype.isUnion (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^} else if  ( t.isUnion (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^} else {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^} else if  ( type.getPropertyType (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^} else if  ( jsType.isUnknownType (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^} else if  ( type.isNone (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P13_Insert_Block]^if  ( jsType.isUnknownType (  )  )  {     for  ( JSTypeNative nativeType : nativeTypes )  {         ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;         if  (  ( concrete != null )  &&  ( ! ( concrete.getPropertyType ( prop ) .isNone (  )  )  )  )  {             cType = cType.unionWith ( concrete ) ;         }     }     return cType; }^946^^^^^931^956^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P13_Insert_Block]^if  ( type.isNone (  )  )  {     return new ConcreteUniqueType (  ( ++ ( nextUniqueId )  )  ) ; }else     if  ( type.isUnion (  )  )  {         for  ( ConcreteType t :  (  ( ConcreteUnionType )   ( type )  ) .getAlternatives (  )  )  {             ConcreteType ret = getTypeWithProperty ( field, t ) ;             if  ( ret != null )  {                 return ret;             }         }     }^946^^^^^931^956^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( ret == null )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( type != null )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( ret != this )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( alternatives != null )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( jsType == null )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( relatedType == null )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( top != null )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( objSkipType != null )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( objType != null )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( types == null )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( scope != null )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( lastType != null )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^return ret;^950^951^952^^^931^956^if  ( ret != null )  { return ret; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^950^951^952^^^931^956^if  ( ret != null )  { return ret; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return type;^951^^^^^931^956^return ret;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^ConcreteType ret = getTypeWithProperty ( typeName, t ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^ConcreteType ret = getTypeWithProperty ( field, type ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^ConcreteType ret = getTypeWithProperty (  t ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^ConcreteType ret = getTypeWithProperty ( field ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^ConcreteType ret = getTypeWithProperty ( t, field ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^ConcreteType ret = ConcreteTypeSystem ( field, t ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;ConcreteType ret = getTypeWithProperty ( field, t ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^JSType top = getTypeWithProperty ( p.name, itype ) ;ConcreteType ret = getTypeWithProperty ( field, t ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^Property prop = getProperty ( field ) ;ConcreteType ret = getTypeWithProperty ( field, t ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getNativeObjectType (  )  )  {^948^^^^^931^956^for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^948^949^950^951^952^931^956^for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  { ConcreteType ret = getTypeWithProperty ( field, t ) ; if  ( ret != null )  { return ret; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^ConcreteType ret = ConcreteTypeSystem ( typeName, t ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^return typeSystem.getTypeWithProperty ( field, type ) ;ConcreteType ret = getTypeWithProperty ( field, t ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^return instanceType.getInstanceTypeWithProperty ( field ) ;ConcreteType ret = getTypeWithProperty ( field, t ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( type != this )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^ConcreteType ret = getTypeWithProperty ( prop, t ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^} else if  ( t .isFunction (  )   )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^for  ( ConcreteType t :  (  ( ConcreteUnionType )  type )  .getAlternates (  )   )  {^948^^^^^931^956^for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( ret != true )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( ret != false )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^} else if  ( t.isNone (  )  )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^} else if  ( t.getPropertyType (  )  )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^} else if  ( type .isFunction (  )   )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P2_Replace_Operator]^if  ( "prototype".equals ( field ) && codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P3_Replace_Literal]^if  ( "prototyperot".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( "prototype".equals ( typeName ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( "prototype".equals ( field ) || convention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( "prototype".equals ( codingConvention ) || field.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  ( "prototype".equals ( field ) ) {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P6_Replace_Expression]^if  (  codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( "prototype".replaceAll ( field ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( "prototype".replaceAll ( field ) || convention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^return type;^937^938^939^940^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  { return type; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^937^938^939^940^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  { return type; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return t;^939^^^^^931^956^return type;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P3_Replace_Literal]^if  ( "pro".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( "prototype".replaceAll ( typeName ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^|| codingConvention.isSuperClassReference ( typeName )  )  {^938^^^^^931^956^|| codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^|| convention.isSuperClassReference ( field )  )  {^938^^^^^931^956^|| codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^|| field.isSuperClassReference ( codingConvention )  )  {^938^^^^^931^956^|| codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^938^939^^^^931^956^|| codingConvention.isSuperClassReference ( field )  )  { return type;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( "prototype" .replaceAll ( typeName , field )  || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^}  if  ( ret.isNone (  )  )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^} else if  ( ret.getPropertyType (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^ConcreteType ret = ConcreteTypeSystem ( field, type ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^} else if  ( t.isFunction (  )  )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P3_Replace_Literal]^if  ( "ototyprototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( "prototype".replaceAll ( prop ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^|| codingConvention.isSuperClassReference ( prop )  )  {^938^^^^^931^956^|| codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^} else if  ( t.getPropertyType (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return instanceType.getInstanceTypeWithProperty ( typeName ) ;^935^^^^^931^956^return instanceType.getInstanceTypeWithProperty ( field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return field.getInstanceTypeWithProperty ( instanceType ) ;^935^^^^^931^956^return instanceType.getInstanceTypeWithProperty ( field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return instanceType .getConstructorType (  )  ;^935^^^^^931^956^return instanceType.getInstanceTypeWithProperty ( field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^FunctionPrototypeType prototype =  ( FunctionPrototypeType )  type;ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type;^934^^^^^931^956^ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^935^^^^^931^956^return instanceType.getInstanceTypeWithProperty ( field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^}  if  ( ret.isFunction (  )  )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^ConcreteType ret = ConcreteTypeSystem ( prop, t ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P3_Replace_Literal]^if  ( "otrototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^if  ( "prototype".equals ( prop ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P3_Replace_Literal]^if  ( "prototypeprototy".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P3_Replace_Literal]^if  ( "tot".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( "prototype" .replaceAll ( newName , newName )  || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^}  if  ( typeype.isNone (  )  )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^}  if  ( ret .isFunction (  )   )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P5_Replace_Variable]^return instanceType.getInstanceTypeWithProperty ( prop ) ;^935^^^^^931^956^return instanceType.getInstanceTypeWithProperty ( field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( t.getPropertyType (  )  )  {^933^^^^^931^956^if  ( type.isInstance (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P3_Replace_Literal]^if  ( "prototypetyp".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return false;^955^^^^^931^956^return null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( type.getPropertyType (  )  )  {^959^^^^^958^966^if  ( type.isInstance (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^com.google.javascript.jscomp.ConcreteType.ConcreteInstanceType instanceType = ((com.google.javascript.jscomp.ConcreteType.ConcreteInstanceType) (type)); if (instanceType.isFunctionPrototype()) {    return instanceType.getConstructorType().getInstanceType();};^959^960^961^962^963^958^966^if  ( type.isInstance (  )  )  { ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type; if  ( instanceType.isFunctionPrototype (  )  )  { return instanceType.getConstructorType (  ) .getInstanceType (  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^959^960^961^962^963^958^966^if  ( type.isInstance (  )  )  { ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type; if  ( instanceType.isFunctionPrototype (  )  )  { return instanceType.getConstructorType (  ) .getInstanceType (  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( instanceType.getInstanceTypeWithProperty (  )  )  {^961^^^^^958^966^if  ( instanceType.isFunctionPrototype (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( type.isUnionType (  )  )  {^961^^^^^958^966^if  ( instanceType.isFunctionPrototype (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P9_Replace_Statement]^if  ( type.isFunctionPrototypeType (  )  )  {^961^^^^^958^966^if  ( instanceType.isFunctionPrototype (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P15_Unwrap_Block]^return instanceType.getConstructorType().getInstanceType();^961^962^963^^^958^966^if  ( instanceType.isFunctionPrototype (  )  )  { return instanceType.getConstructorType (  ) .getInstanceType (  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P16_Remove_Block]^^961^962^963^^^958^966^if  ( instanceType.isFunctionPrototype (  )  )  { return instanceType.getConstructorType (  ) .getInstanceType (  ) ; }^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return instanceType.getConstructorType (  ) .getNativeObjectType (  ) ;^962^^^^^958^966^return instanceType.getConstructorType (  ) .getInstanceType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return instanceType.getInstanceTypeWithProperty (  ) .getInstanceType (  ) ;^962^^^^^958^966^return instanceType.getConstructorType (  ) .getInstanceType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return instanceType .getInstanceTypeWithProperty ( name )  .getInstanceType (  ) ;^962^^^^^958^966^return instanceType.getConstructorType (  ) .getInstanceType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return instanceType.getConstructorType (  )  .isConstructor (  )  ;^962^^^^^958^966^return instanceType.getConstructorType (  ) .getInstanceType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P13_Insert_Block]^if  ( instanceType.isFunctionPrototype (  )  )  {     return instanceType.getConstructorType (  ) .getInstanceType (  ) ; }^962^^^^^958^966^[Delete]^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P14_Delete_Statement]^^962^^^^^958^966^return instanceType.getConstructorType (  ) .getInstanceType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P11_Insert_Donor_Statement]^FunctionPrototypeType prototype =  ( FunctionPrototypeType )  type;ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type;^960^^^^^958^966^ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^if  ( instanceType .isInstanceType (  )   )  {^961^^^^^958^966^if  ( instanceType.isFunctionPrototype (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P7_Replace_Invocation]^return instanceType .getInstanceTypeWithProperty ( prop )  .getInstanceType (  ) ;^962^^^^^958^966^return instanceType.getConstructorType (  ) .getInstanceType (  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^if  ( type .toInstance (  )   )  {^959^^^^^958^966^if  ( type.isInstance (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P8_Replace_Mix]^return this;^965^^^^^958^966^return null;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[P1_Replace_Type]^final char name;^94^^^^^89^99^final String name;^[CLASS] Property  [METHOD] recordInterfaces [RETURN_TYPE] void   ConcreteType type ConcreteType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  relatedType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^Set<T> typesToSkip  = null ;^103^^^^^98^108^Set<T> typesToSkip = Sets.newHashSet (  ) ;^[CLASS] Property  [METHOD] recordInterfaces [RETURN_TYPE] void   ConcreteType type ConcreteType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  relatedType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^Set<Node> renameNodes  = null ;^112^^^^^107^117^Set<Node> renameNodes = Sets.newHashSet (  ) ;^[CLASS] Property  [METHOD] recordInterfaces [RETURN_TYPE] void   ConcreteType type ConcreteType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  relatedType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^Map<Node, T> rootTypes = Maps.newHashMap (  ) ;^119^^^^^114^124^final Map<Node, T> rootTypes = Maps.newHashMap (  ) ;^[CLASS] Property  [METHOD] recordInterfaces [RETURN_TYPE] void   ConcreteType type ConcreteType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  relatedType  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[P8_Replace_Mix]^this.name =  null;^122^^^^^121^123^this.name = name;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  Map  rootTypes  
[P2_Replace_Operator]^if  ( types != null )  {^127^^^^^126^131^if  ( types == null )  {^[CLASS] Property  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  Map  rootTypes  
[P8_Replace_Mix]^if  ( types == this )  {^127^^^^^126^131^if  ( types == null )  {^[CLASS] Property  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  Map  rootTypes  
[P9_Replace_Statement]^if  ( relatedType == null )  {^127^^^^^126^131^if  ( types == null )  {^[CLASS] Property  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  Map  rootTypes  
[P15_Unwrap_Block]^types = new com.google.javascript.jscomp.graph.StandardUnionFind<T>();^127^128^129^^^126^131^if  ( types == null )  { types = new StandardUnionFind<T> (  ) ; }^[CLASS] Property  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  Map  rootTypes  
[P16_Remove_Block]^^127^128^129^^^126^131^if  ( types == null )  { types = new StandardUnionFind<T> (  ) ; }^[CLASS] Property  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  Map  rootTypes  
[P8_Replace_Mix]^types  =  types ;^128^^^^^126^131^types = new StandardUnionFind<T> (  ) ;^[CLASS] Property  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  Map  rootTypes  
[P13_Insert_Block]^if  (  ( types )  == null )  {     types = new StandardUnionFind<T> (  ) ; }^128^^^^^126^131^[Delete]^[CLASS] Property  [METHOD] getTypes [RETURN_TYPE] UnionFind   [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  Map  rootTypes  
[P3_Replace_Literal]^checkState ( !skipRenaming, "property: ttempt to record skipped property: %s", name ) ;^139^^^^^138^156^checkState ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^checkState ( ! "Attempt to record skipped property: %s", name ) ;^139^^^^^138^156^checkState ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^checkState ( !skipRenaming, "Attempt to record skipped property: %s" ) ;^139^^^^^138^156^checkState ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P7_Replace_Invocation]^shouldRename ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^139^^^^^138^156^checkState ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P14_Delete_Statement]^^139^^^^^138^156^checkState ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^if  ( typeSystem.isInvalidatingType ( type )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^if  ( topSystem.isInvalidatingType ( top )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^if  ( 2.isInvalidatingType ( top )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^if  ( typeSystemSystem.isInvalidatingType ( top )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^if  ( top.isInvalidatingType ( typeSystem )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P7_Replace_Invocation]^if  ( typeSystem.isTypeToSkip ( top )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P7_Replace_Invocation]^if  ( typeSystem .getTypesToSkipForType ( top )   )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^if  ( top.isTypeToSkip ( typeSystem )  )  {^144^^^^^138^156^if  ( typeSystem.isTypeToSkip ( top )  )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P7_Replace_Invocation]^if  ( typeSystem.getTypesToSkipForType ( top )  )  {^144^^^^^138^156^if  ( typeSystem.isTypeToSkip ( top )  )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P8_Replace_Mix]^if  ( typeSystem.getTypesToSkipForType ( type )  )  {^144^^^^^138^156^if  ( typeSystem.isTypeToSkip ( top )  )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P9_Replace_Statement]^if  ( typeSystem.isInvalidatingType ( type )  )  {^144^^^^^138^156^if  ( typeSystem.isTypeToSkip ( top )  )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P9_Replace_Statement]^if  ( typeSystem.isInvalidatingType ( top )  )  {^144^^^^^138^156^if  ( typeSystem.isTypeToSkip ( top )  )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P15_Unwrap_Block]^addTypeToSkip(top);^144^145^146^^^138^156^if  ( typeSystem.isTypeToSkip ( top )  )  { addTypeToSkip ( top ) ; }^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P16_Remove_Block]^^144^145^146^^^138^156^if  ( typeSystem.isTypeToSkip ( top )  )  { addTypeToSkip ( top ) ; }^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^addTypeToSkip ( type ) ;^145^^^^^138^156^addTypeToSkip ( top ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P7_Replace_Invocation]^shouldRename ( top ) ;^145^^^^^138^156^addTypeToSkip ( top ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P8_Replace_Mix]^shouldRename ( type ) ;^145^^^^^138^156^addTypeToSkip ( top ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P14_Delete_Statement]^^145^^^^^138^156^addTypeToSkip ( top ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P11_Insert_Donor_Statement]^typesToSkip.add ( skipType ) ;addTypeToSkip ( top ) ;^145^^^^^138^156^addTypeToSkip ( top ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P11_Insert_Donor_Statement]^addTypeToSkip ( newType ) ;addTypeToSkip ( top ) ;^145^^^^^138^156^addTypeToSkip ( top ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P11_Insert_Donor_Statement]^newTypesToSkip.add ( subType ) ;addTypeToSkip ( top ) ;^145^^^^^138^156^addTypeToSkip ( top ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P2_Replace_Operator]^if  ( relatedType != null )  {^148^^^^^138^156^if  ( relatedType == null )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^if  ( type == null )  {^148^^^^^138^156^if  ( relatedType == null )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P8_Replace_Mix]^if  ( relatedType == true )  {^148^^^^^138^156^if  ( relatedType == null )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P9_Replace_Statement]^if  ( types == null )  {^148^^^^^138^156^if  ( relatedType == null )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P15_Unwrap_Block]^getTypes().add(top);^148^149^150^151^152^138^156^if  ( relatedType == null )  { getTypes (  ) .add ( top ) ; } else { getTypes (  ) .union ( top, relatedType ) ; }^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P16_Remove_Block]^^148^149^150^151^152^138^156^if  ( relatedType == null )  { getTypes (  ) .add ( top ) ; } else { getTypes (  ) .union ( top, relatedType ) ; }^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^getTypes (  ) .union ( type, relatedType ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^getTypes (  ) .union ( top, type ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^getTypes (  ) .union (  relatedType ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^getTypes (  ) .union ( top ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^getTypes (  ) .union ( relatedType, top ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P7_Replace_Invocation]^invalidate (  ) .union ( top, relatedType ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P8_Replace_Mix]^getTypes (  )  .find ( relatedType )  ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P14_Delete_Statement]^^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P11_Insert_Donor_Statement]^getTypes (  ) .add ( top ) ;getTypes (  ) .union ( top, relatedType ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P11_Insert_Donor_Statement]^getTypes (  ) .union ( skipType, type ) ;getTypes (  ) .union ( top, relatedType ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^getTypes (  ) .add ( type ) ;^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P7_Replace_Invocation]^getTypes (  ) .find ( top ) ;^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P7_Replace_Invocation]^invalidate (  ) .add ( top ) ;^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P14_Delete_Statement]^^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P11_Insert_Donor_Statement]^getTypes (  ) .union ( top, relatedType ) ;getTypes (  ) .add ( top ) ;^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P11_Insert_Donor_Statement]^getTypes (  ) .union ( skipType, type ) ;getTypes (  ) .add ( top ) ;^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P11_Insert_Donor_Statement]^newTypesToSkip.add ( subType ) ;getTypes (  ) .add ( top ) ;^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P3_Replace_Literal]^return false;^154^^^^^138^156^return true;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^if  ( typeSystem.isTypeToSkip ( type )  )  {^144^^^^^138^156^if  ( typeSystem.isTypeToSkip ( top )  )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P8_Replace_Mix]^getTypes (  ) .find ( type ) ;^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^typeSystem.recordInterfaces ( top, top, this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^typeSystem.recordInterfaces ( type, relatedType, this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^typeSystem.recordInterfaces (  top, this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^typeSystem.recordInterfaces ( type,  this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^typeSystem.recordInterfaces ( top, type, this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P7_Replace_Invocation]^typeSystem .getTypesToSkipForType ( relatedType )  ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P8_Replace_Mix]^typeSystem.recordInterfaces ( relatedType, top, this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P14_Delete_Statement]^^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P3_Replace_Literal]^return true;^142^^^^^138^156^return false;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P7_Replace_Invocation]^shouldRename (  ) ;^141^^^^^138^156^invalidate (  ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P14_Delete_Statement]^^141^^^^^138^156^invalidate (  ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^if  ( this.isInvalidatingType ( top )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P14_Delete_Statement]^^141^142^^^^138^156^invalidate (  ) ; return false;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P8_Replace_Mix]^invalidate (  ) .add ( type ) ;^149^^^^^138^156^getTypes (  ) .add ( top ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P8_Replace_Mix]^invalidate (  ) .union ( type, relatedType ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P14_Delete_Statement]^^153^154^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ; return true;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[P5_Replace_Variable]^for  ( T skipType : skipTypeSystem.getTypesToSkipForType ( type )  )  {^160^^^^^159^164^for  ( T skipType : typeSystem.getTypesToSkipForType ( type )  )  {^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P5_Replace_Variable]^for  ( T skipType : typeSystemSystem.getTypesToSkipForType ( type )  )  {^160^^^^^159^164^for  ( T skipType : typeSystem.getTypesToSkipForType ( type )  )  {^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P5_Replace_Variable]^for  ( T skipType : type.getTypesToSkipForType ( typeSystem )  )  {^160^^^^^159^164^for  ( T skipType : typeSystem.getTypesToSkipForType ( type )  )  {^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P7_Replace_Invocation]^for  ( T skipType : typeSystem.isTypeToSkip ( type )  )  {^160^^^^^159^164^for  ( T skipType : typeSystem.getTypesToSkipForType ( type )  )  {^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P14_Delete_Statement]^^160^161^162^163^^159^164^for  ( T skipType : typeSystem.getTypesToSkipForType ( type )  )  { typesToSkip.add ( skipType ) ; getTypes (  ) .union ( skipType, type ) ; }^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P5_Replace_Variable]^typesToSkip.add ( type ) ;^161^^^^^159^164^typesToSkip.add ( skipType ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P7_Replace_Invocation]^typesToSkip.addAll ( skipType ) ;^161^^^^^159^164^typesToSkip.add ( skipType ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P14_Delete_Statement]^^161^^^^^159^164^typesToSkip.add ( skipType ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P11_Insert_Donor_Statement]^addTypeToSkip ( top ) ;typesToSkip.add ( skipType ) ;^161^^^^^159^164^typesToSkip.add ( skipType ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P11_Insert_Donor_Statement]^addTypeToSkip ( newType ) ;typesToSkip.add ( skipType ) ;^161^^^^^159^164^typesToSkip.add ( skipType ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P11_Insert_Donor_Statement]^typesToSkip.addAll ( rootTypesToSkip ) ;typesToSkip.add ( skipType ) ;^161^^^^^159^164^typesToSkip.add ( skipType ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P11_Insert_Donor_Statement]^getTypes (  ) .union ( skipType, type ) ;typesToSkip.add ( skipType ) ;^161^^^^^159^164^typesToSkip.add ( skipType ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P11_Insert_Donor_Statement]^newTypesToSkip.add ( subType ) ;typesToSkip.add ( skipType ) ;^161^^^^^159^164^typesToSkip.add ( skipType ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P11_Insert_Donor_Statement]^rootTypesToSkip.add ( types.find ( subType )  ) ;typesToSkip.add ( skipType ) ;^161^^^^^159^164^typesToSkip.add ( skipType ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P5_Replace_Variable]^getTypes (  ) .union (  type ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P5_Replace_Variable]^getTypes (  ) .union ( skipType ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P5_Replace_Variable]^getTypes (  ) .union ( type, skipType ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P7_Replace_Invocation]^getTypes (  )  .find ( skipType )  ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P7_Replace_Invocation]^invalidate (  ) .union ( skipType, type ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P14_Delete_Statement]^^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P11_Insert_Donor_Statement]^typesToSkip.add ( skipType ) ;getTypes (  ) .union ( skipType, type ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P11_Insert_Donor_Statement]^getTypes (  ) .add ( top ) ;getTypes (  ) .union ( skipType, type ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P11_Insert_Donor_Statement]^getTypes (  ) .union ( top, relatedType ) ;getTypes (  ) .union ( skipType, type ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[P3_Replace_Literal]^while  ( false )  {^172^^^^^157^187^while  ( true )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P2_Replace_Operator]^if  ( !typesToSkip.contains ( subType ) || typesToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^if  ( !typesToSkip.contains ( subType ) && 4.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^if  ( !typesToSkip.contains ( types ) && subTypeToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P6_Replace_Expression]^if  ( !typesToSkip.contains ( subType ) ) {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P6_Replace_Expression]^if  (  typesToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^if  ( !typesToSkip.addAll ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.add ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P8_Replace_Mix]^if  ( !typesToSkip.contains ( subType ) && null.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P15_Unwrap_Block]^newTypesToSkip.add(subType);^188^189^190^191^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  { newTypesToSkip.add ( subType ) ; }^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P16_Remove_Block]^^188^189^190^191^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  { newTypesToSkip.add ( subType ) ; }^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^newTypesToSkip.add ( newType ) ;^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P14_Delete_Statement]^^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^typesToSkip.add ( skipType ) ;newTypesToSkip.add ( subType ) ;^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^addTypeToSkip ( top ) ;newTypesToSkip.add ( subType ) ;^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^addTypeToSkip ( newType ) ;newTypesToSkip.add ( subType ) ;^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^getTypes (  ) .add ( top ) ;newTypesToSkip.add ( subType ) ;^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^typesToSkip.addAll ( rootTypesToSkip ) ;newTypesToSkip.add ( subType ) ;^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^rootTypesToSkip.add ( types.find ( subType )  ) ;newTypesToSkip.add ( subType ) ;^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P2_Replace_Operator]^if  ( types.elements (  ) .size (  )  != originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^if  ( types.elements (  ) .size() - 4  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^if  ( 0.elements (  ) .size (  )  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^if  ( originalTypesSize.elements (  ) .size (  )  == types )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^if  ( types.elements (  )  .contains ( null )   == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^if  ( types.allEquivalenceClasses (  ) .size (  )  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P8_Replace_Mix]^if  ( null.elements (  ) .size (  )  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P15_Unwrap_Block]^break;^199^200^201^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  { break; }^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P16_Remove_Block]^^199^200^201^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  { break; }^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^Set<T> allTypes = types.elements (  ) ;Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^178^^^^^163^193^Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^Set<T> newTypesToSkip = Sets.newHashSet (  ) ;Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^178^^^^^163^193^Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^184^^^^^169^199^Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^Set<T> allTypes = types.elements (  ) ;Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^184^^^^^169^199^Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^Set<T> allTypes = types.allEquivalenceClasses (  ) ;^185^^^^^170^200^Set<T> allTypes = types.elements (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;Set<T> allTypes = types.elements (  ) ;^185^^^^^170^200^Set<T> allTypes = types.elements (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^Set<T> newTypesToSkip = Sets.newHashSet (  ) ;Set<T> allTypes = types.elements (  ) ;^185^^^^^170^200^Set<T> allTypes = types.elements (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P1_Replace_Type]^short  originalTypesSize = allTypes.size (  ) ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^int originalTypesSize = allTypes.size() - 1 ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^int originalTypesSize = allTypes.add (  ) ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P2_Replace_Operator]^checkState ( ++count == 10, "Stuck in loop expanding types to skip." ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^checkState ( ++count < originalTypesSize, "Stuck in loop expanding types to skip." ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^checkState ( ++count < 10, "pandituck in loop expanding types to skip." ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^scheduleRenaming ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P14_Delete_Statement]^^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P14_Delete_Statement]^^178^^^^^163^193^Set<T> rootTypesToSkip = Sets.newHashSet (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^rootTypesToSkip.add ( types.find ( newType )  ) ;^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^rootTypesToSkip.add ( subType.find ( types )  ) ;^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^rootTypesToSkip.add ( types.add ( subType )  ) ;^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P14_Delete_Statement]^^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^typesToSkip.add ( skipType ) ;rootTypesToSkip.add ( types.find ( subType )  ) ;^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^newTypesToSkip.add ( subType ) ;rootTypesToSkip.add ( types.find ( subType )  ) ;^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^typesToSkip.contains ( rootTypesToSkip ) ;^182^^^^^167^197^typesToSkip.addAll ( rootTypesToSkip ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P8_Replace_Mix]^typesToSkip .add ( subType )  ;^182^^^^^167^197^typesToSkip.addAll ( rootTypesToSkip ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P14_Delete_Statement]^^182^^^^^167^197^typesToSkip.addAll ( rootTypesToSkip ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^typesToSkip.add ( skipType ) ;typesToSkip.addAll ( rootTypesToSkip ) ;^182^^^^^167^197^typesToSkip.addAll ( rootTypesToSkip ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^newTypesToSkip.add ( subType ) ;typesToSkip.addAll ( rootTypesToSkip ) ;^182^^^^^167^197^typesToSkip.addAll ( rootTypesToSkip ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P14_Delete_Statement]^^184^185^^^^169^199^Set<T> newTypesToSkip = Sets.newHashSet (  ) ; Set<T> allTypes = types.elements (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P14_Delete_Statement]^^185^^^^^170^200^Set<T> allTypes = types.elements (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^int originalTypesSize = allTypes.size() - 2 ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P14_Delete_Statement]^^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^if  ( !typesToSkip.contains ( newType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^if  ( !typesToSkip.contains ( typesToSkip ) && subType.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^if  ( !typesToSkip .add ( subType )  && typesToSkip^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P8_Replace_Mix]^if  ( !typesToSkip.addAll ( newType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^&& typesToSkip.contains ( types.find ( newType )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^&& subType.contains ( types.find ( typesToSkip )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^&& types.contains ( typesToSkip.find ( subType )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^&& typesToSkipToSkip.contains ( types.find ( subType )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^&& typesToSkip.addAll ( types.find ( subType )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^&& typesToSkip.contains ( types.add ( subType )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P14_Delete_Statement]^^189^190^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  { newTypesToSkip.add ( subType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^&& subTypeToSkip.contains ( types.find ( types )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^newTypesToSkip .add ( newType )  ;^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P14_Delete_Statement]^^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^typesToSkip.add ( skipType ) ;newTypesToSkip.add ( subType ) ;^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^addTypeToSkip ( top ) ;newTypesToSkip.add ( subType ) ;^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^addTypeToSkip ( newType ) ;newTypesToSkip.add ( subType ) ;^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^getTypes (  ) .add ( top ) ;newTypesToSkip.add ( subType ) ;^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^typesToSkip.addAll ( rootTypesToSkip ) ;newTypesToSkip.add ( subType ) ;^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^rootTypesToSkip.add ( types.find ( subType )  ) ;newTypesToSkip.add ( subType ) ;^190^^^^^175^205^newTypesToSkip.add ( subType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^addTypeToSkip ( subType ) ;^195^^^^^180^210^addTypeToSkip ( newType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^shouldRename ( newType ) ;^195^^^^^180^210^addTypeToSkip ( newType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P14_Delete_Statement]^^195^^^^^180^210^addTypeToSkip ( newType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^typesToSkip.add ( skipType ) ;addTypeToSkip ( newType ) ;^195^^^^^180^210^addTypeToSkip ( newType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^addTypeToSkip ( top ) ;addTypeToSkip ( newType ) ;^195^^^^^180^210^addTypeToSkip ( newType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^rootTypes.put ( node, type ) ;addTypeToSkip ( newType ) ;^195^^^^^180^210^addTypeToSkip ( newType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P11_Insert_Donor_Statement]^newTypesToSkip.add ( subType ) ;addTypeToSkip ( newType ) ;^195^^^^^180^210^addTypeToSkip ( newType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^if  ( types.elements (  ) .size() - 3  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^if  ( types.elements (  ) .size() + 3  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^if  ( 1.elements (  ) .size (  )  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P6_Replace_Expression]^if  ( !(typesToSkip.contains(subType)) && find(subType)) )  {^170^^^^^155^185^if  ( shouldRename (  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P6_Replace_Expression]^if  ( size() == originalTypesSize )  {^170^^^^^155^185^if  ( shouldRename (  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^if  ( invalidate (  )  )  {^170^^^^^155^185^if  ( shouldRename (  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^if  ( !typesToSkip .add ( newType )  && typesToSkip^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types .add ( newType )   )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^if  ( types.elements (  ) .size() - 6  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^if  ( types.elements (  ) .size (  )  == count )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^int originalTypesSize = allTypes.size() - 3 ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^checkState ( ++count < 10, "nding typetuck in loop expanding types to skip." ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P14_Delete_Statement]^^185^186^^^^170^200^Set<T> allTypes = types.elements (  ) ; int originalTypesSize = allTypes.size (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^int originalTypesSize = allTypes.size() + 4 ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^&& typesToSkip .add ( newType )   )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^&& typesToSkip.contains ( types .add ( newType )   )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P8_Replace_Mix]^shouldRename ( subType ) ;^195^^^^^180^210^addTypeToSkip ( newType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^if  ( types.elements (  ) .size() - 8  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^if  ( types.elements (  ) .size() - 5  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^if  ( !typesToSkip.contains ( subType ) && types.contains ( typesToSkip.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P8_Replace_Mix]^newTypesToSkip .add ( subType )  ;^190^^^^^188^191^newTypesToSkip.add ( subType ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^if  ( types.elements (  ) .size() + 9  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P1_Replace_Type]^short  count = 0;^171^^^^^156^186^int count = 0;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^int count = 8;^171^^^^^156^186^int count = 0;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P1_Replace_Type]^long  originalTypesSize = allTypes.size (  ) ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^int originalTypesSize = allTypes.size() + 5 ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^int originalTypesSize = 1.size (  ) ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^checkState ( ++count < 4, "Stuck in loop expanding types to skip." ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^checkState ( ++count < 10, "op expanding" ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P7_Replace_Invocation]^rootTypesToSkip.add ( types .add ( newType )   ) ;^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P14_Delete_Statement]^^184^^^^^169^199^Set<T> newTypesToSkip = Sets.newHashSet (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^int originalTypesSize = allTypes.size() + 0 ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P8_Replace_Mix]^int originalTypesSize = this.add (  ) ;^186^^^^^171^201^int originalTypesSize = allTypes.size (  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^if  ( !typesToSkip.contains ( subType ) && typesToSkipToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P2_Replace_Operator]^if  ( types.elements (  ) .size (  )  <= originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^if  ( types.elements (  ) .size() + 7  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^int count = count;^171^^^^^156^186^int count = 0;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P2_Replace_Operator]^checkState ( ++count <= 10, "Stuck in loop expanding types to skip." ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^checkState ( ++count < count, "Stuck in loop expanding types to skip." ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^checkState ( ++count < 10, "Stuck in loop expanding types to skip.op" ) ;^174^^^^^159^189^checkState ( ++count < 10, "Stuck in loop expanding types to skip." ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P8_Replace_Mix]^typesToSkip .add ( newType )  ;^182^^^^^167^197^typesToSkip.addAll ( rootTypesToSkip ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P8_Replace_Mix]^if  ( !typesToSkip.contains ( subType ) && 3.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P3_Replace_Literal]^if  ( types.elements (  ) .size() + 1  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P5_Replace_Variable]^if  ( 3.elements (  ) .size (  )  == originalTypesSize )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[P2_Replace_Operator]^return !skipRenaming || types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^208^209^^^^207^210^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] Property  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] UnionFind  types  Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  String  name  Map  rootTypes  
[P2_Replace_Operator]^return !skipRenaming && types == null && types.allEquivalenceClasses (  ) .size (  )  > 1;^208^209^^^^207^210^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] Property  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] UnionFind  types  Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  String  name  Map  rootTypes  
[P2_Replace_Operator]^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  == 1;^208^209^^^^207^210^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] Property  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] UnionFind  types  Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  String  name  Map  rootTypes  
[P3_Replace_Literal]^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > -5;^208^209^^^^207^210^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] Property  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] UnionFind  types  Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  String  name  Map  rootTypes  
[P3_Replace_Literal]^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size() + 1  > 1;^208^209^^^^207^210^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] Property  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] UnionFind  types  Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  String  name  Map  rootTypes  
[P7_Replace_Invocation]^return !skipRenaming && types != null && types.elements (  ) .size (  )  > 1;^208^209^^^^207^210^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] Property  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] UnionFind  types  Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  String  name  Map  rootTypes  
[P8_Replace_Mix]^return !skipRenaming && types != this && types.elements (  ) .size (  )  %  2 > 1;^208^209^^^^207^210^return !skipRenaming && types != null && types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] Property  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] UnionFind  types  Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  String  name  Map  rootTypes  
[P3_Replace_Literal]^&& types.allEquivalenceClasses (  ) .size() + 1  > 1;^209^^^^^207^210^&& types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] Property  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] UnionFind  types  Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  String  name  Map  rootTypes  
[P7_Replace_Invocation]^&& types.elements (  ) .size (  )  > 1;^209^^^^^207^210^&& types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] Property  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] UnionFind  types  Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  String  name  Map  rootTypes  
[P14_Delete_Statement]^^209^^^^^207^210^&& types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] Property  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] UnionFind  types  Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  String  name  Map  rootTypes  
[P3_Replace_Literal]^&& types.allEquivalenceClasses (  ) .size() + 0  > 1;^209^^^^^207^210^&& types.allEquivalenceClasses (  ) .size (  )  > 1;^[CLASS] Property  [METHOD] shouldRename [RETURN_TYPE] boolean   [VARIABLES] UnionFind  types  Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  String  name  Map  rootTypes  
[P2_Replace_Operator]^return !skipRenaming || !typesToSkip.contains ( type ) ;^218^^^^^217^219^return !skipRenaming && !typesToSkip.contains ( type ) ;^[CLASS] Property  [METHOD] shouldRename [RETURN_TYPE] boolean   T type [VARIABLES] UnionFind  types  Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  String  name  T  type  Map  rootTypes  
[P7_Replace_Invocation]^return !skipRenaming && !typesToSkip.addAll ( type ) ;^218^^^^^217^219^return !skipRenaming && !typesToSkip.contains ( type ) ;^[CLASS] Property  [METHOD] shouldRename [RETURN_TYPE] boolean   T type [VARIABLES] UnionFind  types  Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  String  name  T  type  Map  rootTypes  
[P8_Replace_Mix]^return !skipRenaming && !typesToSkip .add ( type )  ;^218^^^^^217^219^return !skipRenaming && !typesToSkip.contains ( type ) ;^[CLASS] Property  [METHOD] shouldRename [RETURN_TYPE] boolean   T type [VARIABLES] UnionFind  types  Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  String  name  T  type  Map  rootTypes  
[P14_Delete_Statement]^^218^^^^^217^219^return !skipRenaming && !typesToSkip.contains ( type ) ;^[CLASS] Property  [METHOD] shouldRename [RETURN_TYPE] boolean   T type [VARIABLES] UnionFind  types  Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  String  name  T  type  Map  rootTypes  
[P3_Replace_Literal]^skipRenaming = false;^227^^^^^225^230^skipRenaming = true;^[CLASS] Property  [METHOD] invalidate [RETURN_TYPE] boolean   [VARIABLES] UnionFind  types  Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  String  name  Map  rootTypes  
[P8_Replace_Mix]^types = false;^228^^^^^225^230^types = null;^[CLASS] Property  [METHOD] invalidate [RETURN_TYPE] boolean   [VARIABLES] UnionFind  types  Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  String  name  Map  rootTypes  
[P5_Replace_Variable]^return skipRenaming;^229^^^^^225^230^return changed;^[CLASS] Property  [METHOD] invalidate [RETURN_TYPE] boolean   [VARIABLES] UnionFind  types  Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  String  name  Map  rootTypes  
[P5_Replace_Variable]^if  ( !changed )  {^242^^^^^241^251^if  ( !skipRenaming )  {^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P15_Unwrap_Block]^if (typeSystem.isInvalidatingType(type)) {    invalidate();    return false;}; renameNodes.add(node); rootTypes.put(node, type);^242^243^244^245^246^241^251^if  ( !skipRenaming )  { if  ( typeSystem.isInvalidatingType ( type )  )  { invalidate (  ) ; return false; }^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P16_Remove_Block]^^242^243^244^245^246^241^251^if  ( !skipRenaming )  { if  ( typeSystem.isInvalidatingType ( type )  )  { invalidate (  ) ; return false; }^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P5_Replace_Variable]^if  ( typeSystemSystem.isInvalidatingType ( type )  )  {^243^^^^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P5_Replace_Variable]^if  ( type.isInvalidatingType ( typeSystem )  )  {^243^^^^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P7_Replace_Invocation]^if  ( typeSystem.isTypeToSkip ( type )  )  {^243^^^^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P9_Replace_Statement]^if  ( typeSystem.isInvalidatingType ( top )  )  {^243^^^^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P9_Replace_Statement]^if  ( typeSystem.isTypeToSkip ( top )  )  {^243^^^^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P15_Unwrap_Block]^invalidate(); return false;^243^244^245^246^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  { invalidate (  ) ; return false; }^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P16_Remove_Block]^^243^244^245^246^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  { invalidate (  ) ; return false; }^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P3_Replace_Literal]^return true;^245^^^^^241^251^return false;^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P7_Replace_Invocation]^shouldRename (  ) ;^244^^^^^241^251^invalidate (  ) ;^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P14_Delete_Statement]^^244^^^^^241^251^invalidate (  ) ;^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P7_Replace_Invocation]^if  ( typeSystem .getTypesToSkipForType ( type )   )  {^243^^^^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P14_Delete_Statement]^^244^245^^^^241^251^invalidate (  ) ; return false;^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P7_Replace_Invocation]^renameNodes.addAll ( node ) ;^247^^^^^241^251^renameNodes.add ( node ) ;^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P7_Replace_Invocation]^renameNodes .find ( type )  ;^247^^^^^241^251^renameNodes.add ( node ) ;^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P14_Delete_Statement]^^247^^^^^241^251^renameNodes.add ( node ) ;^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P5_Replace_Variable]^rootTypes.put (  type ) ;^248^^^^^241^251^rootTypes.put ( node, type ) ;^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P5_Replace_Variable]^rootTypes.put ( node ) ;^248^^^^^241^251^rootTypes.put ( node, type ) ;^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P5_Replace_Variable]^rootTypes.put ( type, node ) ;^248^^^^^241^251^rootTypes.put ( node, type ) ;^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P14_Delete_Statement]^^248^^^^^241^251^rootTypes.put ( node, type ) ;^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P11_Insert_Donor_Statement]^addTypeToSkip ( newType ) ;rootTypes.put ( node, type ) ;^248^^^^^241^251^rootTypes.put ( node, type ) ;^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P14_Delete_Statement]^^247^248^^^^241^251^renameNodes.add ( node ) ; rootTypes.put ( node, type ) ;^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P3_Replace_Literal]^return false;^250^^^^^241^251^return true;^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[P3_Replace_Literal]^return false;^329^^^^^328^330^return true;^[CLASS] AbstractScopingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Stack  scopes  Node  n  parent  
[P7_Replace_Invocation]^if  ( t .getScopeRoot (  )   )  {^333^^^^^332^338^if  ( t.inGlobalScope (  )  )  {^[CLASS] AbstractScopingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  Stack  scopes  boolean  
[P15_Unwrap_Block]^scopes.push(typeSystem.getRootScope());^333^334^335^336^337^332^338^if  ( t.inGlobalScope (  )  )  { scopes.push ( typeSystem.getRootScope (  )  ) ; } else { scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ; }^[CLASS] AbstractScopingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  Stack  scopes  boolean  
[P16_Remove_Block]^^333^334^335^336^337^332^338^if  ( t.inGlobalScope (  )  )  { scopes.push ( typeSystem.getRootScope (  )  ) ; } else { scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ; }^[CLASS] AbstractScopingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  Stack  scopes  boolean  
[P5_Replace_Variable]^scopes.push ( t.getFunctionScope ( typeSystem.getScopeRoot (  )  )  ) ;^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] AbstractScopingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  Stack  scopes  boolean  
[P14_Delete_Statement]^^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] AbstractScopingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  Stack  scopes  boolean  
[P11_Insert_Donor_Statement]^scopes.push ( typeSystem.getRootScope (  )  ) ;scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] AbstractScopingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  Stack  scopes  boolean  
[P5_Replace_Variable]^scopes.push ( typeSystemypeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] AbstractScopingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  Stack  scopes  boolean  
[P7_Replace_Invocation]^scopes.push ( typeSystem.getFunctionScope ( t .inGlobalScope (  )   )  ) ;^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] AbstractScopingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  Stack  scopes  boolean  
[P8_Replace_Mix]^scopes.push ( 4.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] AbstractScopingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  Stack  scopes  boolean  
[P14_Delete_Statement]^^334^^^^^332^338^scopes.push ( typeSystem.getRootScope (  )  ) ;^[CLASS] AbstractScopingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  Stack  scopes  boolean  
[P7_Replace_Invocation]^scopes.push ( typeSystem .getRootScope (  )   ) ;^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] AbstractScopingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  Stack  scopes  boolean  
[P8_Replace_Mix]^scopes .pop (  )   ) ;^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] AbstractScopingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  Stack  scopes  boolean  
[P7_Replace_Invocation]^scopes.push (  ) ;^341^^^^^340^342^scopes.pop (  ) ;^[CLASS] AbstractScopingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  Stack  scopes  boolean  
[P8_Replace_Mix]^scopes .push ( null )  ;^341^^^^^340^342^scopes.pop (  ) ;^[CLASS] AbstractScopingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  Stack  scopes  boolean  
[P14_Delete_Statement]^^341^^^^^340^342^scopes.pop (  ) ;^[CLASS] AbstractScopingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  Stack  scopes  boolean  
[P11_Insert_Donor_Statement]^return scopes.peek (  ) ;scopes.pop (  ) ;^341^^^^^340^342^scopes.pop (  ) ;^[CLASS] AbstractScopingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  Stack  scopes  boolean  
[P7_Replace_Invocation]^return scopes.push (  ) ;^346^^^^^345^347^return scopes.peek (  ) ;^[CLASS] AbstractScopingCallback  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] Stack  scopes  boolean  
[P5_Replace_Variable]^return 3.peek (  ) ;^346^^^^^345^347^return scopes.peek (  ) ;^[CLASS] AbstractScopingCallback  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] Stack  scopes  boolean  
[P14_Delete_Statement]^^346^^^^^345^347^return scopes.peek (  ) ;^[CLASS] AbstractScopingCallback  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] Stack  scopes  boolean  
[P2_Replace_Operator]^if  ( n.getType (  )  < Token.GETPROP )  {^356^^^^^355^374^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.GETPROP )  {^356^^^^^355^374^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P6_Replace_Expression]^if  ( type = typeSystem.getInstanceFromPrototype(type) != null )  {^356^^^^^355^374^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P5_Replace_Variable]^if  ( typeSystemSystem.isInvalidatingType ( type )  )  {^360^^^^^355^374^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P7_Replace_Invocation]^if  ( typeSystem.getInstanceFromPrototype ( type )  )  {^360^^^^^355^374^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P13_Insert_Block]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {     prop.getTypes (  ) .add ( type ) ;     add ( type ) ; }^360^^^^^355^374^[Delete]^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P2_Replace_Operator]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  == null )  {^368^^^^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P5_Replace_Variable]^if  (  ( typeSystem = type.getInstanceFromPrototype ( type )  )  != null )  {^368^^^^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P7_Replace_Invocation]^if  (  ( type = typeSystem.isInvalidatingType ( type )  )  != null )  {^368^^^^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P7_Replace_Invocation]^if  (  ( type = typeSystem .getType (  )   )  != null )  {^368^^^^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P8_Replace_Mix]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != this )  {^368^^^^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P15_Unwrap_Block]^prop.getTypes().add(type); prop.typesToSkip.add(type);^368^369^370^371^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  { prop.getTypes (  ) .add ( type ) ; prop.typesToSkip.add ( type ) ; }^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P16_Remove_Block]^^368^369^370^371^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  { prop.getTypes (  ) .add ( type ) ; prop.typesToSkip.add ( type ) ; }^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P13_Insert_Block]^if  ( typeSystem.isInvalidatingType ( type )  )  {     prop.invalidate (  ) ; }else {     prop.addTypeToSkip ( type ) ;     if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {         prop.getTypes (  ) .add ( type ) ;         add ( type ) ;     } }^368^^^^^355^374^[Delete]^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P7_Replace_Invocation]^prop.addTypeToSkip (  ) .add ( type ) ;^369^^^^^355^374^prop.getTypes (  ) .add ( type ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P7_Replace_Invocation]^prop .addTypeToSkip ( type )  .add ( type ) ;^369^^^^^355^374^prop.getTypes (  ) .add ( type ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P14_Delete_Statement]^^369^370^^^^355^374^prop.getTypes (  ) .add ( type ) ; prop.typesToSkip.add ( type ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P11_Insert_Donor_Statement]^prop.addTypeToSkip ( type ) ;prop.getTypes (  ) .add ( type ) ;^369^^^^^355^374^prop.getTypes (  ) .add ( type ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P11_Insert_Donor_Statement]^prop.typesToSkip.add ( type ) ;prop.getTypes (  ) .add ( type ) ;^369^^^^^355^374^prop.getTypes (  ) .add ( type ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P14_Delete_Statement]^^370^^^^^355^374^prop.typesToSkip.add ( type ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P11_Insert_Donor_Statement]^prop.getTypes (  ) .add ( type ) ;prop.typesToSkip.add ( type ) ;^370^^^^^355^374^prop.typesToSkip.add ( type ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P11_Insert_Donor_Statement]^prop.addTypeToSkip ( type ) ;prop.typesToSkip.add ( type ) ;^370^^^^^355^374^prop.typesToSkip.add ( type ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P8_Replace_Mix]^if  (  ( type =  nullSystem.getInstanceFromProtonull ( null )  )  !^368^^^^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P8_Replace_Mix]^prop .getTypes (  )  ;^363^^^^^355^374^prop.addTypeToSkip ( type ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P14_Delete_Statement]^^363^^^^^355^374^prop.addTypeToSkip ( type ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P11_Insert_Donor_Statement]^prop.getTypes (  ) .add ( type ) ;prop.addTypeToSkip ( type ) ;^363^^^^^355^374^prop.addTypeToSkip ( type ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P11_Insert_Donor_Statement]^prop.typesToSkip.add ( type ) ;prop.addTypeToSkip ( type ) ;^363^^^^^355^374^prop.addTypeToSkip ( type ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P8_Replace_Mix]^if  (  ( type = 0.isInvalidatingType ( type )  )  != null )  {^368^^^^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P7_Replace_Invocation]^prop.getTypes (  )  .add ( type )  ;^369^^^^^355^374^prop.getTypes (  ) .add ( type ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P8_Replace_Mix]^prop.typesToSkip .add ( type )  ;^370^^^^^355^374^prop.typesToSkip.add ( type ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P7_Replace_Invocation]^prop.addTypeToSkip (  ) ;^361^^^^^355^374^prop.invalidate (  ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P14_Delete_Statement]^^361^^^^^355^374^prop.invalidate (  ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P8_Replace_Mix]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != true )  {^368^^^^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P1_Replace_Type]^char field = n.getLastChild (  ) .getchar (  ) ;^357^^^^^355^374^String field = n.getLastChild (  ) .getString (  ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P5_Replace_Variable]^String field = parent.getLastChild (  ) .getString (  ) ;^357^^^^^355^374^String field = n.getLastChild (  ) .getString (  ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) , parent.getFirstChild (  ) , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) .getFirstChild (  ) , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  )  ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P5_Replace_Variable]^T type = n.getType ( getScope (  ) , typeSystem.getFirstChild (  ) , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P5_Replace_Variable]^T type = field.getType ( getScope (  ) , n.getFirstChild (  ) , typeSystem ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem .getType (  )  , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P7_Replace_Invocation]^String field = n .getFirstChild (  )  .getString (  ) ;^357^^^^^355^374^String field = n.getLastChild (  ) .getString (  ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P14_Delete_Statement]^^357^^^^^355^374^String field = n.getLastChild (  ) .getString (  ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem.getType ( getScope (  ) , n .getLastChild (  )  , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P14_Delete_Statement]^^358^359^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ; Property prop = getProperty ( field ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P14_Delete_Statement]^^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P14_Delete_Statement]^^359^^^^^355^374^Property prop = getProperty ( field ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P5_Replace_Variable]^if  ( 2.isInvalidatingType ( type )  )  {^360^^^^^355^374^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P5_Replace_Variable]^if  ( type.isInvalidatingType ( typeSystem )  )  {^360^^^^^355^374^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P8_Replace_Mix]^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != false )  {^368^^^^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P14_Delete_Statement]^^369^^^^^355^374^prop.getTypes (  ) .add ( type ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P8_Replace_Mix]^String field = parent .getFirstChild (  )  .getString (  ) ;^357^^^^^355^374^String field = n.getLastChild (  ) .getString (  ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) , field.getFirstChild (  ) , n ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P14_Delete_Statement]^^357^358^^^^355^374^String field = n.getLastChild (  ) .getString (  ) ; T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.GETPROP )  {^384^^^^^383^389^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.GETPROP )  {^384^^^^^383^389^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.GETPROP )  {^384^^^^^383^389^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P6_Replace_Expression]^if  ( n.getType() == OBJECTLIT )  {^384^^^^^383^389^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P15_Unwrap_Block]^handleGetProp(t, n);^384^385^386^387^388^383^389^if  ( n.getType (  )  == Token.GETPROP )  { handleGetProp ( t, n ) ; } else if  ( n.getType (  )  == Token.OBJECTLIT )  { handleObjectLit ( t, n ) ; }^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P16_Remove_Block]^^384^385^386^387^388^383^389^if  ( n.getType (  )  == Token.GETPROP )  { handleGetProp ( t, n ) ; } else if  ( n.getType (  )  == Token.OBJECTLIT )  { handleObjectLit ( t, n ) ; }^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P2_Replace_Operator]^} else if  ( n.getType (  )  != Token.OBJECTLIT )  {^386^^^^^383^389^} else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.OBJECTLIT )  {^386^^^^^383^389^} else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P6_Replace_Expression]^} else {^386^^^^^383^389^} else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P15_Unwrap_Block]^handleObjectLit(t, n);^386^387^388^^^383^389^} else if  ( n.getType (  )  == Token.OBJECTLIT )  { handleObjectLit ( t, n ) ; }^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P16_Remove_Block]^^386^387^388^^^383^389^} else if  ( n.getType (  )  == Token.OBJECTLIT )  { handleObjectLit ( t, n ) ; }^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^handleObjectLit ( t, parent ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^handleObjectLit (  n ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^handleObjectLit ( t ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^handleObjectLit ( n, t ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^handleGetProp ( t, n ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^handleGetProp ( t, parent ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^handleGetProp ( t, n ) ;handleObjectLit ( t, n ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^handleGetProp ( t, parent ) ;^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^handleGetProp (  n ) ;^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^handleGetProp ( t ) ;^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^handleGetProp ( n, t ) ;^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^handleObjectLit ( t, n ) ;^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^handleObjectLit ( t, n ) ;handleGetProp ( t, n ) ;^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P2_Replace_Operator]^} else if  ( n.getType (  )  >= Token.OBJECTLIT )  {^386^^^^^383^389^} else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^}  if  ( parent.getType (  )  == Token.OBJECTLIT )  {^386^^^^^383^389^} else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P1_Replace_Type]^char name = n.getLastChild (  ) .getchar (  ) ;^395^^^^^394^407^String name = n.getLastChild (  ) .getString (  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;String name = n.getLastChild (  ) .getString (  ) ;^395^^^^^394^407^String name = n.getLastChild (  ) .getString (  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P7_Replace_Invocation]^String name = n .getFirstChild (  )  .getString (  ) ;^395^^^^^394^407^String name = n.getLastChild (  ) .getString (  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P14_Delete_Statement]^^395^^^^^394^407^String name = n.getLastChild (  ) .getString (  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P14_Delete_Statement]^^395^396^^^^394^407^String name = n.getLastChild (  ) .getString (  ) ; T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) .getFirstChild (  ) , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  )  ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^T type = n.getType ( getScope (  ) , typeSystem.getFirstChild (  ) , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^T type = name.getType ( getScope (  ) , n.getFirstChild (  ) , typeSystem ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem.getTypeWithProperty ( getScope (  ) , n.getFirstChild (  ) , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem.getType ( getScope (  ) , n .getLastChild (  )  , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P11_Insert_Donor_Statement]^T type = typeSystem.getType ( getScope (  ) , n, name ) ;T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^T type = null.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) , name.getFirstChild (  ) , n ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem .getType (  )  , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P14_Delete_Statement]^^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P14_Delete_Statement]^^398^^^^^394^407^Property prop = getProperty ( name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t,  type, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, typeull )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty (  prop, type, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop,  null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, type, prop, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P7_Replace_Invocation]^if  ( !prop .addType ( type , type , type )   )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P8_Replace_Mix]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, true )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P9_Replace_Statement]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t.getSourceName(), n, com.google.javascript.jscomp.DisambiguateProperties.INVALIDATION, name, (type == null ? "null" : type.toString()), n.toString()));^401^402^403^404^405^394^407^if  ( showInvalidationWarnings )  { compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P16_Remove_Block]^^401^402^403^404^405^394^407^if  ( showInvalidationWarnings )  { compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P13_Insert_Block]^if  ( ! ( prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  )  {     if  ( showInvalidationWarnings )  {         compiler.report ( make ( t.getSourceName (  ) , child, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;     } }^401^^^^^394^407^[Delete]^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P13_Insert_Block]^if  ( ! ( prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  )  {     if  ( showInvalidationWarnings )  {         compiler.report ( make ( t.getSourceName (  ) , n, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;     } }^401^^^^^394^407^[Delete]^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P13_Insert_Block]^if  ( showInvalidationWarnings )  {     compiler.report ( make ( t.getSourceName (  ) , child, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^401^^^^^394^407^[Delete]^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P2_Replace_Operator]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type != null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "ull" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) ,  INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , n,  name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( INVALIDATION.getSourceName (  ) , n, t, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, name, INVALIDATION, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P6_Replace_Expression]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P14_Delete_Statement]^^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P13_Insert_Block]^if  ( ! ( prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  )  {     if  ( showInvalidationWarnings )  {         compiler.report ( make ( t.getSourceName (  ) , child, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;     } }^402^^^^^394^407^[Delete]^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P13_Insert_Block]^if  ( ! ( prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  )  {     if  ( showInvalidationWarnings )  {         compiler.report ( make ( t.getSourceName (  ) , n, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;     } }^402^^^^^394^407^[Delete]^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P13_Insert_Block]^if  ( showInvalidationWarnings )  {     compiler.report ( make ( t.getSourceName (  ) , child, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^402^^^^^394^407^[Delete]^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P13_Insert_Block]^if  ( showInvalidationWarnings )  {     compiler.report ( make ( t.getSourceName (  ) , n, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^402^^^^^394^407^[Delete]^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "nuull" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( name.getSourceName (  ) , n, INVALIDATION, t, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , name, INVALIDATION, n, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( type.getSourceName (  ) , n, INVALIDATION, name, ( t == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , INVALIDATION, n, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P6_Replace_Expression]^t.getSourceName (  ) , n, INVALIDATION, name, ( type.toString (  )  ) , n.toString (  )  )  ) ;^403^404^^^^394^407^t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P14_Delete_Statement]^^403^404^^^^394^407^t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P11_Insert_Donor_Statement]^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^403^404^^^^394^407^t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P11_Insert_Donor_Statement]^t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^403^404^^^^394^407^t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P6_Replace_Expression]^( type.toString (  )  ) , n.toString (  )  )  ) ;^404^^^^^394^407^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P14_Delete_Statement]^^404^^^^^394^407^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P11_Insert_Donor_Statement]^t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^404^^^^^394^407^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P11_Insert_Donor_Statement]^t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^404^^^^^394^407^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "nul" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , type, INVALIDATION, name, ( n == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "nullnul" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "l" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( prop.getLastChild (  ) , processProperty ( t, n, type, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( type, prop, t, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( type.getLastChild (  ) , processProperty ( t, prop, n, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P8_Replace_Mix]^if  ( !prop.scheduleRenaming ( n .getFirstChild (  )  , processProperty ( t, prop, type, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^processProperty (  prop, type, null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^processProperty ( t,  type, null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^processProperty ( t, prop,  null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^processProperty ( type, prop, t, null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^processProperty ( prop, t, type, null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^processProperty ( t, type, prop, null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "nullu" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n.getSourceName (  ) , t, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "uull" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, type, ( name == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[P8_Replace_Mix]^Node child = n .getLastChild (  )  ;^413^^^^^412^433^Node child = n.getFirstChild (  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^Node child = child.getFirstChild (  ) ;^413^^^^^412^433^Node child = n.getFirstChild (  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P14_Delete_Statement]^^413^^^^^412^433^Node child = n.getFirstChild (  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P2_Replace_Operator]^while  ( child == null )  {^414^^^^^412^433^while  ( child != null )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^while  ( n != null )  {^414^^^^^412^433^while  ( child != null )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^while  ( child != childull )  {^414^^^^^412^433^while  ( child != null )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^while  ( n != childull )  {^414^^^^^412^433^while  ( child != null )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P2_Replace_Operator]^if  ( child.getType (  )  > Token.STRING )  {^415^^^^^412^433^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P2_Replace_Operator]^if  ( child.getType (  )  != Token.STRING )  {^415^^^^^412^433^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.STRING )  {^415^^^^^412^433^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P6_Replace_Expression]^if  ( type == null )  {^415^^^^^412^433^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P7_Replace_Invocation]^if  ( child.getTypeWithProperty (  )  == Token.STRING )  {^415^^^^^412^433^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.GETPROP )  {^415^^^^^412^433^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P13_Insert_Block]^if  ( ! ( prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  )  {     if  ( showInvalidationWarnings )  {         compiler.report ( make ( t.getSourceName (  ) , child, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;     } }^415^^^^^412^433^[Delete]^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P13_Insert_Block]^if  ( ! ( prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  )  {     if  ( showInvalidationWarnings )  {         compiler.report ( make ( t.getSourceName (  ) , n, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;     } }^415^^^^^412^433^[Delete]^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, childull )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty ( t,  type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming (  processProperty ( t, prop, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty (  prop, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop,  null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, typeull )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, n, type, propull )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( n, processProperty ( t, prop, type, childull )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty ( n, prop, type, tull )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P8_Replace_Mix]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, false )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P9_Replace_Statement]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t.getSourceName(), child, com.google.javascript.jscomp.DisambiguateProperties.INVALIDATION, name, (type == null ? "null" : type.toString()), n.toString()));^423^424^425^426^427^412^433^if  ( showInvalidationWarnings )  { compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P16_Remove_Block]^^423^424^425^426^427^412^433^if  ( showInvalidationWarnings )  { compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P13_Insert_Block]^if  ( ! ( prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  )  {     if  ( showInvalidationWarnings )  {         compiler.report ( make ( t.getSourceName (  ) , child, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;     } }^423^^^^^412^433^[Delete]^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P13_Insert_Block]^if  ( ! ( prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  )  {     if  ( showInvalidationWarnings )  {         compiler.report ( make ( t.getSourceName (  ) , n, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;     } }^423^^^^^412^433^[Delete]^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P13_Insert_Block]^if  ( showInvalidationWarnings )  {     compiler.report ( make ( t.getSourceName (  ) , n, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^423^^^^^412^433^[Delete]^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P2_Replace_Operator]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type != null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) ,  INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATIOName, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child,  name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( name.getSourceName (  ) , child, INVALIDATION, t, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, childame, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, type, ( name == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, type, name, ( INVALIDATION == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , INVALIDATION, child, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P6_Replace_Expression]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, childame, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P14_Delete_Statement]^^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P13_Insert_Block]^if  ( ! ( prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  )  {     if  ( showInvalidationWarnings )  {         compiler.report ( make ( t.getSourceName (  ) , child, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;     } }^424^^^^^412^433^[Delete]^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P13_Insert_Block]^if  ( ! ( prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  )  {     if  ( showInvalidationWarnings )  {         compiler.report ( make ( t.getSourceName (  ) , n, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;     } }^424^^^^^412^433^[Delete]^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P13_Insert_Block]^if  ( showInvalidationWarnings )  {     compiler.report ( make ( t.getSourceName (  ) , child, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^424^^^^^412^433^[Delete]^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P13_Insert_Block]^if  ( showInvalidationWarnings )  {     compiler.report ( make ( t.getSourceName (  ) , n, INVALIDATION, name,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ; }^424^^^^^412^433^[Delete]^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( type.getSourceName (  ) , child, INVALIDATION, name, ( t == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, name, INVALIDATION, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P6_Replace_Expression]^t.getSourceName (  ) , child, INVALIDATION, name, ( type.toString (  )  ) , n.toString (  )  )  ) ;^425^426^^^^412^433^t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P14_Delete_Statement]^^425^426^^^^412^433^t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P11_Insert_Donor_Statement]^t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^425^426^^^^412^433^t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P11_Insert_Donor_Statement]^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^425^426^^^^412^433^t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P6_Replace_Expression]^( type.toString (  )  ) , n.toString (  )  )  ) ;^426^^^^^412^433^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P14_Delete_Statement]^^426^^^^^412^433^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P11_Insert_Donor_Statement]^t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^426^^^^^412^433^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P11_Insert_Donor_Statement]^t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^426^^^^^412^433^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^( type == childull ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^426^^^^^412^433^( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "nullnu" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( child.getSourceName (  ) , t, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, n, INVALIDATIOName, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, n, ( type == nameull ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , type, INVALIDATION, name, ( child == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n.getSourceName (  ) , child, INVALIDATION, tame, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "nulln" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, nameame, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( INVALIDATION.getSourceName (  ) , child, t, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "nullul" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P1_Replace_Type]^char name = child.getchar (  ) ;^417^^^^^412^433^String name = child.getString (  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^String name = n.getString (  ) ;^417^^^^^412^433^String name = child.getString (  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P11_Insert_Donor_Statement]^String name = n.getLastChild (  ) .getString (  ) ;String name = child.getString (  ) ;^417^^^^^412^433^String name = child.getString (  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) , child, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) ,  name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) , n ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^T type = n.getType ( getScope (  ) , typeSystem, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^T type = typeSystem.getType ( getScope (  ) , name, n ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem.getTypeWithProperty ( getScope (  ) , n, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P11_Insert_Donor_Statement]^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;T type = typeSystem.getType ( getScope (  ) , n, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P11_Insert_Donor_Statement]^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;T type = typeSystem.getType ( getScope (  ) , n, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P7_Replace_Invocation]^String name = child .getNext (  )  ;^417^^^^^412^433^String name = child.getString (  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P14_Delete_Statement]^^417^^^^^412^433^String name = child.getString (  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^T type = 1.getType ( getScope (  ) , n, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^T type = name.getType ( getScope (  ) , n, typeSystem ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P14_Delete_Statement]^^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P14_Delete_Statement]^^420^^^^^412^433^Property prop = getProperty ( name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( n, processProperty ( t, prop, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( prop, processProperty ( t, child, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( t, processProperty ( child, prop, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty ( prop, t, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, type, prop, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P7_Replace_Invocation]^if  ( !prop .addType ( type , type , type )   )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^processProperty (  prop, type, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^processProperty ( t,  type, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^processProperty ( t, prop,  null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^processProperty ( prop, t, type, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^processProperty ( t, type, prop, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , name, INVALIDATION, child, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, typeame, ( n == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "ull" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "nullnul" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, 2, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, null, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^child = n.getNext (  ) .getNext (  ) ;^431^^^^^412^433^child = child.getNext (  ) .getNext (  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P8_Replace_Mix]^child =  null.getNext (  ) .getNext (  ) ;^431^^^^^412^433^child = child.getNext (  ) .getNext (  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P8_Replace_Mix]^T type = 2.getType ( getScope (  ) , n, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P7_Replace_Invocation]^T type = typeSystem .getType (  )  ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty ( type, prop, t, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "n" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P7_Replace_Invocation]^child = child .getType (  )^431^^^^^412^433^child = child.getNext (  ) .getNext (  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P14_Delete_Statement]^^431^^^^^412^433^child = child.getNext (  ) .getNext (  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P2_Replace_Operator]^if  ( child.getType (  )  <= Token.STRING )  {^415^^^^^412^433^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( child.getType (  )  == Token.1 )  {^415^^^^^412^433^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( type, processProperty ( t, prop, child, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, n, typeull )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, 3, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P8_Replace_Mix]^String name = n .getNext (  )  ;^417^^^^^412^433^String name = child.getString (  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P8_Replace_Mix]^T type = 3.getType ( getScope (  ) , n, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^processProperty ( type, prop, t, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "u" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P8_Replace_Mix]^T type = typeSystem.getTypeWithProperty ( getScope (  ) , child, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^T type = null.getType ( getScope (  ) , n, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, 1, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P3_Replace_Literal]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "ulull" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[P5_Replace_Variable]^type = topTypeSystem.restrictByNotNullOrUndefined ( type ) ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^type = null.restrictByNotNullOrUndefined ( type ) ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^type = typeSystemSystem.restrictByNotNullOrUndefined ( type ) ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^type = type.restrictByNotNullOrUndefined ( typeSystem ) ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P7_Replace_Invocation]^type = typeSystem.getTypeAlternatives ( type ) ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P8_Replace_Mix]^type =  topTypeSystem.restrictByNotNullOrUndefined ( topType ) ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P7_Replace_Invocation]^type = typeSystem .getTypeAlternatives ( topType )  ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P14_Delete_Statement]^^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P2_Replace_Operator]^if  ( prop.skipRenaming && typeSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^if  ( prop.skipRenaming || null.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^if  ( typeSystem.skipRenaming || prop.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^if  ( type || prop.skipRenamingSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^if  ( typeSystem || prop.skipRenaming.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P6_Replace_Expression]^if  ( prop.skipRenaming ) {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P6_Replace_Expression]^if  (  typeSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P7_Replace_Invocation]^if  ( prop.skipRenaming || typeSystem.getTypeAlternatives ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P8_Replace_Mix]^if  (  topTypeSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P9_Replace_Statement]^if  ( typeSystem.isInvalidatingType ( topType )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P15_Unwrap_Block]^return null;^445^446^447^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  { return null; }^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P16_Remove_Block]^^445^446^447^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  { return null; }^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P13_Insert_Block]^if  ( typeSystem.isInvalidatingType ( topType )  )  {     return null; }^445^^^^^442^467^[Delete]^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P8_Replace_Mix]^return false;^446^^^^^442^467^return null;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^if  ( prop.skipRenaming || topTypeSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^if  ( prop.skipRenaming || typeSystemSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^if  ( prop.skipRenaming || type.isInvalidatingType ( typeSystem )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P8_Replace_Mix]^if  ( prop.skipRenaming || subTypeSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^Iterable<T> alternatives = topTypeSystem.getTypeAlternatives ( type ) ;^449^^^^^442^467^Iterable<T> alternatives = typeSystem.getTypeAlternatives ( type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^Iterable<T> alternatives = typeSystemSystem.getTypeAlternatives ( type ) ;^449^^^^^442^467^Iterable<T> alternatives = typeSystem.getTypeAlternatives ( type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^Iterable<T> alternatives = type.getTypeAlternatives ( typeSystem ) ;^449^^^^^442^467^Iterable<T> alternatives = typeSystem.getTypeAlternatives ( type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P7_Replace_Invocation]^Iterable<T> alternatives = typeSystem.isInvalidatingType ( type ) ;^449^^^^^442^467^Iterable<T> alternatives = typeSystem.getTypeAlternatives ( type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P14_Delete_Statement]^^449^^^^^442^467^Iterable<T> alternatives = typeSystem.getTypeAlternatives ( type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P2_Replace_Operator]^if  ( alternatives == null )  {^450^^^^^442^467^if  ( alternatives != null )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P6_Replace_Expression]^if  ( lastType != null )  {^450^^^^^442^467^if  ( alternatives != null )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P6_Replace_Expression]^if  ( firstType == null )  {^450^^^^^442^467^if  ( alternatives != null )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P8_Replace_Mix]^if  ( alternatives != false )  {^450^^^^^442^467^if  ( alternatives != null )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^if  ( typeSystem.isInvalidatingType ( type )  )  {^461^^^^^442^467^if  ( typeSystem.isInvalidatingType ( topType )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^if  ( topType.isInvalidatingType ( typeSystem )  )  {^461^^^^^442^467^if  ( typeSystem.isInvalidatingType ( topType )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P7_Replace_Invocation]^if  ( typeSystem.getTypeAlternatives ( topType )  )  {^461^^^^^442^467^if  ( typeSystem.isInvalidatingType ( topType )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P9_Replace_Statement]^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^461^^^^^442^467^if  ( typeSystem.isInvalidatingType ( topType )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P15_Unwrap_Block]^return null;^461^462^463^^^442^467^if  ( typeSystem.isInvalidatingType ( topType )  )  { return null; }^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P16_Remove_Block]^^461^462^463^^^442^467^if  ( typeSystem.isInvalidatingType ( topType )  )  { return null; }^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P13_Insert_Block]^if  (  ( prop.skipRenaming )  ||  ( typeSystem.isInvalidatingType ( type )  )  )  {     return null; }^461^^^^^442^467^[Delete]^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P8_Replace_Mix]^return this;^462^^^^^442^467^return null;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P8_Replace_Mix]^return true;^462^^^^^442^467^return null;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^return type;^465^^^^^442^467^return topType;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T topType = subTypeSystem.getTypeWithProperty ( prop.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T topType = typeSystem.getTypeWithProperty ( prop.name ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T topType = typeSystem.getTypeWithProperty (  type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T topType = prop.getTypeWithProperty ( typeSystem.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T topType = propSystem.getTypeWithProperty ( type.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T topType = prop.name.getTypeWithProperty ( typeSystem, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T topType = prop.nameSystem.getTypeWithProperty ( type, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P11_Insert_Donor_Statement]^T type = typeSystem.getType ( getScope (  ) , n, name ) ;T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T topType = typeSystem.getTypeWithProperty ( 0, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T topType = typeSystem.getTypeWithProperty ( prop.name.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T topType = typeSystemSystem.getTypeWithProperty ( prop.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T topType = typeSystem.getTypeWithProperty ( prop, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P8_Replace_Mix]^T topType = typeSystem .getTypeAlternatives ( type )  ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P14_Delete_Statement]^^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P13_Insert_Block]^if  ( typeSystem.isInvalidatingType ( topType )  )  {     return null; }^461^^^^^442^467^[Delete]^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^prop.addType ( subType, topType, relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^prop.addType ( type, type, relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^prop.addType ( type, topType, topType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^prop.addType (  topType, relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^prop.addType ( type,  relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^prop.addType ( type, topType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^prop.addType ( relatedType, topType, type ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^prop.addType ( topType, type, relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P14_Delete_Statement]^^464^465^^^^442^467^prop.addType ( type, topType, relatedType ) ; return topType;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P2_Replace_Operator]^if  ( lastType == null )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^if  ( type != null )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P6_Replace_Expression]^if  ( firstType == null )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P8_Replace_Mix]^if  ( lastType != false )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P9_Replace_Statement]^if  ( alternatives != null )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P15_Unwrap_Block]^firstType = (firstType == null) ? lastType : firstType;^454^455^456^^^442^467^if  ( lastType != null )  { firstType = firstType == null ? lastType : firstType; }^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P16_Remove_Block]^^454^455^456^^^442^467^if  ( lastType != null )  { firstType = firstType == null ? lastType : firstType; }^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P2_Replace_Operator]^firstType = firstType != null ? lastType : firstType;^455^^^^^442^467^firstType = firstType == null ? lastType : firstType;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^firstType = type == null ? lastType : firstType;^455^^^^^442^467^firstType = firstType == null ? lastType : firstType;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^firstType = firstType == null ? type : firstType;^455^^^^^442^467^firstType = firstType == null ? lastType : firstType;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^firstType = lastType == null ? firstType : firstType;^455^^^^^442^467^firstType = firstType == null ? lastType : firstType;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P6_Replace_Expression]^firstType = firstType ( firstType;^455^^^^^442^467^firstType = firstType == null ? lastType : firstType;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P8_Replace_Mix]^firstType = firstType == false ? lastType : firstType;^455^^^^^442^467^firstType = firstType == null ? lastType : firstType;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P13_Insert_Block]^if  ( lastType != null )  {     firstType =  ( firstType == null )  ? lastType : firstType; }^455^^^^^442^467^[Delete]^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P8_Replace_Mix]^firstType = firstType == true ? lastType : firstType;^455^^^^^442^467^firstType = firstType == null ? lastType : firstType;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^return type;^458^^^^^442^467^return firstType;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P12_Insert_Condition]^if  ( lastType != null )  { T firstType = null; }^451^^^^^442^467^T firstType = null;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( t, prop, type, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( t, prop, subType, type ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty (  prop, subType, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( t,  subType, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( t, prop,  firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( t, prop, subType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( firstType, prop, subType, t ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( t, subType, prop, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( t, prop, firstType, subType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( t, firstType, subType, prop ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( prop, t, subType, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P14_Delete_Statement]^^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P8_Replace_Mix]^if  ( lastType != this )  {^454^^^^^442^467^if  ( lastType != null )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P8_Replace_Mix]^firstType = firstType == this ? lastType : firstType;^455^^^^^442^467^firstType = firstType == null ? lastType : firstType;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^if  ( 0.isInvalidatingType ( topType )  )  {^461^^^^^442^467^if  ( typeSystem.isInvalidatingType ( topType )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P8_Replace_Mix]^if  ( 2.getTypeAlternatives ( topType )  )  {^461^^^^^442^467^if  ( typeSystem.isInvalidatingType ( topType )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P8_Replace_Mix]^return false;^462^^^^^442^467^return null;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P8_Replace_Mix]^return subType;^465^^^^^442^467^return topType;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T topType = typeSystem.getTypeWithProperty ( 2, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T topType = type.getTypeWithProperty ( prop.name, typeSystem ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P8_Replace_Mix]^T topType = subTypeSystem .getTypeAlternatives ( firstType )  ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T lastType = processProperty ( subType, prop, t, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^T topType = topTypeSystem.getTypeWithProperty ( prop.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P8_Replace_Mix]^T topType = typeSystem.getTypeWithProperty ( 1, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^if  ( typeSystem.isInvalidatingType ( subType )  )  {^461^^^^^442^467^if  ( typeSystem.isInvalidatingType ( topType )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^prop.addType ( type, subType, relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P5_Replace_Variable]^prop.addType ( type, relatedType, topType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P14_Delete_Statement]^^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[P8_Replace_Mix]^registry =  null.getTypeRegistry (  ) ;^639^^^^^638^649^registry = compiler.getTypeRegistry (  ) ;^[CLASS] JSTypeSystem  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] JSTypeRegistry  registry  AbstractCompiler  compiler  Set  invalidatingTypes  boolean  
[P14_Delete_Statement]^^639^^^^^638^649^registry = compiler.getTypeRegistry (  ) ;^[CLASS] JSTypeSystem  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] JSTypeRegistry  registry  AbstractCompiler  compiler  Set  invalidatingTypes  boolean  
[P7_Replace_Invocation]^invalidatingTypes = Sets .newHashSet (  )  , registry.getNativeType ( JSTypeNative.NO_TYPE ) ,^640^641^642^643^^638^649^invalidatingTypes = Sets.newHashSet ( registry.getNativeType ( JSTypeNative.ALL_TYPE ) , registry.getNativeType ( JSTypeNative.NO_OBJECT_TYPE ) , registry.getNativeType ( JSTypeNative.NO_TYPE ) ,^[CLASS] JSTypeSystem  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] JSTypeRegistry  registry  AbstractCompiler  compiler  Set  invalidatingTypes  boolean  
[P8_Replace_Mix]^invalidatingTypes  =  invalidatingTypes ;^640^641^642^643^^638^649^invalidatingTypes = Sets.newHashSet ( registry.getNativeType ( JSTypeNative.ALL_TYPE ) , registry.getNativeType ( JSTypeNative.NO_OBJECT_TYPE ) , registry.getNativeType ( JSTypeNative.NO_TYPE ) ,^[CLASS] JSTypeSystem  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] JSTypeRegistry  registry  AbstractCompiler  compiler  Set  invalidatingTypes  boolean  
[P8_Replace_Mix]^registry .getDirectImplementors ( 3 )  , registry^645^646^647^^^638^649^registry.getNativeType ( JSTypeNative.OBJECT_PROTOTYPE ) , registry.getNativeType ( JSTypeNative.TOP_LEVEL_PROTOTYPE ) , registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE )  ) ;^[CLASS] JSTypeSystem  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] JSTypeRegistry  registry  AbstractCompiler  compiler  Set  invalidatingTypes  boolean  
[P14_Delete_Statement]^^645^646^647^^^638^649^registry.getNativeType ( JSTypeNative.OBJECT_PROTOTYPE ) , registry.getNativeType ( JSTypeNative.TOP_LEVEL_PROTOTYPE ) , registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE )  ) ;^[CLASS] JSTypeSystem  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] JSTypeRegistry  registry  AbstractCompiler  compiler  Set  invalidatingTypes  boolean  
[P14_Delete_Statement]^^646^647^^^^638^649^registry.getNativeType ( JSTypeNative.TOP_LEVEL_PROTOTYPE ) , registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE )  ) ;^[CLASS] JSTypeSystem  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] JSTypeRegistry  registry  AbstractCompiler  compiler  Set  invalidatingTypes  boolean  
[P7_Replace_Invocation]^registry .getDirectImplementors ( null )   ) ;^647^^^^^638^649^registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE )  ) ;^[CLASS] JSTypeSystem  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] JSTypeRegistry  registry  AbstractCompiler  compiler  Set  invalidatingTypes  boolean  
[P14_Delete_Statement]^^647^^^^^638^649^registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE )  ) ;^[CLASS] JSTypeSystem  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] JSTypeRegistry  registry  AbstractCompiler  compiler  Set  invalidatingTypes  boolean  
[P14_Delete_Statement]^^652^653^^^^651^654^checkState ( !type.isUnionType (  )  ) ; invalidatingTypes.add ( type ) ;^[CLASS] JSTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P7_Replace_Invocation]^checkState ( !type .isUnknownType (  )   ) ;^652^^^^^651^654^checkState ( !type.isUnionType (  )  ) ;^[CLASS] JSTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P12_Insert_Condition]^if  ( type.isUnionType (  )  )  { checkState ( !type.isUnionType (  )  ) ; }^652^^^^^651^654^checkState ( !type.isUnionType (  )  ) ;^[CLASS] JSTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P7_Replace_Invocation]^invalidatingTypes.contains ( type ) ;^653^^^^^651^654^invalidatingTypes.add ( type ) ;^[CLASS] JSTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P7_Replace_Invocation]^invalidatingTypes .addAll (  )  ;^653^^^^^651^654^invalidatingTypes.add ( type ) ;^[CLASS] JSTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P14_Delete_Statement]^^653^^^^^651^654^invalidatingTypes.add ( type ) ;^[CLASS] JSTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P8_Replace_Mix]^@Override public StaticScope<JSType> getRootScope (  )  { return true; }^656^^^^^651^661^@Override public StaticScope<JSType> getRootScope (  )  { return null; }^[CLASS] JSTypeSystem  [METHOD] getRootScope [RETURN_TYPE] StaticScope   [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  boolean  
[P8_Replace_Mix]^return this;^659^^^^^658^660^return null;^[CLASS] JSTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node node [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  boolean  Node  node  
[P2_Replace_Operator]^if  ( node.getJSType (  )  != null )  {^664^^^^^662^668^if  ( node.getJSType (  )  == null )  {^[CLASS] JSTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  String  prop  boolean  StaticScope  scope  Node  node  
[P8_Replace_Mix]^if  ( node.getJSType (  )  == this )  {^664^^^^^662^668^if  ( node.getJSType (  )  == null )  {^[CLASS] JSTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  String  prop  boolean  StaticScope  scope  Node  node  
[P9_Replace_Statement]^if  ( type.autoboxesTo (  )  != null )  {^664^^^^^662^668^if  ( node.getJSType (  )  == null )  {^[CLASS] JSTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  String  prop  boolean  StaticScope  scope  Node  node  
[P15_Unwrap_Block]^return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);^664^665^666^^^662^668^if  ( node.getJSType (  )  == null )  { return registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ; }^[CLASS] JSTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  String  prop  boolean  StaticScope  scope  Node  node  
[P16_Remove_Block]^^664^665^666^^^662^668^if  ( node.getJSType (  )  == null )  { return registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ; }^[CLASS] JSTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  String  prop  boolean  StaticScope  scope  Node  node  
[P13_Insert_Block]^if  (  ( node.getJSType (  )  )  == null )  {     return registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ; }^665^^^^^662^668^[Delete]^[CLASS] JSTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  String  prop  boolean  StaticScope  scope  Node  node  
[P14_Delete_Statement]^^665^^^^^662^668^return registry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] JSTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  String  prop  boolean  StaticScope  scope  Node  node  
[P12_Insert_Condition]^if  ( node.getJSType (  )  == null )  { return node.getJSType (  ) ; }^667^^^^^662^668^return node.getJSType (  ) ;^[CLASS] JSTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  String  prop  boolean  StaticScope  scope  Node  node  
[P14_Delete_Statement]^^667^^^^^662^668^return node.getJSType (  ) ;^[CLASS] JSTypeSystem  [METHOD] getType [RETURN_TYPE] JSType   JSType> scope Node node String prop [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  String  prop  boolean  StaticScope  scope  Node  node  
[P2_Replace_Operator]^if  ( type == null && invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P2_Replace_Operator]^if  ( type != null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P2_Replace_Operator]^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  || type.isUnknownType (  )  )  )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P5_Replace_Variable]^if  ( invalidatingTypes == null || type.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P6_Replace_Expression]^if  ( type == null ) {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P6_Replace_Expression]^if  (  invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P6_Replace_Expression]^if  ( (type == null || invalidatingTypes.contains(type)) )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P6_Replace_Expression]^if  ( type.isNamedType( && type.isUnknownType()) )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P7_Replace_Invocation]^if  ( type == null || invalidatingTypes.add ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P7_Replace_Invocation]^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type .isUnionType (  )   )  )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P8_Replace_Mix]^if  ( type == this || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P15_Unwrap_Block]^return true;^671^672^673^674^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  { return true; }^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P16_Remove_Block]^^671^672^673^674^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  { return true; }^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P3_Replace_Literal]^return false;^673^^^^^670^678^return true;^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P7_Replace_Invocation]^( type .isEnumType (  )   && type.isUnknownType (  )  )  )  {^672^^^^^670^678^( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P14_Delete_Statement]^^672^673^^^^670^678^( type.isNamedType (  )  && type.isUnknownType (  )  )  )  { return true;^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P7_Replace_Invocation]^( type.isNamedType (  )  && type .isUnionType (  )   )  )  {^672^^^^^670^678^( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P7_Replace_Invocation]^ObjectType objType = ObjectType.hasOwnProperty ( type ) ;^676^^^^^670^678^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P11_Insert_Donor_Statement]^ObjectType objSkipType = skipType.toObjectType (  ) ;ObjectType objType = ObjectType.cast ( type ) ;^676^^^^^670^678^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet ( type ) ;ObjectType objType = ObjectType.cast ( type ) ;^676^^^^^670^678^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P11_Insert_Donor_Statement]^ObjectType objType = type.toObjectType (  ) ;ObjectType objType = ObjectType.cast ( type ) ;^676^^^^^670^678^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P7_Replace_Invocation]^ObjectType objType = ObjectType .getConstructor (  )  ;^676^^^^^670^678^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P14_Delete_Statement]^^676^677^^^^670^678^ObjectType objType = ObjectType.cast ( type ) ; return objType != null && !objType.hasReferenceName (  ) ;^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P2_Replace_Operator]^return objType != null || !objType.hasReferenceName (  ) ;^677^^^^^670^678^return objType != null && !objType.hasReferenceName (  ) ;^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P2_Replace_Operator]^return objType == null && !objType.hasReferenceName (  ) ;^677^^^^^670^678^return objType != null && !objType.hasReferenceName (  ) ;^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P7_Replace_Invocation]^return objType != null && !objType.hasOwnProperty (  ) ;^677^^^^^670^678^return objType != null && !objType.hasReferenceName (  ) ;^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P8_Replace_Mix]^return objType != true && !objType.hasOwnProperty (  ) ;^677^^^^^670^678^return objType != null && !objType.hasReferenceName (  ) ;^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P8_Replace_Mix]^return objType != null && !objType .hasOwnProperty ( this )  ;^677^^^^^670^678^return objType != null && !objType.hasReferenceName (  ) ;^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P14_Delete_Statement]^^677^^^^^670^678^return objType != null && !objType.hasReferenceName (  ) ;^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[P7_Replace_Invocation]^type = type .isFunctionPrototypeType (  )  ;^681^^^^^680^690^type = type.restrictByNotNullOrUndefined (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P8_Replace_Mix]^type =  alt.restrictByNotNullOrUndefined (  ) ;^681^^^^^680^690^type = type.restrictByNotNullOrUndefined (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P14_Delete_Statement]^^681^^^^^680^690^type = type.restrictByNotNullOrUndefined (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P11_Insert_Donor_Statement]^return type.restrictByNotNullOrUndefined (  ) ;type = type.restrictByNotNullOrUndefined (  ) ;^681^^^^^680^690^type = type.restrictByNotNullOrUndefined (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P2_Replace_Operator]^if  ( type  |  UnionType )  {^682^^^^^680^690^if  ( type instanceof UnionType )  {^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P5_Replace_Variable]^if  ( alt instanceof UnionType )  {^682^^^^^680^690^if  ( type instanceof UnionType )  {^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P9_Replace_Statement]^if  ( ! ( type instanceof ObjectType )  )  {^682^^^^^680^690^if  ( type instanceof UnionType )  {^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P9_Replace_Statement]^if  ( objType instanceof FunctionType )  {^682^^^^^680^690^if  ( type instanceof UnionType )  {^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P15_Unwrap_Block]^java.util.Set<com.google.javascript.rhino.jstype.JSType> types = com.google.common.collect.Sets.newHashSet(type); for (com.google.javascript.rhino.jstype.JSType alt : ((com.google.javascript.rhino.jstype.UnionType) (type)).getAlternates()) {    types.addAll(getTypesToSkipForTypeNonUnion(type));}; return com.google.common.collect.ImmutableSet.copyOf(types);^682^683^684^685^686^680^690^if  ( type instanceof UnionType )  { Set<JSType> types = Sets.newHashSet ( type ) ; for  ( JSType alt :  (  ( UnionType )  type ) .getAlternates (  )  )  { types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ; }^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P16_Remove_Block]^^682^683^684^685^686^680^690^if  ( type instanceof UnionType )  { Set<JSType> types = Sets.newHashSet ( type ) ; for  ( JSType alt :  (  ( UnionType )  type ) .getAlternates (  )  )  { types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ; }^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P8_Replace_Mix]^Set<JSType> alts = Sets.newHashSet ( type ) ;^683^^^^^680^690^Set<JSType> types = Sets.newHashSet ( type ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P11_Insert_Donor_Statement]^ObjectType objType = ObjectType.cast ( type ) ;Set<JSType> types = Sets.newHashSet ( type ) ;^683^^^^^680^690^Set<JSType> types = Sets.newHashSet ( type ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet (  ) ;Set<JSType> types = Sets.newHashSet ( type ) ;^683^^^^^680^690^Set<JSType> types = Sets.newHashSet ( type ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P11_Insert_Donor_Statement]^List<JSType> list = Lists.newArrayList (  ) ;Set<JSType> types = Sets.newHashSet ( type ) ;^683^^^^^680^690^Set<JSType> types = Sets.newHashSet ( type ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P14_Delete_Statement]^^683^^^^^680^690^Set<JSType> types = Sets.newHashSet ( type ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P7_Replace_Invocation]^for  ( JSType alt :  (  ( UnionType )  type )  .getOwnerFunction (  )   )  {^684^^^^^680^690^for  ( JSType alt :  (  ( UnionType )  type ) .getAlternates (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P14_Delete_Statement]^^684^685^686^^^680^690^for  ( JSType alt :  (  ( UnionType )  type ) .getAlternates (  )  )  { types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ; }^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P7_Replace_Invocation]^types .add ( alt )  ;^685^^^^^680^690^types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P7_Replace_Invocation]^types.addAll ( getTypesToSkipForType ( type )  ) ;^685^^^^^680^690^types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P14_Delete_Statement]^^685^^^^^680^690^types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P11_Insert_Donor_Statement]^return ImmutableSet.copyOf ( getTypesToSkipForTypeNonUnion ( type )  ) ;types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ;^685^^^^^680^690^types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P5_Replace_Variable]^types.addAll ( getTypesToSkipForTypeNonUnion ( alt )  ) ;^685^^^^^680^690^types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P14_Delete_Statement]^^687^^^^^680^690^return ImmutableSet.copyOf ( types ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P7_Replace_Invocation]^types .add ( type )  ;^685^^^^^680^690^types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P8_Replace_Mix]^types.addAll ( getTypesToSkipForType ( alt )  ) ;^685^^^^^680^690^types.addAll ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P5_Replace_Variable]^return ImmutableSet.copyOf ( getTypesToSkipForTypeNonUnion ( alt )  ) ;^689^^^^^680^690^return ImmutableSet.copyOf ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P7_Replace_Invocation]^return ImmutableSet.copyOf ( getTypesToSkipForType ( type )  ) ;^689^^^^^680^690^return ImmutableSet.copyOf ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P14_Delete_Statement]^^689^^^^^680^690^return ImmutableSet.copyOf ( getTypesToSkipForTypeNonUnion ( type )  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  alt  type  boolean  
[P7_Replace_Invocation]^Set<JSType> types = Sets .newHashSet (  )  ;^693^^^^^692^706^Set<JSType> types = Sets.newHashSet (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet ( type ) ;Set<JSType> types = Sets.newHashSet (  ) ;^693^^^^^692^706^Set<JSType> types = Sets.newHashSet (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P11_Insert_Donor_Statement]^List<JSType> list = Lists.newArrayList (  ) ;Set<JSType> types = Sets.newHashSet (  ) ;^693^^^^^692^706^Set<JSType> types = Sets.newHashSet (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P14_Delete_Statement]^^693^694^^^^692^706^Set<JSType> types = Sets.newHashSet (  ) ; JSType skipType = type;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P2_Replace_Operator]^while  ( skipType == null )  {^695^^^^^692^706^while  ( skipType != null )  {^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P5_Replace_Variable]^while  ( type != null )  {^695^^^^^692^706^while  ( skipType != null )  {^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P2_Replace_Operator]^if  ( objSkipType == null )  {^699^^^^^692^706^if  ( objSkipType != null )  {^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P8_Replace_Mix]^if  ( objSkipType != false )  {^699^^^^^692^706^if  ( objSkipType != null )  {^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P9_Replace_Statement]^if  ( top != null )  {^699^^^^^692^706^if  ( objSkipType != null )  {^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P9_Replace_Statement]^if  ( objType != null )  {^699^^^^^692^706^if  ( objSkipType != null )  {^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P15_Unwrap_Block]^skipType = objSkipType.getImplicitPrototype();^699^700^701^702^703^692^706^if  ( objSkipType != null )  { skipType = objSkipType.getImplicitPrototype (  ) ; } else { break; }^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P16_Remove_Block]^^699^700^701^702^703^692^706^if  ( objSkipType != null )  { skipType = objSkipType.getImplicitPrototype (  ) ; } else { break; }^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P7_Replace_Invocation]^skipType = objSkipType.hasOwnProperty (  ) ;^700^^^^^692^706^skipType = objSkipType.getImplicitPrototype (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P8_Replace_Mix]^skipType =  null.getImplicitPrototype (  ) ;^700^^^^^692^706^skipType = objSkipType.getImplicitPrototype (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P11_Insert_Donor_Statement]^objType = objType.getImplicitPrototype (  ) ;skipType = objSkipType.getImplicitPrototype (  ) ;^700^^^^^692^706^skipType = objSkipType.getImplicitPrototype (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P14_Delete_Statement]^^700^^^^^692^706^skipType = objSkipType.getImplicitPrototype (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P11_Insert_Donor_Statement]^ObjectType objSkipType = skipType.toObjectType (  ) ;skipType = objSkipType.getImplicitPrototype (  ) ;^700^^^^^692^706^skipType = objSkipType.getImplicitPrototype (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P5_Replace_Variable]^ObjectType objSkipType = type.toObjectType (  ) ;^698^^^^^692^706^ObjectType objSkipType = skipType.toObjectType (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P7_Replace_Invocation]^ObjectType objSkipType = skipType .isNamedType (  )  ;^698^^^^^692^706^ObjectType objSkipType = skipType.toObjectType (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P11_Insert_Donor_Statement]^ObjectType objType = ObjectType.cast ( type ) ;ObjectType objSkipType = skipType.toObjectType (  ) ;^698^^^^^692^706^ObjectType objSkipType = skipType.toObjectType (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P11_Insert_Donor_Statement]^ObjectType objType = type.toObjectType (  ) ;ObjectType objSkipType = skipType.toObjectType (  ) ;^698^^^^^692^706^ObjectType objSkipType = skipType.toObjectType (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P5_Replace_Variable]^types.add ( type ) ;^696^^^^^692^706^types.add ( skipType ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P14_Delete_Statement]^^696^^^^^692^706^types.add ( skipType ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P14_Delete_Statement]^^698^^^^^692^706^ObjectType objSkipType = skipType.toObjectType (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P11_Insert_Donor_Statement]^skipType = objSkipType.getImplicitPrototype (  ) ;ObjectType objSkipType = skipType.toObjectType (  ) ;^698^^^^^692^706^ObjectType objSkipType = skipType.toObjectType (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P7_Replace_Invocation]^skipType = objSkipType .getConstructor (  )  ;^700^^^^^692^706^skipType = objSkipType.getImplicitPrototype (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypesToSkipForTypeNonUnion [RETURN_TYPE] Set   JSType type [VARIABLES] ObjectType  objSkipType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  skipType  type  boolean  
[P2_Replace_Operator]^return type.isEnumType (  )  &&  ( type.autoboxesTo (  )  != null ) ;^709^^^^^708^710^return type.isEnumType (  )  ||  ( type.autoboxesTo (  )  != null ) ;^[CLASS] JSTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  
[P2_Replace_Operator]^return type.isEnumType (  )  ||  ( type.autoboxesTo (  )  == null ) ;^709^^^^^708^710^return type.isEnumType (  )  ||  ( type.autoboxesTo (  )  != null ) ;^[CLASS] JSTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  
[P8_Replace_Mix]^return true ;^709^^^^^708^710^return type.isEnumType (  )  ||  ( type.autoboxesTo (  )  != null ) ;^[CLASS] JSTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  
[P12_Insert_Condition]^if  ( type.autoboxesTo (  )  != null )  { return type.isEnumType (  )  ||  ( type.autoboxesTo (  )  != null ) ; }^709^^^^^708^710^return type.isEnumType (  )  ||  ( type.autoboxesTo (  )  != null ) ;^[CLASS] JSTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  
[P7_Replace_Invocation]^return type .isUnionType (  )   ||  ( type.autoboxesTo (  )  != null ) ;^709^^^^^708^710^return type.isEnumType (  )  ||  ( type.autoboxesTo (  )  != null ) ;^[CLASS] JSTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  
[P14_Delete_Statement]^^709^^^^^708^710^return type.isEnumType (  )  ||  ( type.autoboxesTo (  )  != null ) ;^[CLASS] JSTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  
[P8_Replace_Mix]^return type.isEnumType (  )  ||  ( type .isFunctionPrototypeType (  )   != null ) ;^709^^^^^708^710^return type.isEnumType (  )  ||  ( type.autoboxesTo (  )  != null ) ;^[CLASS] JSTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  
[P7_Replace_Invocation]^return type .isFunctionPrototypeType (  )  ;^713^^^^^712^714^return type.restrictByNotNullOrUndefined (  ) ;^[CLASS] JSTypeSystem  [METHOD] restrictByNotNullOrUndefined [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  
[P14_Delete_Statement]^^713^^^^^712^714^return type.restrictByNotNullOrUndefined (  ) ;^[CLASS] JSTypeSystem  [METHOD] restrictByNotNullOrUndefined [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  
[P6_Replace_Expression]^if  ( (objType != null && objType.getConstructor() != null) )  {^717^^^^^716^734^if  ( type.isUnionType (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P6_Replace_Expression]^if  ( objType != null )  {^717^^^^^716^734^if  ( type.isUnionType (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P6_Replace_Expression]^if  ( objType.getConstructor (  )  != null )  {^717^^^^^716^734^if  ( type.isUnionType (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P8_Replace_Mix]^if  ( type .isUnknownType (  )   )  {^717^^^^^716^734^if  ( type.isUnionType (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P9_Replace_Statement]^if  ( type.isFunctionPrototypeType (  )  )  {^717^^^^^716^734^if  ( type.isUnionType (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P13_Insert_Block]^if  (  (  ( objType != null )  &&  (  ( objType.getConstructor (  )  )  != null )  )  &&  ( objType.getConstructor (  ) .isInterface (  )  )  )  {     JSType> list = newArrayList (  ) ;     for  ( FunctionType impl : registry.getDirectImplementors ( objType )  )  {         list.add ( impl.getInstanceType (  )  ) ;     }     return list; }else {     return null; }^717^^^^^716^734^[Delete]^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P2_Replace_Operator]^if  ( objType != null || objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P2_Replace_Operator]^if  ( objType == null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P2_Replace_Operator]^if  ( objType != null && objType.getConstructor (  )  == null && objType.getConstructor (  ) .isInterface (  )  )  {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P6_Replace_Expression]^if  ( objType != null ) {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P6_Replace_Expression]^if  (  objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P6_Replace_Expression]^if  ( (objType != null && objType.getConstructor() != null) )  {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P6_Replace_Expression]^if  ( objType.getConstructor (  )  != null )  {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P7_Replace_Invocation]^if  ( objType != null && objType.hasOwnProperty (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P7_Replace_Invocation]^if  ( objType != null && objType .getImplicitPrototype (  )   != null && objType^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P8_Replace_Mix]^if  (  objType.hasOwnProperty (  )  != this && objType.getConstructor (  ) .isInterface (  )  )  {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P8_Replace_Mix]^return true;^731^^^^^716^734^return null;^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet (  ) ;List<JSType> list = Lists.newArrayList (  ) ;^724^^^^^716^734^List<JSType> list = Lists.newArrayList (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet ( type ) ;List<JSType> list = Lists.newArrayList (  ) ;^724^^^^^716^734^List<JSType> list = Lists.newArrayList (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P14_Delete_Statement]^^724^^^^^716^734^List<JSType> list = Lists.newArrayList (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P5_Replace_Variable]^: objType.getDirectImplementors ( registry )  )  {^726^^^^^716^734^: registry.getDirectImplementors ( objType )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P8_Replace_Mix]^: registry .getNativeType (  )   )  {^726^^^^^716^734^: registry.getDirectImplementors ( objType )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P14_Delete_Statement]^^726^727^^^^716^734^: registry.getDirectImplementors ( objType )  )  { list.add ( impl.getInstanceType (  )  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P14_Delete_Statement]^^727^^^^^716^734^list.add ( impl.getInstanceType (  )  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P7_Replace_Invocation]^list.add ( impl .isConstructor (  )   ) ;^727^^^^^716^734^list.add ( impl.getInstanceType (  )  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P5_Replace_Variable]^return null;^729^^^^^716^734^return list;^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P11_Insert_Donor_Statement]^ObjectType objSkipType = skipType.toObjectType (  ) ;ObjectType objType = type.toObjectType (  ) ;^720^^^^^716^734^ObjectType objType = type.toObjectType (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P11_Insert_Donor_Statement]^ObjectType objType = ObjectType.cast ( type ) ;ObjectType objType = type.toObjectType (  ) ;^720^^^^^716^734^ObjectType objType = type.toObjectType (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P14_Delete_Statement]^^720^^^^^716^734^ObjectType objType = type.toObjectType (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P11_Insert_Donor_Statement]^objType = objType.getImplicitPrototype (  ) ;ObjectType objType = type.toObjectType (  ) ;^720^^^^^716^734^ObjectType objType = type.toObjectType (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P7_Replace_Invocation]^objType.hasOwnProperty (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^722^723^^^^716^734^objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P14_Delete_Statement]^^722^723^724^^^716^734^objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  { List<JSType> list = Lists.newArrayList (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P7_Replace_Invocation]^objType.hasOwnProperty (  ) .isInterface (  )  )  {^723^^^^^716^734^objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P14_Delete_Statement]^^723^724^^^^716^734^objType.getConstructor (  ) .isInterface (  )  )  { List<JSType> list = Lists.newArrayList (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P7_Replace_Invocation]^objType .getImplicitPrototype (  )  .isInterface (  )  )  {^723^^^^^716^734^objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P7_Replace_Invocation]^list .add ( type )  ;^727^^^^^716^734^list.add ( impl.getInstanceType (  )  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P14_Delete_Statement]^^718^^^^^716^734^return  (  ( UnionType )  type ) .getAlternates (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P8_Replace_Mix]^if  ( objType != true ) {^721^722^723^^^716^734^if  ( objType != null && objType.getConstructor (  )  != null && objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P7_Replace_Invocation]^return  (  ( UnionType )  type )  .getOwnerFunction (  )  ;^718^^^^^716^734^return  (  ( UnionType )  type ) .getAlternates (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P8_Replace_Mix]^objType.getConstructor (  )  .getAlternates (  )   )  {^723^^^^^716^734^objType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[P2_Replace_Operator]^if  ( ! ( type  !=  ObjectType )  )  {^737^^^^^736^757^if  ( ! ( type instanceof ObjectType )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P6_Replace_Expression]^if  ( type.autoboxesTo() != null )  {^737^^^^^736^757^if  ( ! ( type instanceof ObjectType )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P9_Replace_Statement]^if  ( type instanceof UnionType )  {^737^^^^^736^757^if  ( ! ( type instanceof ObjectType )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P9_Replace_Statement]^if  ( objType instanceof FunctionType )  {^737^^^^^736^757^if  ( ! ( type instanceof ObjectType )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P15_Unwrap_Block]^if ((type.autoboxesTo()) != null) {    type = type.autoboxesTo();}else {    return null;};^737^738^739^740^741^736^757^if  ( ! ( type instanceof ObjectType )  )  { if  ( type.autoboxesTo (  )  != null )  { type = type.autoboxesTo (  ) ; } else { return null; }^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P16_Remove_Block]^^737^738^739^740^741^736^757^if  ( ! ( type instanceof ObjectType )  )  { if  ( type.autoboxesTo (  )  != null )  { type = type.autoboxesTo (  ) ; } else { return null; }^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P2_Replace_Operator]^if  ( type.autoboxesTo (  )  == null )  {^738^^^^^736^757^if  ( type.autoboxesTo (  )  != null )  {^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P7_Replace_Invocation]^if  ( type .isFunctionPrototypeType (  )   != null )  {^738^^^^^736^757^if  ( type.autoboxesTo (  )  != null )  {^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P8_Replace_Mix]^if  ( type .isFunctionPrototypeType (  )   != false )  {^738^^^^^736^757^if  ( type.autoboxesTo (  )  != null )  {^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P9_Replace_Statement]^if  ( node.getJSType (  )  == null )  {^738^^^^^736^757^if  ( type.autoboxesTo (  )  != null )  {^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P15_Unwrap_Block]^type = type.autoboxesTo();^738^739^740^741^742^736^757^if  ( type.autoboxesTo (  )  != null )  { type = type.autoboxesTo (  ) ; } else { return null; }^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P16_Remove_Block]^^738^739^740^741^742^736^757^if  ( type.autoboxesTo (  )  != null )  { type = type.autoboxesTo (  ) ; } else { return null; }^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P8_Replace_Mix]^return false;^741^^^^^736^757^return null;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P7_Replace_Invocation]^type = type .isFunctionPrototypeType (  )  ;^739^^^^^736^757^type = type.autoboxesTo (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P8_Replace_Mix]^type =  null.autoboxesTo (  ) ;^739^^^^^736^757^type = type.autoboxesTo (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P12_Insert_Condition]^if  ( type.autoboxesTo (  )  != null )  { type = type.autoboxesTo (  ) ; }^739^^^^^736^757^type = type.autoboxesTo (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P14_Delete_Statement]^^739^^^^^736^757^type = type.autoboxesTo (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P8_Replace_Mix]^return true;^741^^^^^736^757^return null;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P8_Replace_Mix]^if  ( type.autoboxesTo (  )  != false )  {^738^^^^^736^757^if  ( type.autoboxesTo (  )  != null )  {^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P8_Replace_Mix]^return this;^741^^^^^736^757^return null;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P7_Replace_Invocation]^ObjectType objType = ObjectType.hasOwnProperty ( type ) ;^749^^^^^736^757^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P7_Replace_Invocation]^ObjectType objType = ObjectType .getConstructor (  )  ;^749^^^^^736^757^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P11_Insert_Donor_Statement]^ObjectType objSkipType = skipType.toObjectType (  ) ;ObjectType objType = ObjectType.cast ( type ) ;^749^^^^^736^757^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet ( type ) ;ObjectType objType = ObjectType.cast ( type ) ;^749^^^^^736^757^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P11_Insert_Donor_Statement]^ObjectType objType = type.toObjectType (  ) ;ObjectType objType = ObjectType.cast ( type ) ;^749^^^^^736^757^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P14_Delete_Statement]^^749^^^^^736^757^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P2_Replace_Operator]^while  ( objType != null || objType.getImplicitPrototype (  )  != objType )  {^750^^^^^736^757^while  ( objType != null && objType.getImplicitPrototype (  )  != objType )  {^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P2_Replace_Operator]^while  ( objType == null && objType.getImplicitPrototype (  )  != objType )  {^750^^^^^736^757^while  ( objType != null && objType.getImplicitPrototype (  )  != objType )  {^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P2_Replace_Operator]^while  ( objType != null && objType.getImplicitPrototype (  )  == objType )  {^750^^^^^736^757^while  ( objType != null && objType.getImplicitPrototype (  )  != objType )  {^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P5_Replace_Variable]^while  ( foundType != null && objType.getImplicitPrototype (  )  != objType )  {^750^^^^^736^757^while  ( objType != null && objType.getImplicitPrototype (  )  != objType )  {^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P7_Replace_Invocation]^while  ( objType != null && objType.hasOwnProperty (  )  != objType )  {^750^^^^^736^757^while  ( objType != null && objType.getImplicitPrototype (  )  != objType )  {^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P5_Replace_Variable]^if  ( foundType.hasOwnProperty ( field )  )  {^751^^^^^736^757^if  ( objType.hasOwnProperty ( field )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P5_Replace_Variable]^if  ( field.hasOwnProperty ( objType )  )  {^751^^^^^736^757^if  ( objType.hasOwnProperty ( field )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P8_Replace_Mix]^if  ( objType .hasReferenceName (  )   )  {^751^^^^^736^757^if  ( objType.hasOwnProperty ( field )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P15_Unwrap_Block]^foundType = objType;^751^752^753^^^736^757^if  ( objType.hasOwnProperty ( field )  )  { foundType = objType; }^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P16_Remove_Block]^^751^752^753^^^736^757^if  ( objType.hasOwnProperty ( field )  )  { foundType = objType; }^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P5_Replace_Variable]^foundType = foundType;^752^^^^^736^757^foundType = objType;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P8_Replace_Mix]^foundType =  null;^752^^^^^736^757^foundType = objType;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P7_Replace_Invocation]^objType = objType.hasOwnProperty (  ) ;^754^^^^^736^757^objType = objType.getImplicitPrototype (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P8_Replace_Mix]^objType =  foundType.getImplicitPrototype (  ) ;^754^^^^^736^757^objType = objType.getImplicitPrototype (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P11_Insert_Donor_Statement]^skipType = objSkipType.getImplicitPrototype (  ) ;objType = objType.getImplicitPrototype (  ) ;^754^^^^^736^757^objType = objType.getImplicitPrototype (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P14_Delete_Statement]^^754^^^^^736^757^objType = objType.getImplicitPrototype (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P11_Insert_Donor_Statement]^ObjectType objType = type.toObjectType (  ) ;objType = objType.getImplicitPrototype (  ) ;^754^^^^^736^757^objType = objType.getImplicitPrototype (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P7_Replace_Invocation]^objType = objType .getConstructor (  )  ;^754^^^^^736^757^objType = objType.getImplicitPrototype (  ) ;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P14_Delete_Statement]^^750^751^752^^^736^757^while  ( objType != null && objType.getImplicitPrototype (  )  != objType )  { if  ( objType.hasOwnProperty ( field )  )  { foundType = objType;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P5_Replace_Variable]^return objType;^756^^^^^736^757^return foundType;^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[P8_Replace_Mix]^if  ( type .isUnionType (  )   )  {^760^^^^^759^769^if  ( type.isFunctionPrototypeType (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionPrototypeType  prototype  FunctionType  owner  
[P2_Replace_Operator]^if  ( owner.isConstructor (  )  && owner.isInterface (  )  )  {^763^^^^^759^769^if  ( owner.isConstructor (  )  || owner.isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionPrototypeType  prototype  FunctionType  owner  
[P6_Replace_Expression]^if  ( owner.isConstructor (  )  ) {^763^^^^^759^769^if  ( owner.isConstructor (  )  || owner.isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionPrototypeType  prototype  FunctionType  owner  
[P6_Replace_Expression]^if  (  owner.isInterface (  )  )  {^763^^^^^759^769^if  ( owner.isConstructor (  )  || owner.isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionPrototypeType  prototype  FunctionType  owner  
[P8_Replace_Mix]^if  ( owner .getSuperClassConstructor (  )   || owner.isInterface (  )  )  {^763^^^^^759^769^if  ( owner.isConstructor (  )  || owner.isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionPrototypeType  prototype  FunctionType  owner  
[P15_Unwrap_Block]^return ((com.google.javascript.rhino.jstype.FunctionPrototypeType) (type)).getOwnerFunction().getInstanceType();^763^764^765^766^^759^769^if  ( owner.isConstructor (  )  || owner.isInterface (  )  )  { return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  ) .getInstanceType (  ) ; }^[CLASS] JSTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionPrototypeType  prototype  FunctionType  owner  
[P16_Remove_Block]^^763^764^765^766^^759^769^if  ( owner.isConstructor (  )  || owner.isInterface (  )  )  { return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  ) .getInstanceType (  ) ; }^[CLASS] JSTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionPrototypeType  prototype  FunctionType  owner  
[P13_Insert_Block]^if  ( objType instanceof FunctionPrototypeType )  {     constructor =  (  ( FunctionPrototypeType )   ( objType )  ) .getOwnerFunction (  ) ; }else {     constructor = objType.getConstructor (  ) ; }^763^^^^^759^769^[Delete]^[CLASS] JSTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionPrototypeType  prototype  FunctionType  owner  
[P8_Replace_Mix]^return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  )  .isConstructor (  )  ;^764^765^^^^759^769^return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[CLASS] JSTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionPrototypeType  prototype  FunctionType  owner  
[P13_Insert_Block]^if  (  ( owner.isConstructor (  )  )  ||  ( owner.isInterface (  )  )  )  {     return  (  ( FunctionPrototypeType )   ( type )  ) .getOwnerFunction (  ) .getInstanceType (  ) ; }^764^^^^^759^769^[Delete]^[CLASS] JSTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionPrototypeType  prototype  FunctionType  owner  
[P14_Delete_Statement]^^764^765^^^^759^769^return  (  ( FunctionPrototypeType )  type ) .getOwnerFunction (  ) .getInstanceType (  ) ;^[CLASS] JSTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionPrototypeType  prototype  FunctionType  owner  
[P13_Insert_Block]^if  ( objType instanceof FunctionPrototypeType )  {     constructor =  (  ( FunctionPrototypeType )   ( objType )  ) .getOwnerFunction (  ) ; }else {     constructor = objType.getConstructor (  ) ; }^761^^^^^759^769^[Delete]^[CLASS] JSTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionPrototypeType  prototype  FunctionType  owner  
[P14_Delete_Statement]^^762^^^^^759^769^FunctionType owner = prototype.getOwnerFunction (  ) ;^[CLASS] JSTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionPrototypeType  prototype  FunctionType  owner  
[P11_Insert_Donor_Statement]^constructor = objType.getConstructor (  ) ;FunctionType owner = prototype.getOwnerFunction (  ) ;^762^^^^^759^769^FunctionType owner = prototype.getOwnerFunction (  ) ;^[CLASS] JSTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionPrototypeType  prototype  FunctionType  owner  
[P11_Insert_Donor_Statement]^constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;FunctionType owner = prototype.getOwnerFunction (  ) ;^762^^^^^759^769^FunctionType owner = prototype.getOwnerFunction (  ) ;^[CLASS] JSTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionPrototypeType  prototype  FunctionType  owner  
[P7_Replace_Invocation]^if  ( owner.isConstructor (  )  || owner .getAlternates (  )   )  {^763^^^^^759^769^if  ( owner.isConstructor (  )  || owner.isInterface (  )  )  {^[CLASS] JSTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionPrototypeType  prototype  FunctionType  owner  
[P8_Replace_Mix]^return true;^768^^^^^759^769^return null;^[CLASS] JSTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionPrototypeType  prototype  FunctionType  owner  
[P5_Replace_Variable]^ObjectType objType = ObjectType.cast ( top ) ;^774^^^^^773^803^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P7_Replace_Invocation]^ObjectType objType = ObjectType.hasOwnProperty ( type ) ;^774^^^^^773^803^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P11_Insert_Donor_Statement]^ObjectType objSkipType = skipType.toObjectType (  ) ;ObjectType objType = ObjectType.cast ( type ) ;^774^^^^^773^803^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P11_Insert_Donor_Statement]^Set<JSType> types = Sets.newHashSet ( type ) ;ObjectType objType = ObjectType.cast ( type ) ;^774^^^^^773^803^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P11_Insert_Donor_Statement]^ObjectType objType = type.toObjectType (  ) ;ObjectType objType = ObjectType.cast ( type ) ;^774^^^^^773^803^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P14_Delete_Statement]^^774^^^^^773^803^ObjectType objType = ObjectType.cast ( type ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P2_Replace_Operator]^while  ( constructor == null )  {^784^^^^^773^803^while  ( constructor != null )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P2_Replace_Operator]^if  ( top == null )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^if  ( type != null )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^if  ( top != this )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P9_Replace_Statement]^if  ( objSkipType != null )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P9_Replace_Statement]^if  ( objType != null )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P15_Unwrap_Block]^p.addType(itype, top, relatedType);^787^788^789^790^791^773^803^if  ( top != null )  { p.addType ( itype, top, relatedType ) ; } else { recordInterfaces ( itype, relatedType, p ) ; }^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P16_Remove_Block]^^787^788^789^790^791^773^803^if  ( top != null )  { p.addType ( itype, top, relatedType ) ; } else { recordInterfaces ( itype, relatedType, p ) ; }^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^recordInterfaces ( itype, type, p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^recordInterfaces (  relatedType, p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^recordInterfaces ( itype,  p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^recordInterfaces ( itype, relatedType ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^recordInterfaces ( relatedType, itype, p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^recordInterfaces ( itype, p, relatedType ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^recordInterfaces ( p, relatedType, itype ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P7_Replace_Invocation]^getType ( itype, relatedType, p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^recordInterfaces ( objType, relatedType, p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P14_Delete_Statement]^^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P11_Insert_Donor_Statement]^p.addType ( itype, top, relatedType ) ;recordInterfaces ( itype, relatedType, p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^p.addType ( objType, top, relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^p.addType ( itype, type, relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^p.addType ( itype, top, type ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^p.addType ( itype, to relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^p.addType (  top, relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^p.addType ( itype,  relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^p.addType ( itype, top ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^p.addType ( top, itype, relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^p.addType ( itype, relatedType, top ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P14_Delete_Statement]^^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P11_Insert_Donor_Statement]^recordInterfaces ( itype, relatedType, p ) ;p.addType ( itype, top, relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P15_Unwrap_Block]^return ;^794^795^^^^773^803^if  ( p.skipRenaming )  return; }^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P16_Remove_Block]^^794^795^^^^773^803^if  ( p.skipRenaming )  return; }^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P2_Replace_Operator]^if  ( constructor.isInterface (  )  && constructor.isConstructor (  )  )  {^796^^^^^773^803^if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P6_Replace_Expression]^if  ( constructor.isInterface (  )  ) {^796^^^^^773^803^if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P6_Replace_Expression]^if  (  constructor.isConstructor (  )  )  {^796^^^^^773^803^if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P7_Replace_Invocation]^if  ( constructor.isInterface (  )  || constructor .getSuperClassConstructor (  )   )  {^796^^^^^773^803^if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P15_Unwrap_Block]^constructor = constructor.getSuperClassConstructor();^796^797^798^799^800^773^803^if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  { constructor = constructor.getSuperClassConstructor (  ) ; } else { constructor = null; }^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P16_Remove_Block]^^796^797^798^799^800^773^803^if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  { constructor = constructor.getSuperClassConstructor (  ) ; } else { constructor = null; }^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^constructor = true;^799^^^^^796^800^constructor = null;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P7_Replace_Invocation]^constructor = constructor .isConstructor (  )  ;^797^^^^^773^803^constructor = constructor.getSuperClassConstructor (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^constructor =  null.getSuperClassConstructor (  ) ;^797^^^^^773^803^constructor = constructor.getSuperClassConstructor (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P11_Insert_Donor_Statement]^constructor = objType.getConstructor (  ) ;constructor = constructor.getSuperClassConstructor (  ) ;^797^^^^^773^803^constructor = constructor.getSuperClassConstructor (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P14_Delete_Statement]^^797^^^^^773^803^constructor = constructor.getSuperClassConstructor (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^constructor = false;^799^^^^^773^803^constructor = null;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^JSType top = getTypeWithProperty ( p.name ) ;^786^^^^^773^803^JSType top = getTypeWithProperty ( p.name, itype ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^JSType top = getTypeWithProperty (  itype ) ;^786^^^^^773^803^JSType top = getTypeWithProperty ( p.name, itype ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P7_Replace_Invocation]^for  ( ObjectType itype : constructor .isInterface (  )   )  {^785^^^^^773^803^for  ( ObjectType itype : constructor.getImplementedInterfaces (  )  )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P14_Delete_Statement]^^786^^^^^773^803^JSType top = getTypeWithProperty ( p.name, itype ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^recordInterfaces ( itype, type, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^recordInterfaces (  relatedType, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^recordInterfaces ( itype,  p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^recordInterfaces ( itype, relatedType ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^recordInterfaces ( relatedType, itype, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^recordInterfaces ( itype, p, relatedType ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^recordInterfaces ( p, relatedType, itype ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P7_Replace_Invocation]^getType ( itype, relatedType, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^recordInterfaces ( objType, relatedType, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P14_Delete_Statement]^^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P11_Insert_Donor_Statement]^p.addType ( itype, top, relatedType ) ;recordInterfaces ( itype, relatedType, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P2_Replace_Operator]^if  ( objType == null )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P6_Replace_Expression]^if  ( objType instanceof FunctionType )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P6_Replace_Expression]^if  ( objType instanceof FunctionPrototypeType )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P6_Replace_Expression]^if  ( constructor != null )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P6_Replace_Expression]^if  ( top != null )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P6_Replace_Expression]^if  ( constructor.isInterface() || constructor.isConstructor() )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^if  ( objType != true )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P9_Replace_Statement]^if  ( objSkipType != null )  {^775^^^^^773^803^if  ( objType != null )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^if  ( type != true )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^p.addType ( relatedType, top, itype ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P7_Replace_Invocation]^if  ( constructor .getAlternates (  )   || constructor.isConstructor (  )  )  {^796^^^^^773^803^if  ( constructor.isInterface (  )  || constructor.isConstructor (  )  )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^constructor = false;^799^^^^^796^800^constructor = null;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^constructor = true;^799^^^^^773^803^constructor = null;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P2_Replace_Operator]^if  ( objType  >=  FunctionType )  {^777^^^^^773^803^if  ( objType instanceof FunctionType )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P2_Replace_Operator]^if  ( objType  &  FunctionType )  {^777^^^^^773^803^if  ( objType instanceof FunctionType )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P6_Replace_Expression]^if  ( objType instanceof FunctionPrototypeType )  {^777^^^^^773^803^if  ( objType instanceof FunctionType )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^if  ( itype instanceof FunctionType )  {^777^^^^^773^803^if  ( objType instanceof FunctionType )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P9_Replace_Statement]^if  ( ! ( type instanceof ObjectType )  )  {^777^^^^^773^803^if  ( objType instanceof FunctionType )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P9_Replace_Statement]^if  ( type instanceof UnionType )  {^777^^^^^773^803^if  ( objType instanceof FunctionType )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P13_Insert_Block]^if  ( objType instanceof FunctionPrototypeType )  {     constructor =  (  ( FunctionPrototypeType )   ( objType )  ) .getOwnerFunction (  ) ; }else {     constructor = objType.getConstructor (  ) ; }^777^^^^^773^803^[Delete]^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P2_Replace_Operator]^} else if  ( objType  >=  FunctionPrototypeType )  {^779^^^^^773^803^} else if  ( objType instanceof FunctionPrototypeType )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^} else if  ( itype instanceof FunctionPrototypeType )  {^779^^^^^773^803^} else if  ( objType instanceof FunctionPrototypeType )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P6_Replace_Expression]^} else {^779^^^^^773^803^} else if  ( objType instanceof FunctionPrototypeType )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^}  if  ( itype instanceof FunctionPrototypeType )  {^779^^^^^773^803^} else if  ( objType instanceof FunctionPrototypeType )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P15_Unwrap_Block]^constructor = ((com.google.javascript.rhino.jstype.FunctionPrototypeType) (objType)).getOwnerFunction();^779^780^781^782^783^773^803^} else if  ( objType instanceof FunctionPrototypeType )  { constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ; } else { constructor = objType.getConstructor (  ) ; }^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P16_Remove_Block]^^779^780^781^782^783^773^803^} else if  ( objType instanceof FunctionPrototypeType )  { constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ; } else { constructor = objType.getConstructor (  ) ; }^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P13_Insert_Block]^if  (  ( owner.isConstructor (  )  )  ||  ( owner.isInterface (  )  )  )  {     return  (  ( FunctionPrototypeType )   ( type )  ) .getOwnerFunction (  ) .getInstanceType (  ) ; }^779^^^^^773^803^[Delete]^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P13_Insert_Block]^if  ( objType instanceof FunctionType )  {     constructor =  (  ( FunctionType )   ( objType )  ) ; }else     if  ( objType instanceof FunctionPrototypeType )  {         constructor =  (  ( FunctionPrototypeType )   ( objType )  ) .getOwnerFunction (  ) ;     }else {         constructor = objType.getConstructor (  ) ;     }^779^^^^^773^803^[Delete]^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^constructor = itype.getConstructor (  ) ;^782^^^^^779^783^constructor = objType.getConstructor (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P7_Replace_Invocation]^constructor = objType.hasOwnProperty (  ) ;^782^^^^^779^783^constructor = objType.getConstructor (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P7_Replace_Invocation]^constructor = objType .getImplicitPrototype (  )  ;^782^^^^^779^783^constructor = objType.getConstructor (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P11_Insert_Donor_Statement]^constructor = constructor.getSuperClassConstructor (  ) ;constructor = objType.getConstructor (  ) ;^782^^^^^779^783^constructor = objType.getConstructor (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P14_Delete_Statement]^^782^^^^^779^783^constructor = objType.getConstructor (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P11_Insert_Donor_Statement]^FunctionType owner = prototype.getOwnerFunction (  ) ;constructor = objType.getConstructor (  ) ;^782^^^^^779^783^constructor = objType.getConstructor (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^constructor =   (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^780^^^^^773^803^constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P11_Insert_Donor_Statement]^constructor =  ( FunctionType )  objType;constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^780^^^^^773^803^constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P13_Insert_Block]^if  (  ( owner.isConstructor (  )  )  ||  ( owner.isInterface (  )  )  )  {     return  (  ( FunctionPrototypeType )   ( type )  ) .getOwnerFunction (  ) .getInstanceType (  ) ; }^780^^^^^773^803^[Delete]^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P14_Delete_Statement]^^780^^^^^773^803^constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P5_Replace_Variable]^constructor = itype.getConstructor (  ) ;^782^^^^^773^803^constructor = objType.getConstructor (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P7_Replace_Invocation]^constructor = objType.hasOwnProperty (  ) ;^782^^^^^773^803^constructor = objType.getConstructor (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P7_Replace_Invocation]^constructor = objType .getImplicitPrototype (  )  ;^782^^^^^773^803^constructor = objType.getConstructor (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P11_Insert_Donor_Statement]^constructor = constructor.getSuperClassConstructor (  ) ;constructor = objType.getConstructor (  ) ;^782^^^^^773^803^constructor = objType.getConstructor (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^constructor = itype.hasOwnProperty (  ) ;^782^^^^^773^803^constructor = objType.getConstructor (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P14_Delete_Statement]^^782^^^^^773^803^constructor = objType.getConstructor (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P11_Insert_Donor_Statement]^FunctionType owner = prototype.getOwnerFunction (  ) ;constructor = objType.getConstructor (  ) ;^782^^^^^773^803^constructor = objType.getConstructor (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^constructor =   ( FunctionType )  objType;^778^^^^^773^803^constructor =  ( FunctionType )  objType;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P11_Insert_Donor_Statement]^constructor =  (  ( FunctionPrototypeType )  objType ) .getOwnerFunction (  ) ;constructor =  ( FunctionType )  objType;^778^^^^^773^803^constructor =  ( FunctionType )  objType;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P2_Replace_Operator]^} else if  ( objType  ==  FunctionPrototypeType )  {^779^^^^^773^803^} else if  ( objType instanceof FunctionPrototypeType )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^if  ( top != false )  {^787^^^^^773^803^if  ( top != null )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^getType ( itype, type, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P2_Replace_Operator]^if  ( objType  <  FunctionType )  {^777^^^^^773^803^if  ( objType instanceof FunctionType )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P2_Replace_Operator]^} else if  ( objType  <=  FunctionPrototypeType )  {^779^^^^^773^803^} else if  ( objType instanceof FunctionPrototypeType )  {^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^constructor =  null.getConstructor (  ) ;^782^^^^^779^783^constructor = objType.getConstructor (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^constructor = itype.hasOwnProperty (  ) ;^782^^^^^779^783^constructor = objType.getConstructor (  ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^constructor = this;^799^^^^^773^803^constructor = null;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^getType ( objType, relatedType, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^private  TightenTypes tt;^808^^^^^803^813^private final TightenTypes tt;^[CLASS] ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P1_Replace_Type]^private  long  nextUniqueId;^809^^^^^804^814^private int nextUniqueId;^[CLASS] ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^private  short  nextUniqueId;^809^^^^^804^814^private int nextUniqueId;^[CLASS] ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^private final Set<JSType> invalidatingTypes  = null ;^811^^^^^806^816^private final Set<JSType> invalidatingTypes = Sets.newHashSet (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^private static  JSTypeNative [] nativeTypes = new JSTypeNative[] {^815^^^^^815^819^private static final JSTypeNative [] nativeTypes = new JSTypeNative[] {^[CLASS] ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[P8_Replace_Mix]^this.tt =  null;^822^^^^^821^824^this.tt = tt;^[CLASS] ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] CodingConvention)   TightenTypes tt CodingConvention convention [VARIABLES] JSTypeNative[]  nativeTypes  Set  invalidatingTypes  boolean  TightenTypes  tt  int  nextUniqueId  CodingConvention  codingConvention  convention  
[P5_Replace_Variable]^this.codingConvention = codingConvention;^823^^^^^821^824^this.codingConvention = convention;^[CLASS] ConcreteTypeSystem  [METHOD] <init> [RETURN_TYPE] CodingConvention)   TightenTypes tt CodingConvention convention [VARIABLES] JSTypeNative[]  nativeTypes  Set  invalidatingTypes  boolean  TightenTypes  tt  int  nextUniqueId  CodingConvention  codingConvention  convention  
[P14_Delete_Statement]^^827^^^^^826^829^checkState ( !type.isUnionType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] Set  invalidatingTypes  JSType  type  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^invalidatingTypes .contains (  )  ;^828^^^^^826^829^invalidatingTypes.add ( type ) ;^[CLASS] ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] Set  invalidatingTypes  JSType  type  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^828^^^^^826^829^invalidatingTypes.add ( type ) ;^[CLASS] ConcreteTypeSystem  [METHOD] addInvalidatingType [RETURN_TYPE] void   JSType type [VARIABLES] Set  invalidatingTypes  JSType  type  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return tt.getTypeRegistry (  ) ;^832^^^^^831^833^return tt.getTopScope (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getRootScope [RETURN_TYPE] StaticScope   [VARIABLES] JSTypeNative[]  nativeTypes  Set  invalidatingTypes  boolean  TightenTypes  tt  int  nextUniqueId  CodingConvention  codingConvention  convention  
[P14_Delete_Statement]^^832^^^^^831^833^return tt.getTopScope (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getRootScope [RETURN_TYPE] StaticScope   [VARIABLES] JSTypeNative[]  nativeTypes  Set  invalidatingTypes  boolean  TightenTypes  tt  int  nextUniqueId  CodingConvention  codingConvention  convention  
[P5_Replace_Variable]^ConcreteFunctionType func = decl.getConcreteFunction ( tt ) ;^836^^^^^835^839^ConcreteFunctionType func = tt.getConcreteFunction ( decl ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node decl [VARIABLES] ConcreteFunctionType  func  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  Node  decl  JSTypeNative[]  nativeTypes  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^ConcreteFunctionType func = tt.getConcreteInstance ( decl ) ;^836^^^^^835^839^ConcreteFunctionType func = tt.getConcreteFunction ( decl ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node decl [VARIABLES] ConcreteFunctionType  func  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  Node  decl  JSTypeNative[]  nativeTypes  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^836^^^^^835^839^ConcreteFunctionType func = tt.getConcreteFunction ( decl ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node decl [VARIABLES] ConcreteFunctionType  func  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  Node  decl  JSTypeNative[]  nativeTypes  TightenTypes  tt  int  nextUniqueId  
[P2_Replace_Operator]^return  ( func == null )  ? func.getScope (  )  :  ( StaticScope<ConcreteType> )  null;^837^838^^^^835^839^return  ( func != null )  ? func.getScope (  )  :  ( StaticScope<ConcreteType> )  null;^[CLASS] ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node decl [VARIABLES] ConcreteFunctionType  func  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  Node  decl  JSTypeNative[]  nativeTypes  TightenTypes  tt  int  nextUniqueId  
[P6_Replace_Expression]^return  ( func ! =   ( StaticScope<ConcreteType> )  null;^837^838^^^^835^839^return  ( func != null )  ? func.getScope (  )  :  ( StaticScope<ConcreteType> )  null;^[CLASS] ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node decl [VARIABLES] ConcreteFunctionType  func  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  Node  decl  JSTypeNative[]  nativeTypes  TightenTypes  tt  int  nextUniqueId  
[P6_Replace_Expression]^return  ( func ! =  func.getScope (  )  ;^837^838^^^^835^839^return  ( func != null )  ? func.getScope (  )  :  ( StaticScope<ConcreteType> )  null;^[CLASS] ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node decl [VARIABLES] ConcreteFunctionType  func  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  Node  decl  JSTypeNative[]  nativeTypes  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^838^^^^^835^839^func.getScope (  )  :  ( StaticScope<ConcreteType> )  null;^[CLASS] ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node decl [VARIABLES] ConcreteFunctionType  func  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  Node  decl  JSTypeNative[]  nativeTypes  TightenTypes  tt  int  nextUniqueId  
[P2_Replace_Operator]^if  ( scope == null )  {^844^^^^^842^851^if  ( scope != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^if  ( scope != false )  {^844^^^^^842^851^if  ( scope != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[P9_Replace_Statement]^if  ( jsType == null )  {^844^^^^^842^851^if  ( scope != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[P9_Replace_Statement]^if  ( ret != null )  {^844^^^^^842^851^if  ( scope != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^return this;^849^^^^^842^851^return null;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes (  node, prop ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes ( c,  prop ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes ( c, node ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes ( node, c, prop ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes ( c, prop, node ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^ConcreteType c = tt.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope ) ;^845^846^^^^842^851^ConcreteType c = tt.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope, node ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^ConcreteType c = node.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope, tt ) ;^845^846^^^^842^851^ConcreteType c = tt.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope, node ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^ConcreteType c = tt .getConcreteInstance (  )  ;^845^846^^^^842^851^ConcreteType c = tt.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope, node ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[P13_Insert_Block]^if  ( scope != null )  {     ConcreteType c = tt.inferConcreteType (  (  ( ConcreteScope )   ( scope )  ) , node ) ;     return maybeAddAutoboxes ( c, node, prop ) ; }else {     return null; }^845^^^^^842^851^[Delete]^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^845^846^^^^842^851^ConcreteType c = tt.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope, node ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes ( prop, node, c ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^return false;^849^^^^^842^851^return null;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^860^^^^^858^875^JSType jsType = node.getJSType (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P2_Replace_Operator]^if  ( jsType != null )  {^861^^^^^858^875^if  ( jsType == null )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P6_Replace_Expression]^if  ( concrete != null && isNone()) )  {^861^^^^^858^875^if  ( jsType == null )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P6_Replace_Expression]^if  ( concrete != null )  {^861^^^^^858^875^if  ( jsType == null )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^if  ( jsType == true )  {^861^^^^^858^875^if  ( jsType == null )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P9_Replace_Statement]^if  ( scope != null )  {^861^^^^^858^875^if  ( jsType == null )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P9_Replace_Statement]^if  ( ret != null )  {^861^^^^^858^875^if  ( jsType == null )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P6_Replace_Expression]^} else if  ( concrete != null )  {^863^^^^^858^875^} else if  ( jsType.isUnknownType (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P6_Replace_Expression]^} else {^863^^^^^858^875^} else if  ( jsType.isUnknownType (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^} else if  ( jsType .isUnionType (  )   )  {^863^^^^^858^875^} else if  ( jsType.isUnknownType (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^}  if  ( jsType.isUnknownType (  )  )  {^863^^^^^858^875^} else if  ( jsType.isUnknownType (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P9_Replace_Statement]^} else if  ( type.isNone (  )  )  {^863^^^^^858^875^} else if  ( jsType.isUnknownType (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P9_Replace_Statement]^} else if  ( type.isFunction (  )  )  {^863^^^^^858^875^} else if  ( jsType.isUnknownType (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P9_Replace_Statement]^} else if  ( type.isUnion (  )  )  {^863^^^^^858^875^} else if  ( jsType.isUnknownType (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P2_Replace_Operator]^if  ( concrete != null || !concrete.getPropertyType ( prop ) .isNone (  )  )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P2_Replace_Operator]^if  ( concrete == null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^if  ( prop != null && !concrete.getPropertyType ( concrete ) .isNone (  )  )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P6_Replace_Expression]^if  ( concrete != null ) {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P6_Replace_Expression]^if  (  !concrete.getPropertyType ( prop ) .isNone (  )  )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P15_Unwrap_Block]^cType = cType.unionWith(concrete);^867^868^869^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  { cType = cType.unionWith ( concrete ) ; }^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P16_Remove_Block]^^867^868^869^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  { cType = cType.unionWith ( concrete ) ; }^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^cType = concrete.unionWith ( cType ) ;^868^^^^^858^875^cType = cType.unionWith ( concrete ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^cType =  concrete.unionWith ( concrete ) ;^868^^^^^858^875^cType = cType.unionWith ( concrete ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^cType = cType .unionWith ( cType )  ;^868^^^^^858^875^cType = cType.unionWith ( concrete ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^868^^^^^858^875^cType = cType.unionWith ( concrete ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return concrete;^871^^^^^858^875^return cType;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^ConcreteType concrete = nativeType.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( tt )  ) ;^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^ConcreteType concrete = tt.getConcreteFunction ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^ConcreteType concrete = tt.getConcreteInstance ( tt.getTopScope (  ) .getNativeObjectType ( nativeType )  ) ;^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^ConcreteType concrete = tt.getConcreteInstance ( tt .getConcreteInstance (  )  .getNativeObjectType ( nativeType )  ) ;^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^ConcreteType concrete = tt .getConcreteFunction ( node )   ) ;^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P11_Insert_Donor_Statement]^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P11_Insert_Donor_Statement]^tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^tt.getTypeRegistry (  )  .getInstanceType (  )   ) ;^866^^^^^858^875^tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^tt.getTopScope (  ) .getNativeObjectType ( nativeType )  ) ;^866^^^^^858^875^tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^866^^^^^858^875^tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P11_Insert_Donor_Statement]^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^866^^^^^858^875^tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^tt .getConcreteInstance (  )  .getNativeObjectType ( nativeType )  ) ;^866^^^^^858^875^tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^if  ( cType != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^if  ( concrete != null && !concrete.getPropertyType ( prop )  .isInstanceType (  )   )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^if  ( concrete != null && !concrete .toInstance (  )  .isNone (  )  )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^cType = cType .unionWith ( concrete )  ;^868^^^^^858^875^cType = cType.unionWith ( concrete ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^if  ( concrete != true ) {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^cType =  null.unionWith ( concrete ) ;^868^^^^^858^875^cType = cType.unionWith ( concrete ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return concrete;^862^^^^^858^875^return cType;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^if  ( concrete != false && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  )  .getInstanceType (  )   ) ;^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^if  ( concrete != true && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes ( concrete, jsType, prop ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes (  jsType, prop ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes ( cType,  prop ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes ( cType, jsType ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes ( jsType, cType, prop ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes ( prop, jsType, cType ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes ( cType, prop, jsType ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^jsType = autoboxed.restrictByNotNullOrUndefined (  ) ;^879^^^^^877^894^jsType = jsType.restrictByNotNullOrUndefined (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^jsType = jsType .isUnknownType (  )  ;^879^^^^^877^894^jsType = jsType.restrictByNotNullOrUndefined (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^879^^^^^877^894^jsType = jsType.restrictByNotNullOrUndefined (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P2_Replace_Operator]^if  ( jsType  !=  UnionType )  {^880^^^^^877^894^if  ( jsType instanceof UnionType )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^if  ( autoboxed instanceof UnionType )  {^880^^^^^877^894^if  ( jsType instanceof UnionType )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P15_Unwrap_Block]^for (com.google.javascript.rhino.jstype.JSType alt : ((com.google.javascript.rhino.jstype.UnionType) (jsType)).getAlternates()) {    return maybeAddAutoboxes(cType, alt, prop);};^880^881^882^883^^877^894^if  ( jsType instanceof UnionType )  { for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  { return maybeAddAutoboxes ( cType, alt, prop ) ; }^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P16_Remove_Block]^^880^881^882^883^^877^894^if  ( jsType instanceof UnionType )  { for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  { return maybeAddAutoboxes ( cType, alt, prop ) ; }^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes ( cType, jsType, prop ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes (  alt, prop ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes ( cType,  prop ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes ( cType, alt ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes ( prop, alt, cType ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes ( cType, prop, alt ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^for  ( JSType alt :  (  ( UnionType )  jsType ) .getNativeObjectType (  )  )  {^881^^^^^877^894^for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^for  ( JSType alt :  (  ( UnionType )  jsType )  .getAlternatives (  )   )  {^881^^^^^877^894^for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^881^882^883^^^877^894^for  ( JSType alt :  (  ( UnionType )  jsType ) .getAlternates (  )  )  { return maybeAddAutoboxes ( cType, alt, prop ) ; }^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return maybeAddAutoboxes ( alt, cType, prop ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P2_Replace_Operator]^if  ( jsType.autoboxesTo (  )  == null )  {^886^^^^^877^894^if  ( jsType.autoboxesTo (  )  != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^if  ( alt.autoboxesTo (  )  != null )  {^886^^^^^877^894^if  ( jsType.autoboxesTo (  )  != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P6_Replace_Expression]^if  ( jsType.unboxesTo() != null )  {^886^^^^^877^894^if  ( jsType.autoboxesTo (  )  != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^if  ( jsType.autoboxesTo (  )  != false )  {^886^^^^^877^894^if  ( jsType.autoboxesTo (  )  != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P15_Unwrap_Block]^com.google.javascript.rhino.jstype.JSType autoboxed = jsType.autoboxesTo(); return cType.unionWith(tt.getConcreteInstance(((com.google.javascript.rhino.jstype.ObjectType) (autoboxed))));^886^887^888^889^890^877^894^if  ( jsType.autoboxesTo (  )  != null )  { JSType autoboxed = jsType.autoboxesTo (  ) ; return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ; } else if  ( jsType.unboxesTo (  )  != null )  { return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ; }^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P16_Remove_Block]^^886^887^888^889^890^877^894^if  ( jsType.autoboxesTo (  )  != null )  { JSType autoboxed = jsType.autoboxesTo (  ) ; return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ; } else if  ( jsType.unboxesTo (  )  != null )  { return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ; }^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P2_Replace_Operator]^} else if  ( jsType.unboxesTo (  )  == null )  {^889^^^^^877^894^} else if  ( jsType.unboxesTo (  )  != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P6_Replace_Expression]^} else {^889^^^^^877^894^} else if  ( jsType.unboxesTo (  )  != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^} else if  ( jsType .autoboxesTo (  )   != null )  {^889^^^^^877^894^} else if  ( jsType.unboxesTo (  )  != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^}  if  ( autoboxed.unboxesTo (  )  != this )  {^889^^^^^877^894^} else if  ( jsType.unboxesTo (  )  != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P15_Unwrap_Block]^return cType.unionWith(tt.getConcreteInstance(((com.google.javascript.rhino.jstype.ObjectType) (jsType))));^889^890^891^^^877^894^} else if  ( jsType.unboxesTo (  )  != null )  { return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ; }^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P16_Remove_Block]^^889^890^891^^^877^894^} else if  ( jsType.unboxesTo (  )  != null )  { return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ; }^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return cType.unionWith ( tt.getConcreteFunction (  ( ObjectType )  jsType )  ) ;^890^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P13_Insert_Block]^if  (  ( jsType.unboxesTo (  )  )  != null )  {     return cType.unionWith ( tt.getConcreteInstance (  (  ( ObjectType )   ( jsType )  )  )  ) ; }^890^^^^^877^894^[Delete]^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return tt.unionWith ( cType.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^890^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return cType .unionWith ( cType )   ) ;^890^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^890^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^} else if  ( autoboxed.unboxesTo (  )  != null )  {^889^^^^^877^894^} else if  ( jsType.unboxesTo (  )  != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return tt.unionWith ( cType.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^888^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return cType .unionWith ( cType )   ) ;^888^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return cType.unionWith ( tt.getConcreteFunction (  ( ObjectType )  autoboxed )  ) ;^888^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^JSType autoboxed = alt.autoboxesTo (  ) ;^887^^^^^877^894^JSType autoboxed = jsType.autoboxesTo (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^JSType autoboxed = jsType .unboxesTo (  )  ;^887^^^^^877^894^JSType autoboxed = jsType.autoboxesTo (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^JSType autoboxed = autoboxed.autoboxesTo (  ) ;^887^^^^^877^894^JSType autoboxed = jsType.autoboxesTo (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^JSType autoboxed = autoboxed .unboxesTo (  )  ;^887^^^^^877^894^JSType autoboxed = jsType.autoboxesTo (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^887^^^^^877^894^JSType autoboxed = jsType.autoboxesTo (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^888^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^}  if  ( autoboxed.unboxesTo (  )  != true )  {^889^^^^^877^894^} else if  ( jsType.unboxesTo (  )  != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return cType.unionWith ( tt .getConcreteFunction ( this )   ) ;^888^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^if  ( autoboxed.autoboxesTo (  )  != null )  {^886^^^^^877^894^if  ( jsType.autoboxesTo (  )  != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^887^888^^^^877^894^JSType autoboxed = jsType.autoboxesTo (  ) ; return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[P2_Replace_Operator]^return  ( type == null )  && type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P2_Replace_Operator]^return  ( type != null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P2_Replace_Operator]^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) || invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return  ( type == null )  || type.getPropertyType (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return  ( type == null )  || type.isAll (  )  || type.getPropertyType (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return  ( type == null )  || type.isAll (  )  || type .isUnion (  )  ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.getPropertyType (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.add ( type.toInstance (  ) .instanceType )  ) ;^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.getPropertyType (  ) .instanceType )  ) ;^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return  ( type == null )  || type .isNone (  )   || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^899^900^901^^^896^902^return  ( type == null )  || type.isAll (  )  || type.isFunction (  ) ||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^||  ( type.getPropertyType (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^900^901^^^^896^902^||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^||  ( type .toInstance (  )  && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^900^901^^^^896^902^||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^900^901^^^^896^902^||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^&& invalidatingTypes.add ( type.toInstance (  ) .instanceType )  ) ;^901^^^^^896^902^&& invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^&& invalidatingTypes.contains ( type.getPropertyType (  ) .instanceType )  ) ;^901^^^^^896^902^&& invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^901^^^^^896^902^&& invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P11_Insert_Donor_Statement]^||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;&& invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^901^^^^^896^902^&& invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P11_Insert_Donor_Statement]^return instanceType.getConstructorType (  ) .getInstanceType (  ) ;&& invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^901^^^^^896^902^&& invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^906^^^^^905^907^return ImmutableSet.of ( type ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getTypesToSkipForType [RETURN_TYPE] ImmutableSet   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P2_Replace_Operator]^return type.isInstance (  ) || ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P2_Replace_Operator]^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) && type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return type.getPropertyType (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return type .toInstance (  )  && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return type.isInstance (  ) && ! ( type.toInstance (  ) .getNativeObjectType (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return type.isInstance (  ) && ! ( type.toInstance (  )  .isInstanceType (  )  || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return type.isInstance (  ) && ! ( type.getPropertyType (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.getNativeObjectType (  )  ) ;^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return type.isInstance (  ) && ! ( type .isInstance (  )  .isFunctionPrototype (  ) || type^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^return type.getPropertyType (  ) ;^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^911^912^913^^^909^914^return type.isInstance (  ) && ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^&& ! ( type.toInstance (  ) .getNativeObjectType (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^912^913^^^^909^914^&& ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^&& ! ( type.getPropertyType (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^912^913^^^^909^914^&& ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^&& ! ( type .isInstance (  )  .isFunctionPrototype (  ) || type^912^913^^^^909^914^&& ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^912^913^^^^909^914^&& ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^|| type.toInstance (  ) .instanceType.getNativeObjectType (  )  ) ;^913^^^^^909^914^|| type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^|| type.getPropertyType (  ) .instanceType.isInstanceType (  )  ) ;^913^^^^^909^914^|| type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^|| type.toInstance (  ) .instanceType .getInstanceType (  )   ) ;^913^^^^^909^914^|| type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^913^^^^^909^914^|| type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P11_Insert_Donor_Statement]^&& ! ( type.toInstance (  ) .isFunctionPrototype (  ) || type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;|| type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^913^^^^^909^914^|| type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P11_Insert_Donor_Statement]^||  ( type.isInstance (  ) && invalidatingTypes.contains ( type.toInstance (  ) .instanceType )  ) ;|| type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^913^^^^^909^914^|| type.toInstance (  ) .instanceType.isInstanceType (  )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] isTypeToSkip [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^if  ( type.getPropertyType (  )  )  {^924^^^^^923^929^if  ( type.isUnion (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^if  ( type .isFunction (  )   )  {^924^^^^^923^929^if  ( type.isUnion (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P15_Unwrap_Block]^return ((com.google.javascript.jscomp.ConcreteType.ConcreteUnionType) (type)).getAlternatives();^924^925^926^927^928^923^929^if  ( type.isUnion (  )  )  { return  (  ( ConcreteUnionType )  type ) .getAlternatives (  ) ; } else { return null; }^[CLASS] ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P16_Remove_Block]^^924^925^926^927^928^923^929^if  ( type.isUnion (  )  )  { return  (  ( ConcreteUnionType )  type ) .getAlternatives (  ) ; } else { return null; }^[CLASS] ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^return false;^927^^^^^923^929^return null;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return  (  ( ConcreteUnionType )  type ) .getNativeObjectType (  ) ;^925^^^^^923^929^return  (  ( ConcreteUnionType )  type ) .getAlternatives (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P13_Insert_Block]^if  ( type.isUnion (  )  )  {     return  (  ( ConcreteUnionType )   ( type )  ) .getAlternatives (  ) ; }else {     return null; }^925^^^^^923^929^[Delete]^[CLASS] ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return  (  ( ConcreteUnionType )  type )  .getAlternates (  )  ;^925^^^^^923^929^return  (  ( ConcreteUnionType )  type ) .getAlternatives (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^925^^^^^923^929^return  (  ( ConcreteUnionType )  type ) .getAlternatives (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^return this;^927^^^^^923^929^return null;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   ConcreteType type [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^if  ( t.isInstance (  )  )  {^933^^^^^931^956^if  ( type.isInstance (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^if  ( typeype.isInstance (  )  )  {^933^^^^^931^956^if  ( type.isInstance (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P6_Replace_Expression]^if  ( ret != null )  {^933^^^^^931^956^if  ( type.isInstance (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^if  ( type.getPropertyType (  )  )  {^933^^^^^931^956^if  ( type.isInstance (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^if  ( type .toInstance (  )   )  {^933^^^^^931^956^if  ( type.isInstance (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^if  ( typeype .toInstance (  )   )  {^933^^^^^931^956^if  ( type.isInstance (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^} else if  ( ret.isFunction (  )  )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^} else if  ( t.isFunction (  )  )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P6_Replace_Expression]^} else if  ( ret != null )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P6_Replace_Expression]^} else {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^} else if  ( type.getPropertyType (  )  )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P9_Replace_Statement]^} else if  ( jsType.isUnknownType (  )  )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P9_Replace_Statement]^} else if  ( type.isNone (  )  )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P15_Unwrap_Block]^if (("prototype".equals(field)) || (codingConvention.isSuperClassReference(field))) {    return type;};^936^937^938^939^940^931^956^} else if  ( type.isFunction (  )  )  { if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  { return type; }^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P16_Remove_Block]^^936^937^938^939^940^931^956^} else if  ( type.isFunction (  )  )  { if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  { return type; }^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^} else if  ( ret.isNone (  )  )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^} else if  ( typeype.isNone (  )  )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^} else if  ( t.isNone (  )  )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P6_Replace_Expression]^} else {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^} else if  ( type.getPropertyType (  )  )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^} else if  ( type .isInstanceType (  )   )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P9_Replace_Statement]^} else if  ( jsType.isUnknownType (  )  )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P9_Replace_Statement]^} else if  ( type.isFunction (  )  )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^} else if  ( typeype.isUnion (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P6_Replace_Expression]^} else {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^} else if  ( type.getPropertyType (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^} else if  ( type .isFunction (  )   )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^}  if  ( typeype.isUnion (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P9_Replace_Statement]^} else if  ( jsType.isUnknownType (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P9_Replace_Statement]^} else if  ( type.isNone (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P13_Insert_Block]^if  ( jsType.isUnknownType (  )  )  {     for  ( JSTypeNative nativeType : nativeTypes )  {         ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;         if  (  ( concrete != null )  &&  ( ! ( concrete.getPropertyType ( prop ) .isNone (  )  )  )  )  {             cType = cType.unionWith ( concrete ) ;         }     }     return cType; }^946^^^^^931^956^[Delete]^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P13_Insert_Block]^if  ( type.isNone (  )  )  {     return new ConcreteUniqueType (  ( ++ ( nextUniqueId )  )  ) ; }else     if  ( type.isUnion (  )  )  {         for  ( ConcreteType t :  (  ( ConcreteUnionType )   ( type )  ) .getAlternatives (  )  )  {             ConcreteType ret = getTypeWithProperty ( field, t ) ;             if  ( ret != null )  {                 return ret;             }         }     }^946^^^^^931^956^[Delete]^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P2_Replace_Operator]^if  ( ret == null )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^if  ( type != null )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^if  ( ret != this )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P9_Replace_Statement]^if  ( jsType == null )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P9_Replace_Statement]^if  ( scope != null )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P15_Unwrap_Block]^return ret;^950^951^952^^^931^956^if  ( ret != null )  { return ret; }^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P16_Remove_Block]^^950^951^952^^^931^956^if  ( ret != null )  { return ret; }^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return type;^951^^^^^931^956^return ret;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^ConcreteType ret = getTypeWithProperty ( field, type ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^ConcreteType ret = getTypeWithProperty (  t ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^ConcreteType ret = getTypeWithProperty ( field ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^ConcreteType ret = getTypeWithProperty ( t, field ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^ConcreteType ret = ConcreteTypeSystem ( field, t ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^ConcreteType ret = ConcreteTypeSystem ( field, type ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getNativeObjectType (  )  )  {^948^^^^^931^956^for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^948^949^950^951^952^931^956^for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  { ConcreteType ret = getTypeWithProperty ( field, t ) ; if  ( ret != null )  { return ret; }^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P11_Insert_Donor_Statement]^return instanceType.getInstanceTypeWithProperty ( field ) ;ConcreteType ret = getTypeWithProperty ( field, t ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^if  ( type != true )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^} else if  ( t.isUnion (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^for  ( ConcreteType t :  (  ( ConcreteUnionType )  type )  .getAlternates (  )   )  {^948^^^^^931^956^for  ( ConcreteType t :  (  ( ConcreteUnionType )  type ) .getAlternatives (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^} else if  ( ret.isUnion (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^}  if  ( typeype.getPropertyType (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^if  ( ret != true )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^} else if  ( t.getPropertyType (  )  )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P2_Replace_Operator]^if  ( "prototype".equals ( field ) && codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P3_Replace_Literal]^if  ( "yrototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P6_Replace_Expression]^if  ( "prototype".equals ( field ) ) {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P6_Replace_Expression]^if  (  codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P15_Unwrap_Block]^return type;^937^938^939^940^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  { return type; }^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P16_Remove_Block]^^937^938^939^940^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  { return type; }^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return t;^939^^^^^931^956^return type;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P3_Replace_Literal]^if  ( "protorototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^|| convention.isSuperClassReference ( field )  )  {^938^^^^^931^956^|| codingConvention.isSuperClassReference ( field )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^|| field.isSuperClassReference ( codingConvention )  )  {^938^^^^^931^956^|| codingConvention.isSuperClassReference ( field )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^938^939^^^^931^956^|| codingConvention.isSuperClassReference ( field )  )  { return type;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P3_Replace_Literal]^if  ( "prototypepr".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^if  ( "prototype".equals ( field ) || convention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^if  ( "prototype".equals ( codingConvention ) || field.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^}  if  ( ret.getPropertyType (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^} else if  ( type .isUnion (  )   )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^} else if  ( t.getPropertyType (  )  )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P3_Replace_Literal]^if  ( "prototypeprototy".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^return field.getInstanceTypeWithProperty ( instanceType ) ;^935^^^^^931^956^return instanceType.getInstanceTypeWithProperty ( field ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return instanceType .getConstructorType (  )  ;^935^^^^^931^956^return instanceType.getInstanceTypeWithProperty ( field ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^935^^^^^931^956^return instanceType.getInstanceTypeWithProperty ( field ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P5_Replace_Variable]^} else if  ( typeype.isFunction (  )  )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^}  if  ( ret.isFunction (  )  )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^if  ( ret != false )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^if  ( type != false )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^} else if  ( t .isInstanceType (  )   )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P3_Replace_Literal]^if  ( "prototypep".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^if  (  convention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P3_Replace_Literal]^if  ( "prorototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P3_Replace_Literal]^if  ( "prot".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^if  ( type != this )  {^950^^^^^931^956^if  ( ret != null )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P3_Replace_Literal]^if  ( "rorototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^} else if  ( t .isFunction (  )   )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^return this;^955^^^^^931^956^return null;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^if  ( type.getPropertyType (  )  )  {^959^^^^^958^966^if  ( type.isInstance (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P15_Unwrap_Block]^com.google.javascript.jscomp.ConcreteType.ConcreteInstanceType instanceType = ((com.google.javascript.jscomp.ConcreteType.ConcreteInstanceType) (type)); if (instanceType.isFunctionPrototype()) {    return instanceType.getConstructorType().getInstanceType();};^959^960^961^962^963^958^966^if  ( type.isInstance (  )  )  { ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type; if  ( instanceType.isFunctionPrototype (  )  )  { return instanceType.getConstructorType (  ) .getInstanceType (  ) ; }^[CLASS] ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P16_Remove_Block]^^959^960^961^962^963^958^966^if  ( type.isInstance (  )  )  { ConcreteInstanceType instanceType =  ( ConcreteInstanceType )  type; if  ( instanceType.isFunctionPrototype (  )  )  { return instanceType.getConstructorType (  ) .getInstanceType (  ) ; }^[CLASS] ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^if  ( instanceType.getInstanceTypeWithProperty (  )  )  {^961^^^^^958^966^if  ( instanceType.isFunctionPrototype (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P15_Unwrap_Block]^return instanceType.getConstructorType().getInstanceType();^961^962^963^^^958^966^if  ( instanceType.isFunctionPrototype (  )  )  { return instanceType.getConstructorType (  ) .getInstanceType (  ) ; }^[CLASS] ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P16_Remove_Block]^^961^962^963^^^958^966^if  ( instanceType.isFunctionPrototype (  )  )  { return instanceType.getConstructorType (  ) .getInstanceType (  ) ; }^[CLASS] ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return instanceType.getConstructorType (  ) .getNativeObjectType (  ) ;^962^^^^^958^966^return instanceType.getConstructorType (  ) .getInstanceType (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return instanceType.getInstanceTypeWithProperty (  ) .getInstanceType (  ) ;^962^^^^^958^966^return instanceType.getConstructorType (  ) .getInstanceType (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P13_Insert_Block]^if  ( instanceType.isFunctionPrototype (  )  )  {     return instanceType.getConstructorType (  ) .getInstanceType (  ) ; }^962^^^^^958^966^[Delete]^[CLASS] ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return instanceType.getConstructorType (  )  .isInstanceType (  )  ;^962^^^^^958^966^return instanceType.getConstructorType (  ) .getInstanceType (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P7_Replace_Invocation]^return instanceType .getInstanceTypeWithProperty ( 3 )  .getInstanceType (  ) ;^962^^^^^958^966^return instanceType.getConstructorType (  ) .getInstanceType (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P14_Delete_Statement]^^962^^^^^958^966^return instanceType.getConstructorType (  ) .getInstanceType (  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
[P8_Replace_Mix]^return this;^965^^^^^958^966^return null;^[CLASS] ConcreteTypeSystem  [METHOD] getInstanceFromPrototype [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  ConcreteType  type  TightenTypes  tt  int  nextUniqueId  
