[P8_Replace_Mix]^private  AbstractCompiler compiler;^52^^^^^47^57^private final AbstractCompiler compiler;^[CLASS] MoveFunctionDeclarations   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^56^^^^^55^58^this.compiler = compiler;^[CLASS] MoveFunctionDeclarations  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] Map  functions  AbstractCompiler  compiler  boolean  
[P8_Replace_Mix]^functions  =  functions ;^57^^^^^55^58^functions = Maps.newHashMap (  ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] Map  functions  AbstractCompiler  compiler  boolean  
[P11_Insert_Donor_Statement]^moduleFunctions = Lists.newArrayList (  ) ;functions = Maps.newHashMap (  ) ;^57^^^^^55^58^functions = Maps.newHashMap (  ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] Map  functions  AbstractCompiler  compiler  boolean  
[P14_Delete_Statement]^^57^^^^^55^58^functions = Maps.newHashMap (  ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] Map  functions  AbstractCompiler  compiler  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, n, this ) ;^62^^^^^61^70^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^62^^^^^61^70^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, this ) ;^62^^^^^61^70^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, this ) ;^62^^^^^61^70^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[P7_Replace_Invocation]^NodeTraversal .getModule (  )  ;^62^^^^^61^70^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[P14_Delete_Statement]^^62^^^^^61^70^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[P8_Replace_Mix]^JSModule module = entry .getValue (  )  ;^64^^^^^61^70^JSModule module = entry.getKey (  ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[P11_Insert_Donor_Statement]^JSModule module = t.getModule (  ) ;JSModule module = entry.getKey (  ) ;^64^^^^^61^70^JSModule module = entry.getKey (  ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[P5_Replace_Variable]^Node addingRoot = module.getNodeForCodeInsertion ( compiler ) ;^65^^^^^61^70^Node addingRoot = compiler.getNodeForCodeInsertion ( module ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[P8_Replace_Mix]^Node addingRoot = compiler .reportCodeChange (  )  ;^65^^^^^61^70^Node addingRoot = compiler.getNodeForCodeInsertion ( module ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[P7_Replace_Invocation]^for  ( Entry<JSModule, List<Node>> entry : functions .get ( module )   )  {^63^^^^^61^70^for  ( Entry<JSModule, List<Node>> entry : functions.entrySet (  )  )  {^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[P14_Delete_Statement]^^63^64^65^66^67^61^70^for  ( Entry<JSModule, List<Node>> entry : functions.entrySet (  )  )  { JSModule module = entry.getKey (  ) ; Node addingRoot = compiler.getNodeForCodeInsertion ( module ) ; for  ( Node n : Iterables.reverse ( entry.getValue (  )  )  )  { addingRoot.addChildToFront ( n ) ; }^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[P14_Delete_Statement]^^64^65^^^^61^70^JSModule module = entry.getKey (  ) ; Node addingRoot = compiler.getNodeForCodeInsertion ( module ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[P14_Delete_Statement]^^65^^^^^61^70^Node addingRoot = compiler.getNodeForCodeInsertion ( module ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[P14_Delete_Statement]^^66^67^68^^^61^70^for  ( Node n : Iterables.reverse ( entry.getValue (  )  )  )  { addingRoot.addChildToFront ( n ) ; }^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[P8_Replace_Mix]^for  ( Node n : Iterables.reverse ( entry .getKey (  )   )  )  {^66^^^^^61^70^for  ( Node n : Iterables.reverse ( entry.getValue (  )  )  )  {^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[P5_Replace_Variable]^addingRoot.addChildToFront ( root ) ;^67^^^^^61^70^addingRoot.addChildToFront ( n ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[P14_Delete_Statement]^^67^^^^^61^70^addingRoot.addChildToFront ( n ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[P3_Replace_Literal]^Node gramps = n.getAncestor ( -1 ) ;^74^^^^^73^76^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Map  functions  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^Node gramps = parent.getAncestor ( 2 ) ;^74^^^^^73^76^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Map  functions  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^Node gramps = n .getType (  )  ;^74^^^^^73^76^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Map  functions  NodeTraversal  t  Node  gramps  n  parent  
[P3_Replace_Literal]^Node gramps = n.getAncestor ( 1 ) ;^74^^^^^73^76^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Map  functions  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^74^75^^^^73^76^Node gramps = n.getAncestor ( 2 ) ; return gramps == null || gramps.getType (  )  != Token.SCRIPT;^[CLASS] MoveFunctionDeclarations  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Map  functions  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^return gramps == null && gramps.getType (  )  != Token.SCRIPT;^75^^^^^73^76^return gramps == null || gramps.getType (  )  != Token.SCRIPT;^[CLASS] MoveFunctionDeclarations  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Map  functions  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^return gramps != null || gramps.getType (  )  != Token.SCRIPT;^75^^^^^73^76^return gramps == null || gramps.getType (  )  != Token.SCRIPT;^[CLASS] MoveFunctionDeclarations  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Map  functions  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^return gramps == null || gramps.getType (  )  == Token.SCRIPT;^75^^^^^73^76^return gramps == null || gramps.getType (  )  != Token.SCRIPT;^[CLASS] MoveFunctionDeclarations  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Map  functions  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^return parent == null || gramps.getType (  )  != Token.SCRIPT;^75^^^^^73^76^return gramps == null || gramps.getType (  )  != Token.SCRIPT;^[CLASS] MoveFunctionDeclarations  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Map  functions  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^return gramps == null || gramps.getAncestor (  )  != Token.SCRIPT;^75^^^^^73^76^return gramps == null || gramps.getType (  )  != Token.SCRIPT;^[CLASS] MoveFunctionDeclarations  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Map  functions  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^return gramps == false || gramps.getAncestor (  )  != Token.SCRIPT;^75^^^^^73^76^return gramps == null || gramps.getType (  )  != Token.SCRIPT;^[CLASS] MoveFunctionDeclarations  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Map  functions  NodeTraversal  t  Node  gramps  n  parent  
[P12_Insert_Condition]^if  ( parent == null || parent.getType (  )  != Token.SCRIPT )  { return gramps == null || gramps.getType (  )  != Token.SCRIPT; }^75^^^^^73^76^return gramps == null || gramps.getType (  )  != Token.SCRIPT;^[CLASS] MoveFunctionDeclarations  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Map  functions  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^75^^^^^73^76^return gramps == null || gramps.getType (  )  != Token.SCRIPT;^[CLASS] MoveFunctionDeclarations  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Map  functions  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^if  ( parent == null && parent.getType (  )  != Token.SCRIPT )  {^80^81^^^^79^97^if  ( parent == null || parent.getType (  )  != Token.SCRIPT )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P2_Replace_Operator]^if  ( parent != null || parent.getType (  )  != Token.SCRIPT )  {^80^81^^^^79^97^if  ( parent == null || parent.getType (  )  != Token.SCRIPT )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P2_Replace_Operator]^if  ( parent == null || parent.getType (  )  == Token.SCRIPT )  {^80^81^^^^79^97^if  ( parent == null || parent.getType (  )  != Token.SCRIPT )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P5_Replace_Variable]^if  ( n == null || parent.getType (  )  != Token.SCRIPT )  {^80^81^^^^79^97^if  ( parent == null || parent.getType (  )  != Token.SCRIPT )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P6_Replace_Expression]^if  ( parent == null ) {^80^81^^^^79^97^if  ( parent == null || parent.getType (  )  != Token.SCRIPT )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P6_Replace_Expression]^if  (  parent.getType (  )  != Token.SCRIPT )  {^80^81^^^^79^97^if  ( parent == null || parent.getType (  )  != Token.SCRIPT )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P6_Replace_Expression]^if  ( parent.getType (  )  != SCRIPT )  {^80^81^^^^79^97^if  ( parent == null || parent.getType (  )  != Token.SCRIPT )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P7_Replace_Invocation]^if  ( parent == null || parent.getAncestor (  )  != Token.SCRIPT )  {^80^81^^^^79^97^if  ( parent == null || parent.getType (  )  != Token.SCRIPT )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P15_Unwrap_Block]^return ;^80^81^82^83^^79^97^if  ( parent == null || parent.getType (  )  != Token.SCRIPT )  { return; }^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P16_Remove_Block]^^80^81^82^83^^79^97^if  ( parent == null || parent.getType (  )  != Token.SCRIPT )  { return; }^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P7_Replace_Invocation]^parent.getAncestor (  )  != Token.SCRIPT )  {^81^^^^^79^97^parent.getType (  )  != Token.SCRIPT )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P14_Delete_Statement]^^81^82^^^^79^97^parent.getType (  )  != Token.SCRIPT )  { return;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P5_Replace_Variable]^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^85^^^^^79^97^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P2_Replace_Operator]^if  ( moduleFunctions != null )  {^91^^^^^79^97^if  ( moduleFunctions == null )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P5_Replace_Variable]^if  ( module == null )  {^91^^^^^79^97^if  ( moduleFunctions == null )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P8_Replace_Mix]^if  ( moduleFunctions == this )  {^91^^^^^79^97^if  ( moduleFunctions == null )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P15_Unwrap_Block]^moduleFunctions = com.google.common.collect.Lists.newArrayList(); functions.put(module, moduleFunctions);^91^92^93^94^^79^97^if  ( moduleFunctions == null )  { moduleFunctions = Lists.newArrayList (  ) ; functions.put ( module, moduleFunctions ) ; }^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P16_Remove_Block]^^91^92^93^94^^79^97^if  ( moduleFunctions == null )  { moduleFunctions = Lists.newArrayList (  ) ; functions.put ( module, moduleFunctions ) ; }^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P8_Replace_Mix]^moduleFunctions ;^92^^^^^79^97^moduleFunctions = Lists.newArrayList (  ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P11_Insert_Donor_Statement]^functions = Maps.newHashMap (  ) ;moduleFunctions = Lists.newArrayList (  ) ;^92^^^^^79^97^moduleFunctions = Lists.newArrayList (  ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P14_Delete_Statement]^^92^^^^^79^97^moduleFunctions = Lists.newArrayList (  ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P11_Insert_Donor_Statement]^moduleFunctions.add ( n ) ;moduleFunctions = Lists.newArrayList (  ) ;^92^^^^^79^97^moduleFunctions = Lists.newArrayList (  ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P5_Replace_Variable]^functions.put (  moduleFunctions ) ;^93^^^^^79^97^functions.put ( module, moduleFunctions ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P5_Replace_Variable]^functions.put ( module ) ;^93^^^^^79^97^functions.put ( module, moduleFunctions ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P5_Replace_Variable]^functions.put ( moduleFunctions, module ) ;^93^^^^^79^97^functions.put ( module, moduleFunctions ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P7_Replace_Invocation]^functions .get ( module )  ;^93^^^^^79^97^functions.put ( module, moduleFunctions ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P14_Delete_Statement]^^93^^^^^79^97^functions.put ( module, moduleFunctions ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P11_Insert_Donor_Statement]^JSModule module = entry.getKey (  ) ;JSModule module = t.getModule (  ) ;^89^^^^^79^97^JSModule module = t.getModule (  ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P5_Replace_Variable]^List<Node> moduleFunctions = 3.get ( module ) ;^90^^^^^79^97^List<Node> moduleFunctions = functions.get ( module ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P5_Replace_Variable]^List<Node> functionsFunctions = module.get ( module ) ;^90^^^^^79^97^List<Node> moduleFunctions = functions.get ( module ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P7_Replace_Invocation]^parent .addChildToFront ( parent )  ;^86^^^^^79^97^parent.removeChild ( n ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P14_Delete_Statement]^^86^^^^^79^97^parent.removeChild ( n ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P14_Delete_Statement]^^87^^^^^79^97^compiler.reportCodeChange (  ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P14_Delete_Statement]^^89^90^^^^79^97^JSModule module = t.getModule (  ) ; List<Node> moduleFunctions = functions.get ( module ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P14_Delete_Statement]^^90^^^^^79^97^List<Node> moduleFunctions = functions.get ( module ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P5_Replace_Variable]^moduleFunctions.add ( parent ) ;^95^^^^^79^97^moduleFunctions.add ( n ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P14_Delete_Statement]^^95^^^^^79^97^moduleFunctions.add ( n ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P11_Insert_Donor_Statement]^moduleFunctions = Lists.newArrayList (  ) ;moduleFunctions.add ( n ) ;^95^^^^^79^97^moduleFunctions.add ( n ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P12_Insert_Condition]^if  ( moduleFunctions == null )  { moduleFunctions.add ( n ) ; }^95^^^^^79^97^moduleFunctions.add ( n ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P5_Replace_Variable]^if  ( moduleFunctionsFunctions == null )  {^91^^^^^79^97^if  ( moduleFunctions == null )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P8_Replace_Mix]^if  ( moduleFunctions == false )  {^91^^^^^79^97^if  ( moduleFunctions == null )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P14_Delete_Statement]^^92^93^^^^79^97^moduleFunctions = Lists.newArrayList (  ) ; functions.put ( module, moduleFunctions ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P8_Replace_Mix]^functions.put ( module, 0 ) ;^93^^^^^79^97^functions.put ( module, moduleFunctions ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P8_Replace_Mix]^moduleFunctions  = null ;^92^^^^^79^97^moduleFunctions = Lists.newArrayList (  ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[P14_Delete_Statement]^^89^^^^^79^97^JSModule module = t.getModule (  ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
