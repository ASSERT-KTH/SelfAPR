[P8_Replace_Mix]^private  Visitor<JSType> restrictToArrayVisitor = new RestrictByTrueTypeOfResultVisitor (  )  {^51^52^^^^51^65^private final Visitor<JSType> restrictToArrayVisitor = new RestrictByTrueTypeOfResultVisitor (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [VARIABLES] 
[P8_Replace_Mix]^private final Visitor<JSType> restrictToNotArrayVisitor  = null ;^70^71^^^^70^76^private final Visitor<JSType> restrictToNotArrayVisitor = new RestrictByFalseTypeOfResultVisitor (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [VARIABLES] 
[P8_Replace_Mix]^private final Visitor<JSType> restrictToObjectVisitor ;^82^83^^^^82^98^private final Visitor<JSType> restrictToObjectVisitor = new RestrictByTrueTypeOfResultVisitor (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [VARIABLES] 
[P8_Replace_Mix]^private  Visitor<JSType> restrictToNotObjectVisitor = new RestrictByFalseTypeOfResultVisitor (  )  {^103^104^^^^103^114^private final Visitor<JSType> restrictToNotObjectVisitor = new RestrictByFalseTypeOfResultVisitor (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [VARIABLES] 
[P5_Replace_Variable]^super (  typeRegistry ) ;^125^^^^^110^140^super ( convention, typeRegistry ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P5_Replace_Variable]^super ( convention ) ;^125^^^^^110^140^super ( convention, typeRegistry ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P5_Replace_Variable]^super ( typeRegistry, convention ) ;^125^^^^^110^140^super ( convention, typeRegistry ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P14_Delete_Statement]^^125^^^^^110^140^super ( convention, typeRegistry ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P15_Unwrap_Block]^return getRestrictedWithoutUndefined(p.first);^130^131^132^133^134^115^145^if  ( p.second )  { return getRestrictedWithoutUndefined ( p.first ) ; } else { return null; }^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P16_Remove_Block]^^130^131^132^133^134^115^145^if  ( p.second )  { return getRestrictedWithoutUndefined ( p.first ) ; } else { return null; }^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P13_Insert_Block]^if  ( p.second )  {     return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ; }else {     return null; }^130^^^^^115^145^[Delete]^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P8_Replace_Mix]^return this;^133^^^^^130^134^return null;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P7_Replace_Invocation]^return getRestrictedWithoutNull ( p.first ) ;^131^^^^^116^146^return getRestrictedWithoutUndefined ( p.first ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P14_Delete_Statement]^^131^^^^^116^146^return getRestrictedWithoutUndefined ( p.first ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P15_Unwrap_Block]^return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE);^139^140^141^142^143^124^154^if  ( p.second )  { return getNativeType ( NULL_TYPE ) ; } else { return getRestrictedWithoutNull ( p.first ) ; }^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P16_Remove_Block]^^139^140^141^142^143^124^154^if  ( p.second )  { return getNativeType ( NULL_TYPE ) ; } else { return getRestrictedWithoutNull ( p.first ) ; }^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P7_Replace_Invocation]^return getRestrictedWithoutUndefined ( p.first ) ;^142^^^^^139^143^return getRestrictedWithoutNull ( p.first ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P14_Delete_Statement]^^142^^^^^139^143^return getRestrictedWithoutNull ( p.first ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P7_Replace_Invocation]^return getMap ( NULL_TYPE ) ;^140^^^^^125^155^return getNativeType ( NULL_TYPE ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P13_Insert_Block]^if  ( p.second )  {     return getNativeType ( NULL_TYPE ) ; }else {     return getRestrictedWithoutNull ( p.first ) ; }^140^^^^^125^155^[Delete]^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P14_Delete_Statement]^^140^^^^^125^155^return getNativeType ( NULL_TYPE ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P15_Unwrap_Block]^return getRestrictedWithoutUndefined(getRestrictedWithoutNull(p.first));^148^149^150^151^152^133^163^if  ( p.second )  { return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ; } else { return null; }^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P16_Remove_Block]^^148^149^150^151^152^133^163^if  ( p.second )  { return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ; } else { return null; }^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P13_Insert_Block]^if  ( p.second )  {     return getRestrictedWithoutUndefined ( p.first ) ; }else {     return null; }^148^^^^^133^163^[Delete]^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P8_Replace_Mix]^return this;^152^^^^^148^153^return null;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P7_Replace_Invocation]^return getRestrictedWithoutNull ( getRestrictedWithoutNull ( p.first )  ) ;^149^150^^^^134^164^return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P7_Replace_Invocation]^return getRestrictedWithoutUndefined ( getRestrictedWithoutUndefined ( p.first )  ) ;^149^150^^^^134^164^return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P14_Delete_Statement]^^149^150^^^^134^164^return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P13_Insert_Block]^if  ( p.second )  {     return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ; }else {     return null; }^149^^^^^134^164^[Delete]^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P7_Replace_Invocation]^getRestrictedWithoutUndefined ( p.first )  ) ;^150^^^^^135^165^getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P14_Delete_Statement]^^150^^^^^135^165^getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P11_Insert_Donor_Statement]^return getRestrictedWithoutUndefined ( p.first ) ;getRestrictedWithoutNull ( p.first )  ) ;^150^^^^^135^165^getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P11_Insert_Donor_Statement]^return getRestrictedWithoutNull ( p.first ) ;getRestrictedWithoutNull ( p.first )  ) ;^150^^^^^135^165^getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P11_Insert_Donor_Statement]^return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ;getRestrictedWithoutNull ( p.first )  ) ;^150^^^^^135^165^getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P3_Replace_Literal]^this.restricters = new ImmutableMapBuilder<String, Function<Pair<JSType, Boolean>, JSType>> (  ) .put ( "isDefi", new Function<Pair<JSType, Boolean>, JSType> (  )  {^126^127^128^^^111^141^this.restricters = new ImmutableMapBuilder<String, Function<Pair<JSType, Boolean>, JSType>> (  ) .put ( "isDef", new Function<Pair<JSType, Boolean>, JSType> (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P8_Replace_Mix]^this.restricters =  new ImmutableManullBuilder<String, Function<Pair<JSTynulle, Boolean>, JSTynulle>> (  ) .nullut ( "isDef", new Function<Pair<JSTynulle, Boolean>, JSTynulle> (  )  {^126^127^128^^^111^141^this.restricters = new ImmutableMapBuilder<String, Function<Pair<JSType, Boolean>, JSType>> (  ) .put ( "isDef", new Function<Pair<JSType, Boolean>, JSType> (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P8_Replace_Mix]^return false;^133^^^^^118^148^return null;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P7_Replace_Invocation]^return getRestrictedWithoutUndefined ( p.first ) ;^142^^^^^127^157^return getRestrictedWithoutNull ( p.first ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P8_Replace_Mix]^return this;^152^^^^^137^167^return null;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "stringstr", p.second ) ;^158^^^^^143^173^return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "string".second ) ;^158^^^^^143^173^return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult (  "string", p.second ) ;^158^^^^^143^173^return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "string" ) ;^158^^^^^143^173^return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P7_Replace_Invocation]^return declareNameInScope ( p.first, "string", p.second ) ;^158^^^^^143^173^return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "boooolean", p.second ) ;^163^^^^^148^178^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "boolean".second ) ;^163^^^^^148^178^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult (  "boolean", p.second ) ;^163^^^^^148^178^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "boolean" ) ;^163^^^^^148^178^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P7_Replace_Invocation]^return declareNameInScope ( p.first, "boolean", p.second ) ;^163^^^^^148^178^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "numumber", p.second ) ;^168^^^^^153^183^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "number".second ) ;^168^^^^^153^183^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult (  "number", p.second ) ;^168^^^^^153^183^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "number" ) ;^168^^^^^153^183^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P7_Replace_Invocation]^return declareNameInScope ( p.first, "number", p.second ) ;^168^^^^^153^183^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "ounction", p.second ) ;^173^^^^^158^188^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "function".second ) ;^173^^^^^158^188^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult (  "function", p.second ) ;^173^^^^^158^188^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "function" ) ;^173^^^^^158^188^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P7_Replace_Invocation]^return declareNameInScope ( p.first, "function", p.second ) ;^173^^^^^158^188^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P2_Replace_Operator]^return p.first != null ? null : p.first.visit ( visitor ) ;^180^^^^^165^195^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P6_Replace_Expression]^return p.first ( p.first.visit ( visitor ) ;^180^^^^^165^195^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P8_Replace_Mix]^return true ;^180^^^^^165^195^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P2_Replace_Operator]^return p.first != null ? null : p.first.visit ( visitor ) ;^187^^^^^172^202^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P6_Replace_Expression]^return p.first ( p.first.visit ( visitor ) ;^187^^^^^172^202^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P8_Replace_Mix]^return   null ;^187^^^^^172^202^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P4_Replace_Constructor]^.put ( "isDef", .put ( "isDef",  new JSType, Boolean>, JSType> (  )  {     public JSType apply ( JSType, Boolean> p )  {         return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;     } }   {^128^^^^^113^143^.put ( "isDef", new Function<Pair<JSType, Boolean>, JSType> (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P4_Replace_Constructor]^.put ( "isNull", .put ( "isNull",  new JSType, Boolean>, JSType> (  )  {     public JSType apply ( JSType, Boolean> p )  {         JSType> visitor =  ( p.second )  ? restrictToObjectVisitor : restrictToNotObjectVisitor;         return  ( p.first )  == null ? null : visit ( visitor ) ;     } }   {^137^^^^^122^152^.put ( "isNull", new Function<Pair<JSType, Boolean>, JSType> (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P4_Replace_Constructor]^.put ( "isDefAndNotNull", .put ( "isDefAndNotNull",  new JSType, Boolean>, JSType> (  )  {     public JSType apply ( JSType, Boolean> p )  {         if  ( p.second )  {             return getRestrictedWithoutUndefined ( p.first ) ;         }else {             return null;         }     } }   {^146^^^^^131^161^.put ( "isDefAndNotNull", new Function<Pair<JSType, Boolean>, JSType> (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P4_Replace_Constructor]^.put ( "isString", .put ( "isString",  new JSType, Boolean>, JSType> (  )  {     public JSType apply ( JSType, Boolean> p )  {         if  ( p.second )  {             return getRestrictedWithoutUndefined ( p.first ) ;         }else {             return null;         }     } }   {^156^^^^^141^171^.put ( "isString", new Function<Pair<JSType, Boolean>, JSType> (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P4_Replace_Constructor]^.put ( "isBoolean", .put ( "isBoolean",  new JSType, Boolean>, JSType> (  )  {     public JSType apply ( JSType, Boolean> p )  {         if  ( p.second )  {             return getRestrictedWithoutUndefined ( p.first ) ;         }else {             return null;         }     } }   {^161^^^^^146^176^.put ( "isBoolean", new Function<Pair<JSType, Boolean>, JSType> (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P4_Replace_Constructor]^.put ( "isNumber", .put ( "isNumber",  new JSType, Boolean>, JSType> (  )  {     public JSType apply ( JSType, Boolean> p )  {         if  ( p.second )  {             return getRestrictedWithoutUndefined ( p.first ) ;         }else {             return null;         }     } }   {^166^^^^^151^181^.put ( "isNumber", new Function<Pair<JSType, Boolean>, JSType> (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P4_Replace_Constructor]^.put ( "isFunction", .put ( "isnew JSType, Boolean>, JSType> (  )  {     public JSType apply ( JSType, Boolean> p )  {         if  ( p.second )  {             return getRestrictedWithoutUndefined ( p.first ) ;         }else {             return null;         }     } }   {^171^^^^^156^186^.put ( "isFunction", new Function<Pair<JSType, Boolean>, JSType> (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P4_Replace_Constructor]^.put ( "isArray", .put ( "isArray",  new JSType, Boolean>, JSType> (  )  {     public JSType apply ( JSType, Boolean> p )  {         JSType> visitor =  ( p.second )  ? restrictToObjectVisitor : restrictToNotObjectVisitor;         return  ( p.first )  == null ? null : visit ( visitor ) ;     } }   {^176^^^^^161^191^.put ( "isArray", new Function<Pair<JSType, Boolean>, JSType> (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P4_Replace_Constructor]^.put ( "isObject", .put ( "isObject",  new JSType, Boolean>, JSType> (  )  {     public JSType apply ( JSType, Boolean> p )  {         if  ( p.second )  {             return getNativeType ( NULL_TYPE ) ;         }else {             return getRestrictedWithoutNull ( p.first ) ;         }     } }   {^183^^^^^168^198^.put ( "isObject", new Function<Pair<JSType, Boolean>, JSType> (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P6_Replace_Expression]^Visitor<JSType> visitor  =  restrictToNotArrayVisitor;^178^179^^^^163^193^Visitor<JSType> visitor = p.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P6_Replace_Expression]^Visitor<JSType> visitor  =  restrictToArrayVisitor ;^178^179^^^^163^193^Visitor<JSType> visitor = p.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P11_Insert_Donor_Statement]^Visitor<JSType> visitor = p.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;Visitor<JSType> visitor = p.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;^178^179^^^^163^193^Visitor<JSType> visitor = p.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P6_Replace_Expression]^Visitor<JSType> visitor  =  restrictToNotObjectVisitor;^185^186^^^^170^200^Visitor<JSType> visitor = p.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P6_Replace_Expression]^Visitor<JSType> visitor  =  restrictToObjectVisitor ;^185^186^^^^170^200^Visitor<JSType> visitor = p.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P11_Insert_Donor_Statement]^Visitor<JSType> visitor = p.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;Visitor<JSType> visitor = p.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;^185^186^^^^170^200^Visitor<JSType> visitor = p.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P3_Replace_Literal]^new ImmutableMapBuilder<String, Function<Pair<JSType, Boolean>, JSType>> (  ) .put ( "sDef", new Function<Pair<JSType, Boolean>, JSType> (  )  {^127^128^^^^112^142^new ImmutableMapBuilder<String, Function<Pair<JSType, Boolean>, JSType>> (  ) .put ( "isDef", new Function<Pair<JSType, Boolean>, JSType> (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P3_Replace_Literal]^new ImmutableMapBuilder<String, Function<Pair<JSType, Boolean>, JSType>> (  ) .put ( "sDsDef", new Function<Pair<JSType, Boolean>, JSType> (  )  {^127^128^^^^112^142^new ImmutableMapBuilder<String, Function<Pair<JSType, Boolean>, JSType>> (  ) .put ( "isDef", new Function<Pair<JSType, Boolean>, JSType> (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P3_Replace_Literal]^new ImmutableMapBuilder<String, Function<Pair<JSType, Boolean>, JSType>> (  ) .put ( "", new Function<Pair<JSType, Boolean>, JSType> (  )  {^127^128^^^^112^142^new ImmutableMapBuilder<String, Function<Pair<JSType, Boolean>, JSType>> (  ) .put ( "isDef", new Function<Pair<JSType, Boolean>, JSType> (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P3_Replace_Literal]^new ImmutableMapBuilder<String, Function<Pair<JSType, Boolean>, JSType>> (  ) .put ( "isDefis", new Function<Pair<JSType, Boolean>, JSType> (  )  {^127^128^^^^112^142^new ImmutableMapBuilder<String, Function<Pair<JSType, Boolean>, JSType>> (  ) .put ( "isDef", new Function<Pair<JSType, Boolean>, JSType> (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P3_Replace_Literal]^new ImmutableMapBuilder<String, Function<Pair<JSType, Boolean>, JSType>> (  ) .put ( "isDefisD", new Function<Pair<JSType, Boolean>, JSType> (  )  {^127^128^^^^112^142^new ImmutableMapBuilder<String, Function<Pair<JSType, Boolean>, JSType>> (  ) .put ( "isDef", new Function<Pair<JSType, Boolean>, JSType> (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P3_Replace_Literal]^new ImmutableMapBuilder<String, Function<Pair<JSType, Boolean>, JSType>> (  ) .put ( "s", new Function<Pair<JSType, Boolean>, JSType> (  )  {^127^128^^^^112^142^new ImmutableMapBuilder<String, Function<Pair<JSType, Boolean>, JSType>> (  ) .put ( "isDef", new Function<Pair<JSType, Boolean>, JSType> (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P3_Replace_Literal]^new ImmutableMapBuilder<String, Function<Pair<JSType, Boolean>, JSType>> (  ) .put ( "isDefe", new Function<Pair<JSType, Boolean>, JSType> (  )  {^127^128^^^^112^142^new ImmutableMapBuilder<String, Function<Pair<JSType, Boolean>, JSType>> (  ) .put ( "isDef", new Function<Pair<JSType, Boolean>, JSType> (  )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P14_Delete_Statement]^^142^^^^^127^157^return getRestrictedWithoutNull ( p.first ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "s", p.second ) ;^158^^^^^143^173^return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P14_Delete_Statement]^^158^^^^^143^173^return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "e", p.second ) ;^163^^^^^148^178^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P14_Delete_Statement]^^163^^^^^148^178^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "nuumber", p.second ) ;^168^^^^^153^183^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P14_Delete_Statement]^^168^^^^^153^183^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "f", p.second ) ;^173^^^^^158^188^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P14_Delete_Statement]^^173^^^^^158^188^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P14_Delete_Statement]^^180^^^^^165^195^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P14_Delete_Statement]^^187^^^^^172^202^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[P7_Replace_Invocation]^JSType arrayType = getMap ( ARRAY_TYPE ) ;^62^^^^^61^64^JSType arrayType = getNativeType ( ARRAY_TYPE ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSType  arrayType  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  
[P11_Insert_Donor_Statement]^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;JSType arrayType = getNativeType ( ARRAY_TYPE ) ;^62^^^^^61^64^JSType arrayType = getNativeType ( ARRAY_TYPE ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSType  arrayType  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  
[P14_Delete_Statement]^^62^^^^^61^64^JSType arrayType = getNativeType ( ARRAY_TYPE ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSType  arrayType  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  
[P11_Insert_Donor_Statement]^return type.isSubtype ( getNativeType ( ARRAY_TYPE )  )  ? null : type;JSType arrayType = getNativeType ( ARRAY_TYPE ) ;^62^^^^^61^64^JSType arrayType = getNativeType ( ARRAY_TYPE ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSType  arrayType  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  
[P11_Insert_Donor_Statement]^return arrayType.isSubtype ( type )  ? arrayType : null;JSType arrayType = getNativeType ( ARRAY_TYPE ) ;^62^^^^^61^64^JSType arrayType = getNativeType ( ARRAY_TYPE ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSType  arrayType  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  
[P11_Insert_Donor_Statement]^return getNativeType ( NULL_TYPE ) ;JSType arrayType = getNativeType ( ARRAY_TYPE ) ;^62^^^^^61^64^JSType arrayType = getNativeType ( ARRAY_TYPE ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSType  arrayType  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  
[P5_Replace_Variable]^return type.isSubtype ( arrayType )  ? arrayType : null;^63^^^^^61^64^return arrayType.isSubtype ( type )  ? arrayType : null;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSType  arrayType  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  
[P7_Replace_Invocation]^return arrayType .isSubtype ( type )   ? arrayType : null;^63^^^^^61^64^return arrayType.isSubtype ( type )  ? arrayType : null;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSType  arrayType  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  
[P8_Replace_Mix]^return arrayType.isSubtype ( type )  ? arrayType : true;^63^^^^^61^64^return arrayType.isSubtype ( type )  ? arrayType : null;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSType  arrayType  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  
[P14_Delete_Statement]^^63^^^^^61^64^return arrayType.isSubtype ( type )  ? arrayType : null;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSType  arrayType  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  
[P7_Replace_Invocation]^return type.isSubtype ( getMap ( ARRAY_TYPE )  )  ? null : type;^74^^^^^73^75^return type.isSubtype ( getNativeType ( ARRAY_TYPE )  )  ? null : type;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  
[P14_Delete_Statement]^^74^^^^^73^75^return type.isSubtype ( getNativeType ( ARRAY_TYPE )  )  ? null : type;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  
[P7_Replace_Invocation]^return getMap ( NO_OBJECT_TYPE ) ;^86^^^^^85^87^return getNativeType ( NO_OBJECT_TYPE ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] caseTopType [RETURN_TYPE] JSType   JSType topType [VARIABLES] JSType  topType  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  
[P14_Delete_Statement]^^86^^^^^85^87^return getNativeType ( NO_OBJECT_TYPE ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] caseTopType [RETURN_TYPE] JSType   JSType topType [VARIABLES] JSType  topType  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  
[P8_Replace_Mix]^return false;^107^^^^^106^108^return null;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  
[P8_Replace_Mix]^return this;^112^^^^^111^113^return null;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] caseFunctionType [RETURN_TYPE] JSType   FunctionType type [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  FunctionType  type  
[P15_Unwrap_Block]^return getRestrictedWithoutUndefined(p.first);^130^131^132^133^134^129^135^if  ( p.second )  { return getRestrictedWithoutUndefined ( p.first ) ; } else { return null; }^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P16_Remove_Block]^^130^131^132^133^134^129^135^if  ( p.second )  { return getRestrictedWithoutUndefined ( p.first ) ; } else { return null; }^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P13_Insert_Block]^if  ( p.second )  {     return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ; }else {     return null; }^130^^^^^129^135^[Delete]^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P8_Replace_Mix]^return true;^133^^^^^129^135^return null;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P7_Replace_Invocation]^return getRestrictedWithoutNull ( p.first ) ;^131^^^^^129^135^return getRestrictedWithoutUndefined ( p.first ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P14_Delete_Statement]^^131^^^^^129^135^return getRestrictedWithoutUndefined ( p.first ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P8_Replace_Mix]^return false;^133^^^^^129^135^return null;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P15_Unwrap_Block]^return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE);^139^140^141^142^143^138^144^if  ( p.second )  { return getNativeType ( NULL_TYPE ) ; } else { return getRestrictedWithoutNull ( p.first ) ; }^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P16_Remove_Block]^^139^140^141^142^143^138^144^if  ( p.second )  { return getNativeType ( NULL_TYPE ) ; } else { return getRestrictedWithoutNull ( p.first ) ; }^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P7_Replace_Invocation]^return getRestrictedWithoutUndefined ( p.first ) ;^142^^^^^138^144^return getRestrictedWithoutNull ( p.first ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P14_Delete_Statement]^^142^^^^^138^144^return getRestrictedWithoutNull ( p.first ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P7_Replace_Invocation]^return getMap ( NULL_TYPE ) ;^140^^^^^138^144^return getNativeType ( NULL_TYPE ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P13_Insert_Block]^if  ( p.second )  {     return getNativeType ( NULL_TYPE ) ; }else {     return getRestrictedWithoutNull ( p.first ) ; }^140^^^^^138^144^[Delete]^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P14_Delete_Statement]^^140^^^^^138^144^return getNativeType ( NULL_TYPE ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P15_Unwrap_Block]^return getRestrictedWithoutUndefined(getRestrictedWithoutNull(p.first));^148^149^150^151^152^147^154^if  ( p.second )  { return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ; } else { return null; }^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P16_Remove_Block]^^148^149^150^151^152^147^154^if  ( p.second )  { return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ; } else { return null; }^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P13_Insert_Block]^if  ( p.second )  {     return getRestrictedWithoutUndefined ( p.first ) ; }else {     return null; }^148^^^^^147^154^[Delete]^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P8_Replace_Mix]^return true;^152^^^^^147^154^return null;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P7_Replace_Invocation]^return getRestrictedWithoutNull ( getRestrictedWithoutNull ( p.first )  ) ;^149^150^^^^147^154^return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P7_Replace_Invocation]^return getRestrictedWithoutUndefined ( getRestrictedWithoutUndefined ( p.first )  ) ;^149^150^^^^147^154^return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P13_Insert_Block]^if  ( p.second )  {     return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ; }else {     return null; }^149^^^^^147^154^[Delete]^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P14_Delete_Statement]^^149^150^^^^147^154^return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P7_Replace_Invocation]^getRestrictedWithoutUndefined ( p.first )  ) ;^150^^^^^147^154^getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P14_Delete_Statement]^^150^^^^^147^154^getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P11_Insert_Donor_Statement]^return getRestrictedWithoutUndefined ( p.first ) ;getRestrictedWithoutNull ( p.first )  ) ;^150^^^^^147^154^getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P11_Insert_Donor_Statement]^return getRestrictedWithoutNull ( p.first ) ;getRestrictedWithoutNull ( p.first )  ) ;^150^^^^^147^154^getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P11_Insert_Donor_Statement]^return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ;getRestrictedWithoutNull ( p.first )  ) ;^150^^^^^147^154^getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P8_Replace_Mix]^return this;^152^^^^^147^154^return null;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "stringstri", p.second ) ;^158^^^^^157^159^return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "string".second ) ;^158^^^^^157^159^return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult (  "string", p.second ) ;^158^^^^^157^159^return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "string" ) ;^158^^^^^157^159^return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P7_Replace_Invocation]^return declareNameInScope ( p.first, "string", p.second ) ;^158^^^^^157^159^return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P14_Delete_Statement]^^158^^^^^157^159^return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "boo", p.second ) ;^163^^^^^162^164^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "boolean".second ) ;^163^^^^^162^164^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult (  "boolean", p.second ) ;^163^^^^^162^164^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "boolean" ) ;^163^^^^^162^164^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P7_Replace_Invocation]^return declareNameInScope ( p.first, "boolean", p.second ) ;^163^^^^^162^164^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "", p.second ) ;^163^^^^^162^164^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P14_Delete_Statement]^^163^^^^^162^164^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "numbernu", p.second ) ;^168^^^^^167^169^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "number".second ) ;^168^^^^^167^169^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult (  "number", p.second ) ;^168^^^^^167^169^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "number" ) ;^168^^^^^167^169^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P7_Replace_Invocation]^return declareNameInScope ( p.first, "number", p.second ) ;^168^^^^^167^169^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "umber", p.second ) ;^168^^^^^167^169^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P14_Delete_Statement]^^168^^^^^167^169^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "functionun", p.second ) ;^173^^^^^172^174^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "function".second ) ;^173^^^^^172^174^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult (  "function", p.second ) ;^173^^^^^172^174^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "function" ) ;^173^^^^^172^174^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P7_Replace_Invocation]^return declareNameInScope ( p.first, "function", p.second ) ;^173^^^^^172^174^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "functionio", p.second ) ;^173^^^^^172^174^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P14_Delete_Statement]^^173^^^^^172^174^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P6_Replace_Expression]^Visitor<JSType> visitor  =  restrictToNotArrayVisitor;^178^179^^^^177^181^Visitor<JSType> visitor = p.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P6_Replace_Expression]^Visitor<JSType> visitor  =  restrictToArrayVisitor ;^178^179^^^^177^181^Visitor<JSType> visitor = p.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P11_Insert_Donor_Statement]^Visitor<JSType> visitor = p.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;Visitor<JSType> visitor = p.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;^178^179^^^^177^181^Visitor<JSType> visitor = p.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P2_Replace_Operator]^return p.first != null ? null : p.first.visit ( visitor ) ;^180^^^^^177^181^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P6_Replace_Expression]^return p.first ( p.first.visit ( visitor ) ;^180^^^^^177^181^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P14_Delete_Statement]^^180^^^^^177^181^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P6_Replace_Expression]^Visitor<JSType> visitor  =  restrictToNotObjectVisitor;^185^186^^^^184^188^Visitor<JSType> visitor = p.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P6_Replace_Expression]^Visitor<JSType> visitor  =  restrictToObjectVisitor ;^185^186^^^^184^188^Visitor<JSType> visitor = p.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P11_Insert_Donor_Statement]^Visitor<JSType> visitor = p.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;Visitor<JSType> visitor = p.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;^185^186^^^^184^188^Visitor<JSType> visitor = p.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P2_Replace_Operator]^return p.first != null ? null : p.first.visit ( visitor ) ;^187^^^^^184^188^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P6_Replace_Expression]^return p.first ( p.first.visit ( visitor ) ;^187^^^^^184^188^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P8_Replace_Mix]^return   null ;^187^^^^^184^188^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P14_Delete_Statement]^^187^^^^^184^188^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[P2_Replace_Operator]^if  ( condition.getType (  )  == CALL || condition.getChildCount (  )  == 2 )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( condition.getType (  )  != CALL && condition.getChildCount (  )  == 2 )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  <= 2 )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( condition.getType (  )  >= CALL && condition.getChildCount (  )  == 2 )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( condition.getType (  )  <= CALL && condition.getChildCount (  )  == 2 )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( right.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( condition.getType (  )  == CALL ) {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  (  condition.getChildCount (  )  == 2 )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( callee.getType() == GETPROP )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( paramType != null )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( (left.getType() == NAME) && getString()) && right.getType() == STRING )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( (left.getType() == NAME && getString())) )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( left.getType (  )  == NAME )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( right.getType (  )  == STRING )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( restricter != null )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P7_Replace_Invocation]^if  ( condition .getString (  )   == CALL && condition.getChildCount (  )  == 2 )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P7_Replace_Invocation]^if  ( condition.getType (  )  == CALL && condition .getFirstChild (  )   == 2 )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 / 3 )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( callee.getType (  )  > GETPROP )  {^198^^^^^193^217^if  ( callee.getType (  )  == GETPROP )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( callee.getType (  )  >= GETPROP )  {^198^^^^^193^217^if  ( callee.getType (  )  == GETPROP )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( callee.getType (  )  != GETPROP )  {^198^^^^^193^217^if  ( callee.getType (  )  == GETPROP )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( right.getType (  )  == GETPROP )  {^198^^^^^193^217^if  ( callee.getType (  )  == GETPROP )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( paramType != null )  {^198^^^^^193^217^if  ( callee.getType (  )  == GETPROP )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( (left.getType() == NAME) && getString()) && right.getType() == STRING )  {^198^^^^^193^217^if  ( callee.getType (  )  == GETPROP )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( (left.getType() == NAME && getString())) )  {^198^^^^^193^217^if  ( callee.getType (  )  == GETPROP )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( left.getType (  )  == NAME )  {^198^^^^^193^217^if  ( callee.getType (  )  == GETPROP )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( right.getType (  )  == STRING )  {^198^^^^^193^217^if  ( callee.getType (  )  == GETPROP )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( restricter != null )  {^198^^^^^193^217^if  ( callee.getType (  )  == GETPROP )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( paramType == null )  {^200^^^^^193^217^if  ( paramType != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( (left.getType() == NAME) && getString()) && right.getType() == STRING )  {^200^^^^^193^217^if  ( paramType != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( (left.getType() == NAME && getString())) )  {^200^^^^^193^217^if  ( paramType != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( left.getType (  )  == NAME )  {^200^^^^^193^217^if  ( paramType != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( right.getType (  )  == STRING )  {^200^^^^^193^217^if  ( paramType != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( restricter != null )  {^200^^^^^193^217^if  ( paramType != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^if  ( paramType != false )  {^200^^^^^193^217^if  ( paramType != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P9_Replace_Statement]^if  ( type != null )  {^200^^^^^193^217^if  ( paramType != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( left.getType (  )  == NAME || "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( left.getType (  )  >= NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  > STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( right.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && param.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == 4 )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( right.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && left.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( left.getType (  )  == STRING && "goog".equals ( left.getString (  )  )  && right.getType (  )  == NAME )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( left.getType (  )  == NAME ) {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  (  "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( (left.getType() == NAME && getString())) )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P6_Replace_Expression]^if  ( restricter != null )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( restricter == null )  {^207^^^^^193^217^if  ( restricter != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^if  ( restricter != true )  {^207^^^^^193^217^if  ( restricter != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P9_Replace_Statement]^if  ( paramType != null )  {^207^^^^^193^217^if  ( restricter != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P9_Replace_Statement]^if  ( type != null )  {^207^^^^^193^217^if  ( restricter != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P15_Unwrap_Block]^return restrictParameter(param, paramType, blindScope, restricter, outcome);^207^208^209^210^^193^217^if  ( restricter != null )  { return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ; }^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P16_Remove_Block]^^207^208^209^210^^193^217^if  ( restricter != null )  { return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ; }^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter ( left, paramType, blindScope, restricter, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter (  paramType, blindScope, restricter, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter ( param,  blindScope, restricter, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter ( param, paramType,  restricter, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter ( param, paramType, blindScope,  outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter ( param, paramType, blindScope, restricter ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter ( restricter, paramType, blindScope, param, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter ( param, restricter, blindScope, paramType, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter ( param, paramType, restricter, blindScope, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter ( param, paramType, blindScope, outcome, restricter ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter ( param, outcome, blindScope, restricter, paramType ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^return restrictParameter ( right, paramType, blindScope, restricter, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P13_Insert_Block]^if  ( restricter != null )  {     return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ; }^208^^^^^193^217^[Delete]^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter ( outcome, paramType, blindScope, restricter, param ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter ( paramType, param, blindScope, restricter, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter ( blindScope, paramType, param, restricter, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P14_Delete_Statement]^^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter ( param, paramType, outcome, restricter, blindScope ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( param.getString (  )  ) ;^205^206^^^^193^217^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^Function<Pair<JSType, Boolean>, JSType> restricter = right.get ( restricters.getString (  )  ) ;^205^206^^^^193^217^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P7_Replace_Invocation]^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right .getLastChild (  )   ) ;^205^206^^^^193^217^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^restricters.get ( param.getString (  )  ) ;^206^^^^^193^217^restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P14_Delete_Statement]^^206^^^^^193^217^restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^restricters.get ( left.getString (  )  ) ;^206^^^^^193^217^restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P7_Replace_Invocation]^restricters.get ( right .getLastChild (  )   ) ;^206^^^^^193^217^restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter ( param, blindScope, paramType, restricter, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^Node left = right.getFirstChild (  ) ;^201^^^^^193^217^Node left = callee.getFirstChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node callee = condition.getFirstChild (  ) ;Node left = callee.getFirstChild (  ) ;^201^^^^^193^217^Node left = callee.getFirstChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node right = callee.getLastChild (  ) ;Node left = callee.getFirstChild (  ) ;^201^^^^^193^217^Node left = callee.getFirstChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node param = condition.getLastChild (  ) ;Node left = callee.getFirstChild (  ) ;^201^^^^^193^217^Node left = callee.getFirstChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^Node right = param.getLastChild (  ) ;^202^^^^^193^217^Node right = callee.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node callee = condition.getFirstChild (  ) ;Node right = callee.getLastChild (  ) ;^202^^^^^193^217^Node right = callee.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node left = callee.getFirstChild (  ) ;Node right = callee.getLastChild (  ) ;^202^^^^^193^217^Node right = callee.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node param = condition.getLastChild (  ) ;Node right = callee.getLastChild (  ) ;^202^^^^^193^217^Node right = callee.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( left.getString (  )  ) ;^205^206^^^^193^217^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P7_Replace_Invocation]^Node left = callee .getLastChild (  )  ;^201^^^^^193^217^Node left = callee.getFirstChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P14_Delete_Statement]^^201^202^^^^193^217^Node left = callee.getFirstChild (  ) ; Node right = callee.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P14_Delete_Statement]^^202^^^^^193^217^Node right = callee.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( param.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P7_Replace_Invocation]^if  ( left .getString (  )   == NAME && "goog".equals ( left.getString (  )  )  && right^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P1_Replace_Type]^if  ( left.getType (  )  == NAME && "goog".equals ( left.getchar (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P3_Replace_Literal]^if  ( left.getType (  )  == NAME && "oo".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P7_Replace_Invocation]^if  ( left.getType (  )  == NAME && "goog".equals ( left .getLastChild (  )   )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^right .getString (  )   == STRING )  {^204^^^^^193^217^right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P14_Delete_Statement]^^204^205^206^^^193^217^right.getType (  )  == STRING )  { Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( left.getType (  )  != NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  != STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P3_Replace_Literal]^if  ( left.getType (  )  == NAME && "g".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( left.getType (  )  == 0 && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( NAME.getType (  )  == left && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^if  ( restricter != false )  {^207^^^^^193^217^if  ( restricter != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter ( param, paramType, blindScope, this, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^restricters.get ( left .getLastChild (  )   ) ;^206^^^^^193^217^restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^JSType leftType =  getTypeIfRefinable ( param, blindScope ) ;^199^^^^^193^217^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^JSType paramType =  getTypeIfRefinable (  blindScope ) ;^199^^^^^193^217^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^JSType paramType =  getTypeIfRefinable ( param ) ;^199^^^^^193^217^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^JSType blindScopeType =  getTypeIfRefinable ( param, param ) ;^199^^^^^193^217^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P7_Replace_Invocation]^JSType paramType =  put ( param, blindScope ) ;^199^^^^^193^217^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^JSType arrayType = getNativeType ( ARRAY_TYPE ) ;JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^199^^^^^193^217^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^JSType rightType =  getTypeIfRefinable ( param, blindScope ) ;^199^^^^^193^217^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P14_Delete_Statement]^^199^^^^^193^217^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^Node right = right.getLastChild (  ) ;^202^^^^^193^217^Node right = callee.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P3_Replace_Literal]^if  ( left.getType (  )  == NAME && "googg".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( rightType != null )  {^200^^^^^193^217^if  ( paramType != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( left.getType (  )  > NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  >= STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P3_Replace_Literal]^if  ( left.getType (  )  == NAME && "googgoo".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^if  (  "goog".equals ( left.getString (  )  )  && left.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^return restrictParameter ( param, paramType, blindScope, 4, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P7_Replace_Invocation]^Node right = callee .getFirstChild (  )  ;^202^^^^^193^217^Node right = callee.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( left.getType (  )  <= NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P2_Replace_Operator]^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  <= STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^if  ( restricter != this )  {^207^^^^^193^217^if  ( restricter != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^restricters.get ( param .getLastChild (  )   ) ;^206^^^^^193^217^restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^Node callee = right.getFirstChild (  ) ;^196^^^^^193^217^Node callee = condition.getFirstChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P7_Replace_Invocation]^Node callee = condition .getLastChild (  )  ;^196^^^^^193^217^Node callee = condition.getFirstChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node right = callee.getLastChild (  ) ;Node callee = condition.getFirstChild (  ) ;^196^^^^^193^217^Node callee = condition.getFirstChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node left = callee.getFirstChild (  ) ;Node callee = condition.getFirstChild (  ) ;^196^^^^^193^217^Node callee = condition.getFirstChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node param = condition.getLastChild (  ) ;Node callee = condition.getFirstChild (  ) ;^196^^^^^193^217^Node callee = condition.getFirstChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^Node param = right.getLastChild (  ) ;^197^^^^^193^217^Node param = condition.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node callee = condition.getFirstChild (  ) ;Node param = condition.getLastChild (  ) ;^197^^^^^193^217^Node param = condition.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node right = callee.getLastChild (  ) ;Node param = condition.getLastChild (  ) ;^197^^^^^193^217^Node param = condition.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P11_Insert_Donor_Statement]^Node left = callee.getFirstChild (  ) ;Node param = condition.getLastChild (  ) ;^197^^^^^193^217^Node param = condition.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^Function<Pair<JSType, Boolean>, JSType> restricter = 3.get ( right.getString (  )  ) ;^205^206^^^^193^217^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P14_Delete_Statement]^^196^197^^^^193^217^Node callee = condition.getFirstChild (  ) ; Node param = condition.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^Node param = param.getLastChild (  ) ;^197^^^^^193^217^Node param = condition.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P14_Delete_Statement]^^197^^^^^193^217^Node param = condition.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^JSType rightType =  put ( param, blindScope ) ;^199^^^^^193^217^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^Node left = param.getFirstChild (  ) ;^201^^^^^193^217^Node left = callee.getFirstChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter ( param, paramType, blindScope, 0, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P7_Replace_Invocation]^if  ( callee .getString (  )   == GETPROP )  {^198^^^^^193^217^if  ( callee.getType (  )  == GETPROP )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^if  ( rightType != true )  {^200^^^^^193^217^if  ( paramType != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P3_Replace_Literal]^if  ( left.getType (  )  == NAME && "googoo".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( left.getType (  )  == 3 && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^if  ( param.getType (  )  == NAME ) {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( left .getLastChild (  )   ) ;^205^206^^^^193^217^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter ( param, paramType, blindScope, 3, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return restrictParameter ( param, paramType, blindScope, 2, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^Node right = param .getFirstChild (  )  ;^202^^^^^193^217^Node right = callee.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^Function<Pair<JSType, Boolean>, JSType> restricter = 1.get ( right.getString (  )  ) ;^205^206^^^^193^217^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P14_Delete_Statement]^^201^^^^^193^217^Node left = callee.getFirstChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P3_Replace_Literal]^if  ( left.getType (  )  == NAME && "googo".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P3_Replace_Literal]^if  ( left.getType (  )  == NAME && "o".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^Function<Pair<JSType, Boolean>, JSType> restricter = null.get ( right.getString (  )  ) ;^205^206^^^^193^217^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( param .getLastChild (  )   ) ;^205^206^^^^193^217^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( 4 != null )  {^207^^^^^193^217^if  ( restricter != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^if  ( paramType != this )  {^200^^^^^193^217^if  ( paramType != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P3_Replace_Literal]^if  ( left.getType (  )  == NAME && "goooog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^return restrictParameter ( param, paramType, blindScope, null, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^if  ( null != null )  {^207^^^^^193^217^if  ( restricter != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P3_Replace_Literal]^if  ( left.getType (  )  == NAME && "oog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P3_Replace_Literal]^if  ( left.getType (  )  == NAME && "go".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P7_Replace_Invocation]^Node param = condition .getFirstChild (  )  ;^197^^^^^193^217^Node param = condition.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^JSType leftType =  put ( param, blindScope ) ;^199^^^^^193^217^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P8_Replace_Mix]^Node callee = param.getFirstChild (  ) ;^196^^^^^193^217^Node callee = condition.getFirstChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P14_Delete_Statement]^^196^^^^^193^217^Node callee = condition.getFirstChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return nextPreciserScopeKnowingConditionOutcome ( param, blindScope, outcome ) ;^215^216^^^^193^217^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return nextPreciserScopeKnowingConditionOutcome (  blindScope, outcome ) ;^215^216^^^^193^217^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return nextPreciserScopeKnowingConditionOutcome ( condition,  outcome ) ;^215^216^^^^193^217^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope ) ;^215^216^^^^193^217^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return nextPreciserScopeKnowingConditionOutcome ( outcome, blindScope, condition ) ;^215^216^^^^193^217^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return nextPreciserScopeKnowingConditionOutcome ( blindScope, condition, outcome ) ;^215^216^^^^193^217^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P7_Replace_Invocation]^return declareNameInScope ( condition, blindScope, outcome ) ;^215^216^^^^193^217^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return nextPreciserScopeKnowingConditionOutcome ( right, blindScope, outcome ) ;^215^216^^^^193^217^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^return nextPreciserScopeKnowingConditionOutcome ( condition, outcome, blindScope ) ;^215^216^^^^193^217^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P14_Delete_Statement]^^215^216^^^^193^217^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[P5_Replace_Variable]^type = restriction.apply ( Pair.of (  outcome )  ) ;^223^^^^^219^233^type = restriction.apply ( Pair.of ( type, outcome )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P5_Replace_Variable]^type = restriction.apply ( Pair.of ( type )  ) ;^223^^^^^219^233^type = restriction.apply ( Pair.of ( type, outcome )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P5_Replace_Variable]^type = outcome.apply ( Pair.of ( type, restriction )  ) ;^223^^^^^219^233^type = restriction.apply ( Pair.of ( type, outcome )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P5_Replace_Variable]^type = restriction.apply ( Pair.of ( outcome, type )  ) ;^223^^^^^219^233^type = restriction.apply ( Pair.of ( type, outcome )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P8_Replace_Mix]^type =  null.apply ( Pair.of ( type, outcome )  ) ;^223^^^^^219^233^type = restriction.apply ( Pair.of ( type, outcome )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P5_Replace_Variable]^type = type.apply ( Pair.of ( restriction, outcome )  ) ;^223^^^^^219^233^type = restriction.apply ( Pair.of ( type, outcome )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^223^^^^^219^233^type = restriction.apply ( Pair.of ( type, outcome )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P2_Replace_Operator]^if  ( type == null )  {^226^^^^^219^233^if  ( type != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P8_Replace_Mix]^if  ( type != true )  {^226^^^^^219^233^if  ( type != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( paramType != null )  {^226^^^^^219^233^if  ( type != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P9_Replace_Statement]^if  ( restricter != null )  {^226^^^^^219^233^if  ( type != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return informed;^231^^^^^219^233^return blindScope;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P5_Replace_Variable]^return blindScope;^229^^^^^219^233^return informed;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P5_Replace_Variable]^FlowScope informed = informed.createChildFlowScope (  ) ;^227^^^^^219^233^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^227^228^229^230^231^219^233^FlowScope informed = blindScope.createChildFlowScope (  ) ; declareNameInScope ( informed, parameter, type ) ; return informed; } else { return blindScope; }^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( blindScope, parameter, type ) ;^228^^^^^219^233^declareNameInScope ( informed, parameter, type ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope (  parameter, type ) ;^228^^^^^219^233^declareNameInScope ( informed, parameter, type ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed,  type ) ;^228^^^^^219^233^declareNameInScope ( informed, parameter, type ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, parameter ) ;^228^^^^^219^233^declareNameInScope ( informed, parameter, type ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( parameter, informed, type ) ;^228^^^^^219^233^declareNameInScope ( informed, parameter, type ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( informed, type, parameter ) ;^228^^^^^219^233^declareNameInScope ( informed, parameter, type ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P7_Replace_Invocation]^nextPreciserScopeKnowingConditionOutcome ( informed, parameter, type ) ;^228^^^^^219^233^declareNameInScope ( informed, parameter, type ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^228^229^230^231^232^219^233^declareNameInScope ( informed, parameter, type ) ; return informed; } else { return blindScope; }^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P5_Replace_Variable]^declareNameInScope ( type, parameter, informed ) ;^228^^^^^219^233^declareNameInScope ( informed, parameter, type ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[P14_Delete_Statement]^^62^^^^^61^64^JSType arrayType = getNativeType ( ARRAY_TYPE ) ;^[CLASS] 1  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSType  arrayType  boolean  
[P11_Insert_Donor_Statement]^return arrayType.isSubtype ( type )  ? arrayType : null;JSType arrayType = getNativeType ( ARRAY_TYPE ) ;^62^^^^^61^64^JSType arrayType = getNativeType ( ARRAY_TYPE ) ;^[CLASS] 1  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSType  arrayType  boolean  
[P5_Replace_Variable]^return type.isSubtype ( arrayType )  ? arrayType : null;^63^^^^^61^64^return arrayType.isSubtype ( type )  ? arrayType : null;^[CLASS] 1  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSType  arrayType  boolean  
[P8_Replace_Mix]^return arrayType.isSubtype ( type )  ? arrayType : false;^63^^^^^61^64^return arrayType.isSubtype ( type )  ? arrayType : null;^[CLASS] 1  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSType  arrayType  boolean  
[P14_Delete_Statement]^^63^^^^^61^64^return arrayType.isSubtype ( type )  ? arrayType : null;^[CLASS] 1  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSType  arrayType  boolean  
[P8_Replace_Mix]^return type.isSubtype ( getNativeType ( ARRAY_TYPE )  )  ? false : type;^74^^^^^73^75^return type.isSubtype ( getNativeType ( ARRAY_TYPE )  )  ? null : type;^[CLASS] 2  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  boolean  
[P14_Delete_Statement]^^74^^^^^73^75^return type.isSubtype ( getNativeType ( ARRAY_TYPE )  )  ? null : type;^[CLASS] 2  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  boolean  
[P14_Delete_Statement]^^86^^^^^85^87^return getNativeType ( NO_OBJECT_TYPE ) ;^[CLASS] 3  [METHOD] caseTopType [RETURN_TYPE] JSType   JSType topType [VARIABLES] JSType  topType  boolean  
[P8_Replace_Mix]^return this;^107^^^^^106^108^return null;^[CLASS] 4  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  boolean  
[P8_Replace_Mix]^return true;^112^^^^^111^113^return null;^[CLASS] 4  [METHOD] caseFunctionType [RETURN_TYPE] JSType   FunctionType type [VARIABLES] boolean  FunctionType  type  
[P15_Unwrap_Block]^return getRestrictedWithoutUndefined(p.first);^130^131^132^133^134^129^135^if  ( p.second )  { return getRestrictedWithoutUndefined ( p.first ) ; } else { return null; }^[CLASS] 13  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P16_Remove_Block]^^130^131^132^133^134^129^135^if  ( p.second )  { return getRestrictedWithoutUndefined ( p.first ) ; } else { return null; }^[CLASS] 13  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P8_Replace_Mix]^return this;^133^^^^^129^135^return null;^[CLASS] 13  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P14_Delete_Statement]^^131^^^^^129^135^return getRestrictedWithoutUndefined ( p.first ) ;^[CLASS] 13  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P15_Unwrap_Block]^return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE);^139^140^141^142^143^138^144^if  ( p.second )  { return getNativeType ( NULL_TYPE ) ; } else { return getRestrictedWithoutNull ( p.first ) ; }^[CLASS] 12  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P16_Remove_Block]^^139^140^141^142^143^138^144^if  ( p.second )  { return getNativeType ( NULL_TYPE ) ; } else { return getRestrictedWithoutNull ( p.first ) ; }^[CLASS] 12  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P7_Replace_Invocation]^return getNativeType ( p.first ) ;^142^^^^^138^144^return getRestrictedWithoutNull ( p.first ) ;^[CLASS] 12  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P14_Delete_Statement]^^142^^^^^138^144^return getRestrictedWithoutNull ( p.first ) ;^[CLASS] 12  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P13_Insert_Block]^if  ( p.second )  {     return getNativeType ( NULL_TYPE ) ; }else {     return getRestrictedWithoutNull ( p.first ) ; }^140^^^^^138^144^[Delete]^[CLASS] 12  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P14_Delete_Statement]^^140^^^^^138^144^return getNativeType ( NULL_TYPE ) ;^[CLASS] 12  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P15_Unwrap_Block]^return getRestrictedWithoutUndefined(getRestrictedWithoutNull(p.first));^148^149^150^151^152^147^154^if  ( p.second )  { return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ; } else { return null; }^[CLASS] 11  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P16_Remove_Block]^^148^149^150^151^152^147^154^if  ( p.second )  { return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ; } else { return null; }^[CLASS] 11  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P8_Replace_Mix]^return false;^152^^^^^147^154^return null;^[CLASS] 11  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P7_Replace_Invocation]^return getRestrictedWithoutNull ( getRestrictedWithoutNull ( p.first )  ) ;^149^150^^^^147^154^return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] 11  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P7_Replace_Invocation]^return getRestrictedWithoutUndefined ( getRestrictedWithoutUndefined ( p.first )  ) ;^149^150^^^^147^154^return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] 11  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P14_Delete_Statement]^^149^150^^^^147^154^return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] 11  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P13_Insert_Block]^if  ( p.second )  {     return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ; }else {     return null; }^149^^^^^147^154^[Delete]^[CLASS] 11  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P7_Replace_Invocation]^getRestrictedWithoutUndefined ( p.first )  ) ;^150^^^^^147^154^getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] 11  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P14_Delete_Statement]^^150^^^^^147^154^getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] 11  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P11_Insert_Donor_Statement]^return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ;getRestrictedWithoutNull ( p.first )  ) ;^150^^^^^147^154^getRestrictedWithoutNull ( p.first )  ) ;^[CLASS] 11  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P8_Replace_Mix]^return true;^152^^^^^147^154^return null;^[CLASS] 11  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "trin", p.second ) ;^158^^^^^157^159^return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[CLASS] 10  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "string".second ) ;^158^^^^^157^159^return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[CLASS] 10  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult (  "string", p.second ) ;^158^^^^^157^159^return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[CLASS] 10  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "string" ) ;^158^^^^^157^159^return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[CLASS] 10  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "tring", p.second ) ;^158^^^^^157^159^return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[CLASS] 10  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P14_Delete_Statement]^^158^^^^^157^159^return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[CLASS] 10  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "booolean", p.second ) ;^163^^^^^162^164^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] 9  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "boolean".second ) ;^163^^^^^162^164^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] 9  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult (  "boolean", p.second ) ;^163^^^^^162^164^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] 9  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "boolean" ) ;^163^^^^^162^164^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] 9  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "lea", p.second ) ;^163^^^^^162^164^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] 9  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P14_Delete_Statement]^^163^^^^^162^164^return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[CLASS] 9  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "number".second ) ;^168^^^^^167^169^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[CLASS] 8  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult (  "number", p.second ) ;^168^^^^^167^169^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[CLASS] 8  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "number" ) ;^168^^^^^167^169^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[CLASS] 8  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "", p.second ) ;^168^^^^^167^169^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[CLASS] 8  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P14_Delete_Statement]^^168^^^^^167^169^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[CLASS] 8  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "fu", p.second ) ;^173^^^^^172^174^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] 7  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "function".second ) ;^173^^^^^172^174^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] 7  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult (  "function", p.second ) ;^173^^^^^172^174^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] 7  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P5_Replace_Variable]^return getRestrictedByTypeOfResult ( p.first, "function" ) ;^173^^^^^172^174^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] 7  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P3_Replace_Literal]^return getRestrictedByTypeOfResult ( p.first, "tio", p.second ) ;^173^^^^^172^174^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] 7  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P14_Delete_Statement]^^173^^^^^172^174^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[CLASS] 7  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Pair  p  
[P6_Replace_Expression]^Visitor<JSType> visitor  =  restrictToNotArrayVisitor;^178^179^^^^177^181^Visitor<JSType> visitor = p.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;^[CLASS] 6  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  visitor  Pair  p  
[P6_Replace_Expression]^Visitor<JSType> visitor  =  restrictToArrayVisitor ;^178^179^^^^177^181^Visitor<JSType> visitor = p.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;^[CLASS] 6  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  visitor  Pair  p  
[P2_Replace_Operator]^return p.first != null ? null : p.first.visit ( visitor ) ;^180^^^^^177^181^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] 6  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  visitor  Pair  p  
[P6_Replace_Expression]^return p.first ( p.first.visit ( visitor ) ;^180^^^^^177^181^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] 6  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  visitor  Pair  p  
[P8_Replace_Mix]^return p.first.visit ( visitor ) ;^180^^^^^177^181^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] 6  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  visitor  Pair  p  
[P14_Delete_Statement]^^180^^^^^177^181^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] 6  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  visitor  Pair  p  
[P6_Replace_Expression]^Visitor<JSType> visitor  =  restrictToNotObjectVisitor;^185^186^^^^184^188^Visitor<JSType> visitor = p.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;^[CLASS] 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  visitor  Pair  p  
[P6_Replace_Expression]^Visitor<JSType> visitor  =  restrictToObjectVisitor ;^185^186^^^^184^188^Visitor<JSType> visitor = p.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;^[CLASS] 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  visitor  Pair  p  
[P2_Replace_Operator]^return p.first != null ? null : p.first.visit ( visitor ) ;^187^^^^^184^188^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  visitor  Pair  p  
[P6_Replace_Expression]^return p.first ( p.first.visit ( visitor ) ;^187^^^^^184^188^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  visitor  Pair  p  
[P8_Replace_Mix]^return p.first.visit ( visitor ) ;^187^^^^^184^188^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  visitor  Pair  p  
[P14_Delete_Statement]^^187^^^^^184^188^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  visitor  Pair  p  
