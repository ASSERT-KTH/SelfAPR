[P8_Replace_Mix]^AbstractCompiler compiler;^39^^^^^34^44^final AbstractCompiler compiler;^[CLASS] IgnoreCajaProperties Traversal   [VARIABLES] 
[P1_Replace_Type]^short  counter;^42^^^^^37^47^int counter;^[CLASS] IgnoreCajaProperties Traversal   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^45^^^^^44^47^this.compiler = compiler;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  int  counter  boolean  
[P11_Insert_Donor_Statement]^this.counter = 0;this.compiler = compiler;^45^^^^^44^47^this.compiler = compiler;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  int  counter  boolean  
[P3_Replace_Literal]^this.counter = 5;^46^^^^^44^47^this.counter = 0;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  int  counter  boolean  
[P8_Replace_Mix]^this.counter = 0L;^46^^^^^44^47^this.counter = 0;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  int  counter  boolean  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.counter = 0;^46^^^^^44^47^this.counter = 0;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  int  counter  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, new Traversal (  )  ) ;^51^^^^^50^52^NodeTraversal.traverse ( compiler, root, new Traversal (  )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  int  counter  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new Traversal (  )  ) ;^51^^^^^50^52^NodeTraversal.traverse ( compiler, root, new Traversal (  )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  int  counter  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new Traversal (  )  ) ;^51^^^^^50^52^NodeTraversal.traverse ( compiler, root, new Traversal (  )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  int  counter  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new Traversal (  )  ) ;^51^^^^^50^52^NodeTraversal.traverse ( compiler, root, new Traversal (  )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  int  counter  Node  externs  root  
[P14_Delete_Statement]^^51^^^^^50^52^NodeTraversal.traverse ( compiler, root, new Traversal (  )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  int  counter  Node  externs  root  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.FOR || n.getChildCount (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.FOR && n.getChildCount (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  != 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P2_Replace_Operator]^if  ( n.getType (  )  <= Token.FOR && n.getChildCount (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P6_Replace_Expression]^if  ( n.getType (  )  == Token.FOR ) {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P6_Replace_Expression]^if  (  n.getChildCount (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P6_Replace_Expression]^if  ( n.getType (  )  == FOR )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P6_Replace_Expression]^if  ( "JSCompiler_IgnoreCajaProperties_" +  ( counter ) ++ )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P6_Replace_Expression]^if  ( key.getType() == VAR )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^if  ( n.newString (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^if  ( n.getType (  )  == Token.FOR && n.newString (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^if  ( n.getType (  )  == Token.FOR && n .addChildToFront ( tmp )   == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^if  ( n .getLastChild (  )   == Token.FOR && n.getChildCount (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 - 4 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P2_Replace_Operator]^if  ( key.getType (  )  <= Token.VAR )  {^70^^^^^55^85^if  ( key.getType (  )  == Token.VAR )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^if  ( tmp.getType (  )  == Token.VAR )  {^70^^^^^55^85^if  ( key.getType (  )  == Token.VAR )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^if  ( key.newString (  )  == Token.VAR )  {^70^^^^^55^85^if  ( key.getType (  )  == Token.VAR )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^ifBody = new Node ( Token. new Node ( Token.EXPR_RESULT,^99^100^101^102^^84^114^ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^ifBody = new Node ( Token.BLOCK, new Node ( Token.^99^100^101^102^^84^114^ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^ifBody =  new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^99^100^101^102^^84^114^ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token. new Node ( Token.ASSIGN,^101^102^103^104^^86^116^new Node ( Token.EXPR_RESULT, new Node ( Token.ASSIGN,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.EXPR_RESULT, new Node ( Token.^101^102^103^104^^86^116^new Node ( Token.EXPR_RESULT, new Node ( Token.ASSIGN,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P4_Replace_Constructor]^new Node ( Token.ASSIGN,  tmp.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P4_Replace_Constructor]^new Node ( Token.ASSIGN, key.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, newBody, tmp.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, key, parent.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token. key, tmp.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, tmp, key.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.ASSIGN, key, tmp.newString (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^new Node ( Token.ASSIGN, parent, tmp.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^tmp.newString (  )  )  ) , body ) ;^106^107^^^^91^121^tmp.cloneTree (  )  )  ) , body ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^106^107^^^^91^121^tmp.cloneTree (  )  )  ) , body ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P4_Replace_Constructor]^ifBody = new Node ( Token.BLOCK,  new Node (^80^81^82^83^^65^95^ifBody = new Node ( Token.BLOCK, key, new Node (^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^ifBody = new Node ( Token.BLOCK, tmp, new Node (^80^81^82^83^^65^95^ifBody = new Node ( Token.BLOCK, key, new Node (^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^ifBody = new Node ( Token. key, new Node (^80^81^82^83^^65^95^ifBody = new Node ( Token.BLOCK, key, new Node (^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^ifBody = new Node ( Token.BLOCK, parent, new Node (^80^81^82^83^^65^95^ifBody = new Node ( Token.BLOCK, key, new Node (^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token. new Node ( Token.ASSIGN,^83^84^85^86^^68^98^new Node ( Token.EXPR_RESULT, new Node ( Token.ASSIGN,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.EXPR_RESULT, new Node ( Token.^83^84^85^86^^68^98^new Node ( Token.EXPR_RESULT, new Node ( Token.ASSIGN,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P4_Replace_Constructor]^new Node ( Token.ASSIGN.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P4_Replace_Constructor]^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) .cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, tmp.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , parent.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token. key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, tmp.getFirstChild (  ) .cloneNode (  ) , key.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.ASSIGN, key.newString (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.newString (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^key.newString (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) , body ) ;^87^88^89^^^72^102^key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) , body ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^87^88^89^^^72^102^key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) , body ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^key .getLastChild (  )  .cloneNode (  ) , tmp.cloneTree (  )  )  ) , body ) ;^87^88^89^^^72^102^key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) , body ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^tmp.newString (  )  )  ) , body ) ;^88^89^^^^73^103^tmp.cloneTree (  )  )  ) , body ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^88^89^^^^73^103^tmp.cloneTree (  )  )  ) , body ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^ifBody = new Node ( Token.BLOCK, newBody, new Node (^80^81^82^83^^65^95^ifBody = new Node ( Token.BLOCK, key, new Node (^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToFront ( new Node ( Token.VAR, parent )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToFront ( new Node ( Token.VAR )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToFront ( new Node ( Token. tmp )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^n.addChildToFront ( new Node ( Token.VAR, newBody )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, parent.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , n.newString (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, key, newBody.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.ASSIGN, key, tmp .getType (  )   )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^Node newBody = new Node ( Token. new Node ( Token.IF,^111^112^113^114^^96^126^Node newBody = new Node ( Token.BLOCK, new Node ( Token.IF,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^Node newBody = new Node ( Token.BLOCK, new Node ( Token.^111^112^113^114^^96^126^Node newBody = new Node ( Token.BLOCK, new Node ( Token.IF,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token. new Node ( Token.NOT,^113^114^115^116^^98^128^new Node ( Token.IF, new Node ( Token.NOT,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.IF, new Node ( Token.^113^114^115^116^^98^128^new Node ( Token.IF, new Node ( Token.NOT,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token. new Node ( Token.CALL,^115^116^117^118^^100^130^new Node ( Token.NOT, new Node ( Token.CALL,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.NOT, new Node ( Token.^115^116^117^118^^100^130^new Node ( Token.NOT, new Node ( Token.CALL,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token. new Node ( Token.GETPROP,^117^118^119^120^^102^132^new Node ( Token.CALL, new Node ( Token.GETPROP,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.CALL, new Node ( Token.^117^118^119^120^^102^132^new Node ( Token.CALL, new Node ( Token.GETPROP,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "matchm" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.GETPROP, newBody.cloneTree (  ) , Node.newString ( "match" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.GETPROP.cloneTree (  ) , Node.newString ( "match" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token. tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.GETPROP, tmp.newString (  ) , Node.newString ( "match" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.removeChild ( "match" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^new Node ( Token.GETPROP, parent.cloneTree (  ) , Node.newString ( "match" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^new Node ( Token.REGEXP, Node.newString ( "" )  )  )  ) , ifBody )  ) ;^123^124^125^126^^108^138^new Node ( Token.REGEXP, Node.newString ( "___$" )  )  )  ) , ifBody )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.REGEXP, Node.removeChild ( "___$" )  )  )  ) , ifBody )  ) ;^123^124^125^126^^108^138^new Node ( Token.REGEXP, Node.newString ( "___$" )  )  )  ) , ifBody )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^Node body = n.newString (  ) ;^59^^^^^44^74^Node body = n.getLastChild (  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^Node body = n .getFirstChild (  )  ;^59^^^^^44^74^Node body = n.getLastChild (  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^Node body = tmp.getLastChild (  ) ;^59^^^^^44^74^Node body = n.getLastChild (  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P11_Insert_Donor_Statement]^Node key = n.getFirstChild (  ) ;Node body = n.getLastChild (  ) ;^59^^^^^44^74^Node body = n.getLastChild (  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^Node key = tmp.getFirstChild (  ) ;^61^^^^^46^76^Node key = n.getFirstChild (  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^Node key = n.newString (  ) ;^61^^^^^46^76^Node key = n.getFirstChild (  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^Node key = n .getLastChild (  )  ;^61^^^^^46^76^Node key = n.getFirstChild (  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P11_Insert_Donor_Statement]^Node body = n.getLastChild (  ) ;Node key = n.getFirstChild (  ) ;^61^^^^^46^76^Node key = n.getFirstChild (  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^Node tmp = Node.newString ( Token.NAME, "ler" + counter++ ) ;^63^64^^^^48^78^Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^Node tmp = Node.removeChild ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^63^64^^^^48^78^Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^Node tmp = Node .getLastChild (  )  ;^63^64^^^^48^78^Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^Node body = parent.getLastChild (  ) ;^59^^^^^44^74^Node body = n.getLastChild (  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^59^^^^^44^74^Node body = n.getLastChild (  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.removeChild ( tmp ) ;^60^^^^^45^75^n.removeChild ( body ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^n.removeChild ( parent ) ;^60^^^^^45^75^n.removeChild ( body ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^60^^^^^45^75^n.removeChild ( body ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P11_Insert_Donor_Statement]^n.removeChild ( key ) ;n.removeChild ( body ) ;^60^^^^^45^75^n.removeChild ( body ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^Node key = parent.getFirstChild (  ) ;^61^^^^^46^76^Node key = n.getFirstChild (  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^61^^^^^46^76^Node key = n.getFirstChild (  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.removeChild ( tmp ) ;^62^^^^^47^77^n.removeChild ( key ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^62^^^^^47^77^n.removeChild ( key ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P11_Insert_Donor_Statement]^n.removeChild ( body ) ;n.removeChild ( key ) ;^62^^^^^47^77^n.removeChild ( key ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^Node tmp = Node.newString ( Token.NAME, "_Ig" + counter++ ) ;^63^64^^^^48^78^Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^63^64^^^^48^78^Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToFront ( newBodyew Node ( Token.VAR, tmp )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToFront ( tmpew Node ( Token.VAR, n )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^65^66^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ; Node assignment;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^if  ( key .getLastChild (  )   == Token.VAR )  {^70^^^^^55^85^if  ( key.getType (  )  == Token.VAR )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^tmp.newString (  ) , Node.newString ( "match" )  ) , new Node ( Token.REGEXP,^121^122^123^124^^106^136^tmp.cloneTree (  ) , Node.newString ( "match" )  ) , new Node ( Token.REGEXP,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^tmp .getType (  )  , Node.newString ( "match" )  ) , new Node ( Token.REGEXP,^121^122^123^124^^106^136^tmp.cloneTree (  ) , Node.newString ( "match" )  ) , new Node ( Token.REGEXP,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^Node.newString ( "aatch" )  ) , new Node ( Token.REGEXP, Node.newString ( "___$" )  )  )  ) ,^122^123^124^125^^107^137^Node.newString ( "match" )  ) , new Node ( Token.REGEXP, Node.newString ( "___$" )  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^Node.removeChild ( "match" )  ) , new Node ( Token.REGEXP, Node.newString ( "___$" )  )  )  ) ,^122^123^124^125^^107^137^Node.newString ( "match" )  ) , new Node ( Token.REGEXP, Node.newString ( "___$" )  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^Node .getLastChild (  )   ) , new Node ( Token.REGEXP, Node^122^123^124^125^^107^137^Node.newString ( "match" )  ) , new Node ( Token.REGEXP, Node.newString ( "___$" )  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^Node.newString ( "__$" )  )  )  ) , ifBody )  ) ;^125^126^^^^110^140^Node.newString ( "___$" )  )  )  ) , ifBody )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^Node.removeChild ( "___$" )  )  )  ) , ifBody )  ) ;^125^126^^^^110^140^Node.newString ( "___$" )  )  )  ) , ifBody )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^125^126^^^^110^140^Node.newString ( "___$" )  )  )  ) , ifBody )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToBack ( parentewBody ) ;^127^^^^^112^142^n.addChildToBack ( newBody ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToBack ( parent ) ;^127^^^^^112^142^n.addChildToBack ( newBody ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToBack ( newBodyewBody ) ;^127^^^^^112^142^n.addChildToBack ( newBody ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToBack ( n ) ;^127^^^^^112^142^n.addChildToBack ( newBody ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^n.addChildToBack ( tmp ) ;^127^^^^^112^142^n.addChildToBack ( newBody ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^127^^^^^112^142^n.addChildToBack ( newBody ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^128^^^^^113^143^compiler.reportCodeChange (  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P2_Replace_Operator]^if  ( key.getType (  )  < Token.VAR )  {^70^^^^^55^85^if  ( key.getType (  )  == Token.VAR )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.VAR )  {^70^^^^^55^85^if  ( key.getType (  )  == Token.VAR )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, tmp, tmp.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^new Node ( Token.ASSIGN, key, parent .getType (  )   )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^ifBody =  new Node ( Token.BLOCK, null, new Node (^80^81^82^83^^65^95^ifBody = new Node ( Token.BLOCK, key, new Node (^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp .getType (  )   )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^tmp .getType (  )   )  ) , body ) ;^88^89^^^^73^103^tmp.cloneTree (  )  )  ) , body ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.ASSIGN, key .getLastChild (  )  .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.GETPROP, n.cloneTree (  ) , Node.newString ( "match" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^new Node ( Token.GETPROP, parent.newString (  ) , Node.newString ( "match" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^new Node ( Token.REGEXP, Node.newString ( "___$__" )  )  )  ) , ifBody )  ) ;^123^124^125^126^^108^138^new Node ( Token.REGEXP, Node.newString ( "___$" )  )  )  ) , ifBody )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^new Node ( Token.REGEXP, Node .getLastChild (  )   )  )  ) , ifBody )  ) ;^123^124^125^126^^108^138^new Node ( Token.REGEXP, Node.newString ( "___$" )  )  )  ) , ifBody )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_mpiler_Ignore" + counter++ ) ;^63^64^^^^48^78^Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^if  ( tmp.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^if  ( n.getType (  )  == Token.FOR && n .addChildToFront ( parent )   == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^if  ( newBody.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^Node body = tmp .getFirstChild (  )  ;^59^^^^^44^74^Node body = n.getLastChild (  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^59^60^^^^44^74^Node body = n.getLastChild (  ) ; n.removeChild ( body ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^n .getLastChild (  )  ;^60^^^^^45^75^n.removeChild ( body ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^61^62^^^^46^76^Node key = n.getFirstChild (  ) ; n.removeChild ( key ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^n.removeChild ( parent ) ;^62^^^^^47^77^n.removeChild ( key ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_SComp" + counter++ ) ;^63^64^^^^48^78^Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToFront ( parentew Node ( Token.VAR, tmp )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToFront ( new Node ( Token.VAR, n )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^if  ( newBody.getType (  )  == Token.VAR )  {^70^^^^^55^85^if  ( key.getType (  )  == Token.VAR )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^if  ( parent .getLastChild (  )   == Token.VAR )  {^70^^^^^55^85^if  ( key.getType (  )  == Token.VAR )  {^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^Node.newString ( "matchc" )  ) , new Node ( Token.REGEXP, Node.newString ( "___$" )  )  )  ) ,^122^123^124^125^^107^137^Node.newString ( "match" )  ) , new Node ( Token.REGEXP, Node.newString ( "___$" )  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^Node.newString ( "___" )  )  )  ) , ifBody )  ) ;^125^126^^^^110^140^Node.newString ( "___$" )  )  )  ) , ifBody )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^127^128^^^^112^142^n.addChildToBack ( newBody ) ; compiler.reportCodeChange (  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.FOR || n.getChildCount (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.FOR && n.getChildCount (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  >= 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P2_Replace_Operator]^if  ( n.getType (  )  < Token.FOR && n.getChildCount (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 11 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P6_Replace_Expression]^if  ( n.getType (  )  == Token.FOR ) {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P6_Replace_Expression]^if  (  n.getChildCount (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P6_Replace_Expression]^if  ( n.getType (  )  == FOR )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P6_Replace_Expression]^if  ( "JSCompiler_IgnoreCajaProperties_" +  ( counter ) ++ )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P6_Replace_Expression]^if  ( key.getType() == VAR )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^if  ( n.newString (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^if  ( n .getLastChild (  )   == Token.FOR && n.getChildCount (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^if  ( n.getType (  )  == Token.FOR && n.newString (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.FOR ) {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P2_Replace_Operator]^if  ( key.getType (  )  != Token.VAR )  {^70^^^^^55^85^if  ( key.getType (  )  == Token.VAR )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^if  ( tmp.getType (  )  == Token.VAR )  {^70^^^^^55^85^if  ( key.getType (  )  == Token.VAR )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^if  ( key.newString (  )  == Token.VAR )  {^70^^^^^55^85^if  ( key.getType (  )  == Token.VAR )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^if  ( key .getLastChild (  )   == Token.VAR )  {^70^^^^^55^85^if  ( key.getType (  )  == Token.VAR )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.VAR )  {^70^^^^^55^85^if  ( key.getType (  )  == Token.VAR )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^ifBody = new Node ( Token. new Node ( Token.EXPR_RESULT,^99^100^101^102^^84^114^ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^ifBody = new Node ( Token.BLOCK, new Node ( Token.^99^100^101^102^^84^114^ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^ifBody =  new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^99^100^101^102^^84^114^ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token. new Node ( Token.ASSIGN,^101^102^103^104^^86^116^new Node ( Token.EXPR_RESULT, new Node ( Token.ASSIGN,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.EXPR_RESULT, new Node ( Token.^101^102^103^104^^86^116^new Node ( Token.EXPR_RESULT, new Node ( Token.ASSIGN,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P4_Replace_Constructor]^new Node ( Token.ASSIGN,  tmp.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P4_Replace_Constructor]^new Node ( Token.ASSIGN, key.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, tmp, tmp.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, key, newBody.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token. key, tmp.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, tmp, key.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.ASSIGN, key, tmp.newString (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.ASSIGN, key, tmp .getType (  )   )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^tmp.newString (  )  )  ) , body ) ;^106^107^^^^91^121^tmp.cloneTree (  )  )  ) , body ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^106^107^^^^91^121^tmp.cloneTree (  )  )  ) , body ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P4_Replace_Constructor]^ifBody = new Node ( Token.BLOCK,  new Node (^80^81^82^83^^65^95^ifBody = new Node ( Token.BLOCK, key, new Node (^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^ifBody = new Node ( Token.BLOCK, parent, new Node (^80^81^82^83^^65^95^ifBody = new Node ( Token.BLOCK, key, new Node (^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^ifBody = new Node ( Token. key, new Node (^80^81^82^83^^65^95^ifBody = new Node ( Token.BLOCK, key, new Node (^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^ifBody =  new Node ( Token.BLOCK, tmp, new Node (^80^81^82^83^^65^95^ifBody = new Node ( Token.BLOCK, key, new Node (^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token. new Node ( Token.ASSIGN,^83^84^85^86^^68^98^new Node ( Token.EXPR_RESULT, new Node ( Token.ASSIGN,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.EXPR_RESULT, new Node ( Token.^83^84^85^86^^68^98^new Node ( Token.EXPR_RESULT, new Node ( Token.ASSIGN,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P4_Replace_Constructor]^new Node ( Token.ASSIGN.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P4_Replace_Constructor]^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) .cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, parent.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , newBody.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token. key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, tmp.getFirstChild (  ) .cloneNode (  ) , key.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.ASSIGN, key.newString (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.newString (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp .getType (  )   )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^new Node ( Token.ASSIGN, parent.newString (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^key.newString (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) , body ) ;^87^88^89^^^72^102^key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) , body ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^87^88^89^^^72^102^key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) , body ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^tmp.newString (  )  )  ) , body ) ;^88^89^^^^73^103^tmp.cloneTree (  )  )  ) , body ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^tmp .getType (  )   )  ) , body ) ;^88^89^^^^73^103^tmp.cloneTree (  )  )  ) , body ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^88^89^^^^73^103^tmp.cloneTree (  )  )  ) , body ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^ifBody = new Node ( Token.BLOCK, newBody, new Node (^80^81^82^83^^65^95^ifBody = new Node ( Token.BLOCK, key, new Node (^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToFront ( new Node ( Token.VAR, newBody )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToFront ( new Node ( Token.VAR )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToFront ( new Node ( Token. tmp )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, tmp.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , parent.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^new Node ( Token.ASSIGN, key .getLastChild (  )  .cloneNode (  ) , parent.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, newBody, tmp.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, key, n.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^Node newBody = new Node ( Token. new Node ( Token.IF,^111^112^113^114^^96^126^Node newBody = new Node ( Token.BLOCK, new Node ( Token.IF,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^Node newBody = new Node ( Token.BLOCK, new Node ( Token.^111^112^113^114^^96^126^Node newBody = new Node ( Token.BLOCK, new Node ( Token.IF,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token. new Node ( Token.NOT,^113^114^115^116^^98^128^new Node ( Token.IF, new Node ( Token.NOT,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.IF, new Node ( Token.^113^114^115^116^^98^128^new Node ( Token.IF, new Node ( Token.NOT,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token. new Node ( Token.CALL,^115^116^117^118^^100^130^new Node ( Token.NOT, new Node ( Token.CALL,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.NOT, new Node ( Token.^115^116^117^118^^100^130^new Node ( Token.NOT, new Node ( Token.CALL,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token. new Node ( Token.GETPROP,^117^118^119^120^^102^132^new Node ( Token.CALL, new Node ( Token.GETPROP,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.CALL, new Node ( Token.^117^118^119^120^^102^132^new Node ( Token.CALL, new Node ( Token.GETPROP,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.GETPROP, parent.cloneTree (  ) , Node.newString ( "match" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.GETPROP.cloneTree (  ) , Node.newString ( "match" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token. tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.GETPROP, tmp.newString (  ) , Node.newString ( "match" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.removeChild ( "match" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^new Node ( Token.GETPROP, newBody.cloneTree (  ) , Node.newString ( "match" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^new Node ( Token.REGEXP, Node.newString ( "__" )  )  )  ) , ifBody )  ) ;^123^124^125^126^^108^138^new Node ( Token.REGEXP, Node.newString ( "___$" )  )  )  ) , ifBody )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.REGEXP, Node.removeChild ( "___$" )  )  )  ) , ifBody )  ) ;^123^124^125^126^^108^138^new Node ( Token.REGEXP, Node.newString ( "___$" )  )  )  ) , ifBody )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^Node body = tmp.getLastChild (  ) ;^59^^^^^44^74^Node body = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^Node body = n.newString (  ) ;^59^^^^^44^74^Node body = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^Node body = tmp .getFirstChild (  )  ;^59^^^^^44^74^Node body = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P11_Insert_Donor_Statement]^Node key = n.getFirstChild (  ) ;Node body = n.getLastChild (  ) ;^59^^^^^44^74^Node body = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^Node key = n.newString (  ) ;^61^^^^^46^76^Node key = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^Node key = n .getLastChild (  )  ;^61^^^^^46^76^Node key = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^Node key = tmp.getFirstChild (  ) ;^61^^^^^46^76^Node key = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P11_Insert_Donor_Statement]^Node body = n.getLastChild (  ) ;Node key = n.getFirstChild (  ) ;^61^^^^^46^76^Node key = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^Node tmp = Node.newString ( Token.NAME, "noreCajaPropertieSCompiler_IgnoreCajaProperties_" + counter++ ) ;^63^64^^^^48^78^Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^Node tmp = Node.removeChild ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^63^64^^^^48^78^Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^Node body = newBody.getLastChild (  ) ;^59^^^^^44^74^Node body = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^Node body = n .getFirstChild (  )  ;^59^^^^^44^74^Node body = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^59^60^^^^44^74^Node body = n.getLastChild (  ) ; n.removeChild ( body ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.removeChild ( tmp ) ;^60^^^^^45^75^n.removeChild ( body ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^n .getLastChild (  )  ;^60^^^^^45^75^n.removeChild ( body ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^60^61^^^^45^75^n.removeChild ( body ) ; Node key = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P11_Insert_Donor_Statement]^n.removeChild ( key ) ;n.removeChild ( body ) ;^60^^^^^45^75^n.removeChild ( body ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^61^^^^^46^76^Node key = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.removeChild ( tmp ) ;^62^^^^^47^77^n.removeChild ( key ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^n .getLastChild (  )  ;^62^^^^^47^77^n.removeChild ( key ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^n.removeChild ( parent ) ;^62^^^^^47^77^n.removeChild ( key ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^62^^^^^47^77^n.removeChild ( key ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P11_Insert_Donor_Statement]^n.removeChild ( body ) ;n.removeChild ( key ) ;^62^^^^^47^77^n.removeChild ( key ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^Node tmp = Node.newString ( Token.NAME, "piler_IgnorSCompiler_IgnoreCajaProperties_" + counter++ ) ;^63^64^^^^48^78^Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^63^64^^^^48^78^Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToFront ( tmpew Node ( Token.VAR, n )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^n .addChildToBack ( ifBody )  ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^key .getLastChild (  )  .cloneNode (  ) , tmp.cloneTree (  )  )  ) , body ) ;^87^88^89^^^72^102^key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) , body ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^tmp .getType (  )   )  ) , body ) ;^106^107^^^^91^121^tmp.cloneTree (  )  )  ) , body ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^tmp.newString (  ) , Node.newString ( "match" )  ) , new Node ( Token.REGEXP,^121^122^123^124^^106^136^tmp.cloneTree (  ) , Node.newString ( "match" )  ) , new Node ( Token.REGEXP,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^Node.newString ( "matcatch" )  ) , new Node ( Token.REGEXP, Node.newString ( "___$" )  )  )  ) ,^122^123^124^125^^107^137^Node.newString ( "match" )  ) , new Node ( Token.REGEXP, Node.newString ( "___$" )  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^Node.removeChild ( "match" )  ) , new Node ( Token.REGEXP, Node.newString ( "___$" )  )  )  ) ,^122^123^124^125^^107^137^Node.newString ( "match" )  ) , new Node ( Token.REGEXP, Node.newString ( "___$" )  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^Node.newString ( "___$_" )  )  )  ) , ifBody )  ) ;^125^126^^^^110^140^Node.newString ( "___$" )  )  )  ) , ifBody )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^Node.removeChild ( "___$" )  )  )  ) , ifBody )  ) ;^125^126^^^^110^140^Node.newString ( "___$" )  )  )  ) , ifBody )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^Node .getLastChild (  )   )  )  ) , ifBody )  ) ;^125^126^^^^110^140^Node.newString ( "___$" )  )  )  ) , ifBody )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^125^126^^^^110^140^Node.newString ( "___$" )  )  )  ) , ifBody )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToBack ( parentewBody ) ;^127^^^^^112^142^n.addChildToBack ( newBody ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToBack ( tmp ) ;^127^^^^^112^142^n.addChildToBack ( newBody ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToBack ( newBodyewBody ) ;^127^^^^^112^142^n.addChildToBack ( newBody ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToBack ( n ) ;^127^^^^^112^142^n.addChildToBack ( newBody ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^n.addChildToBack ( tmpewBody ) ;^127^^^^^112^142^n.addChildToBack ( newBody ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^127^128^^^^112^142^n.addChildToBack ( newBody ) ; compiler.reportCodeChange (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^128^^^^^113^143^compiler.reportCodeChange (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P2_Replace_Operator]^if  ( key.getType (  )  >= Token.VAR )  {^70^^^^^55^85^if  ( key.getType (  )  == Token.VAR )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, parent, tmp.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToFront ( new Node ( Token.VAR, parent )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.ASSIGN, key .getLastChild (  )  .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.ASSIGN, key, parent.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^new Node ( Token.ASSIGN, parent, tmp .getType (  )   )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "a" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^new Node ( Token.GETPROP, n.cloneTree (  ) , Node.newString ( "match" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node .getLastChild (  )   ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^new Node ( Token.REGEXP, Node.newString ( "" )  )  )  ) , ifBody )  ) ;^123^124^125^126^^108^138^new Node ( Token.REGEXP, Node.newString ( "___$" )  )  )  ) , ifBody )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^new Node ( Token.REGEXP, Node .getLastChild (  )   )  )  ) , ifBody )  ) ;^123^124^125^126^^108^138^new Node ( Token.REGEXP, Node.newString ( "___$" )  )  )  ) , ifBody )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^Node body = parent.getLastChild (  ) ;^59^^^^^44^74^Node body = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^Node body = tmp.newString (  ) ;^59^^^^^44^74^Node body = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^Node key = parent.getFirstChild (  ) ;^61^^^^^46^76^Node key = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_JSComp" + counter++ ) ;^63^64^^^^48^78^Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^if  ( tmp.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^if  ( newBody.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^58^^^^^43^73^if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^60^^^^^45^75^n.removeChild ( body ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P8_Replace_Mix]^Node key = newBody.getFirstChild (  ) ;^61^^^^^46^76^Node key = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^61^62^^^^46^76^Node key = n.getFirstChild (  ) ; n.removeChild ( key ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^Node tmp = Node.newString ( Token.NAME, "aPrope" + counter++ ) ;^63^64^^^^48^78^Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToFront ( parentew Node ( Token.VAR, tmp )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P5_Replace_Variable]^n.addChildToFront ( new Node ( Token.VAR, n )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^n .addChildToBack ( body )  ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P14_Delete_Statement]^^65^66^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ; Node assignment;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P3_Replace_Literal]^Node.newString ( "__$" )  )  )  ) , ifBody )  ) ;^125^126^^^^110^140^Node.newString ( "___$" )  )  )  ) , ifBody )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[P7_Replace_Invocation]^n .addChildToFront ( parent )  ;^127^^^^^112^142^n.addChildToBack ( newBody ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
